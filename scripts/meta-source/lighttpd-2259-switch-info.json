{
	"switch_num":	74,
	"case_num":	[3, 3, 1, 3, 4, 3, 1, 1, 3, 3, 185, 22, 63, 198, 11, 22, 63, 198, 11, 22, 63, 198, 11, 22, 63, 198, 13, 1, 411, 14, 2, 411, 14, 2, 411, 3, 411, 198, 2, 412, 28, 2, 412, 70, 411, 35, 2, 411, 3, 2, 410, 101, 411, 35, 2, 411, 3, 2, 410, 411, 159, 1, 413, 4, 412, 3, 411, 185, 2, 411, 61, 410, 1, 2],
	"switch_cluster":	[[2, 6, 7, 9, 14, 18, 22, 26, 27, 30, 33, 37, 38, 41, 43, 46, 49, 51, 54, 57, 60, 61, 67, 68, 70, 72, 73], [1, 5, 12, 16, 20, 24, 29, 32, 35, 40, 45, 48, 53, 56, 63, 65], [0, 3, 4, 8, 10, 11, 13, 15, 17, 19, 21, 23, 25, 28, 31, 34, 36, 39, 42, 44, 47, 50, 52, 55, 58, 59, 62, 64, 66, 69, 71], []],
	"priority":	[{
			"file":	"src/array.c",
			"line":	13,
			"primary_score":	1999817,
			"second_score":	221840
		}, {
			"file":	"src/array.c",
			"line":	15,
			"primary_score":	1999817,
			"second_score":	221839
		}, {
			"file":	"src/array.c",
			"line":	16,
			"primary_score":	1999817,
			"second_score":	221838
		}, {
			"file":	"src/array.c",
			"line":	18,
			"primary_score":	1999817,
			"second_score":	221837
		}, {
			"file":	"src/array.c",
			"line":	20,
			"primary_score":	1999817,
			"second_score":	221836
		}, {
			"file":	"src/array.c",
			"line":	44,
			"primary_score":	1999817,
			"second_score":	104
		}, {
			"file":	"src/array.c",
			"line":	45,
			"primary_score":	1999817,
			"second_score":	103
		}, {
			"file":	"src/array.c",
			"line":	47,
			"primary_score":	1999817,
			"second_score":	102
		}, {
			"file":	"src/array.c",
			"line":	48,
			"primary_score":	1999817,
			"second_score":	101
		}, {
			"file":	"src/array.c",
			"line":	49,
			"primary_score":	1999817,
			"second_score":	19
		}, {
			"file":	"src/array.c",
			"line":	53,
			"primary_score":	1999817,
			"second_score":	7
		}, {
			"file":	"src/array.c",
			"line":	54,
			"primary_score":	1999817,
			"second_score":	5
		}, {
			"file":	"src/array.c",
			"line":	56,
			"primary_score":	1999817,
			"second_score":	3
		}, {
			"file":	"src/array.c",
			"line":	60,
			"primary_score":	1999817,
			"second_score":	18752
		}, {
			"file":	"src/array.c",
			"line":	61,
			"primary_score":	1999817,
			"second_score":	18751
		}, {
			"file":	"src/array.c",
			"line":	63,
			"primary_score":	1999817,
			"second_score":	18750
		}, {
			"file":	"src/array.c",
			"line":	64,
			"primary_score":	1999817,
			"second_score":	18749
		}, {
			"file":	"src/array.c",
			"line":	65,
			"primary_score":	1999817,
			"second_score":	109234
		}, {
			"file":	"src/array.c",
			"line":	69,
			"primary_score":	1999817,
			"second_score":	18748
		}, {
			"file":	"src/array.c",
			"line":	85,
			"primary_score":	1999817,
			"second_score":	109712
		}, {
			"file":	"src/array.c",
			"line":	86,
			"primary_score":	1999817,
			"second_score":	109711
		}, {
			"file":	"src/array.c",
			"line":	88,
			"primary_score":	1999817,
			"second_score":	109710
		}, {
			"file":	"src/array.c",
			"line":	91,
			"primary_score":	1999817,
			"second_score":	109709
		}, {
			"file":	"src/array.c",
			"line":	92,
			"primary_score":	1999817,
			"second_score":	109682
		}, {
			"file":	"src/array.c",
			"line":	94,
			"primary_score":	1999817,
			"second_score":	109681
		}, {
			"file":	"src/array.c",
			"line":	95,
			"primary_score":	1999817,
			"second_score":	189161
		}, {
			"file":	"src/array.c",
			"line":	96,
			"primary_score":	1999817,
			"second_score":	109680
		}, {
			"file":	"src/array.c",
			"line":	97,
			"primary_score":	1999817,
			"second_score":	109679
		}, {
			"file":	"src/array.c",
			"line":	99,
			"primary_score":	1999817,
			"second_score":	109705
		}, {
			"file":	"src/array.c",
			"line":	101,
			"primary_score":	1999817,
			"second_score":	109686
		}, {
			"file":	"src/array.c",
			"line":	103,
			"primary_score":	1999817,
			"second_score":	265670
		}, {
			"file":	"src/array.c",
			"line":	104,
			"primary_score":	1999817,
			"second_score":	265669
		}, {
			"file":	"src/array.c",
			"line":	105,
			"primary_score":	1999817,
			"second_score":	109685
		}, {
			"file":	"src/array.c",
			"line":	106,
			"primary_score":	1999817,
			"second_score":	111622
		}, {
			"file":	"src/array.c",
			"line":	108,
			"primary_score":	1999817,
			"second_score":	109684
		}, {
			"file":	"src/array.c",
			"line":	111,
			"primary_score":	1999817,
			"second_score":	109678
		}, {
			"file":	"src/array.c",
			"line":	114,
			"primary_score":	1999817,
			"second_score":	111618
		}, {
			"file":	"src/array.c",
			"line":	116,
			"primary_score":	1999817,
			"second_score":	109675
		}, {
			"file":	"src/array.c",
			"line":	120,
			"primary_score":	1999817,
			"second_score":	109714
		}, {
			"file":	"src/array.c",
			"line":	122,
			"primary_score":	1999817,
			"second_score":	109713
		}, {
			"file":	"src/array.c",
			"line":	125,
			"primary_score":	1999817,
			"second_score":	265666
		}, {
			"file":	"src/array.c",
			"line":	128,
			"primary_score":	1999817,
			"second_score":	109674
		}, {
			"file":	"src/array.c",
			"line":	132,
			"primary_score":	1999817,
			"second_score":	111793
		}, {
			"file":	"src/array.c",
			"line":	134,
			"primary_score":	1999817,
			"second_score":	111792
		}, {
			"file":	"src/array.c",
			"line":	136,
			"primary_score":	1999817,
			"second_score":	211311
		}, {
			"file":	"src/array.c",
			"line":	138,
			"primary_score":	1999834,
			"second_score":	708519
		}, {
			"file":	"src/array.c",
			"line":	140,
			"primary_score":	1999817,
			"second_score":	111789
		}, {
			"file":	"src/array.c",
			"line":	141,
			"primary_score":	1999833,
			"second_score":	289731
		}, {
			"file":	"src/array.c",
			"line":	143,
			"primary_score":	1999833,
			"second_score":	289730
		}, {
			"file":	"src/array.c",
			"line":	146,
			"primary_score":	1999817,
			"second_score":	111788
		}, {
			"file":	"src/array.c",
			"line":	193,
			"primary_score":	1999817,
			"second_score":	111723
		}, {
			"file":	"src/array.c",
			"line":	194,
			"primary_score":	1999817,
			"second_score":	111722
		}, {
			"file":	"src/array.c",
			"line":	195,
			"primary_score":	1999817,
			"second_score":	111721
		}, {
			"file":	"src/array.c",
			"line":	198,
			"primary_score":	1999817,
			"second_score":	111720
		}, {
			"file":	"src/array.c",
			"line":	199,
			"primary_score":	1999817,
			"second_score":	541203
		}, {
			"file":	"src/array.c",
			"line":	200,
			"primary_score":	1999817,
			"second_score":	541174
		}, {
			"file":	"src/array.c",
			"line":	204,
			"primary_score":	1999817,
			"second_score":	111719
		}, {
			"file":	"src/array.c",
			"line":	206,
			"primary_score":	1999829,
			"second_score":	345850
		}, {
			"file":	"src/array.c",
			"line":	207,
			"primary_score":	1999829,
			"second_score":	345849
		}, {
			"file":	"src/array.c",
			"line":	211,
			"primary_score":	1999829,
			"second_score":	345813
		}, {
			"file":	"src/array.c",
			"line":	216,
			"primary_score":	1999817,
			"second_score":	111616
		}, {
			"file":	"src/array.c",
			"line":	221,
			"primary_score":	1999817,
			"second_score":	111615
		}, {
			"file":	"src/array.c",
			"line":	222,
			"primary_score":	1999817,
			"second_score":	211226
		}, {
			"file":	"src/array.c",
			"line":	223,
			"primary_score":	1999817,
			"second_score":	211225
		}, {
			"file":	"src/array.c",
			"line":	224,
			"primary_score":	1999817,
			"second_score":	211224
		}, {
			"file":	"src/array.c",
			"line":	225,
			"primary_score":	1999817,
			"second_score":	211223
		}, {
			"file":	"src/array.c",
			"line":	226,
			"primary_score":	1999817,
			"second_score":	211222
		}, {
			"file":	"src/array.c",
			"line":	227,
			"primary_score":	1999817,
			"second_score":	211221
		}, {
			"file":	"src/array.c",
			"line":	228,
			"primary_score":	1999817,
			"second_score":	111614
		}, {
			"file":	"src/array.c",
			"line":	229,
			"primary_score":	1999834,
			"second_score":	326111
		}, {
			"file":	"src/array.c",
			"line":	230,
			"primary_score":	1999834,
			"second_score":	326110
		}, {
			"file":	"src/array.c",
			"line":	231,
			"primary_score":	1999834,
			"second_score":	326109
		}, {
			"file":	"src/array.c",
			"line":	232,
			"primary_score":	1999834,
			"second_score":	326108
		}, {
			"file":	"src/array.c",
			"line":	233,
			"primary_score":	1999834,
			"second_score":	326107
		}, {
			"file":	"src/array.c",
			"line":	234,
			"primary_score":	1999834,
			"second_score":	326106
		}, {
			"file":	"src/array.c",
			"line":	237,
			"primary_score":	1999817,
			"second_score":	111613
		}, {
			"file":	"src/array.c",
			"line":	239,
			"primary_score":	1999817,
			"second_score":	111612
		}, {
			"file":	"src/array.c",
			"line":	241,
			"primary_score":	1999817,
			"second_score":	111611
		}, {
			"file":	"src/array.c",
			"line":	244,
			"primary_score":	1999817,
			"second_score":	121516
		}, {
			"file":	"src/array.c",
			"line":	248,
			"primary_score":	1999817,
			"second_score":	111584
		}, {
			"file":	"src/array.c",
			"line":	249,
			"primary_score":	1999817,
			"second_score":	111583
		}, {
			"file":	"src/array.c",
			"line":	253,
			"primary_score":	1999817,
			"second_score":	111582
		}, {
			"file":	"src/array.c",
			"line":	255,
			"primary_score":	1999817,
			"second_score":	197740
		}, {
			"file":	"src/array.c",
			"line":	257,
			"primary_score":	1999817,
			"second_score":	111580
		}, {
			"file":	"src/buffer.c",
			"line":	20,
			"primary_score":	1999817,
			"second_score":	166
		}, {
			"file":	"src/buffer.c",
			"line":	22,
			"primary_score":	1999817,
			"second_score":	165
		}, {
			"file":	"src/buffer.c",
			"line":	23,
			"primary_score":	1999817,
			"second_score":	164
		}, {
			"file":	"src/buffer.c",
			"line":	25,
			"primary_score":	1999817,
			"second_score":	163
		}, {
			"file":	"src/buffer.c",
			"line":	26,
			"primary_score":	1999817,
			"second_score":	162
		}, {
			"file":	"src/buffer.c",
			"line":	27,
			"primary_score":	1999817,
			"second_score":	161
		}, {
			"file":	"src/buffer.c",
			"line":	29,
			"primary_score":	1999817,
			"second_score":	160
		}, {
			"file":	"src/buffer.c",
			"line":	44,
			"primary_score":	1999817,
			"second_score":	16
		}, {
			"file":	"src/buffer.c",
			"line":	46,
			"primary_score":	1999817,
			"second_score":	15
		}, {
			"file":	"src/buffer.c",
			"line":	47,
			"primary_score":	1999817,
			"second_score":	14
		}, {
			"file":	"src/buffer.c",
			"line":	51,
			"primary_score":	1999817,
			"second_score":	18756
		}, {
			"file":	"src/buffer.c",
			"line":	54,
			"primary_score":	1999817,
			"second_score":	18755
		}, {
			"file":	"src/buffer.c",
			"line":	55,
			"primary_score":	1999817,
			"second_score":	108922
		}, {
			"file":	"src/buffer.c",
			"line":	56,
			"primary_score":	1999817,
			"second_score":	108921
		}, {
			"file":	"src/buffer.c",
			"line":	57,
			"primary_score":	1999817,
			"second_score":	108920
		}, {
			"file":	"src/buffer.c",
			"line":	60,
			"primary_score":	1999817,
			"second_score":	18754
		}, {
			"file":	"src/buffer.c",
			"line":	74,
			"primary_score":	1999817,
			"second_score":	158
		}, {
			"file":	"src/buffer.c",
			"line":	76,
			"primary_score":	1999817,
			"second_score":	157
		}, {
			"file":	"src/buffer.c",
			"line":	78,
			"primary_score":	1999817,
			"second_score":	156
		}, {
			"file":	"src/buffer.c",
			"line":	80,
			"primary_score":	1999817,
			"second_score":	155
		}, {
			"file":	"src/buffer.c",
			"line":	84,
			"primary_score":	1999817,
			"second_score":	154
		}, {
			"file":	"src/buffer.c",
			"line":	86,
			"primary_score":	1999817,
			"second_score":	153
		}, {
			"file":	"src/buffer.c",
			"line":	87,
			"primary_score":	1999817,
			"second_score":	152
		}, {
			"file":	"src/buffer.c",
			"line":	89,
			"primary_score":	1999817,
			"second_score":	151
		}, {
			"file":	"src/buffer.c",
			"line":	90,
			"primary_score":	1999817,
			"second_score":	150
		}, {
			"file":	"src/buffer.c",
			"line":	101,
			"primary_score":	1999817,
			"second_score":	136
		}, {
			"file":	"src/buffer.c",
			"line":	103,
			"primary_score":	1999817,
			"second_score":	135
		}, {
			"file":	"src/buffer.c",
			"line":	104,
			"primary_score":	1999817,
			"second_score":	140296
		}, {
			"file":	"src/buffer.c",
			"line":	107,
			"primary_score":	1999817,
			"second_score":	140295
		}, {
			"file":	"src/buffer.c",
			"line":	109,
			"primary_score":	1999817,
			"second_score":	140294
		}, {
			"file":	"src/buffer.c",
			"line":	110,
			"primary_score":	1999817,
			"second_score":	140293
		}, {
			"file":	"src/buffer.c",
			"line":	111,
			"primary_score":	1999817,
			"second_score":	140292
		}, {
			"file":	"src/buffer.c",
			"line":	112,
			"primary_score":	1999817,
			"second_score":	134
		}, {
			"file":	"src/buffer.c",
			"line":	113,
			"primary_score":	1999817,
			"second_score":	113328
		}, {
			"file":	"src/buffer.c",
			"line":	116,
			"primary_score":	1999817,
			"second_score":	113327
		}, {
			"file":	"src/buffer.c",
			"line":	118,
			"primary_score":	1999817,
			"second_score":	113326
		}, {
			"file":	"src/buffer.c",
			"line":	119,
			"primary_score":	1999817,
			"second_score":	113325
		}, {
			"file":	"src/buffer.c",
			"line":	121,
			"primary_score":	1999817,
			"second_score":	133
		}, {
			"file":	"src/buffer.c",
			"line":	125,
			"primary_score":	1999817,
			"second_score":	110143
		}, {
			"file":	"src/buffer.c",
			"line":	127,
			"primary_score":	1999817,
			"second_score":	110142
		}, {
			"file":	"src/buffer.c",
			"line":	129,
			"primary_score":	1999817,
			"second_score":	110141
		}, {
			"file":	"src/buffer.c",
			"line":	130,
			"primary_score":	1999817,
			"second_score":	110140
		}, {
			"file":	"src/buffer.c",
			"line":	132,
			"primary_score":	1999817,
			"second_score":	110135
		}, {
			"file":	"src/buffer.c",
			"line":	133,
			"primary_score":	1999817,
			"second_score":	110134
		}, {
			"file":	"src/buffer.c",
			"line":	135,
			"primary_score":	1999817,
			"second_score":	110133
		}, {
			"file":	"src/buffer.c",
			"line":	139,
			"primary_score":	1999817,
			"second_score":	18501
		}, {
			"file":	"src/buffer.c",
			"line":	148,
			"primary_score":	1999817,
			"second_score":	18500
		}, {
			"file":	"src/buffer.c",
			"line":	150,
			"primary_score":	1999817,
			"second_score":	18495
		}, {
			"file":	"src/buffer.c",
			"line":	151,
			"primary_score":	1999817,
			"second_score":	18494
		}, {
			"file":	"src/buffer.c",
			"line":	152,
			"primary_score":	1999817,
			"second_score":	18493
		}, {
			"file":	"src/buffer.c",
			"line":	154,
			"primary_score":	1999817,
			"second_score":	18492
		}, {
			"file":	"src/buffer.c",
			"line":	158,
			"primary_score":	1999817,
			"second_score":	18504
		}, {
			"file":	"src/buffer.c",
			"line":	160,
			"primary_score":	1999817,
			"second_score":	18503
		}, {
			"file":	"src/buffer.c",
			"line":	161,
			"primary_score":	1999822,
			"second_score":	540057
		}, {
			"file":	"src/buffer.c",
			"line":	162,
			"primary_score":	1999822,
			"second_score":	540056
		}, {
			"file":	"src/buffer.c",
			"line":	164,
			"primary_score":	1999817,
			"second_score":	18502
		}, {
			"file":	"src/buffer.c",
			"line":	168,
			"primary_score":	1999817,
			"second_score":	140
		}, {
			"file":	"src/buffer.c",
			"line":	170,
			"primary_score":	1999817,
			"second_score":	139
		}, {
			"file":	"src/buffer.c",
			"line":	172,
			"primary_score":	1999817,
			"second_score":	138
		}, {
			"file":	"src/buffer.c",
			"line":	173,
			"primary_score":	1999817,
			"second_score":	137
		}, {
			"file":	"src/buffer.c",
			"line":	174,
			"primary_score":	1999817,
			"second_score":	132
		}, {
			"file":	"src/buffer.c",
			"line":	175,
			"primary_score":	1999817,
			"second_score":	537632
		}, {
			"file":	"src/buffer.c",
			"line":	177,
			"primary_score":	1999817,
			"second_score":	131
		}, {
			"file":	"src/buffer.c",
			"line":	178,
			"primary_score":	1999817,
			"second_score":	130
		}, {
			"file":	"src/buffer.c",
			"line":	180,
			"primary_score":	1999817,
			"second_score":	129
		}, {
			"file":	"src/buffer.c",
			"line":	215,
			"primary_score":	1999817,
			"second_score":	109640
		}, {
			"file":	"src/buffer.c",
			"line":	216,
			"primary_score":	1999829,
			"second_score":	345826
		}, {
			"file":	"src/buffer.c",
			"line":	218,
			"primary_score":	1999817,
			"second_score":	109638
		}, {
			"file":	"src/buffer.c",
			"line":	219,
			"primary_score":	1999817,
			"second_score":	109633
		}, {
			"file":	"src/buffer.c",
			"line":	220,
			"primary_score":	1999829,
			"second_score":	527990
		}, {
			"file":	"src/buffer.c",
			"line":	222,
			"primary_score":	1999817,
			"second_score":	109632
		}, {
			"file":	"src/buffer.c",
			"line":	223,
			"primary_score":	1999817,
			"second_score":	109631
		}, {
			"file":	"src/buffer.c",
			"line":	224,
			"primary_score":	1999817,
			"second_score":	109630
		}, {
			"file":	"src/buffer.c",
			"line":	226,
			"primary_score":	1999817,
			"second_score":	109629
		}, {
			"file":	"src/buffer.c",
			"line":	230,
			"primary_score":	1999817,
			"second_score":	109657
		}, {
			"file":	"src/buffer.c",
			"line":	231,
			"primary_score":	1999817,
			"second_score":	109656
		}, {
			"file":	"src/buffer.c",
			"line":	233,
			"primary_score":	1999817,
			"second_score":	109655
		}, {
			"file":	"src/buffer.c",
			"line":	286,
			"primary_score":	1999817,
			"second_score":	109829
		}, {
			"file":	"src/buffer.c",
			"line":	287,
			"primary_score":	1999817,
			"second_score":	109828
		}, {
			"file":	"src/buffer.c",
			"line":	288,
			"primary_score":	1999817,
			"second_score":	109827
		}, {
			"file":	"src/buffer.c",
			"line":	290,
			"primary_score":	1999817,
			"second_score":	109826
		}, {
			"file":	"src/buffer.c",
			"line":	296,
			"primary_score":	1999817,
			"second_score":	109825
		}, {
			"file":	"src/buffer.c",
			"line":	297,
			"primary_score":	1999817,
			"second_score":	109824
		}, {
			"file":	"src/buffer.c",
			"line":	298,
			"primary_score":	1999817,
			"second_score":	109821
		}, {
			"file":	"src/buffer.c",
			"line":	299,
			"primary_score":	1999817,
			"second_score":	109820
		}, {
			"file":	"src/buffer.c",
			"line":	301,
			"primary_score":	1999817,
			"second_score":	109819
		}, {
			"file":	"src/buffer.c",
			"line":	302,
			"primary_score":	1999817,
			"second_score":	109818
		}, {
			"file":	"src/buffer.c",
			"line":	303,
			"primary_score":	1999817,
			"second_score":	109817
		}, {
			"file":	"src/buffer.c",
			"line":	305,
			"primary_score":	1999817,
			"second_score":	109816
		}, {
			"file":	"src/buffer.c",
			"line":	306,
			"primary_score":	1999817,
			"second_score":	109815
		}, {
			"file":	"src/buffer.c",
			"line":	307,
			"primary_score":	1999817,
			"second_score":	109814
		}, {
			"file":	"src/buffer.c",
			"line":	308,
			"primary_score":	1999817,
			"second_score":	109813
		}, {
			"file":	"src/buffer.c",
			"line":	310,
			"primary_score":	1999817,
			"second_score":	109812
		}, {
			"file":	"src/buffer.c",
			"line":	311,
			"primary_score":	1999817,
			"second_score":	109811
		}, {
			"file":	"src/buffer.c",
			"line":	314,
			"primary_score":	1999817,
			"second_score":	109810
		}, {
			"file":	"src/buffer.c",
			"line":	318,
			"primary_score":	1999817,
			"second_score":	109837
		}, {
			"file":	"src/buffer.c",
			"line":	320,
			"primary_score":	1999817,
			"second_score":	109836
		}, {
			"file":	"src/buffer.c",
			"line":	321,
			"primary_score":	1999817,
			"second_score":	109831
		}, {
			"file":	"src/buffer.c",
			"line":	322,
			"primary_score":	1999817,
			"second_score":	112166
		}, {
			"file":	"src/buffer.c",
			"line":	324,
			"primary_score":	1999817,
			"second_score":	109830
		}, {
			"file":	"src/buffer.c",
			"line":	325,
			"primary_score":	1999817,
			"second_score":	109809
		}, {
			"file":	"src/buffer.c",
			"line":	329,
			"primary_score":	1999817,
			"second_score":	112176
		}, {
			"file":	"src/buffer.c",
			"line":	331,
			"primary_score":	1999817,
			"second_score":	112175
		}, {
			"file":	"src/buffer.c",
			"line":	332,
			"primary_score":	1999817,
			"second_score":	112174
		}, {
			"file":	"src/buffer.c",
			"line":	393,
			"primary_score":	1999992,
			"second_score":	116754
		}, {
			"file":	"src/buffer.c",
			"line":	394,
			"primary_score":	1999992,
			"second_score":	116753
		}, {
			"file":	"src/buffer.c",
			"line":	395,
			"primary_score":	1999994,
			"second_score":	116764
		}, {
			"file":	"src/buffer.c",
			"line":	396,
			"primary_score":	1999994,
			"second_score":	116763
		}, {
			"file":	"src/buffer.c",
			"line":	398,
			"primary_score":	1999992,
			"second_score":	116752
		}, {
			"file":	"src/buffer.c",
			"line":	401,
			"primary_score":	1999992,
			"second_score":	116751
		}, {
			"file":	"src/buffer.c",
			"line":	455,
			"primary_score":	1999821,
			"second_score":	739955
		}, {
			"file":	"src/buffer.c",
			"line":	568,
			"primary_score":	1999817,
			"second_score":	115089
		}, {
			"file":	"src/buffer.c",
			"line":	570,
			"primary_score":	1999817,
			"second_score":	115081
		}, {
			"file":	"src/buffer.c",
			"line":	572,
			"primary_score":	1999817,
			"second_score":	115064
		}, {
			"file":	"src/buffer.c",
			"line":	576,
			"primary_score":	1999817,
			"second_score":	111223
		}, {
			"file":	"src/buffer.c",
			"line":	578,
			"primary_score":	1999817,
			"second_score":	111222
		}, {
			"file":	"src/buffer.c",
			"line":	589,
			"primary_score":	1999817,
			"second_score":	110257
		}, {
			"file":	"src/buffer.c",
			"line":	590,
			"primary_score":	1999817,
			"second_score":	110479
		}, {
			"file":	"src/buffer.c",
			"line":	592,
			"primary_score":	1999817,
			"second_score":	110478
		}, {
			"file":	"src/buffer.c",
			"line":	596,
			"primary_score":	1999817,
			"second_score":	110261
		}, {
			"file":	"src/buffer.c",
			"line":	598,
			"primary_score":	1999817,
			"second_score":	110260
		}, {
			"file":	"src/buffer.c",
			"line":	599,
			"primary_score":	1999817,
			"second_score":	110259
		}, {
			"file":	"src/buffer.c",
			"line":	601,
			"primary_score":	1999817,
			"second_score":	110258
		}, {
			"file":	"src/buffer.c",
			"line":	610,
			"primary_score":	1999817,
			"second_score":	109704
		}, {
			"file":	"src/buffer.c",
			"line":	611,
			"primary_score":	1999817,
			"second_score":	109703
		}, {
			"file":	"src/buffer.c",
			"line":	612,
			"primary_score":	1999817,
			"second_score":	109702
		}, {
			"file":	"src/buffer.c",
			"line":	614,
			"primary_score":	1999817,
			"second_score":	109701
		}, {
			"file":	"src/buffer.c",
			"line":	615,
			"primary_score":	1999817,
			"second_score":	109700
		}, {
			"file":	"src/buffer.c",
			"line":	618,
			"primary_score":	1999817,
			"second_score":	109699
		}, {
			"file":	"src/buffer.c",
			"line":	621,
			"primary_score":	1999817,
			"second_score":	109698
		}, {
			"file":	"src/buffer.c",
			"line":	623,
			"primary_score":	1999817,
			"second_score":	109697
		}, {
			"file":	"src/buffer.c",
			"line":	624,
			"primary_score":	1999817,
			"second_score":	111602
		}, {
			"file":	"src/buffer.c",
			"line":	625,
			"primary_score":	1999817,
			"second_score":	111978
		}, {
			"file":	"src/buffer.c",
			"line":	631,
			"primary_score":	1999817,
			"second_score":	109696
		}, {
			"file":	"src/buffer.c",
			"line":	632,
			"primary_score":	1999817,
			"second_score":	109695
		}, {
			"file":	"src/buffer.c",
			"line":	634,
			"primary_score":	1999817,
			"second_score":	109694
		}, {
			"file":	"src/buffer.c",
			"line":	636,
			"primary_score":	1999817,
			"second_score":	109693
		}, {
			"file":	"src/buffer.c",
			"line":	637,
			"primary_score":	1999817,
			"second_score":	109692
		}, {
			"file":	"src/buffer.c",
			"line":	639,
			"primary_score":	1999817,
			"second_score":	109691
		}, {
			"file":	"src/buffer.c",
			"line":	640,
			"primary_score":	1999817,
			"second_score":	109690
		}, {
			"file":	"src/buffer.c",
			"line":	642,
			"primary_score":	1999817,
			"second_score":	109689
		}, {
			"file":	"src/buffer.c",
			"line":	644,
			"primary_score":	1999817,
			"second_score":	109688
		}, {
			"file":	"src/buffer.c",
			"line":	649,
			"primary_score":	1999817,
			"second_score":	128158
		}, {
			"file":	"src/buffer.c",
			"line":	908,
			"primary_score":	1999852,
			"second_score":	123477
		}, {
			"file":	"src/buffer.c",
			"line":	909,
			"primary_score":	1999852,
			"second_score":	123476
		}, {
			"file":	"src/buffer.c",
			"line":	910,
			"primary_score":	1999852,
			"second_score":	123475
		}, {
			"file":	"src/buffer.c",
			"line":	912,
			"primary_score":	1999852,
			"second_score":	123474
		}, {
			"file":	"src/buffer.c",
			"line":	914,
			"primary_score":	1999852,
			"second_score":	123473
		}, {
			"file":	"src/buffer.c",
			"line":	915,
			"primary_score":	1999852,
			"second_score":	123472
		}, {
			"file":	"src/buffer.c",
			"line":	917,
			"primary_score":	1999852,
			"second_score":	123471
		}, {
			"file":	"src/buffer.c",
			"line":	918,
			"primary_score":	1999852,
			"second_score":	123200
		}, {
			"file":	"src/buffer.c",
			"line":	920,
			"primary_score":	1999852,
			"second_score":	123199
		}, {
			"file":	"src/buffer.c",
			"line":	937,
			"primary_score":	1999852,
			"second_score":	123198
		}, {
			"file":	"src/buffer.c",
			"line":	940,
			"primary_score":	1999852,
			"second_score":	123197
		}, {
			"file":	"src/buffer.c",
			"line":	941,
			"primary_score":	1999852,
			"second_score":	123196
		}, {
			"file":	"src/buffer.c",
			"line":	944,
			"primary_score":	1999852,
			"second_score":	123195
		}, {
			"file":	"src/buffer.c",
			"line":	945,
			"primary_score":	1999852,
			"second_score":	123194
		}, {
			"file":	"src/buffer.c",
			"line":	947,
			"primary_score":	1999852,
			"second_score":	123193
		}, {
			"file":	"src/buffer.c",
			"line":	951,
			"primary_score":	1999852,
			"second_score":	123478
		}, {
			"file":	"src/buffer.c",
			"line":	971,
			"primary_score":	1999852,
			"second_score":	123191
		}, {
			"file":	"src/buffer.c",
			"line":	972,
			"primary_score":	1999852,
			"second_score":	123190
		}, {
			"file":	"src/buffer.c",
			"line":	973,
			"primary_score":	1999852,
			"second_score":	123189
		}, {
			"file":	"src/buffer.c",
			"line":	974,
			"primary_score":	1999852,
			"second_score":	123188
		}, {
			"file":	"src/buffer.c",
			"line":	976,
			"primary_score":	1999852,
			"second_score":	123187
		}, {
			"file":	"src/buffer.c",
			"line":	979,
			"primary_score":	1999852,
			"second_score":	123186
		}, {
			"file":	"src/buffer.c",
			"line":	982,
			"primary_score":	1999852,
			"second_score":	123185
		}, {
			"file":	"src/buffer.c",
			"line":	984,
			"primary_score":	1999852,
			"second_score":	123180
		}, {
			"file":	"src/buffer.c",
			"line":	985,
			"primary_score":	1999852,
			"second_score":	123179
		}, {
			"file":	"src/buffer.c",
			"line":	986,
			"primary_score":	1999852,
			"second_score":	123178
		}, {
			"file":	"src/buffer.c",
			"line":	987,
			"primary_score":	1999852,
			"second_score":	123177
		}, {
			"file":	"src/buffer.c",
			"line":	988,
			"primary_score":	1999852,
			"second_score":	123176
		}, {
			"file":	"src/buffer.c",
			"line":	992,
			"primary_score":	1999852,
			"second_score":	123175
		}, {
			"file":	"src/buffer.c",
			"line":	993,
			"primary_score":	1999852,
			"second_score":	123174
		}, {
			"file":	"src/buffer.c",
			"line":	994,
			"primary_score":	1999852,
			"second_score":	123173
		}, {
			"file":	"src/buffer.c",
			"line":	995,
			"primary_score":	1999852,
			"second_score":	123172
		}, {
			"file":	"src/buffer.c",
			"line":	999,
			"primary_score":	1999852,
			"second_score":	123171
		}, {
			"file":	"src/buffer.c",
			"line":	1001,
			"primary_score":	1999852,
			"second_score":	123170
		}, {
			"file":	"src/buffer.c",
			"line":	1006,
			"primary_score":	1999852,
			"second_score":	123169
		}, {
			"file":	"src/buffer.c",
			"line":	1007,
			"primary_score":	1999852,
			"second_score":	122724
		}, {
			"file":	"src/buffer.c",
			"line":	1008,
			"primary_score":	1999852,
			"second_score":	122723
		}, {
			"file":	"src/buffer.c",
			"line":	1009,
			"primary_score":	1999852,
			"second_score":	122722
		}, {
			"file":	"src/buffer.c",
			"line":	1020,
			"primary_score":	1999852,
			"second_score":	122721
		}, {
			"file":	"src/buffer.c",
			"line":	1026,
			"primary_score":	1999852,
			"second_score":	122720
		}, {
			"file":	"src/buffer.c",
			"line":	1029,
			"primary_score":	1999852,
			"second_score":	122719
		}, {
			"file":	"src/buffer.c",
			"line":	1030,
			"primary_score":	1999852,
			"second_score":	122718
		}, {
			"file":	"src/buffer.c",
			"line":	1032,
			"primary_score":	1999879,
			"second_score":	122730
		}, {
			"file":	"src/buffer.c",
			"line":	1033,
			"primary_score":	1999879,
			"second_score":	122729
		}, {
			"file":	"src/buffer.c",
			"line":	1034,
			"primary_score":	1999879,
			"second_score":	122728
		}, {
			"file":	"src/buffer.c",
			"line":	1035,
			"primary_score":	1999879,
			"second_score":	122727
		}, {
			"file":	"src/buffer.c",
			"line":	1037,
			"primary_score":	1999879,
			"second_score":	122726
		}, {
			"file":	"src/buffer.c",
			"line":	1038,
			"primary_score":	1999879,
			"second_score":	122725
		}, {
			"file":	"src/buffer.c",
			"line":	1041,
			"primary_score":	1999852,
			"second_score":	122717
		}, {
			"file":	"src/buffer.c",
			"line":	1042,
			"primary_score":	1999852,
			"second_score":	122716
		}, {
			"file":	"src/buffer.c",
			"line":	1044,
			"primary_score":	1999852,
			"second_score":	122715
		}, {
			"file":	"src/buffer.c",
			"line":	1048,
			"primary_score":	1999823,
			"second_score":	127979
		}, {
			"file":	"src/buffer.c",
			"line":	1059,
			"primary_score":	1999901,
			"second_score":	127978
		}, {
			"file":	"src/buffer.c",
			"line":	1060,
			"primary_score":	1999901,
			"second_score":	127977
		}, {
			"file":	"src/buffer.c",
			"line":	1064,
			"primary_score":	1999909,
			"second_score":	127980
		}, {
			"file":	"src/buffer.c",
			"line":	1087,
			"primary_score":	1999834,
			"second_score":	712143
		}, {
			"file":	"src/buffer.c",
			"line":	1093,
			"primary_score":	1999817,
			"second_score":	127689
		}, {
			"file":	"src/buffer.c",
			"line":	1095,
			"primary_score":	1999817,
			"second_score":	127688
		}, {
			"file":	"src/buffer.c",
			"line":	1097,
			"primary_score":	1999817,
			"second_score":	127687
		}, {
			"file":	"src/buffer.c",
			"line":	1098,
			"primary_score":	1999817,
			"second_score":	127672
		}, {
			"file":	"src/buffer.c",
			"line":	1103,
			"primary_score":	1999817,
			"second_score":	127671
		}, {
			"file":	"src/buffer.c",
			"line":	1122,
			"primary_score":	1999817,
			"second_score":	130141
		}, {
			"file":	"src/buffer.c",
			"line":	1124,
			"primary_score":	1999817,
			"second_score":	130140
		}, {
			"file":	"src/buffer.c",
			"line":	1126,
			"primary_score":	1999817,
			"second_score":	130139
		}, {
			"file":	"src/buffer.c",
			"line":	1130,
			"primary_score":	1999817,
			"second_score":	128324
		}, {
			"file":	"src/buffer.c",
			"line":	1132,
			"primary_score":	1999817,
			"second_score":	128323
		}, {
			"file":	"src/buffer.c",
			"line":	1134,
			"primary_score":	1999817,
			"second_score":	128300
		}, {
			"file":	"src/buffer.c",
			"line":	1136,
			"primary_score":	1999817,
			"second_score":	128299
		}, {
			"file":	"src/buffer.c",
			"line":	1140,
			"primary_score":	1999817,
			"second_score":	128452
		}, {
			"file":	"src/buffer.c",
			"line":	1142,
			"primary_score":	1999817,
			"second_score":	128451
		}, {
			"file":	"src/buffer.c",
			"line":	1143,
			"primary_score":	1999817,
			"second_score":	128744
		}, {
			"file":	"src/buffer.c",
			"line":	1146,
			"primary_score":	1999818,
			"second_score":	128450
		}, {
			"file":	"src/buffer.c",
			"line":	1148,
			"primary_score":	1999818,
			"second_score":	128449
		}, {
			"file":	"src/buffer.c",
			"line":	1150,
			"primary_score":	1999818,
			"second_score":	128445
		}, {
			"file":	"src/buffer.c",
			"line":	1154,
			"primary_score":	1999818,
			"second_score":	128328
		}, {
			"file":	"src/buffer.c",
			"line":	1156,
			"primary_score":	1999817,
			"second_score":	128326
		}, {
			"file":	"src/chunk.c",
			"line":	40,
			"primary_score":	1999817,
			"second_score":	112393
		}, {
			"file":	"src/chunk.c",
			"line":	42,
			"primary_score":	1999817,
			"second_score":	112392
		}, {
			"file":	"src/chunk.c",
			"line":	44,
			"primary_score":	1999817,
			"second_score":	112391
		}, {
			"file":	"src/chunk.c",
			"line":	45,
			"primary_score":	1999817,
			"second_score":	112390
		}, {
			"file":	"src/chunk.c",
			"line":	47,
			"primary_score":	1999817,
			"second_score":	112389
		}, {
			"file":	"src/chunk.c",
			"line":	51,
			"primary_score":	1999817,
			"second_score":	110868
		}, {
			"file":	"src/chunk.c",
			"line":	53,
			"primary_score":	1999817,
			"second_score":	110867
		}, {
			"file":	"src/chunk.c",
			"line":	55,
			"primary_score":	1999817,
			"second_score":	110866
		}, {
			"file":	"src/chunk.c",
			"line":	56,
			"primary_score":	1999817,
			"second_score":	110858
		}, {
			"file":	"src/chunk.c",
			"line":	57,
			"primary_score":	1999817,
			"second_score":	110850
		}, {
			"file":	"src/chunk.c",
			"line":	58,
			"primary_score":	1999817,
			"second_score":	110849
		}, {
			"file":	"src/chunk.c",
			"line":	59,
			"primary_score":	1999817,
			"second_score":	110848
		}, {
			"file":	"src/chunk.c",
			"line":	60,
			"primary_score":	1999817,
			"second_score":	110847
		}, {
			"file":	"src/chunk.c",
			"line":	62,
			"primary_score":	1999817,
			"second_score":	110846
		}, {
			"file":	"src/chunk.c",
			"line":	64,
			"primary_score":	1999817,
			"second_score":	110845
		}, {
			"file":	"src/chunk.c",
			"line":	68,
			"primary_score":	1999817,
			"second_score":	108926
		}, {
			"file":	"src/chunk.c",
			"line":	70,
			"primary_score":	1999817,
			"second_score":	108925
		}, {
			"file":	"src/chunk.c",
			"line":	72,
			"primary_score":	1999817,
			"second_score":	108918
		}, {
			"file":	"src/chunk.c",
			"line":	75,
			"primary_score":	1999817,
			"second_score":	108917
		}, {
			"file":	"src/chunk.c",
			"line":	77,
			"primary_score":	1999817,
			"second_score":	108916
		}, {
			"file":	"src/chunk.c",
			"line":	79,
			"primary_score":	1999817,
			"second_score":	108912
		}, {
			"file":	"src/chunk.c",
			"line":	84,
			"primary_score":	1999817,
			"second_score":	108911
		}, {
			"file":	"src/chunk.c",
			"line":	89,
			"primary_score":	1999817,
			"second_score":	108910
		}, {
			"file":	"src/chunk.c",
			"line":	94,
			"primary_score":	1999817,
			"second_score":	108909
		}, {
			"file":	"src/chunk.c",
			"line":	95,
			"primary_score":	1999817,
			"second_score":	108908
		}, {
			"file":	"src/chunk.c",
			"line":	97,
			"primary_score":	1999817,
			"second_score":	108907
		}, {
			"file":	"src/chunk.c",
			"line":	98,
			"primary_score":	1999817,
			"second_score":	108906
		}, {
			"file":	"src/chunk.c",
			"line":	100,
			"primary_score":	1999817,
			"second_score":	108905
		}, {
			"file":	"src/chunk.c",
			"line":	101,
			"primary_score":	1999817,
			"second_score":	108904
		}, {
			"file":	"src/chunk.c",
			"line":	103,
			"primary_score":	1999817,
			"second_score":	108903
		}, {
			"file":	"src/chunk.c",
			"line":	104,
			"primary_score":	1999817,
			"second_score":	108902
		}, {
			"file":	"src/chunk.c",
			"line":	106,
			"primary_score":	1999817,
			"second_score":	108901
		}, {
			"file":	"src/chunk.c",
			"line":	107,
			"primary_score":	1999817,
			"second_score":	108900
		}, {
			"file":	"src/chunk.c",
			"line":	111,
			"primary_score":	1999817,
			"second_score":	130395
		}, {
			"file":	"src/chunk.c",
			"line":	114,
			"primary_score":	1999817,
			"second_score":	130394
		}, {
			"file":	"src/chunk.c",
			"line":	116,
			"primary_score":	1999817,
			"second_score":	130366
		}, {
			"file":	"src/chunk.c",
			"line":	117,
			"primary_score":	1999817,
			"second_score":	130362
		}, {
			"file":	"src/chunk.c",
			"line":	119,
			"primary_score":	1999817,
			"second_score":	130358
		}, {
			"file":	"src/chunk.c",
			"line":	129,
			"primary_score":	1999817,
			"second_score":	108939
		}, {
			"file":	"src/chunk.c",
			"line":	133,
			"primary_score":	1999817,
			"second_score":	108938
		}, {
			"file":	"src/chunk.c",
			"line":	150,
			"primary_score":	1999817,
			"second_score":	108933
		}, {
			"file":	"src/chunk.c",
			"line":	173,
			"primary_score":	1999817,
			"second_score":	110871
		}, {
			"file":	"src/chunk.c",
			"line":	176,
			"primary_score":	1999817,
			"second_score":	110870
		}, {
			"file":	"src/chunk.c",
			"line":	177,
			"primary_score":	1999817,
			"second_score":	110869
		}, {
			"file":	"src/chunk.c",
			"line":	187,
			"primary_score":	1999817,
			"second_score":	110844
		}, {
			"file":	"src/chunk.c",
			"line":	199,
			"primary_score":	1999817,
			"second_score":	108928
		}, {
			"file":	"src/chunk.c",
			"line":	202,
			"primary_score":	1999817,
			"second_score":	108927
		}, {
			"file":	"src/chunk.c",
			"line":	205,
			"primary_score":	1999817,
			"second_score":	108899
		}, {
			"file":	"src/chunk.c",
			"line":	206,
			"primary_score":	1999817,
			"second_score":	108898
		}, {
			"file":	"src/chunk.c",
			"line":	207,
			"primary_score":	1999817,
			"second_score":	108897
		}, {
			"file":	"src/chunk.c",
			"line":	213,
			"primary_score":	1999817,
			"second_score":	18438
		}, {
			"file":	"src/chunk.c",
			"line":	215,
			"primary_score":	1999817,
			"second_score":	18437
		}, {
			"file":	"src/chunk.c",
			"line":	217,
			"primary_score":	1999817,
			"second_score":	18436
		}, {
			"file":	"src/chunk.c",
			"line":	223,
			"primary_score":	1999817,
			"second_score":	18435
		}, {
			"file":	"src/chunk.c",
			"line":	227,
			"primary_score":	1999817,
			"second_score":	112291
		}, {
			"file":	"src/chunk.c",
			"line":	228,
			"primary_score":	1999817,
			"second_score":	112290
		}, {
			"file":	"src/chunk.c",
			"line":	230,
			"primary_score":	1999817,
			"second_score":	112289
		}, {
			"file":	"src/chunk.c",
			"line":	231,
			"primary_score":	1999817,
			"second_score":	112288
		}, {
			"file":	"src/chunk.c",
			"line":	234,
			"primary_score":	1999817,
			"second_score":	112287
		}, {
			"file":	"src/chunk.c",
			"line":	238,
			"primary_score":	1999817,
			"second_score":	110836
		}, {
			"file":	"src/chunk.c",
			"line":	239,
			"primary_score":	1999863,
			"second_score":	110835
		}, {
			"file":	"src/chunk.c",
			"line":	241,
			"primary_score":	1999817,
			"second_score":	110834
		}, {
			"file":	"src/chunk.c",
			"line":	243,
			"primary_score":	1999817,
			"second_score":	110833
		}, {
			"file":	"src/chunk.c",
			"line":	244,
			"primary_score":	1999817,
			"second_score":	113600
		}, {
			"file":	"src/chunk.c",
			"line":	247,
			"primary_score":	1999817,
			"second_score":	110832
		}, {
			"file":	"src/chunk.c",
			"line":	254,
			"primary_score":	1999817,
			"second_score":	18768
		}, {
			"file":	"src/chunk.c",
			"line":	257,
			"primary_score":	1999817,
			"second_score":	18767
		}, {
			"file":	"src/chunk.c",
			"line":	258,
			"primary_score":	1999817,
			"second_score":	108940
		}, {
			"file":	"src/chunk.c",
			"line":	261,
			"primary_score":	1999817,
			"second_score":	18766
		}, {
			"file":	"src/chunk.c",
			"line":	263,
			"primary_score":	1999817,
			"second_score":	18762
		}, {
			"file":	"src/chunk.c",
			"line":	264,
			"primary_score":	1999817,
			"second_score":	18761
		}, {
			"file":	"src/chunk.c",
			"line":	265,
			"primary_score":	1999817,
			"second_score":	18760
		}, {
			"file":	"src/chunk.c",
			"line":	313,
			"primary_score":	1999863,
			"second_score":	110881
		}, {
			"file":	"src/chunk.c",
			"line":	314,
			"primary_score":	1999863,
			"second_score":	110880
		}, {
			"file":	"src/chunk.c",
			"line":	316,
			"primary_score":	1999863,
			"second_score":	110879
		}, {
			"file":	"src/chunk.c",
			"line":	317,
			"primary_score":	1999863,
			"second_score":	110878
		}, {
			"file":	"src/chunk.c",
			"line":	319,
			"primary_score":	1999863,
			"second_score":	110876
		}, {
			"file":	"src/chunk.c",
			"line":	322,
			"primary_score":	1999911,
			"second_score":	110875
		}, {
			"file":	"src/chunk.c",
			"line":	323,
			"primary_score":	1999911,
			"second_score":	110874
		}, {
			"file":	"src/chunk.c",
			"line":	324,
			"primary_score":	1999911,
			"second_score":	110830
		}, {
			"file":	"src/chunk.c",
			"line":	329,
			"primary_score":	1999911,
			"second_score":	110827
		}, {
			"file":	"src/chunk.c",
			"line":	345,
			"primary_score":	1999863,
			"second_score":	110826
		}, {
			"file":	"src/chunk.c",
			"line":	353,
			"primary_score":	1999817,
			"second_score":	110886
		}, {
			"file":	"src/chunk.c",
			"line":	354,
			"primary_score":	1999817,
			"second_score":	110885
		}, {
			"file":	"src/chunk.c",
			"line":	356,
			"primary_score":	1999817,
			"second_score":	110884
		}, {
			"file":	"src/chunk.c",
			"line":	358,
			"primary_score":	1999817,
			"second_score":	110883
		}, {
			"file":	"src/chunk.c",
			"line":	359,
			"primary_score":	1999863,
			"second_score":	110882
		}, {
			"file":	"src/chunk.c",
			"line":	362,
			"primary_score":	1999817,
			"second_score":	110825
		}, {
			"file":	"src/chunk.c",
			"line":	527,
			"primary_score":	1999817,
			"second_score":	112328
		}, {
			"file":	"src/chunk.c",
			"line":	529,
			"primary_score":	1999817,
			"second_score":	112327
		}, {
			"file":	"src/chunk.c",
			"line":	531,
			"primary_score":	1999817,
			"second_score":	112298
		}, {
			"file":	"src/chunk.c",
			"line":	532,
			"primary_score":	1999817,
			"second_score":	112297
		}, {
			"file":	"src/chunk.c",
			"line":	533,
			"primary_score":	1999817,
			"second_score":	112296
		}, {
			"file":	"src/chunk.c",
			"line":	535,
			"primary_score":	1999817,
			"second_score":	112292
		}, {
			"file":	"src/chunk.c",
			"line":	537,
			"primary_score":	1999817,
			"second_score":	112286
		}, {
			"file":	"src/chunk.c",
			"line":	541,
			"primary_score":	1999817,
			"second_score":	110873
		}, {
			"file":	"src/chunk.c",
			"line":	543,
			"primary_score":	1999817,
			"second_score":	110872
		}, {
			"file":	"src/chunk.c",
			"line":	545,
			"primary_score":	1999817,
			"second_score":	110843
		}, {
			"file":	"src/chunk.c",
			"line":	546,
			"primary_score":	1999817,
			"second_score":	110842
		}, {
			"file":	"src/chunk.c",
			"line":	547,
			"primary_score":	1999817,
			"second_score":	110841
		}, {
			"file":	"src/chunk.c",
			"line":	549,
			"primary_score":	1999817,
			"second_score":	110837
		}, {
			"file":	"src/chunk.c",
			"line":	551,
			"primary_score":	1999817,
			"second_score":	110831
		}, {
			"file":	"src/chunk.c",
			"line":	555,
			"primary_score":	1999817,
			"second_score":	221884
		}, {
			"file":	"src/chunk.c",
			"line":	557,
			"primary_score":	1999817,
			"second_score":	221883
		}, {
			"file":	"src/chunk.c",
			"line":	559,
			"primary_score":	1999817,
			"second_score":	221882
		}, {
			"file":	"src/chunk.c",
			"line":	608,
			"primary_score":	1999817,
			"second_score":	110775
		}, {
			"file":	"src/chunk.c",
			"line":	609,
			"primary_score":	1999817,
			"second_score":	110774
		}, {
			"file":	"src/chunk.c",
			"line":	611,
			"primary_score":	1999817,
			"second_score":	110773
		}, {
			"file":	"src/chunk.c",
			"line":	612,
			"primary_score":	1999875,
			"second_score":	112373
		}, {
			"file":	"src/chunk.c",
			"line":	615,
			"primary_score":	1999921,
			"second_score":	112372
		}, {
			"file":	"src/chunk.c",
			"line":	624,
			"primary_score":	1999817,
			"second_score":	110772
		}, {
			"file":	"src/chunk.c",
			"line":	650,
			"primary_score":	1999817,
			"second_score":	18765
		}, {
			"file":	"src/chunk.c",
			"line":	652,
			"primary_score":	1999817,
			"second_score":	18764
		}, {
			"file":	"src/chunk.c",
			"line":	653,
			"primary_score":	1999817,
			"second_score":	128289
		}, {
			"file":	"src/chunk.c",
			"line":	656,
			"primary_score":	1999817,
			"second_score":	108932
		}, {
			"file":	"src/chunk.c",
			"line":	657,
			"primary_score":	1999817,
			"second_score":	108931
		}, {
			"file":	"src/chunk.c",
			"line":	659,
			"primary_score":	1999817,
			"second_score":	108929
		}, {
			"file":	"src/chunk.c",
			"line":	663,
			"primary_score":	1999817,
			"second_score":	18763
		}, {
			"file":	"src/chunk.c",
			"line":	681,
			"primary_score":	1999817,
			"second_score":	130403
		}, {
			"file":	"src/chunk.c",
			"line":	682,
			"primary_score":	1999817,
			"second_score":	130402
		}, {
			"file":	"src/chunk.c",
			"line":	683,
			"primary_score":	1999817,
			"second_score":	130401
		}, {
			"file":	"src/chunk.c",
			"line":	685,
			"primary_score":	1999817,
			"second_score":	130400
		}, {
			"file":	"src/chunk.c",
			"line":	686,
			"primary_score":	1999817,
			"second_score":	130399
		}, {
			"file":	"src/chunk.c",
			"line":	688,
			"primary_score":	1999817,
			"second_score":	130398
		}, {
			"file":	"src/chunk.c",
			"line":	689,
			"primary_score":	1999817,
			"second_score":	130397
		}, {
			"file":	"src/chunk.c",
			"line":	690,
			"primary_score":	1999817,
			"second_score":	130396
		}, {
			"file":	"src/chunk.c",
			"line":	691,
			"primary_score":	1999817,
			"second_score":	130357
		}, {
			"file":	"src/chunk.c",
			"line":	693,
			"primary_score":	1999817,
			"second_score":	130356
		}, {
			"file":	"src/configfile-glue.c",
			"line":	27,
			"primary_score":	1999817,
			"second_score":	279720
		}, {
			"file":	"src/configfile-glue.c",
			"line":	28,
			"primary_score":	1999817,
			"second_score":	279719
		}, {
			"file":	"src/configfile-glue.c",
			"line":	30,
			"primary_score":	1999817,
			"second_score":	279718
		}, {
			"file":	"src/configfile-glue.c",
			"line":	32,
			"primary_score":	1999817,
			"second_score":	279681
		}, {
			"file":	"src/configfile-glue.c",
			"line":	35,
			"primary_score":	1999817,
			"second_score":	279646
		}, {
			"file":	"src/configfile-glue.c",
			"line":	38,
			"primary_score":	1999817,
			"second_score":	312696
		}, {
			"file":	"src/configfile-glue.c",
			"line":	41,
			"primary_score":	1999817,
			"second_score":	337007
		}, {
			"file":	"src/configfile-glue.c",
			"line":	42,
			"primary_score":	1999817,
			"second_score":	337006
		}, {
			"file":	"src/configfile-glue.c",
			"line":	44,
			"primary_score":	1999817,
			"second_score":	337005
		}, {
			"file":	"src/configfile-glue.c",
			"line":	45,
			"primary_score":	1999817,
			"second_score":	337004
		}, {
			"file":	"src/configfile-glue.c",
			"line":	46,
			"primary_score":	1999817,
			"second_score":	337003
		}, {
			"file":	"src/configfile-glue.c",
			"line":	48,
			"primary_score":	1999817,
			"second_score":	337002
		}, {
			"file":	"src/configfile-glue.c",
			"line":	49,
			"primary_score":	1999817,
			"second_score":	336997
		}, {
			"file":	"src/configfile-glue.c",
			"line":	52,
			"primary_score":	1999817,
			"second_score":	336970
		}, {
			"file":	"src/configfile-glue.c",
			"line":	53,
			"primary_score":	1999817,
			"second_score":	336951
		}, {
			"file":	"src/configfile-glue.c",
			"line":	57,
			"primary_score":	1999817,
			"second_score":	336950
		}, {
			"file":	"src/configfile-glue.c",
			"line":	60,
			"primary_score":	1999817,
			"second_score":	336931
		}, {
			"file":	"src/configfile-glue.c",
			"line":	74,
			"primary_score":	1999817,
			"second_score":	336897
		}, {
			"file":	"src/configfile-glue.c",
			"line":	77,
			"primary_score":	1999817,
			"second_score":	325581
		}, {
			"file":	"src/configfile-glue.c",
			"line":	79,
			"primary_score":	1999817,
			"second_score":	325580
		}, {
			"file":	"src/configfile-glue.c",
			"line":	89,
			"primary_score":	1999817,
			"second_score":	325561
		}, {
			"file":	"src/configfile-glue.c",
			"line":	93,
			"primary_score":	1999817,
			"second_score":	381731
		}, {
			"file":	"src/configfile-glue.c",
			"line":	95,
			"primary_score":	1999817,
			"second_score":	381730
		}, {
			"file":	"src/configfile-glue.c",
			"line":	96,
			"primary_score":	1999817,
			"second_score":	381729
		}, {
			"file":	"src/configfile-glue.c",
			"line":	99,
			"primary_score":	1999834,
			"second_score":	712145
		}, {
			"file":	"src/configfile-glue.c",
			"line":	101,
			"primary_score":	1999834,
			"second_score":	712144
		}, {
			"file":	"src/configfile-glue.c",
			"line":	102,
			"primary_score":	1999834,
			"second_score":	712129
		}, {
			"file":	"src/configfile-glue.c",
			"line":	103,
			"primary_score":	1999834,
			"second_score":	712128
		}, {
			"file":	"src/configfile-glue.c",
			"line":	114,
			"primary_score":	1999817,
			"second_score":	381728
		}, {
			"file":	"src/configfile-glue.c",
			"line":	118,
			"primary_score":	1999834,
			"second_score":	706652
		}, {
			"file":	"src/configfile-glue.c",
			"line":	120,
			"primary_score":	1999834,
			"second_score":	706651
		}, {
			"file":	"src/configfile-glue.c",
			"line":	121,
			"primary_score":	1999834,
			"second_score":	706650
		}, {
			"file":	"src/configfile-glue.c",
			"line":	139,
			"primary_score":	1999834,
			"second_score":	706649
		}, {
			"file":	"src/configfile-glue.c",
			"line":	142,
			"primary_score":	1999817,
			"second_score":	312695
		}, {
			"file":	"src/configfile-glue.c",
			"line":	144,
			"primary_score":	1999817,
			"second_score":	312694
		}, {
			"file":	"src/configfile-glue.c",
			"line":	145,
			"primary_score":	1999817,
			"second_score":	312686
		}, {
			"file":	"src/configfile-glue.c",
			"line":	146,
			"primary_score":	1999830,
			"second_score":	617568
		}, {
			"file":	"src/configfile-glue.c",
			"line":	147,
			"primary_score":	1999830,
			"second_score":	617560
		}, {
			"file":	"src/configfile-glue.c",
			"line":	158,
			"primary_score":	1999817,
			"second_score":	312685
		}, {
			"file":	"src/configfile-glue.c",
			"line":	176,
			"primary_score":	1999817,
			"second_score":	279645
		}, {
			"file":	"src/configfile-glue.c",
			"line":	180,
			"primary_score":	1999817,
			"second_score":	279798
		}, {
			"file":	"src/configfile-glue.c",
			"line":	181,
			"primary_score":	1999817,
			"second_score":	279797
		}, {
			"file":	"src/configfile-glue.c",
			"line":	183,
			"primary_score":	1999817,
			"second_score":	279796
		}, {
			"file":	"src/configfile-glue.c",
			"line":	184,
			"primary_score":	1999817,
			"second_score":	279758
		}, {
			"file":	"src/configfile-glue.c",
			"line":	186,
			"primary_score":	1999817,
			"second_score":	279757
		}, {
			"file":	"src/configfile-glue.c",
			"line":	189,
			"primary_score":	1999817,
			"second_score":	279722
		}, {
			"file":	"src/configfile-glue.c",
			"line":	193,
			"primary_score":	1999817,
			"second_score":	315113
		}, {
			"file":	"src/configfile-glue.c",
			"line":	195,
			"primary_score":	1999817,
			"second_score":	315086
		}, {
			"file":	"src/configfile-glue.c",
			"line":	196,
			"primary_score":	1999817,
			"second_score":	315069
		}, {
			"file":	"src/configfile-glue.c",
			"line":	198,
			"primary_score":	1999817,
			"second_score":	315050
		}, {
			"file":	"src/configfile-glue.c",
			"line":	201,
			"primary_score":	1999817,
			"second_score":	279721
		}, {
			"file":	"src/configfile-glue.c",
			"line":	220,
			"primary_score":	1999817,
			"second_score":	110547
		}, {
			"file":	"src/configfile-glue.c",
			"line":	221,
			"primary_score":	1999817,
			"second_score":	110546
		}, {
			"file":	"src/configfile-glue.c",
			"line":	223,
			"primary_score":	1999817,
			"second_score":	110545
		}, {
			"file":	"src/configfile-glue.c",
			"line":	224,
			"primary_score":	1999829,
			"second_score":	123549
		}, {
			"file":	"src/configfile-glue.c",
			"line":	228,
			"primary_score":	1999829,
			"second_score":	123548
		}, {
			"file":	"src/configfile-glue.c",
			"line":	238,
			"primary_score":	1999817,
			"second_score":	110544
		}, {
			"file":	"src/configfile-glue.c",
			"line":	258,
			"primary_score":	1999817,
			"second_score":	110543
		}, {
			"file":	"src/configfile-glue.c",
			"line":	259,
			"primary_score":	1999834,
			"second_score":	110542
		}, {
			"file":	"src/configfile-glue.c",
			"line":	266,
			"primary_score":	1999834,
			"second_score":	110541
		}, {
			"file":	"src/configfile-glue.c",
			"line":	271,
			"primary_score":	1999851,
			"second_score":	122550
		}, {
			"file":	"src/configfile-glue.c",
			"line":	273,
			"primary_score":	1999851,
			"second_score":	123641
		}, {
			"file":	"src/configfile-glue.c",
			"line":	275,
			"primary_score":	1999851,
			"second_score":	123640
		}, {
			"file":	"src/configfile-glue.c",
			"line":	281,
			"primary_score":	1999917,
			"second_score":	123637
		}, {
			"file":	"src/configfile-glue.c",
			"line":	283,
			"primary_score":	1999917,
			"second_score":	123636
		}, {
			"file":	"src/configfile-glue.c",
			"line":	287,
			"primary_score":	1999917,
			"second_score":	125235
		}, {
			"file":	"src/configfile-glue.c",
			"line":	289,
			"primary_score":	1999917,
			"second_score":	125234
		}, {
			"file":	"src/configfile-glue.c",
			"line":	291,
			"primary_score":	1999921,
			"second_score":	125233
		}, {
			"file":	"src/configfile-glue.c",
			"line":	311,
			"primary_score":	1999851,
			"second_score":	123635
		}, {
			"file":	"src/configfile-glue.c",
			"line":	314,
			"primary_score":	1999868,
			"second_score":	125110
		}, {
			"file":	"src/configfile-glue.c",
			"line":	324,
			"primary_score":	1999868,
			"second_score":	125109
		}, {
			"file":	"src/configfile-glue.c",
			"line":	380,
			"primary_score":	1999868,
			"second_score":	125108
		}, {
			"file":	"src/configfile-glue.c",
			"line":	382,
			"primary_score":	1999868,
			"second_score":	125107
		}, {
			"file":	"src/configfile-glue.c",
			"line":	390,
			"primary_score":	1999867,
			"second_score":	122549
		}, {
			"file":	"src/configfile-glue.c",
			"line":	401,
			"primary_score":	1999868,
			"second_score":	124943
		}, {
			"file":	"src/configfile-glue.c",
			"line":	403,
			"primary_score":	1999868,
			"second_score":	124942
		}, {
			"file":	"src/configfile-glue.c",
			"line":	406,
			"primary_score":	1999872,
			"second_score":	124902
		}, {
			"file":	"src/configfile-glue.c",
			"line":	408,
			"primary_score":	1999868,
			"second_score":	124901
		}, {
			"file":	"src/configfile-glue.c",
			"line":	411,
			"primary_score":	1999868,
			"second_score":	124612
		}, {
			"file":	"src/configfile-glue.c",
			"line":	412,
			"primary_score":	1999868,
			"second_score":	124611
		}, {
			"file":	"src/configfile-glue.c",
			"line":	415,
			"primary_score":	1999871,
			"second_score":	124571
		}, {
			"file":	"src/configfile-glue.c",
			"line":	417,
			"primary_score":	1999868,
			"second_score":	124570
		}, {
			"file":	"src/configfile-glue.c",
			"line":	447,
			"primary_score":	1999851,
			"second_score":	122548
		}, {
			"file":	"src/configfile-glue.c",
			"line":	455,
			"primary_score":	1999851,
			"second_score":	122547
		}, {
			"file":	"src/configfile-glue.c",
			"line":	462,
			"primary_score":	1999851,
			"second_score":	122546
		}, {
			"file":	"src/configfile-glue.c",
			"line":	466,
			"primary_score":	1999968,
			"second_score":	127451
		}, {
			"file":	"src/configfile-glue.c",
			"line":	468,
			"primary_score":	1999852,
			"second_score":	125226
		}, {
			"file":	"src/configfile-glue.c",
			"line":	474,
			"primary_score":	1999867,
			"second_score":	122545
		}, {
			"file":	"src/configfile-glue.c",
			"line":	475,
			"primary_score":	1999867,
			"second_score":	122544
		}, {
			"file":	"src/configfile-glue.c",
			"line":	480,
			"primary_score":	1999867,
			"second_score":	122543
		}, {
			"file":	"src/configfile-glue.c",
			"line":	483,
			"primary_score":	1999867,
			"second_score":	122542
		}, {
			"file":	"src/configfile-glue.c",
			"line":	484,
			"primary_score":	1999867,
			"second_score":	122541
		}, {
			"file":	"src/configfile-glue.c",
			"line":	485,
			"primary_score":	1999867,
			"second_score":	124892
		}, {
			"file":	"src/configfile-glue.c",
			"line":	486,
			"primary_score":	1999867,
			"second_score":	124891
		}, {
			"file":	"src/configfile-glue.c",
			"line":	488,
			"primary_score":	1999867,
			"second_score":	124890
		}, {
			"file":	"src/configfile-glue.c",
			"line":	491,
			"primary_score":	1999868,
			"second_score":	122540
		}, {
			"file":	"src/configfile-glue.c",
			"line":	505,
			"primary_score":	1999817,
			"second_score":	110152
		}, {
			"file":	"src/configfile-glue.c",
			"line":	507,
			"primary_score":	1999817,
			"second_score":	110151
		}, {
			"file":	"src/configfile-glue.c",
			"line":	508,
			"primary_score":	1999817,
			"second_score":	110549
		}, {
			"file":	"src/configfile-glue.c",
			"line":	511,
			"primary_score":	1999817,
			"second_score":	110548
		}, {
			"file":	"src/configfile-glue.c",
			"line":	513,
			"primary_score":	1999857,
			"second_score":	125095
		}, {
			"file":	"src/configfile-glue.c",
			"line":	523,
			"primary_score":	1999817,
			"second_score":	110540
		}, {
			"file":	"src/configfile-glue.c",
			"line":	525,
			"primary_score":	1999817,
			"second_score":	110539
		}, {
			"file":	"src/configfile-glue.c",
			"line":	533,
			"primary_score":	1999851,
			"second_score":	110150
		}, {
			"file":	"src/configfile-glue.c",
			"line":	542,
			"primary_score":	1999817,
			"second_score":	110149
		}, {
			"file":	"src/configfile-glue.c",
			"line":	551,
			"primary_score":	1999817,
			"second_score":	18643
		}, {
			"file":	"src/configfile-glue.c",
			"line":	553,
			"primary_score":	1999817,
			"second_score":	18642
		}, {
			"file":	"src/configfile-glue.c",
			"line":	554,
			"primary_score":	1999817,
			"second_score":	18545
		}, {
			"file":	"src/configfile-glue.c",
			"line":	556,
			"primary_score":	1999817,
			"second_score":	18544
		}, {
			"file":	"src/configfile-glue.c",
			"line":	557,
			"primary_score":	1999817,
			"second_score":	18543
		}, {
			"file":	"src/configfile-glue.c",
			"line":	558,
			"primary_score":	1999817,
			"second_score":	18542
		}, {
			"file":	"src/configfile-glue.c",
			"line":	567,
			"primary_score":	1999817,
			"second_score":	18645
		}, {
			"file":	"src/configfile-glue.c",
			"line":	569,
			"primary_score":	1999817,
			"second_score":	18644
		}, {
			"file":	"src/configfile-glue.c",
			"line":	571,
			"primary_score":	1999817,
			"second_score":	18540
		}, {
			"file":	"src/configfile-glue.c",
			"line":	572,
			"primary_score":	1999817,
			"second_score":	18527
		}, {
			"file":	"src/configfile-glue.c",
			"line":	577,
			"primary_score":	1999817,
			"second_score":	110153
		}, {
			"file":	"src/configfile-glue.c",
			"line":	600,
			"primary_score":	1999855,
			"second_score":	118793
		}, {
			"file":	"src/configfile-glue.c",
			"line":	601,
			"primary_score":	1999855,
			"second_score":	118792
		}, {
			"file":	"src/configfile-glue.c",
			"line":	602,
			"primary_score":	1999855,
			"second_score":	118791
		}, {
			"file":	"src/configfile-glue.c",
			"line":	603,
			"primary_score":	1999855,
			"second_score":	118790
		}, {
			"file":	"src/configfile-glue.c",
			"line":	604,
			"primary_score":	1999855,
			"second_score":	118789
		}, {
			"file":	"src/configfile-glue.c",
			"line":	605,
			"primary_score":	1999855,
			"second_score":	118788
		}, {
			"file":	"src/configfile-glue.c",
			"line":	606,
			"primary_score":	1999855,
			"second_score":	118787
		}, {
			"file":	"src/configfile-glue.c",
			"line":	608,
			"primary_score":	1999855,
			"second_score":	118786
		}, {
			"file":	"src/configfile-glue.c",
			"line":	610,
			"primary_score":	1999855,
			"second_score":	118785
		}, {
			"file":	"src/configfile-glue.c",
			"line":	611,
			"primary_score":	1999863,
			"second_score":	118784
		}, {
			"file":	"src/configfile-glue.c",
			"line":	613,
			"primary_score":	1999863,
			"second_score":	118783
		}, {
			"file":	"src/configfile-glue.c",
			"line":	614,
			"primary_score":	1999863,
			"second_score":	118782
		}, {
			"file":	"src/configfile-glue.c",
			"line":	615,
			"primary_score":	1999863,
			"second_score":	118781
		}, {
			"file":	"src/configfile-glue.c",
			"line":	616,
			"primary_score":	1999863,
			"second_score":	118780
		}, {
			"file":	"src/configfile-glue.c",
			"line":	618,
			"primary_score":	1999863,
			"second_score":	118779
		}, {
			"file":	"src/configfile-glue.c",
			"line":	619,
			"primary_score":	1999867,
			"second_score":	118778
		}, {
			"file":	"src/configfile-glue.c",
			"line":	668,
			"primary_score":	1999860,
			"second_score":	118777
		}, {
			"file":	"src/configfile.c",
			"line":	271,
			"primary_score":	1999817,
			"second_score":	18523
		}, {
			"file":	"src/configfile.c",
			"line":	273,
			"primary_score":	1999817,
			"second_score":	18522
		}, {
			"file":	"src/configfile.c",
			"line":	274,
			"primary_score":	1999817,
			"second_score":	18521
		}, {
			"file":	"src/configfile.c",
			"line":	275,
			"primary_score":	1999817,
			"second_score":	18520
		}, {
			"file":	"src/configfile.c",
			"line":	276,
			"primary_score":	1999817,
			"second_score":	18519
		}, {
			"file":	"src/configfile.c",
			"line":	277,
			"primary_score":	1999817,
			"second_score":	18518
		}, {
			"file":	"src/configfile.c",
			"line":	278,
			"primary_score":	1999817,
			"second_score":	18517
		}, {
			"file":	"src/configfile.c",
			"line":	279,
			"primary_score":	1999817,
			"second_score":	18516
		}, {
			"file":	"src/configfile.c",
			"line":	280,
			"primary_score":	1999817,
			"second_score":	18515
		}, {
			"file":	"src/configfile.c",
			"line":	281,
			"primary_score":	1999817,
			"second_score":	18514
		}, {
			"file":	"src/configfile.c",
			"line":	282,
			"primary_score":	1999817,
			"second_score":	18513
		}, {
			"file":	"src/configfile.c",
			"line":	283,
			"primary_score":	1999817,
			"second_score":	18512
		}, {
			"file":	"src/configfile.c",
			"line":	285,
			"primary_score":	1999817,
			"second_score":	18511
		}, {
			"file":	"src/configfile.c",
			"line":	287,
			"primary_score":	1999817,
			"second_score":	18510
		}, {
			"file":	"src/configfile.c",
			"line":	288,
			"primary_score":	1999817,
			"second_score":	18509
		}, {
			"file":	"src/configfile.c",
			"line":	289,
			"primary_score":	1999817,
			"second_score":	18508
		}, {
			"file":	"src/configfile.c",
			"line":	290,
			"primary_score":	1999817,
			"second_score":	18507
		}, {
			"file":	"src/configfile.c",
			"line":	292,
			"primary_score":	1999817,
			"second_score":	18506
		}, {
			"file":	"src/configfile.c",
			"line":	293,
			"primary_score":	1999817,
			"second_score":	18505
		}, {
			"file":	"src/configfile.c",
			"line":	295,
			"primary_score":	1999817,
			"second_score":	18491
		}, {
			"file":	"src/configfile.c",
			"line":	296,
			"primary_score":	1999817,
			"second_score":	18490
		}, {
			"file":	"src/configfile.c",
			"line":	297,
			"primary_score":	1999817,
			"second_score":	18489
		}, {
			"file":	"src/configfile.c",
			"line":	298,
			"primary_score":	1999817,
			"second_score":	18488
		}, {
			"file":	"src/configfile.c",
			"line":	299,
			"primary_score":	1999817,
			"second_score":	18487
		}, {
			"file":	"src/configfile.c",
			"line":	300,
			"primary_score":	1999817,
			"second_score":	18486
		}, {
			"file":	"src/configfile.c",
			"line":	302,
			"primary_score":	1999817,
			"second_score":	18485
		}, {
			"file":	"src/configfile.c",
			"line":	303,
			"primary_score":	1999817,
			"second_score":	18484
		}, {
			"file":	"src/configfile.c",
			"line":	304,
			"primary_score":	1999817,
			"second_score":	18483
		}, {
			"file":	"src/configfile.c",
			"line":	306,
			"primary_score":	1999817,
			"second_score":	18482
		}, {
			"file":	"src/configfile.c",
			"line":	307,
			"primary_score":	1999817,
			"second_score":	18481
		}, {
			"file":	"src/configfile.c",
			"line":	308,
			"primary_score":	1999817,
			"second_score":	18480
		}, {
			"file":	"src/configfile.c",
			"line":	309,
			"primary_score":	1999817,
			"second_score":	18479
		}, {
			"file":	"src/configfile.c",
			"line":	310,
			"primary_score":	1999817,
			"second_score":	18478
		}, {
			"file":	"src/configfile.c",
			"line":	311,
			"primary_score":	1999817,
			"second_score":	18477
		}, {
			"file":	"src/configfile.c",
			"line":	312,
			"primary_score":	1999817,
			"second_score":	18476
		}, {
			"file":	"src/configfile.c",
			"line":	314,
			"primary_score":	1999817,
			"second_score":	18475
		}, {
			"file":	"src/configfile.c",
			"line":	318,
			"primary_score":	1999851,
			"second_score":	120056
		}, {
			"file":	"src/configfile.c",
			"line":	320,
			"primary_score":	1999851,
			"second_score":	120055
		}, {
			"file":	"src/configfile.c",
			"line":	323,
			"primary_score":	1999851,
			"second_score":	120054
		}, {
			"file":	"src/configfile.c",
			"line":	324,
			"primary_score":	1999851,
			"second_score":	119961
		}, {
			"file":	"src/configfile.c",
			"line":	325,
			"primary_score":	1999851,
			"second_score":	119960
		}, {
			"file":	"src/configfile.c",
			"line":	328,
			"primary_score":	1999851,
			"second_score":	119959
		}, {
			"file":	"src/configfile.c",
			"line":	331,
			"primary_score":	1999851,
			"second_score":	122561
		}, {
			"file":	"src/configfile.c",
			"line":	334,
			"primary_score":	1999857,
			"second_score":	125091
		}, {
			"file":	"src/configfile.c",
			"line":	335,
			"primary_score":	1999857,
			"second_score":	125634
		}, {
			"file":	"src/configfile.c",
			"line":	337,
			"primary_score":	1999857,
			"second_score":	125633
		}, {
			"file":	"src/configfile.c",
			"line":	338,
			"primary_score":	1999981,
			"second_score":	127436
		}, {
			"file":	"src/configfile.c",
			"line":	339,
			"primary_score":	1999857,
			"second_score":	125626
		}, {
			"file":	"src/configfile.c",
			"line":	341,
			"primary_score":	1999857,
			"second_score":	125619
		}, {
			"file":	"src/configfile.c",
			"line":	343,
			"primary_score":	1999857,
			"second_score":	125612
		}, {
			"file":	"src/configfile.c",
			"line":	345,
			"primary_score":	1999857,
			"second_score":	125605
		}, {
			"file":	"src/configfile.c",
			"line":	347,
			"primary_score":	1999857,
			"second_score":	125598
		}, {
			"file":	"src/configfile.c",
			"line":	349,
			"primary_score":	1999857,
			"second_score":	125591
		}, {
			"file":	"src/configfile.c",
			"line":	351,
			"primary_score":	1999857,
			"second_score":	125584
		}, {
			"file":	"src/configfile.c",
			"line":	353,
			"primary_score":	1999857,
			"second_score":	125577
		}, {
			"file":	"src/configfile.c",
			"line":	355,
			"primary_score":	1999857,
			"second_score":	125570
		}, {
			"file":	"src/configfile.c",
			"line":	357,
			"primary_score":	1999857,
			"second_score":	125563
		}, {
			"file":	"src/configfile.c",
			"line":	359,
			"primary_score":	1999857,
			"second_score":	125556
		}, {
			"file":	"src/configfile.c",
			"line":	361,
			"primary_score":	1999857,
			"second_score":	125549
		}, {
			"file":	"src/configfile.c",
			"line":	363,
			"primary_score":	1999857,
			"second_score":	125542
		}, {
			"file":	"src/configfile.c",
			"line":	365,
			"primary_score":	1999857,
			"second_score":	125535
		}, {
			"file":	"src/configfile.c",
			"line":	367,
			"primary_score":	1999857,
			"second_score":	125528
		}, {
			"file":	"src/configfile.c",
			"line":	369,
			"primary_score":	1999857,
			"second_score":	125521
		}, {
			"file":	"src/configfile.c",
			"line":	371,
			"primary_score":	1999857,
			"second_score":	125514
		}, {
			"file":	"src/configfile.c",
			"line":	373,
			"primary_score":	1999857,
			"second_score":	125507
		}, {
			"file":	"src/configfile.c",
			"line":	376,
			"primary_score":	1999857,
			"second_score":	125500
		}, {
			"file":	"src/configfile.c",
			"line":	379,
			"primary_score":	1999857,
			"second_score":	125493
		}, {
			"file":	"src/configfile.c",
			"line":	381,
			"primary_score":	1999858,
			"second_score":	125486
		}, {
			"file":	"src/configfile.c",
			"line":	383,
			"primary_score":	1999858,
			"second_score":	125479
		}, {
			"file":	"src/configfile.c",
			"line":	385,
			"primary_score":	1999858,
			"second_score":	125472
		}, {
			"file":	"src/configfile.c",
			"line":	387,
			"primary_score":	1999858,
			"second_score":	125465
		}, {
			"file":	"src/configfile.c",
			"line":	389,
			"primary_score":	1999858,
			"second_score":	125458
		}, {
			"file":	"src/configfile.c",
			"line":	391,
			"primary_score":	1999858,
			"second_score":	125451
		}, {
			"file":	"src/configfile.c",
			"line":	393,
			"primary_score":	1999858,
			"second_score":	125444
		}, {
			"file":	"src/configfile.c",
			"line":	395,
			"primary_score":	1999858,
			"second_score":	125437
		}, {
			"file":	"src/configfile.c",
			"line":	397,
			"primary_score":	1999858,
			"second_score":	125430
		}, {
			"file":	"src/configfile.c",
			"line":	399,
			"primary_score":	1999858,
			"second_score":	125423
		}, {
			"file":	"src/configfile.c",
			"line":	401,
			"primary_score":	1999858,
			"second_score":	125416
		}, {
			"file":	"src/configfile.c",
			"line":	410,
			"primary_score":	1999851,
			"second_score":	119957
		}, {
			"file":	"src/configfile.c",
			"line":	415,
			"primary_score":	1999851,
			"second_score":	119956
		}, {
			"file":	"src/configfile.c",
			"line":	525,
			"primary_score":	1999833,
			"second_score":	743876
		}, {
			"file":	"src/configfile.c",
			"line":	526,
			"primary_score":	1999833,
			"second_score":	743875
		}, {
			"file":	"src/configfile.c",
			"line":	528,
			"primary_score":	1999833,
			"second_score":	743874
		}, {
			"file":	"src/configfile.c",
			"line":	530,
			"primary_score":	1999833,
			"second_score":	743857
		}, {
			"file":	"src/configfile.c",
			"line":	558,
			"primary_score":	1999834,
			"second_score":	748616
		}, {
			"file":	"src/configfile.c",
			"line":	564,
			"primary_score":	1999834,
			"second_score":	748615
		}, {
			"file":	"src/configfile.c",
			"line":	565,
			"primary_score":	1999834,
			"second_score":	748614
		}, {
			"file":	"src/configfile.c",
			"line":	567,
			"primary_score":	1999834,
			"second_score":	748613
		}, {
			"file":	"src/configfile.c",
			"line":	569,
			"primary_score":	1999834,
			"second_score":	748596
		}, {
			"file":	"src/configfile.c",
			"line":	577,
			"primary_score":	1999834,
			"second_score":	748595
		}, {
			"file":	"src/configfile.c",
			"line":	578,
			"primary_score":	1999834,
			"second_score":	748594
		}, {
			"file":	"src/configfile.c",
			"line":	587,
			"primary_score":	1999834,
			"second_score":	748593
		}, {
			"file":	"src/configfile.c",
			"line":	759,
			"primary_score":	1999825,
			"second_score":	949649
		}, {
			"file":	"src/configfile.c",
			"line":	806,
			"primary_score":	1999833,
			"second_score":	960888
		}, {
			"file":	"src/configparser.c",
			"line":	1050,
			"primary_score":	1999821,
			"second_score":	945301
		}, {
			"file":	"src/configparser.c",
			"line":	1051,
			"primary_score":	1999821,
			"second_score":	945300
		}, {
			"file":	"src/configparser.c",
			"line":	1054,
			"primary_score":	1999821,
			"second_score":	945299
		}, {
			"file":	"src/configparser.c",
			"line":	1055,
			"primary_score":	1999821,
			"second_score":	945292
		}, {
			"file":	"src/configparser.c",
			"line":	1180,
			"primary_score":	1999834,
			"second_score":	748056
		}, {
			"file":	"src/configparser.c",
			"line":	1183,
			"primary_score":	1999833,
			"second_score":	743365
		}, {
			"file":	"src/configparser.c",
			"line":	1256,
			"primary_score":	1999833,
			"second_score":	742813
		}, {
			"file":	"src/configparser.c",
			"line":	1257,
			"primary_score":	1999833,
			"second_score":	742812
		}, {
			"file":	"src/configparser.c",
			"line":	1259,
			"primary_score":	1999833,
			"second_score":	742811
		}, {
			"file":	"src/configparser.c",
			"line":	1268,
			"primary_score":	1999833,
			"second_score":	742810
		}, {
			"file":	"src/configparser.c",
			"line":	1275,
			"primary_score":	1999833,
			"second_score":	742809
		}, {
			"file":	"src/configparser.c",
			"line":	1283,
			"primary_score":	1999833,
			"second_score":	742780
		}, {
			"file":	"src/configparser.c",
			"line":	1321,
			"primary_score":	1999833,
			"second_score":	743676
		}, {
			"file":	"src/configparser.c",
			"line":	1324,
			"primary_score":	1999833,
			"second_score":	743675
		}, {
			"file":	"src/configparser.c",
			"line":	1325,
			"primary_score":	1999833,
			"second_score":	743668
		}, {
			"file":	"src/configparser.c",
			"line":	1337,
			"primary_score":	1999834,
			"second_score":	748367
		}, {
			"file":	"src/configparser.c",
			"line":	1340,
			"primary_score":	1999834,
			"second_score":	748366
		}, {
			"file":	"src/configparser.c",
			"line":	1341,
			"primary_score":	1999834,
			"second_score":	748359
		}, {
			"file":	"src/configparser.c",
			"line":	1365,
			"primary_score":	1999833,
			"second_score":	960278
		}, {
			"file":	"src/configparser.c",
			"line":	1366,
			"primary_score":	1999833,
			"second_score":	960277
		}, {
			"file":	"src/configparser.c",
			"line":	1369,
			"primary_score":	1999833,
			"second_score":	861739
		}, {
			"file":	"src/configparser.c",
			"line":	1370,
			"primary_score":	1999833,
			"second_score":	861735
		}, {
			"file":	"src/configparser.c",
			"line":	1374,
			"primary_score":	1999833,
			"second_score":	861734
		}, {
			"file":	"src/configparser.c",
			"line":	1375,
			"primary_score":	1999833,
			"second_score":	861727
		}, {
			"file":	"src/connections-glue.c",
			"line":	45,
			"primary_score":	1999817,
			"second_score":	109570
		}, {
			"file":	"src/connections-glue.c",
			"line":	47,
			"primary_score":	1999817,
			"second_score":	109569
		}, {
			"file":	"src/connections-glue.c",
			"line":	49,
			"primary_score":	1999817,
			"second_score":	109568
		}, {
			"file":	"src/connections.c",
			"line":	46,
			"primary_score":	1999817,
			"second_score":	131087
		}, {
			"file":	"src/connections.c",
			"line":	47,
			"primary_score":	1999817,
			"second_score":	131086
		}, {
			"file":	"src/connections.c",
			"line":	49,
			"primary_score":	1999817,
			"second_score":	131085
		}, {
			"file":	"src/connections.c",
			"line":	50,
			"primary_score":	1999817,
			"second_score":	265300
		}, {
			"file":	"src/connections.c",
			"line":	51,
			"primary_score":	1999817,
			"second_score":	265299
		}, {
			"file":	"src/connections.c",
			"line":	52,
			"primary_score":	1999817,
			"second_score":	265298
		}, {
			"file":	"src/connections.c",
			"line":	53,
			"primary_score":	1999817,
			"second_score":	265297
		}, {
			"file":	"src/connections.c",
			"line":	54,
			"primary_score":	1999817,
			"second_score":	222116
		}, {
			"file":	"src/connections.c",
			"line":	56,
			"primary_score":	1999817,
			"second_score":	131084
		}, {
			"file":	"src/connections.c",
			"line":	65,
			"primary_score":	1999817,
			"second_score":	131083
		}, {
			"file":	"src/connections.c",
			"line":	67,
			"primary_score":	1999817,
			"second_score":	130560
		}, {
			"file":	"src/connections.c",
			"line":	68,
			"primary_score":	1999817,
			"second_score":	130559
		}, {
			"file":	"src/connections.c",
			"line":	72,
			"primary_score":	1999817,
			"second_score":	109581
		}, {
			"file":	"src/connections.c",
			"line":	73,
			"primary_score":	1999817,
			"second_score":	109580
		}, {
			"file":	"src/connections.c",
			"line":	74,
			"primary_score":	1999817,
			"second_score":	109579
		}, {
			"file":	"src/connections.c",
			"line":	76,
			"primary_score":	1999817,
			"second_score":	109578
		}, {
			"file":	"src/connections.c",
			"line":	78,
			"primary_score":	1999817,
			"second_score":	109577
		}, {
			"file":	"src/connections.c",
			"line":	80,
			"primary_score":	1999817,
			"second_score":	109576
		}, {
			"file":	"src/connections.c",
			"line":	84,
			"primary_score":	1999817,
			"second_score":	109575
		}, {
			"file":	"src/connections.c",
			"line":	93,
			"primary_score":	1999817,
			"second_score":	109574
		}, {
			"file":	"src/connections.c",
			"line":	95,
			"primary_score":	1999817,
			"second_score":	109573
		}, {
			"file":	"src/connections.c",
			"line":	97,
			"primary_score":	1999817,
			"second_score":	109572
		}, {
			"file":	"src/connections.c",
			"line":	104,
			"primary_score":	1999817,
			"second_score":	109600
		}, {
			"file":	"src/connections.c",
			"line":	150,
			"primary_score":	1999817,
			"second_score":	109599
		}, {
			"file":	"src/connections.c",
			"line":	151,
			"primary_score":	1999817,
			"second_score":	109593
		}, {
			"file":	"src/connections.c",
			"line":	153,
			"primary_score":	1999817,
			"second_score":	109583
		}, {
			"file":	"src/connections.c",
			"line":	158,
			"primary_score":	1999817,
			"second_score":	109582
		}, {
			"file":	"src/connections.c",
			"line":	159,
			"primary_score":	1999817,
			"second_score":	109571
		}, {
			"file":	"src/connections.c",
			"line":	161,
			"primary_score":	1999817,
			"second_score":	109567
		}, {
			"file":	"src/connections.c",
			"line":	209,
			"primary_score":	1999824,
			"second_score":	113661
		}, {
			"file":	"src/connections.c",
			"line":	211,
			"primary_score":	1999824,
			"second_score":	113660
		}, {
			"file":	"src/connections.c",
			"line":	213,
			"primary_score":	1999842,
			"second_score":	113659
		}, {
			"file":	"src/connections.c",
			"line":	259,
			"primary_score":	1999824,
			"second_score":	113658
		}, {
			"file":	"src/connections.c",
			"line":	264,
			"primary_score":	1999824,
			"second_score":	113657
		}, {
			"file":	"src/connections.c",
			"line":	284,
			"primary_score":	1999934,
			"second_score":	113656
		}, {
			"file":	"src/connections.c",
			"line":	286,
			"primary_score":	1999934,
			"second_score":	113655
		}, {
			"file":	"src/connections.c",
			"line":	289,
			"primary_score":	1999934,
			"second_score":	113651
		}, {
			"file":	"src/connections.c",
			"line":	303,
			"primary_score":	1999934,
			"second_score":	113648
		}, {
			"file":	"src/connections.c",
			"line":	304,
			"primary_score":	1999934,
			"second_score":	113647
		}, {
			"file":	"src/connections.c",
			"line":	306,
			"primary_score":	1999934,
			"second_score":	113646
		}, {
			"file":	"src/connections.c",
			"line":	308,
			"primary_score":	1999934,
			"second_score":	113642
		}, {
			"file":	"src/connections.c",
			"line":	309,
			"primary_score":	1999934,
			"second_score":	113641
		}, {
			"file":	"src/connections.c",
			"line":	312,
			"primary_score":	1999934,
			"second_score":	113597
		}, {
			"file":	"src/connections.c",
			"line":	319,
			"primary_score":	1999934,
			"second_score":	113580
		}, {
			"file":	"src/connections.c",
			"line":	320,
			"primary_score":	1999934,
			"second_score":	113550
		}, {
			"file":	"src/connections.c",
			"line":	321,
			"primary_score":	1999934,
			"second_score":	113537
		}, {
			"file":	"src/connections.c",
			"line":	323,
			"primary_score":	1999934,
			"second_score":	113492
		}, {
			"file":	"src/connections.c",
			"line":	328,
			"primary_score":	1999934,
			"second_score":	113479
		}, {
			"file":	"src/connections.c",
			"line":	329,
			"primary_score":	1999934,
			"second_score":	113445
		}, {
			"file":	"src/connections.c",
			"line":	330,
			"primary_score":	1999934,
			"second_score":	113432
		}, {
			"file":	"src/connections.c",
			"line":	332,
			"primary_score":	1999934,
			"second_score":	113387
		}, {
			"file":	"src/connections.c",
			"line":	337,
			"primary_score":	1999934,
			"second_score":	113374
		}, {
			"file":	"src/connections.c",
			"line":	339,
			"primary_score":	1999934,
			"second_score":	113373
		}, {
			"file":	"src/connections.c",
			"line":	342,
			"primary_score":	1999934,
			"second_score":	113191
		}, {
			"file":	"src/connections.c",
			"line":	368,
			"primary_score":	1999824,
			"second_score":	113190
		}, {
			"file":	"src/connections.c",
			"line":	376,
			"primary_score":	1999824,
			"second_score":	113189
		}, {
			"file":	"src/connections.c",
			"line":	380,
			"primary_score":	1999817,
			"second_score":	222115
		}, {
			"file":	"src/connections.c",
			"line":	382,
			"primary_score":	1999817,
			"second_score":	222114
		}, {
			"file":	"src/connections.c",
			"line":	384,
			"primary_score":	1999817,
			"second_score":	222113
		}, {
			"file":	"src/connections.c",
			"line":	386,
			"primary_score":	1999817,
			"second_score":	222112
		}, {
			"file":	"src/connections.c",
			"line":	387,
			"primary_score":	1999817,
			"second_score":	222105
		}, {
			"file":	"src/connections.c",
			"line":	388,
			"primary_score":	1999817,
			"second_score":	222104
		}, {
			"file":	"src/connections.c",
			"line":	389,
			"primary_score":	1999817,
			"second_score":	222103
		}, {
			"file":	"src/connections.c",
			"line":	390,
			"primary_score":	1999817,
			"second_score":	222102
		}, {
			"file":	"src/connections.c",
			"line":	391,
			"primary_score":	1999817,
			"second_score":	222101
		}, {
			"file":	"src/connections.c",
			"line":	396,
			"primary_score":	1999817,
			"second_score":	222100
		}, {
			"file":	"src/connections.c",
			"line":	397,
			"primary_score":	1999817,
			"second_score":	222091
		}, {
			"file":	"src/connections.c",
			"line":	398,
			"primary_score":	1999817,
			"second_score":	222082
		}, {
			"file":	"src/connections.c",
			"line":	399,
			"primary_score":	1999817,
			"second_score":	222073
		}, {
			"file":	"src/connections.c",
			"line":	401,
			"primary_score":	1999817,
			"second_score":	222064
		}, {
			"file":	"src/connections.c",
			"line":	403,
			"primary_score":	1999817,
			"second_score":	222055
		}, {
			"file":	"src/connections.c",
			"line":	404,
			"primary_score":	1999817,
			"second_score":	222046
		}, {
			"file":	"src/connections.c",
			"line":	405,
			"primary_score":	1999817,
			"second_score":	222037
		}, {
			"file":	"src/connections.c",
			"line":	406,
			"primary_score":	1999817,
			"second_score":	222028
		}, {
			"file":	"src/connections.c",
			"line":	407,
			"primary_score":	1999817,
			"second_score":	222019
		}, {
			"file":	"src/connections.c",
			"line":	409,
			"primary_score":	1999817,
			"second_score":	222010
		}, {
			"file":	"src/connections.c",
			"line":	410,
			"primary_score":	1999817,
			"second_score":	222001
		}, {
			"file":	"src/connections.c",
			"line":	411,
			"primary_score":	1999817,
			"second_score":	221992
		}, {
			"file":	"src/connections.c",
			"line":	412,
			"primary_score":	1999817,
			"second_score":	221983
		}, {
			"file":	"src/connections.c",
			"line":	413,
			"primary_score":	1999817,
			"second_score":	221974
		}, {
			"file":	"src/connections.c",
			"line":	414,
			"primary_score":	1999817,
			"second_score":	221965
		}, {
			"file":	"src/connections.c",
			"line":	416,
			"primary_score":	1999817,
			"second_score":	221956
		}, {
			"file":	"src/connections.c",
			"line":	417,
			"primary_score":	1999817,
			"second_score":	221947
		}, {
			"file":	"src/connections.c",
			"line":	418,
			"primary_score":	1999817,
			"second_score":	221938
		}, {
			"file":	"src/connections.c",
			"line":	419,
			"primary_score":	1999817,
			"second_score":	221929
		}, {
			"file":	"src/connections.c",
			"line":	422,
			"primary_score":	1999817,
			"second_score":	221920
		}, {
			"file":	"src/connections.c",
			"line":	424,
			"primary_score":	1999817,
			"second_score":	221892
		}, {
			"file":	"src/connections.c",
			"line":	425,
			"primary_score":	1999817,
			"second_score":	221891
		}, {
			"file":	"src/connections.c",
			"line":	426,
			"primary_score":	1999817,
			"second_score":	221885
		}, {
			"file":	"src/connections.c",
			"line":	428,
			"primary_score":	1999817,
			"second_score":	221881
		}, {
			"file":	"src/connections.c",
			"line":	429,
			"primary_score":	1999817,
			"second_score":	221875
		}, {
			"file":	"src/connections.c",
			"line":	431,
			"primary_score":	1999817,
			"second_score":	221869
		}, {
			"file":	"src/connections.c",
			"line":	432,
			"primary_score":	1999817,
			"second_score":	221863
		}, {
			"file":	"src/connections.c",
			"line":	433,
			"primary_score":	1999817,
			"second_score":	221857
		}, {
			"file":	"src/connections.c",
			"line":	435,
			"primary_score":	1999817,
			"second_score":	221851
		}, {
			"file":	"src/connections.c",
			"line":	439,
			"primary_score":	1999817,
			"second_score":	221834
		}, {
			"file":	"src/connections.c",
			"line":	441,
			"primary_score":	1999817,
			"second_score":	221833
		}, {
			"file":	"src/connections.c",
			"line":	442,
			"primary_score":	1999817,
			"second_score":	221832
		}, {
			"file":	"src/connections.c",
			"line":	444,
			"primary_score":	1999817,
			"second_score":	221777
		}, {
			"file":	"src/connections.c",
			"line":	448,
			"primary_score":	1999817,
			"second_score":	108752
		}, {
			"file":	"src/connections.c",
			"line":	449,
			"primary_score":	1999817,
			"second_score":	108751
		}, {
			"file":	"src/connections.c",
			"line":	451,
			"primary_score":	1999817,
			"second_score":	108750
		}, {
			"file":	"src/connections.c",
			"line":	452,
			"primary_score":	1999817,
			"second_score":	18997
		}, {
			"file":	"src/connections.c",
			"line":	454,
			"primary_score":	1999817,
			"second_score":	18996
		}, {
			"file":	"src/connections.c",
			"line":	455,
			"primary_score":	1999817,
			"second_score":	18473
		}, {
			"file":	"src/connections.c",
			"line":	457,
			"primary_score":	1999817,
			"second_score":	18469
		}, {
			"file":	"src/connections.c",
			"line":	458,
			"primary_score":	1999817,
			"second_score":	18450
		}, {
			"file":	"src/connections.c",
			"line":	459,
			"primary_score":	1999817,
			"second_score":	18449
		}, {
			"file":	"src/connections.c",
			"line":	460,
			"primary_score":	1999817,
			"second_score":	18444
		}, {
			"file":	"src/connections.c",
			"line":	461,
			"primary_score":	1999817,
			"second_score":	18439
		}, {
			"file":	"src/connections.c",
			"line":	462,
			"primary_score":	1999817,
			"second_score":	18434
		}, {
			"file":	"src/connections.c",
			"line":	463,
			"primary_score":	1999817,
			"second_score":	18426
		}, {
			"file":	"src/connections.c",
			"line":	464,
			"primary_score":	1999817,
			"second_score":	18418
		}, {
			"file":	"src/connections.c",
			"line":	469,
			"primary_score":	1999817,
			"second_score":	18410
		}, {
			"file":	"src/connections.c",
			"line":	470,
			"primary_score":	1999817,
			"second_score":	18405
		}, {
			"file":	"src/connections.c",
			"line":	471,
			"primary_score":	1999817,
			"second_score":	18400
		}, {
			"file":	"src/connections.c",
			"line":	472,
			"primary_score":	1999817,
			"second_score":	18395
		}, {
			"file":	"src/connections.c",
			"line":	474,
			"primary_score":	1999817,
			"second_score":	18390
		}, {
			"file":	"src/connections.c",
			"line":	476,
			"primary_score":	1999817,
			"second_score":	18385
		}, {
			"file":	"src/connections.c",
			"line":	477,
			"primary_score":	1999817,
			"second_score":	18380
		}, {
			"file":	"src/connections.c",
			"line":	478,
			"primary_score":	1999817,
			"second_score":	18375
		}, {
			"file":	"src/connections.c",
			"line":	479,
			"primary_score":	1999817,
			"second_score":	18370
		}, {
			"file":	"src/connections.c",
			"line":	480,
			"primary_score":	1999817,
			"second_score":	18365
		}, {
			"file":	"src/connections.c",
			"line":	482,
			"primary_score":	1999817,
			"second_score":	18360
		}, {
			"file":	"src/connections.c",
			"line":	483,
			"primary_score":	1999817,
			"second_score":	18355
		}, {
			"file":	"src/connections.c",
			"line":	484,
			"primary_score":	1999817,
			"second_score":	18350
		}, {
			"file":	"src/connections.c",
			"line":	485,
			"primary_score":	1999817,
			"second_score":	18345
		}, {
			"file":	"src/connections.c",
			"line":	486,
			"primary_score":	1999817,
			"second_score":	18340
		}, {
			"file":	"src/connections.c",
			"line":	487,
			"primary_score":	1999817,
			"second_score":	18335
		}, {
			"file":	"src/connections.c",
			"line":	489,
			"primary_score":	1999817,
			"second_score":	18330
		}, {
			"file":	"src/connections.c",
			"line":	490,
			"primary_score":	1999817,
			"second_score":	18325
		}, {
			"file":	"src/connections.c",
			"line":	491,
			"primary_score":	1999817,
			"second_score":	18320
		}, {
			"file":	"src/connections.c",
			"line":	492,
			"primary_score":	1999817,
			"second_score":	18315
		}, {
			"file":	"src/connections.c",
			"line":	494,
			"primary_score":	1999817,
			"second_score":	18310
		}, {
			"file":	"src/connections.c",
			"line":	495,
			"primary_score":	1999817,
			"second_score":	18309
		}, {
			"file":	"src/connections.c",
			"line":	497,
			"primary_score":	1999817,
			"second_score":	18308
		}, {
			"file":	"src/connections.c",
			"line":	499,
			"primary_score":	1999817,
			"second_score":	18293
		}, {
			"file":	"src/connections.c",
			"line":	502,
			"primary_score":	1999817,
			"second_score":	18292
		}, {
			"file":	"src/connections.c",
			"line":	507,
			"primary_score":	1999817,
			"second_score":	18995
		}, {
			"file":	"src/connections.c",
			"line":	509,
			"primary_score":	1999817,
			"second_score":	18994
		}, {
			"file":	"src/connections.c",
			"line":	511,
			"primary_score":	1999817,
			"second_score":	18947
		}, {
			"file":	"src/connections.c",
			"line":	512,
			"primary_score":	1999817,
			"second_score":	18946
		}, {
			"file":	"src/connections.c",
			"line":	513,
			"primary_score":	1999817,
			"second_score":	18945
		}, {
			"file":	"src/connections.c",
			"line":	514,
			"primary_score":	1999817,
			"second_score":	18944
		}, {
			"file":	"src/connections.c",
			"line":	515,
			"primary_score":	1999817,
			"second_score":	18943
		}, {
			"file":	"src/connections.c",
			"line":	517,
			"primary_score":	1999817,
			"second_score":	18942
		}, {
			"file":	"src/connections.c",
			"line":	518,
			"primary_score":	1999817,
			"second_score":	18941
		}, {
			"file":	"src/connections.c",
			"line":	519,
			"primary_score":	1999817,
			"second_score":	18940
		}, {
			"file":	"src/connections.c",
			"line":	520,
			"primary_score":	1999817,
			"second_score":	18939
		}, {
			"file":	"src/connections.c",
			"line":	521,
			"primary_score":	1999817,
			"second_score":	18938
		}, {
			"file":	"src/connections.c",
			"line":	523,
			"primary_score":	1999817,
			"second_score":	18937
		}, {
			"file":	"src/connections.c",
			"line":	524,
			"primary_score":	1999817,
			"second_score":	18936
		}, {
			"file":	"src/connections.c",
			"line":	525,
			"primary_score":	1999817,
			"second_score":	18935
		}, {
			"file":	"src/connections.c",
			"line":	527,
			"primary_score":	1999817,
			"second_score":	18934
		}, {
			"file":	"src/connections.c",
			"line":	528,
			"primary_score":	1999817,
			"second_score":	18933
		}, {
			"file":	"src/connections.c",
			"line":	529,
			"primary_score":	1999817,
			"second_score":	18932
		}, {
			"file":	"src/connections.c",
			"line":	531,
			"primary_score":	1999817,
			"second_score":	18931
		}, {
			"file":	"src/connections.c",
			"line":	536,
			"primary_score":	1999817,
			"second_score":	18930
		}, {
			"file":	"src/connections.c",
			"line":	537,
			"primary_score":	1999817,
			"second_score":	18924
		}, {
			"file":	"src/connections.c",
			"line":	538,
			"primary_score":	1999817,
			"second_score":	18918
		}, {
			"file":	"src/connections.c",
			"line":	539,
			"primary_score":	1999817,
			"second_score":	18912
		}, {
			"file":	"src/connections.c",
			"line":	541,
			"primary_score":	1999817,
			"second_score":	18906
		}, {
			"file":	"src/connections.c",
			"line":	543,
			"primary_score":	1999817,
			"second_score":	18900
		}, {
			"file":	"src/connections.c",
			"line":	544,
			"primary_score":	1999817,
			"second_score":	18894
		}, {
			"file":	"src/connections.c",
			"line":	545,
			"primary_score":	1999817,
			"second_score":	18888
		}, {
			"file":	"src/connections.c",
			"line":	546,
			"primary_score":	1999817,
			"second_score":	18882
		}, {
			"file":	"src/connections.c",
			"line":	547,
			"primary_score":	1999817,
			"second_score":	18876
		}, {
			"file":	"src/connections.c",
			"line":	549,
			"primary_score":	1999817,
			"second_score":	18870
		}, {
			"file":	"src/connections.c",
			"line":	550,
			"primary_score":	1999817,
			"second_score":	18864
		}, {
			"file":	"src/connections.c",
			"line":	551,
			"primary_score":	1999817,
			"second_score":	18858
		}, {
			"file":	"src/connections.c",
			"line":	552,
			"primary_score":	1999817,
			"second_score":	18852
		}, {
			"file":	"src/connections.c",
			"line":	553,
			"primary_score":	1999817,
			"second_score":	18846
		}, {
			"file":	"src/connections.c",
			"line":	555,
			"primary_score":	1999817,
			"second_score":	18840
		}, {
			"file":	"src/connections.c",
			"line":	557,
			"primary_score":	1999817,
			"second_score":	18834
		}, {
			"file":	"src/connections.c",
			"line":	558,
			"primary_score":	1999817,
			"second_score":	18828
		}, {
			"file":	"src/connections.c",
			"line":	559,
			"primary_score":	1999817,
			"second_score":	18822
		}, {
			"file":	"src/connections.c",
			"line":	567,
			"primary_score":	1999817,
			"second_score":	18816
		}, {
			"file":	"src/connections.c",
			"line":	568,
			"primary_score":	1999817,
			"second_score":	18810
		}, {
			"file":	"src/connections.c",
			"line":	569,
			"primary_score":	1999817,
			"second_score":	18804
		}, {
			"file":	"src/connections.c",
			"line":	571,
			"primary_score":	1999817,
			"second_score":	18798
		}, {
			"file":	"src/connections.c",
			"line":	572,
			"primary_score":	1999817,
			"second_score":	18780
		}, {
			"file":	"src/connections.c",
			"line":	573,
			"primary_score":	1999817,
			"second_score":	18779
		}, {
			"file":	"src/connections.c",
			"line":	574,
			"primary_score":	1999817,
			"second_score":	18769
		}, {
			"file":	"src/connections.c",
			"line":	576,
			"primary_score":	1999817,
			"second_score":	18759
		}, {
			"file":	"src/connections.c",
			"line":	579,
			"primary_score":	1999817,
			"second_score":	18747
		}, {
			"file":	"src/connections.c",
			"line":	580,
			"primary_score":	1999817,
			"second_score":	18651
		}, {
			"file":	"src/connections.c",
			"line":	581,
			"primary_score":	1999817,
			"second_score":	18650
		}, {
			"file":	"src/connections.c",
			"line":	583,
			"primary_score":	1999817,
			"second_score":	18649
		}, {
			"file":	"src/connections.c",
			"line":	585,
			"primary_score":	1999817,
			"second_score":	18648
		}, {
			"file":	"src/connections.c",
			"line":	589,
			"primary_score":	1999817,
			"second_score":	18647
		}, {
			"file":	"src/connections.c",
			"line":	592,
			"primary_score":	1999817,
			"second_score":	18646
		}, {
			"file":	"src/connections.c",
			"line":	594,
			"primary_score":	1999817,
			"second_score":	18526
		}, {
			"file":	"src/connections.c",
			"line":	595,
			"primary_score":	1999817,
			"second_score":	18525
		}, {
			"file":	"src/connections.c",
			"line":	597,
			"primary_score":	1999817,
			"second_score":	18524
		}, {
			"file":	"src/connections.c",
			"line":	599,
			"primary_score":	1999817,
			"second_score":	18474
		}, {
			"file":	"src/connections.c",
			"line":	609,
			"primary_score":	1999817,
			"second_score":	130241
		}, {
			"file":	"src/connections.c",
			"line":	611,
			"primary_score":	1999817,
			"second_score":	130226
		}, {
			"file":	"src/connections.c",
			"line":	614,
			"primary_score":	1999817,
			"second_score":	130225
		}, {
			"file":	"src/connections.c",
			"line":	625,
			"primary_score":	1999817,
			"second_score":	221008
		}, {
			"file":	"src/connections.c",
			"line":	631,
			"primary_score":	1999817,
			"second_score":	130166
		}, {
			"file":	"src/connections.c",
			"line":	646,
			"primary_score":	1999824,
			"second_score":	128287
		}, {
			"file":	"src/connections.c",
			"line":	653,
			"primary_score":	1999824,
			"second_score":	128286
		}, {
			"file":	"src/connections.c",
			"line":	887,
			"primary_score":	1999817,
			"second_score":	130502
		}, {
			"file":	"src/connections.c",
			"line":	888,
			"primary_score":	1999817,
			"second_score":	130501
		}, {
			"file":	"src/connections.c",
			"line":	889,
			"primary_score":	1999817,
			"second_score":	130500
		}, {
			"file":	"src/connections.c",
			"line":	892,
			"primary_score":	1999817,
			"second_score":	130499
		}, {
			"file":	"src/connections.c",
			"line":	894,
			"primary_score":	1999817,
			"second_score":	130498
		}, {
			"file":	"src/connections.c",
			"line":	898,
			"primary_score":	1999817,
			"second_score":	130497
		}, {
			"file":	"src/connections.c",
			"line":	916,
			"primary_score":	1999817,
			"second_score":	130496
		}, {
			"file":	"src/connections.c",
			"line":	918,
			"primary_score":	1999817,
			"second_score":	131090
		}, {
			"file":	"src/connections.c",
			"line":	925,
			"primary_score":	1999817,
			"second_score":	131089
		}, {
			"file":	"src/connections.c",
			"line":	927,
			"primary_score":	1999817,
			"second_score":	131088
		}, {
			"file":	"src/connections.c",
			"line":	928,
			"primary_score":	1999817,
			"second_score":	130558
		}, {
			"file":	"src/connections.c",
			"line":	929,
			"primary_score":	1999817,
			"second_score":	130557
		}, {
			"file":	"src/connections.c",
			"line":	933,
			"primary_score":	1999817,
			"second_score":	130556
		}, {
			"file":	"src/connections.c",
			"line":	935,
			"primary_score":	1999817,
			"second_score":	130542
		}, {
			"file":	"src/connections.c",
			"line":	937,
			"primary_score":	1999817,
			"second_score":	130538
		}, {
			"file":	"src/connections.c",
			"line":	938,
			"primary_score":	1999817,
			"second_score":	130537
		}, {
			"file":	"src/connections.c",
			"line":	939,
			"primary_score":	1999817,
			"second_score":	130536
		}, {
			"file":	"src/connections.c",
			"line":	940,
			"primary_score":	1999817,
			"second_score":	130516
		}, {
			"file":	"src/connections.c",
			"line":	942,
			"primary_score":	1999817,
			"second_score":	130515
		}, {
			"file":	"src/connections.c",
			"line":	950,
			"primary_score":	1999817,
			"second_score":	130511
		}, {
			"file":	"src/connections.c",
			"line":	969,
			"primary_score":	1999817,
			"second_score":	130510
		}, {
			"file":	"src/connections.c",
			"line":	974,
			"primary_score":	1999817,
			"second_score":	128022
		}, {
			"file":	"src/connections.c",
			"line":	975,
			"primary_score":	1999817,
			"second_score":	128021
		}, {
			"file":	"src/connections.c",
			"line":	977,
			"primary_score":	1999817,
			"second_score":	128020
		}, {
			"file":	"src/connections.c",
			"line":	980,
			"primary_score":	1999817,
			"second_score":	128019
		}, {
			"file":	"src/connections.c",
			"line":	987,
			"primary_score":	1999817,
			"second_score":	128018
		}, {
			"file":	"src/connections.c",
			"line":	988,
			"primary_score":	1999817,
			"second_score":	108946
		}, {
			"file":	"src/connections.c",
			"line":	989,
			"primary_score":	1999817,
			"second_score":	108945
		}, {
			"file":	"src/connections.c",
			"line":	991,
			"primary_score":	1999817,
			"second_score":	108944
		}, {
			"file":	"src/connections.c",
			"line":	998,
			"primary_score":	1999817,
			"second_score":	108943
		}, {
			"file":	"src/connections.c",
			"line":	1000,
			"primary_score":	1999817,
			"second_score":	108892
		}, {
			"file":	"src/connections.c",
			"line":	1002,
			"primary_score":	1999817,
			"second_score":	108891
		}, {
			"file":	"src/connections.c",
			"line":	1010,
			"primary_score":	1999817,
			"second_score":	130477
		}, {
			"file":	"src/connections.c",
			"line":	1011,
			"primary_score":	1999817,
			"second_score":	130476
		}, {
			"file":	"src/connections.c",
			"line":	1013,
			"primary_score":	1999817,
			"second_score":	130475
		}, {
			"file":	"src/connections.c",
			"line":	1014,
			"primary_score":	1999817,
			"second_score":	130474
		}, {
			"file":	"src/connections.c",
			"line":	1017,
			"primary_score":	1999817,
			"second_score":	130473
		}, {
			"file":	"src/connections.c",
			"line":	1046,
			"primary_score":	1999817,
			"second_score":	130472
		}, {
			"file":	"src/connections.c",
			"line":	1049,
			"primary_score":	1999817,
			"second_score":	130468
		}, {
			"file":	"src/connections.c",
			"line":	1056,
			"primary_score":	1999817,
			"second_score":	130242
		}, {
			"file":	"src/connections.c",
			"line":	1059,
			"primary_score":	1999824,
			"second_score":	128285
		}, {
			"file":	"src/connections.c",
			"line":	1061,
			"primary_score":	1999817,
			"second_score":	128281
		}, {
			"file":	"src/connections.c",
			"line":	1076,
			"primary_score":	1999817,
			"second_score":	128280
		}, {
			"file":	"src/connections.c",
			"line":	1082,
			"primary_score":	1999824,
			"second_score":	127875
		}, {
			"file":	"src/connections.c",
			"line":	1087,
			"primary_score":	1999851,
			"second_score":	127874
		}, {
			"file":	"src/connections.c",
			"line":	1096,
			"primary_score":	1999851,
			"second_score":	127834
		}, {
			"file":	"src/connections.c",
			"line":	1099,
			"primary_score":	1999824,
			"second_score":	127830
		}, {
			"file":	"src/connections.c",
			"line":	1109,
			"primary_score":	1999851,
			"second_score":	125469
		}, {
			"file":	"src/connections.c",
			"line":	1136,
			"primary_score":	1999851,
			"second_score":	113729
		}, {
			"file":	"src/connections.c",
			"line":	1138,
			"primary_score":	1999851,
			"second_score":	113728
		}, {
			"file":	"src/connections.c",
			"line":	1178,
			"primary_score":	1999875,
			"second_score":	136173
		}, {
			"file":	"src/connections.c",
			"line":	1184,
			"primary_score":	1999851,
			"second_score":	113726
		}, {
			"file":	"src/connections.c",
			"line":	1187,
			"primary_score":	1999851,
			"second_score":	113725
		}, {
			"file":	"src/connections.c",
			"line":	1189,
			"primary_score":	1999851,
			"second_score":	113721
		}, {
			"file":	"src/connections.c",
			"line":	1195,
			"primary_score":	1999852,
			"second_score":	113715
		}, {
			"file":	"src/connections.c",
			"line":	1198,
			"primary_score":	1999851,
			"second_score":	113714
		}, {
			"file":	"src/connections.c",
			"line":	1221,
			"primary_score":	1999851,
			"second_score":	113713
		}, {
			"file":	"src/connections.c",
			"line":	1228,
			"primary_score":	1999851,
			"second_score":	113709
		}, {
			"file":	"src/connections.c",
			"line":	1246,
			"primary_score":	1999851,
			"second_score":	113678
		}, {
			"file":	"src/connections.c",
			"line":	1249,
			"primary_score":	1999851,
			"second_score":	113674
		}, {
			"file":	"src/connections.c",
			"line":	1254,
			"primary_score":	1999851,
			"second_score":	113673
		}, {
			"file":	"src/connections.c",
			"line":	1256,
			"primary_score":	1999851,
			"second_score":	113672
		}, {
			"file":	"src/connections.c",
			"line":	1259,
			"primary_score":	1999851,
			"second_score":	113671
		}, {
			"file":	"src/connections.c",
			"line":	1262,
			"primary_score":	1999851,
			"second_score":	113667
		}, {
			"file":	"src/connections.c",
			"line":	1273,
			"primary_score":	1999824,
			"second_score":	113188
		}, {
			"file":	"src/connections.c",
			"line":	1289,
			"primary_score":	1999824,
			"second_score":	112344
		}, {
			"file":	"src/connections.c",
			"line":	1291,
			"primary_score":	1999824,
			"second_score":	112340
		}, {
			"file":	"src/connections.c",
			"line":	1296,
			"primary_score":	1999817,
			"second_score":	110953
		}, {
			"file":	"src/connections.c",
			"line":	1298,
			"primary_score":	1999817,
			"second_score":	110949
		}, {
			"file":	"src/connections.c",
			"line":	1305,
			"primary_score":	1999817,
			"second_score":	110948
		}, {
			"file":	"src/connections.c",
			"line":	1309,
			"primary_score":	1999817,
			"second_score":	110937
		}, {
			"file":	"src/connections.c",
			"line":	1312,
			"primary_score":	1999817,
			"second_score":	110936
		}, {
			"file":	"src/connections.c",
			"line":	1334,
			"primary_score":	1999817,
			"second_score":	110913
		}, {
			"file":	"src/connections.c",
			"line":	1349,
			"primary_score":	1999817,
			"second_score":	110893
		}, {
			"file":	"src/connections.c",
			"line":	1354,
			"primary_score":	1999817,
			"second_score":	110780
		}, {
			"file":	"src/connections.c",
			"line":	1355,
			"primary_score":	1999817,
			"second_score":	110779
		}, {
			"file":	"src/connections.c",
			"line":	1357,
			"primary_score":	1999817,
			"second_score":	110778
		}, {
			"file":	"src/connections.c",
			"line":	1360,
			"primary_score":	1999817,
			"second_score":	110777
		}, {
			"file":	"src/connections.c",
			"line":	1362,
			"primary_score":	1999817,
			"second_score":	110776
		}, {
			"file":	"src/connections.c",
			"line":	1364,
			"primary_score":	1999817,
			"second_score":	110771
		}, {
			"file":	"src/connections.c",
			"line":	1372,
			"primary_score":	1999817,
			"second_score":	110770
		}, {
			"file":	"src/connections.c",
			"line":	1377,
			"primary_score":	1999817,
			"second_score":	110769
		}, {
			"file":	"src/connections.c",
			"line":	1382,
			"primary_score":	1999817,
			"second_score":	110768
		}, {
			"file":	"src/connections.c",
			"line":	1386,
			"primary_score":	1999817,
			"second_score":	110622
		}, {
			"file":	"src/connections.c",
			"line":	1396,
			"primary_score":	1999817,
			"second_score":	110621
		}, {
			"file":	"src/connections.c",
			"line":	1403,
			"primary_score":	1999817,
			"second_score":	110617
		}, {
			"file":	"src/connections.c",
			"line":	1430,
			"primary_score":	1999817,
			"second_score":	110616
		}, {
			"file":	"src/connections.c",
			"line":	1439,
			"primary_score":	1999817,
			"second_score":	110610
		}, {
			"file":	"src/connections.c",
			"line":	1441,
			"primary_score":	1999817,
			"second_score":	109618
		}, {
			"file":	"src/connections.c",
			"line":	1443,
			"primary_score":	1999817,
			"second_score":	109617
		}, {
			"file":	"src/connections.c",
			"line":	1451,
			"primary_score":	1999817,
			"second_score":	109616
		}, {
			"file":	"src/connections.c",
			"line":	1460,
			"primary_score":	1999817,
			"second_score":	109601
		}, {
			"file":	"src/connections.c",
			"line":	1462,
			"primary_score":	1999817,
			"second_score":	109566
		}, {
			"file":	"src/connections.c",
			"line":	1465,
			"primary_score":	1999817,
			"second_score":	109565
		}, {
			"file":	"src/connections.c",
			"line":	1467,
			"primary_score":	1999817,
			"second_score":	108949
		}, {
			"file":	"src/connections.c",
			"line":	1474,
			"primary_score":	1999817,
			"second_score":	221000
		}, {
			"file":	"src/connections.c",
			"line":	1492,
			"primary_score":	1999817,
			"second_score":	220999
		}, {
			"file":	"src/connections.c",
			"line":	1495,
			"primary_score":	1999817,
			"second_score":	220998
		}, {
			"file":	"src/connections.c",
			"line":	1496,
			"primary_score":	1999817,
			"second_score":	220997
		}, {
			"file":	"src/connections.c",
			"line":	1498,
			"primary_score":	1999817,
			"second_score":	220962
		}, {
			"file":	"src/connections.c",
			"line":	1504,
			"primary_score":	1999817,
			"second_score":	220961
		}, {
			"file":	"src/connections.c",
			"line":	1577,
			"primary_score":	1999817,
			"second_score":	108890
		}, {
			"file":	"src/connections.c",
			"line":	1579,
			"primary_score":	1999817,
			"second_score":	108889
		}, {
			"file":	"src/connections.c",
			"line":	1580,
			"primary_score":	1999817,
			"second_score":	108888
		}, {
			"file":	"src/connections.c",
			"line":	1584,
			"primary_score":	1999817,
			"second_score":	108887
		}, {
			"file":	"src/connections.c",
			"line":	1591,
			"primary_score":	1999817,
			"second_score":	108886
		}, {
			"file":	"src/data_array.c",
			"line":	19,
			"primary_score":	1999817,
			"second_score":	1341
		}, {
			"file":	"src/data_array.c",
			"line":	21,
			"primary_score":	1999817,
			"second_score":	1340
		}, {
			"file":	"src/data_array.c",
			"line":	22,
			"primary_score":	1999817,
			"second_score":	1336
		}, {
			"file":	"src/data_array.c",
			"line":	24,
			"primary_score":	1999817,
			"second_score":	1299
		}, {
			"file":	"src/data_array.c",
			"line":	50,
			"primary_score":	1999817,
			"second_score":	487053
		}, {
			"file":	"src/data_array.c",
			"line":	52,
			"primary_score":	1999817,
			"second_score":	487052
		}, {
			"file":	"src/data_array.c",
			"line":	54,
			"primary_score":	1999817,
			"second_score":	487051
		}, {
			"file":	"src/data_array.c",
			"line":	55,
			"primary_score":	1999817,
			"second_score":	487043
		}, {
			"file":	"src/data_array.c",
			"line":	57,
			"primary_score":	1999817,
			"second_score":	487037
		}, {
			"file":	"src/data_array.c",
			"line":	58,
			"primary_score":	1999817,
			"second_score":	487036
		}, {
			"file":	"src/data_array.c",
			"line":	59,
			"primary_score":	1999817,
			"second_score":	487035
		}, {
			"file":	"src/data_array.c",
			"line":	60,
			"primary_score":	1999817,
			"second_score":	487034
		}, {
			"file":	"src/data_array.c",
			"line":	61,
			"primary_score":	1999817,
			"second_score":	487033
		}, {
			"file":	"src/data_array.c",
			"line":	62,
			"primary_score":	1999817,
			"second_score":	487032
		}, {
			"file":	"src/data_array.c",
			"line":	64,
			"primary_score":	1999817,
			"second_score":	487031
		}, {
			"file":	"src/data_config.c",
			"line":	19,
			"primary_score":	1999817,
			"second_score":	1361
		}, {
			"file":	"src/data_config.c",
			"line":	21,
			"primary_score":	1999817,
			"second_score":	1360
		}, {
			"file":	"src/data_config.c",
			"line":	22,
			"primary_score":	1999817,
			"second_score":	1356
		}, {
			"file":	"src/data_config.c",
			"line":	23,
			"primary_score":	1999817,
			"second_score":	1352
		}, {
			"file":	"src/data_config.c",
			"line":	25,
			"primary_score":	1999817,
			"second_score":	1348
		}, {
			"file":	"src/data_config.c",
			"line":	26,
			"primary_score":	1999817,
			"second_score":	1278
		}, {
			"file":	"src/data_config.c",
			"line":	28,
			"primary_score":	1999817,
			"second_score":	1271
		}, {
			"file":	"src/data_config.c",
			"line":	30,
			"primary_score":	1999833,
			"second_score":	1367
		}, {
			"file":	"src/data_config.c",
			"line":	31,
			"primary_score":	1999833,
			"second_score":	1365
		}, {
			"file":	"src/data_config.c",
			"line":	34,
			"primary_score":	1999817,
			"second_score":	1264
		}, {
			"file":	"src/data_integer.c",
			"line":	18,
			"primary_score":	1999817,
			"second_score":	18
		}, {
			"file":	"src/data_integer.c",
			"line":	20,
			"primary_score":	1999817,
			"second_score":	17
		}, {
			"file":	"src/data_integer.c",
			"line":	22,
			"primary_score":	1999817,
			"second_score":	13
		}, {
			"file":	"src/data_integer.c",
			"line":	50,
			"primary_score":	1999817,
			"second_score":	378123
		}, {
			"file":	"src/data_integer.c",
			"line":	52,
			"primary_score":	1999817,
			"second_score":	378122
		}, {
			"file":	"src/data_integer.c",
			"line":	54,
			"primary_score":	1999817,
			"second_score":	378121
		}, {
			"file":	"src/data_integer.c",
			"line":	55,
			"primary_score":	1999817,
			"second_score":	378113
		}, {
			"file":	"src/data_integer.c",
			"line":	57,
			"primary_score":	1999817,
			"second_score":	378112
		}, {
			"file":	"src/data_integer.c",
			"line":	58,
			"primary_score":	1999817,
			"second_score":	378111
		}, {
			"file":	"src/data_integer.c",
			"line":	59,
			"primary_score":	1999817,
			"second_score":	378110
		}, {
			"file":	"src/data_integer.c",
			"line":	60,
			"primary_score":	1999817,
			"second_score":	378109
		}, {
			"file":	"src/data_integer.c",
			"line":	61,
			"primary_score":	1999817,
			"second_score":	378108
		}, {
			"file":	"src/data_integer.c",
			"line":	62,
			"primary_score":	1999817,
			"second_score":	378107
		}, {
			"file":	"src/data_integer.c",
			"line":	64,
			"primary_score":	1999817,
			"second_score":	378106
		}, {
			"file":	"src/data_string.c",
			"line":	19,
			"primary_score":	1999817,
			"second_score":	212
		}, {
			"file":	"src/data_string.c",
			"line":	21,
			"primary_score":	1999817,
			"second_score":	211
		}, {
			"file":	"src/data_string.c",
			"line":	22,
			"primary_score":	1999817,
			"second_score":	207
		}, {
			"file":	"src/data_string.c",
			"line":	24,
			"primary_score":	1999817,
			"second_score":	203
		}, {
			"file":	"src/data_string.c",
			"line":	28,
			"primary_score":	1999817,
			"second_score":	109233
		}, {
			"file":	"src/data_string.c",
			"line":	31,
			"primary_score":	1999817,
			"second_score":	109232
		}, {
			"file":	"src/data_string.c",
			"line":	32,
			"primary_score":	1999817,
			"second_score":	109228
		}, {
			"file":	"src/data_string.c",
			"line":	36,
			"primary_score":	1999829,
			"second_score":	345848
		}, {
			"file":	"src/data_string.c",
			"line":	37,
			"primary_score":	1999829,
			"second_score":	345847
		}, {
			"file":	"src/data_string.c",
			"line":	39,
			"primary_score":	1999829,
			"second_score":	345846
		}, {
			"file":	"src/data_string.c",
			"line":	40,
			"primary_score":	1999829,
			"second_score":	345845
		}, {
			"file":	"src/data_string.c",
			"line":	41,
			"primary_score":	1999829,
			"second_score":	345832
		}, {
			"file":	"src/data_string.c",
			"line":	46,
			"primary_score":	1999829,
			"second_score":	345825
		}, {
			"file":	"src/data_string.c",
			"line":	48,
			"primary_score":	1999829,
			"second_score":	345814
		}, {
			"file":	"src/data_string.c",
			"line":	79,
			"primary_score":	1999817,
			"second_score":	195097
		}, {
			"file":	"src/data_string.c",
			"line":	81,
			"primary_score":	1999817,
			"second_score":	195096
		}, {
			"file":	"src/data_string.c",
			"line":	82,
			"primary_score":	1999817,
			"second_score":	195095
		}, {
			"file":	"src/data_string.c",
			"line":	84,
			"primary_score":	1999817,
			"second_score":	195094
		}, {
			"file":	"src/data_string.c",
			"line":	85,
			"primary_score":	1999817,
			"second_score":	195086
		}, {
			"file":	"src/data_string.c",
			"line":	87,
			"primary_score":	1999817,
			"second_score":	195078
		}, {
			"file":	"src/data_string.c",
			"line":	88,
			"primary_score":	1999817,
			"second_score":	195077
		}, {
			"file":	"src/data_string.c",
			"line":	89,
			"primary_score":	1999817,
			"second_score":	195076
		}, {
			"file":	"src/data_string.c",
			"line":	90,
			"primary_score":	1999817,
			"second_score":	195075
		}, {
			"file":	"src/data_string.c",
			"line":	91,
			"primary_score":	1999817,
			"second_score":	195074
		}, {
			"file":	"src/data_string.c",
			"line":	92,
			"primary_score":	1999817,
			"second_score":	195073
		}, {
			"file":	"src/data_string.c",
			"line":	94,
			"primary_score":	1999817,
			"second_score":	195072
		}, {
			"file":	"src/data_string.c",
			"line":	98,
			"primary_score":	1999817,
			"second_score":	195099
		}, {
			"file":	"src/data_string.c",
			"line":	100,
			"primary_score":	1999817,
			"second_score":	195098
		}, {
			"file":	"src/data_string.c",
			"line":	101,
			"primary_score":	1999817,
			"second_score":	195071
		}, {
			"file":	"src/data_string.c",
			"line":	103,
			"primary_score":	1999817,
			"second_score":	195070
		}, {
			"file":	"src/etag.c",
			"line":	23,
			"primary_score":	1999881,
			"second_score":	140307
		}, {
			"file":	"src/etag.c",
			"line":	25,
			"primary_score":	1999881,
			"second_score":	140306
		}, {
			"file":	"src/etag.c",
			"line":	27,
			"primary_score":	1999881,
			"second_score":	140302
		}, {
			"file":	"src/etag.c",
			"line":	28,
			"primary_score":	1999881,
			"second_score":	140301
		}, {
			"file":	"src/etag.c",
			"line":	29,
			"primary_score":	1999881,
			"second_score":	140248
		}, {
			"file":	"src/etag.c",
			"line":	31,
			"primary_score":	1999881,
			"second_score":	140235
		}, {
			"file":	"src/etag.c",
			"line":	32,
			"primary_score":	1999881,
			"second_score":	140234
		}, {
			"file":	"src/etag.c",
			"line":	33,
			"primary_score":	1999881,
			"second_score":	140197
		}, {
			"file":	"src/etag.c",
			"line":	35,
			"primary_score":	1999881,
			"second_score":	140184
		}, {
			"file":	"src/etag.c",
			"line":	36,
			"primary_score":	1999881,
			"second_score":	140183
		}, {
			"file":	"src/etag.c",
			"line":	38,
			"primary_score":	1999881,
			"second_score":	140119
		}, {
			"file":	"src/fdevent.c",
			"line":	103,
			"primary_score":	1999817,
			"second_score":	265558
		}, {
			"file":	"src/fdevent.c",
			"line":	120,
			"primary_score":	1999817,
			"second_score":	265559
		}, {
			"file":	"src/fdevent.c",
			"line":	122,
			"primary_score":	1999817,
			"second_score":	265557
		}, {
			"file":	"src/fdevent.c",
			"line":	123,
			"primary_score":	1999817,
			"second_score":	265556
		}, {
			"file":	"src/fdevent.c",
			"line":	124,
			"primary_score":	1999817,
			"second_score":	265555
		}, {
			"file":	"src/fdevent.c",
			"line":	146,
			"primary_score":	1999817,
			"second_score":	265343
		}, {
			"file":	"src/fdevent.c",
			"line":	148,
			"primary_score":	1999817,
			"second_score":	265341
		}, {
			"file":	"src/fdevent.c",
			"line":	152,
			"primary_score":	1999817,
			"second_score":	108831
		}, {
			"file":	"src/fdevent.c",
			"line":	154,
			"primary_score":	1999817,
			"second_score":	108830
		}, {
			"file":	"src/fdevent.c",
			"line":	158,
			"primary_score":	1999817,
			"second_score":	265392
		}, {
			"file":	"src/fdevent.c",
			"line":	160,
			"primary_score":	1999817,
			"second_score":	265390
		}, {
			"file":	"src/fdevent.c",
			"line":	164,
			"primary_score":	1999817,
			"second_score":	130307
		}, {
			"file":	"src/fdevent.c",
			"line":	166,
			"primary_score":	1999817,
			"second_score":	130306
		}, {
			"file":	"src/fdevent.c",
			"line":	170,
			"primary_score":	1999817,
			"second_score":	130297
		}, {
			"file":	"src/fdevent.c",
			"line":	172,
			"primary_score":	1999817,
			"second_score":	130296
		}, {
			"file":	"src/fdevent.c",
			"line":	174,
			"primary_score":	1999817,
			"second_score":	265345
		}, {
			"file":	"src/fdevent.c",
			"line":	175,
			"primary_score":	1999817,
			"second_score":	265344
		}, {
			"file":	"src/fdevent.c",
			"line":	178,
			"primary_score":	1999817,
			"second_score":	130295
		}, {
			"file":	"src/fdevent.c",
			"line":	179,
			"primary_score":	1999817,
			"second_score":	130294
		}, {
			"file":	"src/fdevent.c",
			"line":	180,
			"primary_score":	1999817,
			"second_score":	130293
		}, {
			"file":	"src/fdevent.c",
			"line":	184,
			"primary_score":	1999817,
			"second_score":	108836
		}, {
			"file":	"src/fdevent.c",
			"line":	186,
			"primary_score":	1999817,
			"second_score":	108835
		}, {
			"file":	"src/fdevent.c",
			"line":	188,
			"primary_score":	1999817,
			"second_score":	108834
		}, {
			"file":	"src/fdevent.c",
			"line":	189,
			"primary_score":	1999817,
			"second_score":	108833
		}, {
			"file":	"src/fdevent.c",
			"line":	190,
			"primary_score":	1999817,
			"second_score":	108832
		}, {
			"file":	"src/fdevent.c",
			"line":	193,
			"primary_score":	1999817,
			"second_score":	108829
		}, {
			"file":	"src/fdevent.c",
			"line":	195,
			"primary_score":	1999817,
			"second_score":	108828
		}, {
			"file":	"src/fdevent.c",
			"line":	199,
			"primary_score":	1999817,
			"second_score":	265561
		}, {
			"file":	"src/fdevent.c",
			"line":	200,
			"primary_score":	1999817,
			"second_score":	265560
		}, {
			"file":	"src/fdevent.c",
			"line":	202,
			"primary_score":	1999817,
			"second_score":	265554
		}, {
			"file":	"src/fdevent.c",
			"line":	203,
			"primary_score":	1999817,
			"second_score":	265553
		}, {
			"file":	"src/fdevent.c",
			"line":	204,
			"primary_score":	1999817,
			"second_score":	265552
		}, {
			"file":	"src/fdevent.c",
			"line":	206,
			"primary_score":	1999817,
			"second_score":	265551
		}, {
			"file":	"src/fdevent.c",
			"line":	207,
			"primary_score":	1999817,
			"second_score":	265550
		}, {
			"file":	"src/fdevent.c",
			"line":	226,
			"primary_score":	1999817,
			"second_score":	265537
		}, {
			"file":	"src/fdevent.c",
			"line":	230,
			"primary_score":	1999817,
			"second_score":	7214
		}, {
			"file":	"src/fdevent.c",
			"line":	231,
			"primary_score":	1999817,
			"second_score":	7213
		}, {
			"file":	"src/fdevent.c",
			"line":	233,
			"primary_score":	1999817,
			"second_score":	7212
		}, {
			"file":	"src/fdevent.c",
			"line":	235,
			"primary_score":	1999817,
			"second_score":	7207
		}, {
			"file":	"src/fdevent.c",
			"line":	236,
			"primary_score":	1999817,
			"second_score":	6182
		}, {
			"file":	"src/fdevent.c",
			"line":	239,
			"primary_score":	1999817,
			"second_score":	6181
		}, {
			"file":	"src/fdevent.c",
			"line":	240,
			"primary_score":	1999817,
			"second_score":	6180
		}, {
			"file":	"src/fdevent.c",
			"line":	244,
			"primary_score":	1999817,
			"second_score":	265533
		}, {
			"file":	"src/fdevent.c",
			"line":	246,
			"primary_score":	1999817,
			"second_score":	265532
		}, {
			"file":	"src/fdevent.c",
			"line":	250,
			"primary_score":	1999817,
			"second_score":	130551
		}, {
			"file":	"src/fdevent.c",
			"line":	252,
			"primary_score":	1999817,
			"second_score":	130550
		}, {
			"file":	"src/fdevent.c",
			"line":	253,
			"primary_score":	1999817,
			"second_score":	130549
		}, {
			"file":	"src/fdevent.c",
			"line":	255,
			"primary_score":	1999817,
			"second_score":	130548
		}, {
			"file":	"src/fdevent.c",
			"line":	259,
			"primary_score":	1999817,
			"second_score":	108771
		}, {
			"file":	"src/fdevent.c",
			"line":	300,
			"primary_score":	1999817,
			"second_score":	130555
		}, {
			"file":	"src/fdevent.c",
			"line":	301,
			"primary_score":	1999817,
			"second_score":	130554
		}, {
			"file":	"src/fdevent.c",
			"line":	303,
			"primary_score":	1999817,
			"second_score":	130553
		}, {
			"file":	"src/fdevent.c",
			"line":	305,
			"primary_score":	1999817,
			"second_score":	130552
		}, {
			"file":	"src/fdevent.c",
			"line":	306,
			"primary_score":	1999817,
			"second_score":	130547
		}, {
			"file":	"src/fdevent.c",
			"line":	307,
			"primary_score":	1999817,
			"second_score":	130546
		}, {
			"file":	"src/fdevent.c",
			"line":	308,
			"primary_score":	1999817,
			"second_score":	130545
		}, {
			"file":	"src/fdevent.c",
			"line":	310,
			"primary_score":	1999817,
			"second_score":	130544
		}, {
			"file":	"src/fdevent.c",
			"line":	312,
			"primary_score":	1999817,
			"second_score":	130543
		}, {
			"file":	"src/fdevent.c",
			"line":	316,
			"primary_score":	1999817,
			"second_score":	108777
		}, {
			"file":	"src/fdevent.c",
			"line":	317,
			"primary_score":	1999817,
			"second_score":	108776
		}, {
			"file":	"src/fdevent.c",
			"line":	318,
			"primary_score":	1999817,
			"second_score":	108775
		}, {
			"file":	"src/fdevent.c",
			"line":	319,
			"primary_score":	1999817,
			"second_score":	108774
		}, {
			"file":	"src/fdevent.c",
			"line":	321,
			"primary_score":	1999817,
			"second_score":	108773
		}, {
			"file":	"src/fdevent.c",
			"line":	323,
			"primary_score":	1999817,
			"second_score":	108772
		}, {
			"file":	"src/fdevent.c",
			"line":	325,
			"primary_score":	1999817,
			"second_score":	108770
		}, {
			"file":	"src/fdevent.c",
			"line":	327,
			"primary_score":	1999817,
			"second_score":	108769
		}, {
			"file":	"src/fdevent.c",
			"line":	331,
			"primary_score":	1999817,
			"second_score":	108791
		}, {
			"file":	"src/fdevent.c",
			"line":	333,
			"primary_score":	1999817,
			"second_score":	108779
		}, {
			"file":	"src/fdevent.c",
			"line":	337,
			"primary_score":	1999817,
			"second_score":	173297
		}, {
			"file":	"src/fdevent.c",
			"line":	339,
			"primary_score":	1999817,
			"second_score":	173286
		}, {
			"file":	"src/fdevent.c",
			"line":	343,
			"primary_score":	1999817,
			"second_score":	108863
		}, {
			"file":	"src/fdevent.c",
			"line":	344,
			"primary_score":	1999817,
			"second_score":	108862
		}, {
			"file":	"src/fdevent.c",
			"line":	348,
			"primary_score":	1999817,
			"second_score":	130310
		}, {
			"file":	"src/fdevent.c",
			"line":	350,
			"primary_score":	1999817,
			"second_score":	130309
		}, {
			"file":	"src/fdevent.c",
			"line":	352,
			"primary_score":	1999817,
			"second_score":	130308
		}, {
			"file":	"src/fdevent.c",
			"line":	354,
			"primary_score":	1999817,
			"second_score":	130305
		}, {
			"file":	"src/fdevent.c",
			"line":	355,
			"primary_score":	1999817,
			"second_score":	130291
		}, {
			"file":	"src/fdevent.c",
			"line":	358,
			"primary_score":	1999817,
			"second_score":	130290
		}, {
			"file":	"src/fdevent.c",
			"line":	359,
			"primary_score":	1999817,
			"second_score":	130289
		}, {
			"file":	"src/fdevent.c",
			"line":	360,
			"primary_score":	1999817,
			"second_score":	130288
		}, {
			"file":	"src/fdevent.c",
			"line":	362,
			"primary_score":	1999817,
			"second_score":	130287
		}, {
			"file":	"src/fdevent.c",
			"line":	364,
			"primary_score":	1999817,
			"second_score":	130286
		}, {
			"file":	"src/fdevent.c",
			"line":	365,
			"primary_score":	1999817,
			"second_score":	130285
		}, {
			"file":	"src/fdevent.c",
			"line":	368,
			"primary_score":	1999817,
			"second_score":	130284
		}, {
			"file":	"src/fdevent.c",
			"line":	377,
			"primary_score":	1999817,
			"second_score":	130514
		}, {
			"file":	"src/fdevent.c",
			"line":	379,
			"primary_score":	1999817,
			"second_score":	130513
		}, {
			"file":	"src/fdevent.c",
			"line":	381,
			"primary_score":	1999817,
			"second_score":	130512
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	17,
			"primary_score":	1999817,
			"second_score":	7210
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	18,
			"primary_score":	1999817,
			"second_score":	7209
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	22,
			"primary_score":	1999817,
			"second_score":	109595
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	24,
			"primary_score":	1999817,
			"second_score":	108788
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	28,
			"primary_score":	1999817,
			"second_score":	108787
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	29,
			"primary_score":	1999817,
			"second_score":	108786
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	31,
			"primary_score":	1999817,
			"second_score":	108785
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	35,
			"primary_score":	1999817,
			"second_score":	108784
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	36,
			"primary_score":	1999817,
			"second_score":	130232
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	37,
			"primary_score":	1999817,
			"second_score":	130231
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	43,
			"primary_score":	1999817,
			"second_score":	108782
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	48,
			"primary_score":	1999817,
			"second_score":	108781
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	50,
			"primary_score":	1999817,
			"second_score":	108780
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	67,
			"primary_score":	1999817,
			"second_score":	173295
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	78,
			"primary_score":	1999817,
			"second_score":	173294
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	87,
			"primary_score":	1999817,
			"second_score":	173293
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	88,
			"primary_score":	1999817,
			"second_score":	265509
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	89,
			"primary_score":	1999817,
			"second_score":	265508
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	95,
			"primary_score":	1999817,
			"second_score":	173290
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	96,
			"primary_score":	1999817,
			"second_score":	173289
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	98,
			"primary_score":	1999817,
			"second_score":	173288
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	100,
			"primary_score":	1999817,
			"second_score":	173287
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	107,
			"primary_score":	1999817,
			"second_score":	108861
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	111,
			"primary_score":	1999817,
			"second_score":	130304
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	113,
			"primary_score":	1999817,
			"second_score":	130303
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	115,
			"primary_score":	1999817,
			"second_score":	130302
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	116,
			"primary_score":	1999817,
			"second_score":	130300
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	117,
			"primary_score":	1999817,
			"second_score":	130299
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	122,
			"primary_score":	1999817,
			"second_score":	130298
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	126,
			"primary_score":	1999817,
			"second_score":	130292
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	130,
			"primary_score":	1999817,
			"second_score":	265549
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	134,
			"primary_score":	1999817,
			"second_score":	265548
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	135,
			"primary_score":	1999817,
			"second_score":	265546
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	137,
			"primary_score":	1999817,
			"second_score":	265544
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	138,
			"primary_score":	1999817,
			"second_score":	265542
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	140,
			"primary_score":	1999817,
			"second_score":	265540
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	142,
			"primary_score":	1999817,
			"second_score":	265538
		}, {
			"file":	"src/filter.c",
			"line":	21,
			"primary_score":	1999817,
			"second_score":	112398
		}, {
			"file":	"src/filter.c",
			"line":	23,
			"primary_score":	1999817,
			"second_score":	112397
		}, {
			"file":	"src/filter.c",
			"line":	25,
			"primary_score":	1999817,
			"second_score":	112396
		}, {
			"file":	"src/filter.c",
			"line":	26,
			"primary_score":	1999817,
			"second_score":	112395
		}, {
			"file":	"src/filter.c",
			"line":	28,
			"primary_score":	1999817,
			"second_score":	112394
		}, {
			"file":	"src/filter.c",
			"line":	30,
			"primary_score":	1999817,
			"second_score":	112388
		}, {
			"file":	"src/filter.c",
			"line":	37,
			"primary_score":	1999817,
			"second_score":	18463
		}, {
			"file":	"src/filter.c",
			"line":	40,
			"primary_score":	1999817,
			"second_score":	18462
		}, {
			"file":	"src/filter.c",
			"line":	41,
			"primary_score":	1999817,
			"second_score":	18461
		}, {
			"file":	"src/filter.c",
			"line":	45,
			"primary_score":	1999817,
			"second_score":	18456
		}, {
			"file":	"src/filter.c",
			"line":	46,
			"primary_score":	1999817,
			"second_score":	18455
		}, {
			"file":	"src/filter.c",
			"line":	48,
			"primary_score":	1999817,
			"second_score":	18454
		}, {
			"file":	"src/filter.c",
			"line":	51,
			"primary_score":	1999817,
			"second_score":	18453
		}, {
			"file":	"src/filter.c",
			"line":	52,
			"primary_score":	1999827,
			"second_score":	112348
		}, {
			"file":	"src/filter.c",
			"line":	55,
			"primary_score":	1999817,
			"second_score":	18452
		}, {
			"file":	"src/filter.c",
			"line":	63,
			"primary_score":	1999817,
			"second_score":	18792
		}, {
			"file":	"src/filter.c",
			"line":	64,
			"primary_score":	1999817,
			"second_score":	18791
		}, {
			"file":	"src/filter.c",
			"line":	74,
			"primary_score":	1999817,
			"second_score":	221919
		}, {
			"file":	"src/filter.c",
			"line":	76,
			"primary_score":	1999817,
			"second_score":	221918
		}, {
			"file":	"src/filter.c",
			"line":	78,
			"primary_score":	1999817,
			"second_score":	221917
		}, {
			"file":	"src/filter.c",
			"line":	79,
			"primary_score":	1999817,
			"second_score":	221916
		}, {
			"file":	"src/filter.c",
			"line":	80,
			"primary_score":	1999817,
			"second_score":	221915
		}, {
			"file":	"src/filter.c",
			"line":	82,
			"primary_score":	1999817,
			"second_score":	221893
		}, {
			"file":	"src/filter.c",
			"line":	86,
			"primary_score":	1999817,
			"second_score":	18468
		}, {
			"file":	"src/filter.c",
			"line":	87,
			"primary_score":	1999817,
			"second_score":	18467
		}, {
			"file":	"src/filter.c",
			"line":	90,
			"primary_score":	1999817,
			"second_score":	18466
		}, {
			"file":	"src/filter.c",
			"line":	91,
			"primary_score":	1999817,
			"second_score":	18465
		}, {
			"file":	"src/filter.c",
			"line":	95,
			"primary_score":	1999817,
			"second_score":	18464
		}, {
			"file":	"src/filter.c",
			"line":	97,
			"primary_score":	1999817,
			"second_score":	18451
		}, {
			"file":	"src/filter.c",
			"line":	101,
			"primary_score":	1999817,
			"second_score":	18797
		}, {
			"file":	"src/filter.c",
			"line":	102,
			"primary_score":	1999817,
			"second_score":	18796
		}, {
			"file":	"src/filter.c",
			"line":	105,
			"primary_score":	1999817,
			"second_score":	18795
		}, {
			"file":	"src/filter.c",
			"line":	106,
			"primary_score":	1999817,
			"second_score":	18794
		}, {
			"file":	"src/filter.c",
			"line":	110,
			"primary_score":	1999817,
			"second_score":	18793
		}, {
			"file":	"src/filter.c",
			"line":	111,
			"primary_score":	1999817,
			"second_score":	18781
		}, {
			"file":	"src/filter.c",
			"line":	115,
			"primary_score":	1999817,
			"second_score":	112401
		}, {
			"file":	"src/filter.c",
			"line":	116,
			"primary_score":	1999817,
			"second_score":	112400
		}, {
			"file":	"src/filter.c",
			"line":	118,
			"primary_score":	1999817,
			"second_score":	112399
		}, {
			"file":	"src/filter.c",
			"line":	119,
			"primary_score":	1999817,
			"second_score":	112387
		}, {
			"file":	"src/filter.c",
			"line":	121,
			"primary_score":	1999817,
			"second_score":	112386
		}, {
			"file":	"src/filter.c",
			"line":	122,
			"primary_score":	1999827,
			"second_score":	112385
		}, {
			"file":	"src/filter.c",
			"line":	124,
			"primary_score":	1999817,
			"second_score":	112384
		}, {
			"file":	"src/filter.c",
			"line":	125,
			"primary_score":	1999817,
			"second_score":	112383
		}, {
			"file":	"src/filter.c",
			"line":	126,
			"primary_score":	1999817,
			"second_score":	112382
		}, {
			"file":	"src/filter.c",
			"line":	127,
			"primary_score":	1999817,
			"second_score":	221895
		}, {
			"file":	"src/filter.c",
			"line":	130,
			"primary_score":	1999817,
			"second_score":	112381
		}, {
			"file":	"src/filter.c",
			"line":	134,
			"primary_score":	1999827,
			"second_score":	112411
		}, {
			"file":	"src/filter.c",
			"line":	135,
			"primary_score":	1999827,
			"second_score":	112410
		}, {
			"file":	"src/filter.c",
			"line":	138,
			"primary_score":	1999827,
			"second_score":	112409
		}, {
			"file":	"src/filter.c",
			"line":	139,
			"primary_score":	1999827,
			"second_score":	112408
		}, {
			"file":	"src/filter.c",
			"line":	140,
			"primary_score":	1999827,
			"second_score":	112407
		}, {
			"file":	"src/filter.c",
			"line":	141,
			"primary_score":	1999827,
			"second_score":	112406
		}, {
			"file":	"src/filter.c",
			"line":	144,
			"primary_score":	1999827,
			"second_score":	112405
		}, {
			"file":	"src/filter.c",
			"line":	148,
			"primary_score":	1999827,
			"second_score":	112364
		}, {
			"file":	"src/filter.c",
			"line":	150,
			"primary_score":	1999827,
			"second_score":	112363
		}, {
			"file":	"src/filter.c",
			"line":	153,
			"primary_score":	1999827,
			"second_score":	112362
		}, {
			"file":	"src/filter.c",
			"line":	154,
			"primary_score":	1999827,
			"second_score":	112361
		}, {
			"file":	"src/filter.c",
			"line":	156,
			"primary_score":	1999827,
			"second_score":	112360
		}, {
			"file":	"src/filter.c",
			"line":	163,
			"primary_score":	1999817,
			"second_score":	110892
		}, {
			"file":	"src/filter.c",
			"line":	164,
			"primary_score":	1999817,
			"second_score":	110891
		}, {
			"file":	"src/filter.c",
			"line":	166,
			"primary_score":	1999817,
			"second_score":	110890
		}, {
			"file":	"src/filter.c",
			"line":	167,
			"primary_score":	1999817,
			"second_score":	110889
		}, {
			"file":	"src/filter.c",
			"line":	169,
			"primary_score":	1999817,
			"second_score":	110888
		}, {
			"file":	"src/filter.c",
			"line":	170,
			"primary_score":	1999817,
			"second_score":	110887
		}, {
			"file":	"src/filter.c",
			"line":	171,
			"primary_score":	1999817,
			"second_score":	110824
		}, {
			"file":	"src/filter.c",
			"line":	172,
			"primary_score":	1999817,
			"second_score":	110823
		}, {
			"file":	"src/filter.c",
			"line":	174,
			"primary_score":	1999817,
			"second_score":	110822
		}, {
			"file":	"src/filter.c",
			"line":	176,
			"primary_score":	1999817,
			"second_score":	110783
		}, {
			"file":	"src/filter.c",
			"line":	177,
			"primary_score":	1999817,
			"second_score":	110782
		}, {
			"file":	"src/filter.c",
			"line":	180,
			"primary_score":	1999817,
			"second_score":	110781
		}, {
			"file":	"src/http-header-glue.c",
			"line":	82,
			"primary_score":	1999817,
			"second_score":	111796
		}, {
			"file":	"src/http-header-glue.c",
			"line":	84,
			"primary_score":	1999817,
			"second_score":	111795
		}, {
			"file":	"src/http-header-glue.c",
			"line":	86,
			"primary_score":	1999817,
			"second_score":	111794
		}, {
			"file":	"src/http-header-glue.c",
			"line":	87,
			"primary_score":	1999817,
			"second_score":	195100
		}, {
			"file":	"src/http-header-glue.c",
			"line":	89,
			"primary_score":	1999817,
			"second_score":	111756
		}, {
			"file":	"src/http-header-glue.c",
			"line":	90,
			"primary_score":	1999817,
			"second_score":	111740
		}, {
			"file":	"src/http-header-glue.c",
			"line":	92,
			"primary_score":	1999817,
			"second_score":	111724
		}, {
			"file":	"src/http-header-glue.c",
			"line":	94,
			"primary_score":	1999817,
			"second_score":	111579
		}, {
			"file":	"src/http-header-glue.c",
			"line":	98,
			"primary_score":	1999817,
			"second_score":	111894
		}, {
			"file":	"src/http-header-glue.c",
			"line":	100,
			"primary_score":	1999817,
			"second_score":	111893
		}, {
			"file":	"src/http-header-glue.c",
			"line":	103,
			"primary_score":	1999817,
			"second_score":	111892
		}, {
			"file":	"src/http-header-glue.c",
			"line":	109,
			"primary_score":	1999817,
			"second_score":	111797
		}, {
			"file":	"src/http_req.c",
			"line":	32,
			"primary_score":	1999817,
			"second_score":	221850
		}, {
			"file":	"src/http_req.c",
			"line":	34,
			"primary_score":	1999817,
			"second_score":	221849
		}, {
			"file":	"src/http_req.c",
			"line":	35,
			"primary_score":	1999817,
			"second_score":	221841
		}, {
			"file":	"src/http_req.c",
			"line":	37,
			"primary_score":	1999817,
			"second_score":	221835
		}, {
			"file":	"src/http_req.c",
			"line":	41,
			"primary_score":	1999817,
			"second_score":	18758
		}, {
			"file":	"src/http_req.c",
			"line":	43,
			"primary_score":	1999817,
			"second_score":	18757
		}, {
			"file":	"src/http_req.c",
			"line":	44,
			"primary_score":	1999817,
			"second_score":	18753
		}, {
			"file":	"src/http_req.c",
			"line":	49,
			"primary_score":	1999817,
			"second_score":	18307
		}, {
			"file":	"src/http_req.c",
			"line":	51,
			"primary_score":	1999817,
			"second_score":	18306
		}, {
			"file":	"src/http_req.c",
			"line":	52,
			"primary_score":	1999817,
			"second_score":	18302
		}, {
			"file":	"src/http_req.c",
			"line":	54,
			"primary_score":	1999817,
			"second_score":	18294
		}, {
			"file":	"src/http_req.c",
			"line":	58,
			"primary_score":	1999817,
			"second_score":	128731
		}, {
			"file":	"src/http_req.c",
			"line":	62,
			"primary_score":	1999817,
			"second_score":	128730
		}, {
			"file":	"src/http_req.c",
			"line":	75,
			"primary_score":	1999817,
			"second_score":	128729
		}, {
			"file":	"src/http_req.c",
			"line":	77,
			"primary_score":	1999817,
			"second_score":	128728
		}, {
			"file":	"src/http_req.c",
			"line":	78,
			"primary_score":	1999817,
			"second_score":	128727
		}, {
			"file":	"src/http_req.c",
			"line":	84,
			"primary_score":	1999817,
			"second_score":	128726
		}, {
			"file":	"src/http_req.c",
			"line":	88,
			"primary_score":	1999817,
			"second_score":	128724
		}, {
			"file":	"src/http_req.c",
			"line":	91,
			"primary_score":	1999817,
			"second_score":	128723
		}, {
			"file":	"src/http_req.c",
			"line":	105,
			"primary_score":	1999817,
			"second_score":	128722
		}, {
			"file":	"src/http_req.c",
			"line":	110,
			"primary_score":	1999817,
			"second_score":	128721
		}, {
			"file":	"src/http_req.c",
			"line":	125,
			"primary_score":	1999817,
			"second_score":	128734
		}, {
			"file":	"src/http_req.c",
			"line":	126,
			"primary_score":	1999817,
			"second_score":	128733
		}, {
			"file":	"src/http_req.c",
			"line":	130,
			"primary_score":	1999817,
			"second_score":	128732
		}, {
			"file":	"src/http_req.c",
			"line":	131,
			"primary_score":	1999817,
			"second_score":	128725
		}, {
			"file":	"src/http_req.c",
			"line":	135,
			"primary_score":	1999865,
			"second_score":	129058
		}, {
			"file":	"src/http_req.c",
			"line":	137,
			"primary_score":	1999865,
			"second_score":	129057
		}, {
			"file":	"src/http_req.c",
			"line":	147,
			"primary_score":	1999818,
			"second_score":	128994
		}, {
			"file":	"src/http_req.c",
			"line":	151,
			"primary_score":	1999817,
			"second_score":	128720
		}, {
			"file":	"src/http_req.c",
			"line":	152,
			"primary_score":	1999817,
			"second_score":	128719
		}, {
			"file":	"src/http_req.c",
			"line":	154,
			"primary_score":	1999817,
			"second_score":	128718
		}, {
			"file":	"src/http_req.c",
			"line":	155,
			"primary_score":	1999817,
			"second_score":	128717
		}, {
			"file":	"src/http_req.c",
			"line":	157,
			"primary_score":	1999817,
			"second_score":	128716
		}, {
			"file":	"src/http_req.c",
			"line":	158,
			"primary_score":	1999817,
			"second_score":	128715
		}, {
			"file":	"src/http_req.c",
			"line":	163,
			"primary_score":	1999817,
			"second_score":	128714
		}, {
			"file":	"src/http_req.c",
			"line":	173,
			"primary_score":	1999817,
			"second_score":	128888
		}, {
			"file":	"src/http_req.c",
			"line":	174,
			"primary_score":	1999818,
			"second_score":	129599
		}, {
			"file":	"src/http_req.c",
			"line":	176,
			"primary_score":	1999865,
			"second_score":	128887
		}, {
			"file":	"src/http_req.c",
			"line":	177,
			"primary_score":	1999866,
			"second_score":	129138
		}, {
			"file":	"src/http_req.c",
			"line":	178,
			"primary_score":	1999865,
			"second_score":	129147
		}, {
			"file":	"src/http_req.c",
			"line":	181,
			"primary_score":	1999817,
			"second_score":	128886
		}, {
			"file":	"src/http_req.c",
			"line":	184,
			"primary_score":	1999817,
			"second_score":	128881
		}, {
			"file":	"src/http_req.c",
			"line":	191,
			"primary_score":	1999817,
			"second_score":	128880
		}, {
			"file":	"src/http_req.c",
			"line":	194,
			"primary_score":	1999817,
			"second_score":	128879
		}, {
			"file":	"src/http_req.c",
			"line":	197,
			"primary_score":	1999817,
			"second_score":	128878
		}, {
			"file":	"src/http_req.c",
			"line":	198,
			"primary_score":	1999817,
			"second_score":	128877
		}, {
			"file":	"src/http_req.c",
			"line":	213,
			"primary_score":	1999817,
			"second_score":	128861
		}, {
			"file":	"src/http_req.c",
			"line":	215,
			"primary_score":	1999817,
			"second_score":	128860
		}, {
			"file":	"src/http_req.c",
			"line":	219,
			"primary_score":	1999817,
			"second_score":	128713
		}, {
			"file":	"src/http_req.c",
			"line":	220,
			"primary_score":	1999817,
			"second_score":	128712
		}, {
			"file":	"src/http_req.c",
			"line":	222,
			"primary_score":	1999817,
			"second_score":	128711
		}, {
			"file":	"src/http_req.c",
			"line":	229,
			"primary_score":	1999817,
			"second_score":	130165
		}, {
			"file":	"src/http_req.c",
			"line":	230,
			"primary_score":	1999817,
			"second_score":	130164
		}, {
			"file":	"src/http_req.c",
			"line":	231,
			"primary_score":	1999817,
			"second_score":	130163
		}, {
			"file":	"src/http_req.c",
			"line":	232,
			"primary_score":	1999817,
			"second_score":	130162
		}, {
			"file":	"src/http_req.c",
			"line":	233,
			"primary_score":	1999817,
			"second_score":	130161
		}, {
			"file":	"src/http_req.c",
			"line":	234,
			"primary_score":	1999817,
			"second_score":	130160
		}, {
			"file":	"src/http_req.c",
			"line":	235,
			"primary_score":	1999817,
			"second_score":	130159
		}, {
			"file":	"src/http_req.c",
			"line":	237,
			"primary_score":	1999817,
			"second_score":	130158
		}, {
			"file":	"src/http_req.c",
			"line":	238,
			"primary_score":	1999817,
			"second_score":	130157
		}, {
			"file":	"src/http_req.c",
			"line":	239,
			"primary_score":	1999817,
			"second_score":	130156
		}, {
			"file":	"src/http_req.c",
			"line":	240,
			"primary_score":	1999817,
			"second_score":	130155
		}, {
			"file":	"src/http_req.c",
			"line":	241,
			"primary_score":	1999817,
			"second_score":	130154
		}, {
			"file":	"src/http_req.c",
			"line":	242,
			"primary_score":	1999817,
			"second_score":	130153
		}, {
			"file":	"src/http_req.c",
			"line":	244,
			"primary_score":	1999817,
			"second_score":	130152
		}, {
			"file":	"src/http_req.c",
			"line":	245,
			"primary_score":	1999817,
			"second_score":	130151
		}, {
			"file":	"src/http_req.c",
			"line":	246,
			"primary_score":	1999817,
			"second_score":	130143
		}, {
			"file":	"src/http_req.c",
			"line":	247,
			"primary_score":	1999817,
			"second_score":	130142
		}, {
			"file":	"src/http_req.c",
			"line":	249,
			"primary_score":	1999817,
			"second_score":	130138
		}, {
			"file":	"src/http_req.c",
			"line":	250,
			"primary_score":	1999817,
			"second_score":	130132
		}, {
			"file":	"src/http_req.c",
			"line":	252,
			"primary_score":	1999817,
			"second_score":	130124
		}, {
			"file":	"src/http_req.c",
			"line":	254,
			"primary_score":	1999817,
			"second_score":	130118
		}, {
			"file":	"src/http_req.c",
			"line":	255,
			"primary_score":	1999817,
			"second_score":	128710
		}, {
			"file":	"src/http_req.c",
			"line":	257,
			"primary_score":	1999817,
			"second_score":	128453
		}, {
			"file":	"src/http_req.c",
			"line":	260,
			"primary_score":	1999817,
			"second_score":	128444
		}, {
			"file":	"src/http_req.c",
			"line":	261,
			"primary_score":	1999824,
			"second_score":	128443
		}, {
			"file":	"src/http_req.c",
			"line":	263,
			"primary_score":	1999817,
			"second_score":	128735
		}, {
			"file":	"src/http_req.c",
			"line":	267,
			"primary_score":	1999817,
			"second_score":	128442
		}, {
			"file":	"src/http_req.c",
			"line":	290,
			"primary_score":	1999817,
			"second_score":	128441
		}, {
			"file":	"src/http_req.c",
			"line":	291,
			"primary_score":	1999817,
			"second_score":	128340
		}, {
			"file":	"src/http_req.c",
			"line":	293,
			"primary_score":	1999817,
			"second_score":	128335
		}, {
			"file":	"src/http_req.c",
			"line":	304,
			"primary_score":	1999824,
			"second_score":	128334
		}, {
			"file":	"src/http_req.c",
			"line":	306,
			"primary_score":	1999824,
			"second_score":	128333
		}, {
			"file":	"src/http_req.c",
			"line":	310,
			"primary_score":	1999824,
			"second_score":	128332
		}, {
			"file":	"src/http_req.c",
			"line":	312,
			"primary_score":	1999824,
			"second_score":	128331
		}, {
			"file":	"src/http_req.c",
			"line":	315,
			"primary_score":	1999817,
			"second_score":	128330
		}, {
			"file":	"src/http_req.c",
			"line":	316,
			"primary_score":	1999817,
			"second_score":	128325
		}, {
			"file":	"src/http_req.c",
			"line":	317,
			"primary_score":	1999817,
			"second_score":	128298
		}, {
			"file":	"src/http_req.c",
			"line":	319,
			"primary_score":	1999817,
			"second_score":	128294
		}, {
			"file":	"src/http_req_parser.c",
			"line":	309,
			"primary_score":	1999817,
			"second_score":	130137
		}, {
			"file":	"src/http_req_parser.c",
			"line":	310,
			"primary_score":	1999817,
			"second_score":	130136
		}, {
			"file":	"src/http_req_parser.c",
			"line":	311,
			"primary_score":	1999817,
			"second_score":	130135
		}, {
			"file":	"src/http_req_parser.c",
			"line":	312,
			"primary_score":	1999817,
			"second_score":	130134
		}, {
			"file":	"src/http_req_parser.c",
			"line":	314,
			"primary_score":	1999817,
			"second_score":	130133
		}, {
			"file":	"src/http_req_parser.c",
			"line":	323,
			"primary_score":	1999817,
			"second_score":	128345
		}, {
			"file":	"src/http_req_parser.c",
			"line":	339,
			"primary_score":	1999817,
			"second_score":	128376
		}, {
			"file":	"src/http_req_parser.c",
			"line":	341,
			"primary_score":	1999817,
			"second_score":	128372
		}, {
			"file":	"src/http_req_parser.c",
			"line":	355,
			"primary_score":	1999817,
			"second_score":	128351
		}, {
			"file":	"src/http_req_parser.c",
			"line":	356,
			"primary_score":	1999817,
			"second_score":	128350
		}, {
			"file":	"src/http_req_parser.c",
			"line":	358,
			"primary_score":	1999817,
			"second_score":	128349
		}, {
			"file":	"src/http_req_parser.c",
			"line":	360,
			"primary_score":	1999817,
			"second_score":	128348
		}, {
			"file":	"src/http_req_parser.c",
			"line":	366,
			"primary_score":	1999817,
			"second_score":	128347
		}, {
			"file":	"src/http_req_parser.c",
			"line":	367,
			"primary_score":	1999817,
			"second_score":	128346
		}, {
			"file":	"src/http_req_parser.c",
			"line":	368,
			"primary_score":	1999817,
			"second_score":	128344
		}, {
			"file":	"src/http_req_parser.c",
			"line":	369,
			"primary_score":	1999817,
			"second_score":	128343
		}, {
			"file":	"src/http_req_parser.c",
			"line":	388,
			"primary_score":	1999817,
			"second_score":	128339
		}, {
			"file":	"src/http_req_parser.c",
			"line":	389,
			"primary_score":	1999817,
			"second_score":	128338
		}, {
			"file":	"src/http_req_parser.c",
			"line":	390,
			"primary_score":	1999817,
			"second_score":	128337
		}, {
			"file":	"src/http_req_parser.c",
			"line":	391,
			"primary_score":	1999817,
			"second_score":	128336
		}, {
			"file":	"src/http_req_parser.c",
			"line":	406,
			"primary_score":	1999817,
			"second_score":	128427
		}, {
			"file":	"src/http_req_parser.c",
			"line":	407,
			"primary_score":	1999817,
			"second_score":	128426
		}, {
			"file":	"src/http_req_parser.c",
			"line":	410,
			"primary_score":	1999817,
			"second_score":	128425
		}, {
			"file":	"src/http_req_parser.c",
			"line":	411,
			"primary_score":	1999817,
			"second_score":	128424
		}, {
			"file":	"src/http_req_parser.c",
			"line":	412,
			"primary_score":	1999868,
			"second_score":	128512
		}, {
			"file":	"src/http_req_parser.c",
			"line":	414,
			"primary_score":	1999817,
			"second_score":	128423
		}, {
			"file":	"src/http_req_parser.c",
			"line":	417,
			"primary_score":	1999817,
			"second_score":	128422
		}, {
			"file":	"src/http_req_parser.c",
			"line":	418,
			"primary_score":	1999817,
			"second_score":	128421
		}, {
			"file":	"src/http_req_parser.c",
			"line":	432,
			"primary_score":	1999862,
			"second_score":	128689
		}, {
			"file":	"src/http_req_parser.c",
			"line":	434,
			"primary_score":	1999817,
			"second_score":	128420
		}, {
			"file":	"src/http_req_parser.c",
			"line":	450,
			"primary_score":	1999818,
			"second_score":	128365
		}, {
			"file":	"src/http_req_parser.c",
			"line":	451,
			"primary_score":	1999818,
			"second_score":	128364
		}, {
			"file":	"src/http_req_parser.c",
			"line":	453,
			"primary_score":	1999818,
			"second_score":	128363
		}, {
			"file":	"src/http_req_parser.c",
			"line":	454,
			"primary_score":	1999818,
			"second_score":	128362
		}, {
			"file":	"src/http_req_parser.c",
			"line":	457,
			"primary_score":	1999818,
			"second_score":	128361
		}, {
			"file":	"src/http_req_parser.c",
			"line":	460,
			"primary_score":	1999818,
			"second_score":	128360
		}, {
			"file":	"src/http_req_parser.c",
			"line":	461,
			"primary_score":	1999818,
			"second_score":	128359
		}, {
			"file":	"src/http_req_parser.c",
			"line":	464,
			"primary_score":	1999818,
			"second_score":	128358
		}, {
			"file":	"src/http_req_parser.c",
			"line":	477,
			"primary_score":	1999817,
			"second_score":	128465
		}, {
			"file":	"src/http_req_parser.c",
			"line":	478,
			"primary_score":	1999817,
			"second_score":	128464
		}, {
			"file":	"src/http_req_parser.c",
			"line":	479,
			"primary_score":	1999817,
			"second_score":	128463
		}, {
			"file":	"src/http_req_parser.c",
			"line":	493,
			"primary_score":	1999817,
			"second_score":	128462
		}, {
			"file":	"src/http_req_parser.c",
			"line":	494,
			"primary_score":	1999817,
			"second_score":	128461
		}, {
			"file":	"src/http_req_parser.c",
			"line":	495,
			"primary_score":	1999817,
			"second_score":	128460
		}, {
			"file":	"src/http_req_parser.c",
			"line":	496,
			"primary_score":	1999817,
			"second_score":	128459
		}, {
			"file":	"src/http_req_parser.c",
			"line":	498,
			"primary_score":	1999817,
			"second_score":	128458
		}, {
			"file":	"src/http_req_parser.c",
			"line":	540,
			"primary_score":	1999818,
			"second_score":	128416
		}, {
			"file":	"src/http_req_parser.c",
			"line":	541,
			"primary_score":	1999818,
			"second_score":	128415
		}, {
			"file":	"src/http_req_parser.c",
			"line":	542,
			"primary_score":	1999818,
			"second_score":	128414
		}, {
			"file":	"src/http_req_parser.c",
			"line":	543,
			"primary_score":	1999818,
			"second_score":	128413
		}, {
			"file":	"src/http_req_parser.c",
			"line":	544,
			"primary_score":	1999818,
			"second_score":	128412
		}, {
			"file":	"src/http_req_parser.c",
			"line":	545,
			"primary_score":	1999818,
			"second_score":	128411
		}, {
			"file":	"src/http_req_parser.c",
			"line":	546,
			"primary_score":	1999818,
			"second_score":	128410
		}, {
			"file":	"src/http_req_parser.c",
			"line":	548,
			"primary_score":	1999818,
			"second_score":	128409
		}, {
			"file":	"src/http_req_parser.c",
			"line":	555,
			"primary_score":	1999818,
			"second_score":	128408
		}, {
			"file":	"src/http_req_parser.c",
			"line":	567,
			"primary_score":	1999868,
			"second_score":	128407
		}, {
			"file":	"src/http_req_parser.c",
			"line":	569,
			"primary_score":	1999868,
			"second_score":	128406
		}, {
			"file":	"src/http_req_parser.c",
			"line":	570,
			"primary_score":	1999868,
			"second_score":	128405
		}, {
			"file":	"src/http_req_parser.c",
			"line":	571,
			"primary_score":	1999868,
			"second_score":	128404
		}, {
			"file":	"src/http_req_parser.c",
			"line":	572,
			"primary_score":	1999868,
			"second_score":	128390
		}, {
			"file":	"src/http_req_parser.c",
			"line":	575,
			"primary_score":	1999868,
			"second_score":	128385
		}, {
			"file":	"src/http_req_parser.c",
			"line":	577,
			"primary_score":	1999868,
			"second_score":	128378
		}, {
			"file":	"src/http_req_parser.c",
			"line":	578,
			"primary_score":	1999868,
			"second_score":	128371
		}, {
			"file":	"src/http_req_parser.c",
			"line":	627,
			"primary_score":	1999818,
			"second_score":	129539
		}, {
			"file":	"src/http_req_parser.c",
			"line":	629,
			"primary_score":	1999818,
			"second_score":	129531
		}, {
			"file":	"src/http_req_parser.c",
			"line":	632,
			"primary_score":	1999818,
			"second_score":	129525
		}, {
			"file":	"src/http_req_parser.c",
			"line":	639,
			"primary_score":	1999821,
			"second_score":	129266
		}, {
			"file":	"src/http_req_parser.c",
			"line":	641,
			"primary_score":	1999821,
			"second_score":	129265
		}, {
			"file":	"src/http_req_parser.c",
			"line":	642,
			"primary_score":	1999822,
			"second_score":	129264
		}, {
			"file":	"src/http_req_parser.c",
			"line":	644,
			"primary_score":	1999822,
			"second_score":	129263
		}, {
			"file":	"src/http_req_parser.c",
			"line":	646,
			"primary_score":	1999822,
			"second_score":	129262
		}, {
			"file":	"src/http_req_parser.c",
			"line":	647,
			"primary_score":	1999822,
			"second_score":	129261
		}, {
			"file":	"src/http_req_parser.c",
			"line":	648,
			"primary_score":	1999822,
			"second_score":	129260
		}, {
			"file":	"src/http_req_parser.c",
			"line":	649,
			"primary_score":	1999822,
			"second_score":	129259
		}, {
			"file":	"src/http_req_parser.c",
			"line":	650,
			"primary_score":	1999822,
			"second_score":	129258
		}, {
			"file":	"src/http_req_parser.c",
			"line":	651,
			"primary_score":	1999822,
			"second_score":	129257
		}, {
			"file":	"src/http_req_parser.c",
			"line":	652,
			"primary_score":	1999822,
			"second_score":	129256
		}, {
			"file":	"src/http_req_parser.c",
			"line":	653,
			"primary_score":	1999824,
			"second_score":	129255
		}, {
			"file":	"src/http_req_parser.c",
			"line":	654,
			"primary_score":	1999824,
			"second_score":	129254
		}, {
			"file":	"src/http_req_parser.c",
			"line":	655,
			"primary_score":	1999824,
			"second_score":	129253
		}, {
			"file":	"src/http_req_parser.c",
			"line":	657,
			"primary_score":	1999833,
			"second_score":	129252
		}, {
			"file":	"src/http_req_parser.c",
			"line":	658,
			"primary_score":	1999835,
			"second_score":	129251
		}, {
			"file":	"src/http_req_parser.c",
			"line":	665,
			"primary_score":	1999821,
			"second_score":	129250
		}, {
			"file":	"src/http_req_parser.c",
			"line":	668,
			"primary_score":	1999821,
			"second_score":	129245
		}, {
			"file":	"src/http_req_parser.c",
			"line":	679,
			"primary_score":	1999869,
			"second_score":	128625
		}, {
			"file":	"src/http_req_parser.c",
			"line":	681,
			"primary_score":	1999869,
			"second_score":	128624
		}, {
			"file":	"src/http_req_parser.c",
			"line":	682,
			"primary_score":	1999869,
			"second_score":	218571
		}, {
			"file":	"src/http_req_parser.c",
			"line":	685,
			"primary_score":	1999869,
			"second_score":	128615
		}, {
			"file":	"src/http_req_parser.c",
			"line":	686,
			"primary_score":	1999869,
			"second_score":	128601
		}, {
			"file":	"src/http_req_parser.c",
			"line":	687,
			"primary_score":	1999869,
			"second_score":	128587
		}, {
			"file":	"src/http_req_parser.c",
			"line":	688,
			"primary_score":	1999869,
			"second_score":	128582
		}, {
			"file":	"src/http_req_parser.c",
			"line":	690,
			"primary_score":	1999869,
			"second_score":	128577
		}, {
			"file":	"src/http_req_parser.c",
			"line":	693,
			"primary_score":	1999869,
			"second_score":	128548
		}, {
			"file":	"src/http_req_parser.c",
			"line":	694,
			"primary_score":	1999869,
			"second_score":	128541
		}, {
			"file":	"src/http_req_parser.c",
			"line":	716,
			"primary_score":	1999869,
			"second_score":	128676
		}, {
			"file":	"src/http_req_parser.c",
			"line":	718,
			"primary_score":	1999869,
			"second_score":	128675
		}, {
			"file":	"src/http_req_parser.c",
			"line":	721,
			"primary_score":	1999869,
			"second_score":	128674
		}, {
			"file":	"src/http_req_parser.c",
			"line":	722,
			"primary_score":	1999869,
			"second_score":	128667
		}, {
			"file":	"src/http_req_parser.c",
			"line":	723,
			"primary_score":	1999818,
			"second_score":	128370
		}, {
			"file":	"src/http_req_parser.c",
			"line":	724,
			"primary_score":	1999818,
			"second_score":	128369
		}, {
			"file":	"src/http_req_parser.c",
			"line":	725,
			"primary_score":	1999818,
			"second_score":	128368
		}, {
			"file":	"src/http_req_parser.c",
			"line":	726,
			"primary_score":	1999818,
			"second_score":	128367
		}, {
			"file":	"src/http_req_parser.c",
			"line":	727,
			"primary_score":	1999818,
			"second_score":	128366
		}, {
			"file":	"src/http_req_parser.c",
			"line":	728,
			"primary_score":	1999818,
			"second_score":	128357
		}, {
			"file":	"src/http_req_parser.c",
			"line":	729,
			"primary_score":	1999818,
			"second_score":	128485
		}, {
			"file":	"src/http_req_parser.c",
			"line":	730,
			"primary_score":	1999824,
			"second_score":	128356
		}, {
			"file":	"src/http_req_parser.c",
			"line":	731,
			"primary_score":	1999824,
			"second_score":	128355
		}, {
			"file":	"src/http_req_parser.c",
			"line":	779,
			"primary_score":	1999824,
			"second_score":	128354
		}, {
			"file":	"src/http_req_parser.c",
			"line":	781,
			"primary_score":	1999824,
			"second_score":	128353
		}, {
			"file":	"src/http_req_parser.c",
			"line":	785,
			"primary_score":	1999824,
			"second_score":	128352
		}, {
			"file":	"src/http_req_parser.c",
			"line":	788,
			"primary_score":	1999824,
			"second_score":	128342
		}, {
			"file":	"src/http_req_parser.c",
			"line":	816,
			"primary_score":	1999817,
			"second_score":	128440
		}, {
			"file":	"src/http_req_parser.c",
			"line":	817,
			"primary_score":	1999817,
			"second_score":	128439
		}, {
			"file":	"src/http_req_parser.c",
			"line":	818,
			"primary_score":	1999817,
			"second_score":	128438
		}, {
			"file":	"src/http_req_parser.c",
			"line":	819,
			"primary_score":	1999817,
			"second_score":	128437
		}, {
			"file":	"src/http_req_parser.c",
			"line":	820,
			"primary_score":	1999817,
			"second_score":	128436
		}, {
			"file":	"src/http_req_parser.c",
			"line":	823,
			"primary_score":	1999817,
			"second_score":	128435
		}, {
			"file":	"src/http_req_parser.c",
			"line":	824,
			"primary_score":	1999817,
			"second_score":	128434
		}, {
			"file":	"src/http_req_parser.c",
			"line":	825,
			"primary_score":	1999817,
			"second_score":	130050
		}, {
			"file":	"src/http_req_parser.c",
			"line":	826,
			"primary_score":	1999817,
			"second_score":	130049
		}, {
			"file":	"src/http_req_parser.c",
			"line":	827,
			"primary_score":	1999817,
			"second_score":	130048
		}, {
			"file":	"src/http_req_parser.c",
			"line":	828,
			"primary_score":	1999817,
			"second_score":	130047
		}, {
			"file":	"src/http_req_parser.c",
			"line":	829,
			"primary_score":	1999817,
			"second_score":	130046
		}, {
			"file":	"src/http_req_parser.c",
			"line":	831,
			"primary_score":	1999817,
			"second_score":	128433
		}, {
			"file":	"src/http_req_parser.c",
			"line":	832,
			"primary_score":	1999817,
			"second_score":	128432
		}, {
			"file":	"src/http_req_parser.c",
			"line":	833,
			"primary_score":	1999817,
			"second_score":	128431
		}, {
			"file":	"src/http_req_parser.c",
			"line":	836,
			"primary_score":	1999817,
			"second_score":	128430
		}, {
			"file":	"src/http_req_parser.c",
			"line":	841,
			"primary_score":	1999817,
			"second_score":	128429
		}, {
			"file":	"src/http_req_parser.c",
			"line":	842,
			"primary_score":	1999817,
			"second_score":	128428
		}, {
			"file":	"src/http_req_parser.c",
			"line":	843,
			"primary_score":	1999817,
			"second_score":	128419
		}, {
			"file":	"src/http_req_parser.c",
			"line":	844,
			"primary_score":	1999817,
			"second_score":	128466
		}, {
			"file":	"src/http_req_parser.c",
			"line":	845,
			"primary_score":	1999817,
			"second_score":	128457
		}, {
			"file":	"src/http_req_parser.c",
			"line":	846,
			"primary_score":	1999817,
			"second_score":	128456
		}, {
			"file":	"src/http_req_parser.c",
			"line":	849,
			"primary_score":	1999817,
			"second_score":	128455
		}, {
			"file":	"src/http_req_parser.c",
			"line":	851,
			"primary_score":	1999817,
			"second_score":	128418
		}, {
			"file":	"src/http_req_parser.c",
			"line":	852,
			"primary_score":	1999818,
			"second_score":	128417
		}, {
			"file":	"src/http_req_parser.c",
			"line":	938,
			"primary_score":	1999817,
			"second_score":	128341
		}, {
			"file":	"src/http_req_range.c",
			"line":	25,
			"primary_score":	1999817,
			"second_score":	536678
		}, {
			"file":	"src/http_req_range.c",
			"line":	27,
			"primary_score":	1999817,
			"second_score":	536677
		}, {
			"file":	"src/http_req_range.c",
			"line":	28,
			"primary_score":	1999817,
			"second_score":	536676
		}, {
			"file":	"src/http_req_range.c",
			"line":	30,
			"primary_score":	1999817,
			"second_score":	536675
		}, {
			"file":	"src/http_req_range.c",
			"line":	45,
			"primary_score":	1999817,
			"second_score":	8175
		}, {
			"file":	"src/http_req_range.c",
			"line":	47,
			"primary_score":	1999817,
			"second_score":	8176
		}, {
			"file":	"src/http_req_range.c",
			"line":	49,
			"primary_score":	1999817,
			"second_score":	8173
		}, {
			"file":	"src/http_resp.c",
			"line":	30,
			"primary_score":	1999834,
			"second_score":	537427
		}, {
			"file":	"src/http_resp.c",
			"line":	32,
			"primary_score":	1999834,
			"second_score":	537426
		}, {
			"file":	"src/http_resp.c",
			"line":	33,
			"primary_score":	1999834,
			"second_score":	537418
		}, {
			"file":	"src/http_resp.c",
			"line":	34,
			"primary_score":	1999834,
			"second_score":	537412
		}, {
			"file":	"src/http_resp.c",
			"line":	36,
			"primary_score":	1999834,
			"second_score":	537411
		}, {
			"file":	"src/http_resp.c",
			"line":	49,
			"primary_score":	1999834,
			"second_score":	10761
		}, {
			"file":	"src/http_resp.c",
			"line":	51,
			"primary_score":	1999834,
			"second_score":	10760
		}, {
			"file":	"src/http_resp.c",
			"line":	52,
			"primary_score":	1999834,
			"second_score":	10756
		}, {
			"file":	"src/http_resp.c",
			"line":	54,
			"primary_score":	1999834,
			"second_score":	10748
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	12,
			"primary_score":	1999817,
			"second_score":	110130
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	13,
			"primary_score":	1999817,
			"second_score":	110129
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	14,
			"primary_score":	1999817,
			"second_score":	110128
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	15,
			"primary_score":	1999817,
			"second_score":	110127
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	19,
			"primary_score":	1999817,
			"second_score":	110126
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	22,
			"primary_score":	1999817,
			"second_score":	110125
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	28,
			"primary_score":	1999817,
			"second_score":	110124
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	31,
			"primary_score":	1999817,
			"second_score":	221221
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	32,
			"primary_score":	1999817,
			"second_score":	221220
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	38,
			"primary_score":	1999817,
			"second_score":	221219
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	39,
			"primary_score":	1999817,
			"second_score":	221218
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	41,
			"primary_score":	1999817,
			"second_score":	221217
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	42,
			"primary_score":	1999817,
			"second_score":	221216
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	48,
			"primary_score":	1999817,
			"second_score":	110123
		}, {
			"file":	"src/iosocket.c",
			"line":	9,
			"primary_score":	1999817,
			"second_score":	222111
		}, {
			"file":	"src/iosocket.c",
			"line":	11,
			"primary_score":	1999817,
			"second_score":	222109
		}, {
			"file":	"src/iosocket.c",
			"line":	12,
			"primary_score":	1999817,
			"second_score":	222108
		}, {
			"file":	"src/iosocket.c",
			"line":	14,
			"primary_score":	1999817,
			"second_score":	222107
		}, {
			"file":	"src/iosocket.c",
			"line":	16,
			"primary_score":	1999817,
			"second_score":	222106
		}, {
			"file":	"src/iosocket.c",
			"line":	20,
			"primary_score":	1999817,
			"second_score":	18472
		}, {
			"file":	"src/iosocket.c",
			"line":	22,
			"primary_score":	1999817,
			"second_score":	18471
		}, {
			"file":	"src/iosocket.c",
			"line":	23,
			"primary_score":	1999817,
			"second_score":	108222
		}, {
			"file":	"src/iosocket.c",
			"line":	26,
			"primary_score":	1999817,
			"second_score":	108221
		}, {
			"file":	"src/iosocket.c",
			"line":	35,
			"primary_score":	1999817,
			"second_score":	18470
		}, {
			"file":	"src/joblist.c",
			"line":	9,
			"primary_score":	1999817,
			"second_score":	128046
		}, {
			"file":	"src/joblist.c",
			"line":	10,
			"primary_score":	1999817,
			"second_score":	128045
		}, {
			"file":	"src/joblist.c",
			"line":	12,
			"primary_score":	1999817,
			"second_score":	128044
		}, {
			"file":	"src/joblist.c",
			"line":	13,
			"primary_score":	1999817,
			"second_score":	220264
		}, {
			"file":	"src/joblist.c",
			"line":	14,
			"primary_score":	1999817,
			"second_score":	220263
		}, {
			"file":	"src/joblist.c",
			"line":	20,
			"primary_score":	1999817,
			"second_score":	128041
		}, {
			"file":	"src/joblist.c",
			"line":	22,
			"primary_score":	1999817,
			"second_score":	128040
		}, {
			"file":	"src/joblist.c",
			"line":	26,
			"primary_score":	1999817,
			"second_score":	611
		}, {
			"file":	"src/joblist.c",
			"line":	28,
			"primary_score":	1999817,
			"second_score":	610
		}, {
			"file":	"src/joblist.c",
			"line":	29,
			"primary_score":	1999817,
			"second_score":	609
		}, {
			"file":	"src/joblist.c",
			"line":	61,
			"primary_score":	1999817,
			"second_score":	607
		}, {
			"file":	"src/joblist.c",
			"line":	62,
			"primary_score":	1999817,
			"second_score":	606
		}, {
			"file":	"src/joblist.c",
			"line":	63,
			"primary_score":	1999817,
			"second_score":	605
		}, {
			"file":	"src/keyvalue.c",
			"line":	113,
			"primary_score":	1999817,
			"second_score":	109924
		}, {
			"file":	"src/keyvalue.c",
			"line":	114,
			"primary_score":	1999817,
			"second_score":	109923
		}, {
			"file":	"src/keyvalue.c",
			"line":	115,
			"primary_score":	1999817,
			"second_score":	109921
		}, {
			"file":	"src/keyvalue.c",
			"line":	121,
			"primary_score":	1999818,
			"second_score":	129537
		}, {
			"file":	"src/keyvalue.c",
			"line":	122,
			"primary_score":	1999818,
			"second_score":	129536
		}, {
			"file":	"src/keyvalue.c",
			"line":	123,
			"primary_score":	1999820,
			"second_score":	129532
		}, {
			"file":	"src/keyvalue.c",
			"line":	283,
			"primary_score":	1999829,
			"second_score":	109925
		}, {
			"file":	"src/keyvalue.c",
			"line":	287,
			"primary_score":	1999817,
			"second_score":	112224
		}, {
			"file":	"src/keyvalue.c",
			"line":	291,
			"primary_score":	1999829,
			"second_score":	109985
		}, {
			"file":	"src/keyvalue.c",
			"line":	303,
			"primary_score":	1999818,
			"second_score":	129538
		}, {
			"file":	"src/keyvalue.c",
			"line":	310,
			"primary_score":	1999821,
			"second_score":	414087
		}, {
			"file":	"src/keyvalue.c",
			"line":	312,
			"primary_score":	1999821,
			"second_score":	414086
		}, {
			"file":	"src/keyvalue.c",
			"line":	314,
			"primary_score":	1999821,
			"second_score":	414085
		}, {
			"file":	"src/keyvalue.c",
			"line":	319,
			"primary_score":	1999829,
			"second_score":	415198
		}, {
			"file":	"src/keyvalue.c",
			"line":	320,
			"primary_score":	1999829,
			"second_score":	415197
		}, {
			"file":	"src/keyvalue.c",
			"line":	321,
			"primary_score":	1999829,
			"second_score":	415196
		}, {
			"file":	"src/keyvalue.c",
			"line":	322,
			"primary_score":	1999829,
			"second_score":	415195
		}, {
			"file":	"src/keyvalue.c",
			"line":	325,
			"primary_score":	1999829,
			"second_score":	415194
		}, {
			"file":	"src/keyvalue.c",
			"line":	328,
			"primary_score":	1999829,
			"second_score":	415193
		}, {
			"file":	"src/keyvalue.c",
			"line":	329,
			"primary_score":	1999829,
			"second_score":	415192
		}, {
			"file":	"src/keyvalue.c",
			"line":	330,
			"primary_score":	1999829,
			"second_score":	415191
		}, {
			"file":	"src/keyvalue.c",
			"line":	332,
			"primary_score":	1999829,
			"second_score":	415190
		}, {
			"file":	"src/keyvalue.c",
			"line":	334,
			"primary_score":	1999829,
			"second_score":	415189
		}, {
			"file":	"src/keyvalue.c",
			"line":	335,
			"primary_score":	1999829,
			"second_score":	415185
		}, {
			"file":	"src/keyvalue.c",
			"line":	337,
			"primary_score":	1999833,
			"second_score":	527977
		}, {
			"file":	"src/keyvalue.c",
			"line":	347,
			"primary_score":	1999829,
			"second_score":	415184
		}, {
			"file":	"src/keyvalue.c",
			"line":	348,
			"primary_score":	1999829,
			"second_score":	415183
		}, {
			"file":	"src/keyvalue.c",
			"line":	355,
			"primary_score":	1999829,
			"second_score":	415182
		}, {
			"file":	"src/keyvalue.c",
			"line":	360,
			"primary_score":	1999829,
			"second_score":	415181
		}, {
			"file":	"src/keyvalue.c",
			"line":	362,
			"primary_score":	1999829,
			"second_score":	415154
		}, {
			"file":	"src/keyvalue.c",
			"line":	364,
			"primary_score":	1999829,
			"second_score":	415153
		}, {
			"file":	"src/keyvalue.c",
			"line":	375,
			"primary_score":	1999821,
			"second_score":	12931
		}, {
			"file":	"src/keyvalue.c",
			"line":	376,
			"primary_score":	1999821,
			"second_score":	12930
		}, {
			"file":	"src/keyvalue.c",
			"line":	378,
			"primary_score":	1999821,
			"second_score":	12929
		}, {
			"file":	"src/keyvalue.c",
			"line":	379,
			"primary_score":	1999829,
			"second_score":	12990
		}, {
			"file":	"src/keyvalue.c",
			"line":	380,
			"primary_score":	1999829,
			"second_score":	13009
		}, {
			"file":	"src/keyvalue.c",
			"line":	381,
			"primary_score":	1999833,
			"second_score":	13007
		}, {
			"file":	"src/keyvalue.c",
			"line":	382,
			"primary_score":	1999829,
			"second_score":	13005
		}, {
			"file":	"src/keyvalue.c",
			"line":	383,
			"primary_score":	1999829,
			"second_score":	12986
		}, {
			"file":	"src/keyvalue.c",
			"line":	386,
			"primary_score":	1999829,
			"second_score":	12984
		}, {
			"file":	"src/keyvalue.c",
			"line":	389,
			"primary_score":	1999821,
			"second_score":	12927
		}, {
			"file":	"src/log.c",
			"line":	87,
			"primary_score":	1999817,
			"second_score":	120
		}, {
			"file":	"src/log.c",
			"line":	89,
			"primary_score":	1999817,
			"second_score":	119
		}, {
			"file":	"src/log.c",
			"line":	91,
			"primary_score":	1999817,
			"second_score":	118
		}, {
			"file":	"src/log.c",
			"line":	94,
			"primary_score":	1999817,
			"second_score":	117
		}, {
			"file":	"src/log.c",
			"line":	104,
			"primary_score":	1999817,
			"second_score":	116
		}, {
			"file":	"src/log.c",
			"line":	105,
			"primary_score":	1999817,
			"second_score":	112
		}, {
			"file":	"src/log.c",
			"line":	107,
			"primary_score":	1999817,
			"second_score":	108
		}, {
			"file":	"src/log.c",
			"line":	109,
			"primary_score":	1999817,
			"second_score":	107
		}, {
			"file":	"src/log.c",
			"line":	113,
			"primary_score":	1999817,
			"second_score":	265661
		}, {
			"file":	"src/log.c",
			"line":	114,
			"primary_score":	1999817,
			"second_score":	265660
		}, {
			"file":	"src/log.c",
			"line":	116,
			"primary_score":	1999817,
			"second_score":	265659
		}, {
			"file":	"src/log.c",
			"line":	120,
			"primary_score":	1999817,
			"second_score":	265658
		}, {
			"file":	"src/log.c",
			"line":	122,
			"primary_score":	1999817,
			"second_score":	265657
		}, {
			"file":	"src/log.c",
			"line":	124,
			"primary_score":	1999817,
			"second_score":	265656
		}, {
			"file":	"src/log.c",
			"line":	126,
			"primary_score":	1999817,
			"second_score":	265655
		}, {
			"file":	"src/log.c",
			"line":	127,
			"primary_score":	1999817,
			"second_score":	265652
		}, {
			"file":	"src/log.c",
			"line":	136,
			"primary_score":	1999817,
			"second_score":	265651
		}, {
			"file":	"src/log.c",
			"line":	138,
			"primary_score":	1999817,
			"second_score":	265650
		}, {
			"file":	"src/log.c",
			"line":	139,
			"primary_score":	1999817,
			"second_score":	265649
		}, {
			"file":	"src/log.c",
			"line":	142,
			"primary_score":	1999817,
			"second_score":	265648
		}, {
			"file":	"src/log.c",
			"line":	145,
			"primary_score":	1999817,
			"second_score":	265594
		}, {
			"file":	"src/log.c",
			"line":	146,
			"primary_score":	1999817,
			"second_score":	265582
		}, {
			"file":	"src/log.c",
			"line":	149,
			"primary_score":	1999817,
			"second_score":	265581
		}, {
			"file":	"src/log.c",
			"line":	151,
			"primary_score":	1999817,
			"second_score":	265580
		}, {
			"file":	"src/log.c",
			"line":	152,
			"primary_score":	1999817,
			"second_score":	265579
		}, {
			"file":	"src/log.c",
			"line":	153,
			"primary_score":	1999817,
			"second_score":	265578
		}, {
			"file":	"src/log.c",
			"line":	155,
			"primary_score":	1999817,
			"second_score":	265577
		}, {
			"file":	"src/log.c",
			"line":	200,
			"primary_score":	1999830,
			"second_score":	111175
		}, {
			"file":	"src/log.c",
			"line":	201,
			"primary_score":	1999830,
			"second_score":	111174
		}, {
			"file":	"src/log.c",
			"line":	203,
			"primary_score":	1999830,
			"second_score":	111173
		}, {
			"file":	"src/log.c",
			"line":	205,
			"primary_score":	1999830,
			"second_score":	111172
		}, {
			"file":	"src/log.c",
			"line":	207,
			"primary_score":	1999830,
			"second_score":	111171
		}, {
			"file":	"src/log.c",
			"line":	213,
			"primary_score":	1999830,
			"second_score":	111170
		}, {
			"file":	"src/log.c",
			"line":	214,
			"primary_score":	1999830,
			"second_score":	154617
		}, {
			"file":	"src/log.c",
			"line":	215,
			"primary_score":	1999830,
			"second_score":	154612
		}, {
			"file":	"src/log.c",
			"line":	216,
			"primary_score":	1999830,
			"second_score":	154611
		}, {
			"file":	"src/log.c",
			"line":	217,
			"primary_score":	1999830,
			"second_score":	154610
		}, {
			"file":	"src/log.c",
			"line":	220,
			"primary_score":	1999830,
			"second_score":	111156
		}, {
			"file":	"src/log.c",
			"line":	221,
			"primary_score":	1999830,
			"second_score":	111141
		}, {
			"file":	"src/log.c",
			"line":	222,
			"primary_score":	1999830,
			"second_score":	111128
		}, {
			"file":	"src/log.c",
			"line":	229,
			"primary_score":	1999830,
			"second_score":	111127
		}, {
			"file":	"src/log.c",
			"line":	230,
			"primary_score":	1999830,
			"second_score":	111114
		}, {
			"file":	"src/log.c",
			"line":	231,
			"primary_score":	1999830,
			"second_score":	111101
		}, {
			"file":	"src/log.c",
			"line":	232,
			"primary_score":	1999830,
			"second_score":	111071
		}, {
			"file":	"src/log.c",
			"line":	234,
			"primary_score":	1999830,
			"second_score":	111058
		}, {
			"file":	"src/log.c",
			"line":	235,
			"primary_score":	1999830,
			"second_score":	111006
		}, {
			"file":	"src/log.c",
			"line":	236,
			"primary_score":	1999830,
			"second_score":	111005
		}, {
			"file":	"src/log.c",
			"line":	237,
			"primary_score":	1999830,
			"second_score":	111004
		}, {
			"file":	"src/log.c",
			"line":	238,
			"primary_score":	1999830,
			"second_score":	111003
		}, {
			"file":	"src/log.c",
			"line":	240,
			"primary_score":	1999830,
			"second_score":	111002
		}, {
			"file":	"src/log.c",
			"line":	243,
			"primary_score":	1999830,
			"second_score":	111052
		}, {
			"file":	"src/log.c",
			"line":	244,
			"primary_score":	1999830,
			"second_score":	111039
		}, {
			"file":	"src/log.c",
			"line":	245,
			"primary_score":	1999830,
			"second_score":	111026
		}, {
			"file":	"src/log.c",
			"line":	248,
			"primary_score":	1999830,
			"second_score":	111001
		}, {
			"file":	"src/log.c",
			"line":	249,
			"primary_score":	1999830,
			"second_score":	110985
		}, {
			"file":	"src/log.c",
			"line":	250,
			"primary_score":	1999830,
			"second_score":	110972
		}, {
			"file":	"src/log.c",
			"line":	269,
			"primary_score":	1999834,
			"second_score":	111020
		}, {
			"file":	"src/log.c",
			"line":	270,
			"primary_score":	1999834,
			"second_score":	111007
		}, {
			"file":	"src/log.c",
			"line":	289,
			"primary_score":	1999830,
			"second_score":	110971
		}, {
			"file":	"src/log.c",
			"line":	291,
			"primary_score":	1999830,
			"second_score":	110970
		}, {
			"file":	"src/log.c",
			"line":	294,
			"primary_score":	1999834,
			"second_score":	110957
		}, {
			"file":	"src/log.c",
			"line":	295,
			"primary_score":	1999834,
			"second_score":	110956
		}, {
			"file":	"src/log.c",
			"line":	307,
			"primary_score":	1999830,
			"second_score":	110955
		}, {
			"file":	"src/log.c",
			"line":	311,
			"primary_score":	1999817,
			"second_score":	171
		}, {
			"file":	"src/log.c",
			"line":	312,
			"primary_score":	1999817,
			"second_score":	170
		}, {
			"file":	"src/log.c",
			"line":	313,
			"primary_score":	1999817,
			"second_score":	169
		}, {
			"file":	"src/log.c",
			"line":	314,
			"primary_score":	1999817,
			"second_score":	168
		}, {
			"file":	"src/log.c",
			"line":	316,
			"primary_score":	1999817,
			"second_score":	167
		}, {
			"file":	"src/log.c",
			"line":	317,
			"primary_score":	1999817,
			"second_score":	159
		}, {
			"file":	"src/log.c",
			"line":	319,
			"primary_score":	1999817,
			"second_score":	149
		}, {
			"file":	"src/log.c",
			"line":	320,
			"primary_score":	1999817,
			"second_score":	148
		}, {
			"file":	"src/log.c",
			"line":	321,
			"primary_score":	1999817,
			"second_score":	147
		}, {
			"file":	"src/log.c",
			"line":	322,
			"primary_score":	1999817,
			"second_score":	146
		}, {
			"file":	"src/log.c",
			"line":	323,
			"primary_score":	1999817,
			"second_score":	145
		}, {
			"file":	"src/log.c",
			"line":	329,
			"primary_score":	1999817,
			"second_score":	144
		}, {
			"file":	"src/log.c",
			"line":	330,
			"primary_score":	1999817,
			"second_score":	143
		}, {
			"file":	"src/log.c",
			"line":	332,
			"primary_score":	1999817,
			"second_score":	142
		}, {
			"file":	"src/log.c",
			"line":	359,
			"primary_score":	1999817,
			"second_score":	141
		}, {
			"file":	"src/log.c",
			"line":	362,
			"primary_score":	1999817,
			"second_score":	128
		}, {
			"file":	"src/log.c",
			"line":	363,
			"primary_score":	1999817,
			"second_score":	127
		}, {
			"file":	"src/log.c",
			"line":	375,
			"primary_score":	1999817,
			"second_score":	126
		}, {
			"file":	"src/log.c",
			"line":	377,
			"primary_score":	1999817,
			"second_score":	122
		}, {
			"file":	"src/log.c",
			"line":	382,
			"primary_score":	1999817,
			"second_score":	174
		}, {
			"file":	"src/log.c",
			"line":	383,
			"primary_score":	1999817,
			"second_score":	173
		}, {
			"file":	"src/log.c",
			"line":	386,
			"primary_score":	1999817,
			"second_score":	172
		}, {
			"file":	"src/mod_access.c",
			"line":	33,
			"primary_score":	1999826,
			"second_score":	539412
		}, {
			"file":	"src/mod_access.c",
			"line":	35,
			"primary_score":	1999826,
			"second_score":	539411
		}, {
			"file":	"src/mod_access.c",
			"line":	37,
			"primary_score":	1999826,
			"second_score":	539410
		}, {
			"file":	"src/mod_access.c",
			"line":	39,
			"primary_score":	1999826,
			"second_score":	539409
		}, {
			"file":	"src/mod_access.c",
			"line":	43,
			"primary_score":	1999826,
			"second_score":	16792
		}, {
			"file":	"src/mod_access.c",
			"line":	45,
			"primary_score":	1999826,
			"second_score":	16791
		}, {
			"file":	"src/mod_access.c",
			"line":	47,
			"primary_score":	1999826,
			"second_score":	16790
		}, {
			"file":	"src/mod_access.c",
			"line":	49,
			"primary_score":	1999826,
			"second_score":	16789
		}, {
			"file":	"src/mod_access.c",
			"line":	50,
			"primary_score":	1999826,
			"second_score":	16788
		}, {
			"file":	"src/mod_access.c",
			"line":	51,
			"primary_score":	1999826,
			"second_score":	16787
		}, {
			"file":	"src/mod_access.c",
			"line":	52,
			"primary_score":	1999826,
			"second_score":	16419
		}, {
			"file":	"src/mod_access.c",
			"line":	54,
			"primary_score":	1999826,
			"second_score":	16418
		}, {
			"file":	"src/mod_access.c",
			"line":	56,
			"primary_score":	1999826,
			"second_score":	16381
		}, {
			"file":	"src/mod_access.c",
			"line":	58,
			"primary_score":	1999826,
			"second_score":	16380
		}, {
			"file":	"src/mod_access.c",
			"line":	61,
			"primary_score":	1999826,
			"second_score":	16379
		}, {
			"file":	"src/mod_access.c",
			"line":	63,
			"primary_score":	1999826,
			"second_score":	16378
		}, {
			"file":	"src/mod_access.c",
			"line":	67,
			"primary_score":	1999826,
			"second_score":	506393
		}, {
			"file":	"src/mod_access.c",
			"line":	68,
			"primary_score":	1999826,
			"second_score":	506392
		}, {
			"file":	"src/mod_access.c",
			"line":	70,
			"primary_score":	1999826,
			"second_score":	506391
		}, {
			"file":	"src/mod_access.c",
			"line":	76,
			"primary_score":	1999826,
			"second_score":	506390
		}, {
			"file":	"src/mod_access.c",
			"line":	78,
			"primary_score":	1999826,
			"second_score":	506389
		}, {
			"file":	"src/mod_access.c",
			"line":	79,
			"primary_score":	1999826,
			"second_score":	500402
		}, {
			"file":	"src/mod_access.c",
			"line":	81,
			"primary_score":	1999826,
			"second_score":	500401
		}, {
			"file":	"src/mod_access.c",
			"line":	82,
			"primary_score":	1999826,
			"second_score":	500400
		}, {
			"file":	"src/mod_access.c",
			"line":	83,
			"primary_score":	1999826,
			"second_score":	500394
		}, {
			"file":	"src/mod_access.c",
			"line":	85,
			"primary_score":	1999826,
			"second_score":	500393
		}, {
			"file":	"src/mod_access.c",
			"line":	86,
			"primary_score":	1999826,
			"second_score":	500392
		}, {
			"file":	"src/mod_access.c",
			"line":	88,
			"primary_score":	1999826,
			"second_score":	500391
		}, {
			"file":	"src/mod_access.c",
			"line":	90,
			"primary_score":	1999826,
			"second_score":	500390
		}, {
			"file":	"src/mod_access.c",
			"line":	95,
			"primary_score":	1999826,
			"second_score":	499892
		}, {
			"file":	"src/mod_access.c",
			"line":	99,
			"primary_score":	1999860,
			"second_score":	121501
		}, {
			"file":	"src/mod_access.c",
			"line":	100,
			"primary_score":	1999860,
			"second_score":	121500
		}, {
			"file":	"src/mod_access.c",
			"line":	102,
			"primary_score":	1999860,
			"second_score":	121499
		}, {
			"file":	"src/mod_access.c",
			"line":	103,
			"primary_score":	1999860,
			"second_score":	121498
		}, {
			"file":	"src/mod_access.c",
			"line":	106,
			"primary_score":	1999860,
			"second_score":	121497
		}, {
			"file":	"src/mod_access.c",
			"line":	107,
			"primary_score":	1999860,
			"second_score":	121144
		}, {
			"file":	"src/mod_access.c",
			"line":	108,
			"primary_score":	1999860,
			"second_score":	121143
		}, {
			"file":	"src/mod_access.c",
			"line":	111,
			"primary_score":	1999860,
			"second_score":	121142
		}, {
			"file":	"src/mod_access.c",
			"line":	114,
			"primary_score":	1999862,
			"second_score":	121208
		}, {
			"file":	"src/mod_access.c",
			"line":	115,
			"primary_score":	1999862,
			"second_score":	121258
		}, {
			"file":	"src/mod_access.c",
			"line":	117,
			"primary_score":	1999862,
			"second_score":	121257
		}, {
			"file":	"src/mod_access.c",
			"line":	119,
			"primary_score":	1999864,
			"second_score":	121250
		}, {
			"file":	"src/mod_access.c",
			"line":	125,
			"primary_score":	1999860,
			"second_score":	121135
		}, {
			"file":	"src/mod_access.c",
			"line":	129,
			"primary_score":	1999860,
			"second_score":	121506
		}, {
			"file":	"src/mod_access.c",
			"line":	130,
			"primary_score":	1999860,
			"second_score":	121505
		}, {
			"file":	"src/mod_access.c",
			"line":	131,
			"primary_score":	1999860,
			"second_score":	121504
		}, {
			"file":	"src/mod_access.c",
			"line":	133,
			"primary_score":	1999860,
			"second_score":	121503
		}, {
			"file":	"src/mod_access.c",
			"line":	135,
			"primary_score":	1999860,
			"second_score":	121502
		}, {
			"file":	"src/mod_access.c",
			"line":	137,
			"primary_score":	1999860,
			"second_score":	121134
		}, {
			"file":	"src/mod_access.c",
			"line":	138,
			"primary_score":	1999868,
			"second_score":	121133
		}, {
			"file":	"src/mod_access.c",
			"line":	141,
			"primary_score":	1999860,
			"second_score":	121079
		}, {
			"file":	"src/mod_access.c",
			"line":	143,
			"primary_score":	1999860,
			"second_score":	121078
		}, {
			"file":	"src/mod_access.c",
			"line":	144,
			"primary_score":	1999866,
			"second_score":	121071
		}, {
			"file":	"src/mod_access.c",
			"line":	145,
			"primary_score":	1999866,
			"second_score":	121070
		}, {
			"file":	"src/mod_access.c",
			"line":	147,
			"primary_score":	1999866,
			"second_score":	121069
		}, {
			"file":	"src/mod_access.c",
			"line":	148,
			"primary_score":	1999866,
			"second_score":	121068
		}, {
			"file":	"src/mod_access.c",
			"line":	152,
			"primary_score":	1999866,
			"second_score":	121067
		}, {
			"file":	"src/mod_access.c",
			"line":	163,
			"primary_score":	1999868,
			"second_score":	121066
		}, {
			"file":	"src/mod_access.c",
			"line":	179,
			"primary_score":	1999867,
			"second_score":	121065
		}, {
			"file":	"src/mod_access.c",
			"line":	190,
			"primary_score":	1999867,
			"second_score":	121064
		}, {
			"file":	"src/mod_access.c",
			"line":	217,
			"primary_score":	1999826,
			"second_score":	542566
		}, {
			"file":	"src/mod_access.c",
			"line":	218,
			"primary_score":	1999826,
			"second_score":	542565
		}, {
			"file":	"src/mod_access.c",
			"line":	220,
			"primary_score":	1999826,
			"second_score":	542538
		}, {
			"file":	"src/mod_access.c",
			"line":	221,
			"primary_score":	1999826,
			"second_score":	542537
		}, {
			"file":	"src/mod_access.c",
			"line":	222,
			"primary_score":	1999826,
			"second_score":	542536
		}, {
			"file":	"src/mod_access.c",
			"line":	223,
			"primary_score":	1999826,
			"second_score":	542535
		}, {
			"file":	"src/mod_access.c",
			"line":	224,
			"primary_score":	1999826,
			"second_score":	542534
		}, {
			"file":	"src/mod_access.c",
			"line":	226,
			"primary_score":	1999826,
			"second_score":	542533
		}, {
			"file":	"src/mod_access.c",
			"line":	228,
			"primary_score":	1999826,
			"second_score":	542532
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	157,
			"primary_score":	1999829,
			"second_score":	537008
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	159,
			"primary_score":	1999829,
			"second_score":	537007
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	161,
			"primary_score":	1999829,
			"second_score":	537006
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	163,
			"primary_score":	1999829,
			"second_score":	537005
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	167,
			"primary_score":	1999829,
			"second_score":	325118
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	169,
			"primary_score":	1999829,
			"second_score":	325117
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	171,
			"primary_score":	1999829,
			"second_score":	324494
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	175,
			"primary_score":	1999829,
			"second_score":	324606
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	179,
			"primary_score":	1999829,
			"second_score":	324605
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	184,
			"primary_score":	1999829,
			"second_score":	324604
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	185,
			"primary_score":	1999829,
			"second_score":	324603
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	186,
			"primary_score":	1999829,
			"second_score":	324602
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	188,
			"primary_score":	1999829,
			"second_score":	324594
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	190,
			"primary_score":	1999829,
			"second_score":	324578
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	196,
			"primary_score":	1999829,
			"second_score":	324577
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	197,
			"primary_score":	1999829,
			"second_score":	325114
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	198,
			"primary_score":	1999829,
			"second_score":	325113
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	199,
			"primary_score":	1999829,
			"second_score":	325112
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	200,
			"primary_score":	1999829,
			"second_score":	324576
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	201,
			"primary_score":	1999829,
			"second_score":	324575
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	202,
			"primary_score":	1999829,
			"second_score":	324574
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	206,
			"primary_score":	1999829,
			"second_score":	324573
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	212,
			"primary_score":	1999829,
			"second_score":	324791
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	216,
			"primary_score":	1999829,
			"second_score":	324789
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	217,
			"primary_score":	1999829,
			"second_score":	324788
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	218,
			"primary_score":	1999829,
			"second_score":	324787
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	219,
			"primary_score":	1999829,
			"second_score":	324786
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	221,
			"primary_score":	1999829,
			"second_score":	324785
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	223,
			"primary_score":	1999829,
			"second_score":	324784
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	226,
			"primary_score":	1999829,
			"second_score":	324783
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	231,
			"primary_score":	1999829,
			"second_score":	324782
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	233,
			"primary_score":	1999829,
			"second_score":	324781
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	238,
			"primary_score":	1999829,
			"second_score":	324562
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	241,
			"primary_score":	1999829,
			"second_score":	324560
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	245,
			"primary_score":	1999829,
			"second_score":	324559
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	250,
			"primary_score":	1999829,
			"second_score":	324558
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	251,
			"primary_score":	1999829,
			"second_score":	324542
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	255,
			"primary_score":	1999829,
			"second_score":	324540
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	256,
			"primary_score":	1999829,
			"second_score":	324539
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	257,
			"primary_score":	1999829,
			"second_score":	324538
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	258,
			"primary_score":	1999829,
			"second_score":	324537
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	260,
			"primary_score":	1999829,
			"second_score":	324529
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	262,
			"primary_score":	1999829,
			"second_score":	324513
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	264,
			"primary_score":	1999829,
			"second_score":	324512
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	267,
			"primary_score":	1999829,
			"second_score":	324511
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	272,
			"primary_score":	1999829,
			"second_score":	324510
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	274,
			"primary_score":	1999829,
			"second_score":	324509
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	277,
			"primary_score":	1999829,
			"second_score":	324730
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	281,
			"primary_score":	1999829,
			"second_score":	324728
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	282,
			"primary_score":	1999829,
			"second_score":	324727
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	283,
			"primary_score":	1999829,
			"second_score":	324726
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	284,
			"primary_score":	1999829,
			"second_score":	324725
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	286,
			"primary_score":	1999829,
			"second_score":	324724
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	288,
			"primary_score":	1999829,
			"second_score":	324723
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	291,
			"primary_score":	1999829,
			"second_score":	324722
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	296,
			"primary_score":	1999829,
			"second_score":	324721
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	298,
			"primary_score":	1999829,
			"second_score":	324720
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	301,
			"primary_score":	1999829,
			"second_score":	324508
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	305,
			"primary_score":	1999829,
			"second_score":	324493
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	307,
			"primary_score":	1999829,
			"second_score":	324492
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	311,
			"primary_score":	1999829,
			"second_score":	324491
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	316,
			"primary_score":	1999829,
			"second_score":	324490
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	317,
			"primary_score":	1999829,
			"second_score":	324489
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	318,
			"primary_score":	1999829,
			"second_score":	324488
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	320,
			"primary_score":	1999829,
			"second_score":	324480
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	322,
			"primary_score":	1999829,
			"second_score":	324464
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	325,
			"primary_score":	1999829,
			"second_score":	324463
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	329,
			"primary_score":	1999829,
			"second_score":	9609
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	330,
			"primary_score":	1999829,
			"second_score":	9608
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	332,
			"primary_score":	1999829,
			"second_score":	9607
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	334,
			"primary_score":	1999829,
			"second_score":	9606
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	336,
			"primary_score":	1999829,
			"second_score":	9605
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	337,
			"primary_score":	1999829,
			"second_score":	8991
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	339,
			"primary_score":	1999829,
			"second_score":	8990
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	341,
			"primary_score":	1999829,
			"second_score":	8989
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	353,
			"primary_score":	1999829,
			"second_score":	9600
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	355,
			"primary_score":	1999829,
			"second_score":	8987
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	356,
			"primary_score":	1999829,
			"second_score":	8983
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	357,
			"primary_score":	1999829,
			"second_score":	8979
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	358,
			"primary_score":	1999829,
			"second_score":	8975
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	360,
			"primary_score":	1999829,
			"second_score":	8971
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	361,
			"primary_score":	1999829,
			"second_score":	9582
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	362,
			"primary_score":	1999829,
			"second_score":	9581
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	363,
			"primary_score":	1999829,
			"second_score":	9506
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	364,
			"primary_score":	1999829,
			"second_score":	9501
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	366,
			"primary_score":	1999829,
			"second_score":	9500
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	367,
			"primary_score":	1999829,
			"second_score":	9499
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	370,
			"primary_score":	1999829,
			"second_score":	8970
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	373,
			"primary_score":	1999829,
			"second_score":	8969
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	376,
			"primary_score":	1999829,
			"second_score":	8968
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	378,
			"primary_score":	1999829,
			"second_score":	8967
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	382,
			"primary_score":	1999829,
			"second_score":	326411
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	383,
			"primary_score":	1999829,
			"second_score":	326410
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	385,
			"primary_score":	1999829,
			"second_score":	326409
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	392,
			"primary_score":	1999829,
			"second_score":	326408
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	394,
			"primary_score":	1999829,
			"second_score":	326407
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	396,
			"primary_score":	1999829,
			"second_score":	326406
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	397,
			"primary_score":	1999829,
			"second_score":	317345
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	399,
			"primary_score":	1999829,
			"second_score":	317344
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	400,
			"primary_score":	1999829,
			"second_score":	317343
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	401,
			"primary_score":	1999829,
			"second_score":	317335
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	402,
			"primary_score":	1999829,
			"second_score":	317327
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	403,
			"primary_score":	1999829,
			"second_score":	317319
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	404,
			"primary_score":	1999829,
			"second_score":	317311
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	405,
			"primary_score":	1999829,
			"second_score":	317310
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	406,
			"primary_score":	1999829,
			"second_score":	317309
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	409,
			"primary_score":	1999829,
			"second_score":	317308
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	410,
			"primary_score":	1999829,
			"second_score":	317307
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	411,
			"primary_score":	1999829,
			"second_score":	317306
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	413,
			"primary_score":	1999829,
			"second_score":	317305
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	415,
			"primary_score":	1999829,
			"second_score":	317304
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	419,
			"primary_score":	1999829,
			"second_score":	317076
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	422,
			"primary_score":	1999829,
			"second_score":	325138
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	427,
			"primary_score":	1999829,
			"second_score":	317075
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	428,
			"primary_score":	1999829,
			"second_score":	325120
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	430,
			"primary_score":	1999829,
			"second_score":	325119
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	457,
			"primary_score":	1999829,
			"second_score":	317074
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	462,
			"primary_score":	1999829,
			"second_score":	317073
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	464,
			"primary_score":	1999829,
			"second_score":	324458
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	518,
			"primary_score":	1999829,
			"second_score":	324457
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	528,
			"primary_score":	1999829,
			"second_score":	324456
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	532,
			"primary_score":	1999829,
			"second_score":	317069
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	579,
			"primary_score":	1999829,
			"second_score":	110584
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	580,
			"primary_score":	1999829,
			"second_score":	110583
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	582,
			"primary_score":	1999829,
			"second_score":	110582
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	583,
			"primary_score":	1999829,
			"second_score":	110581
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	584,
			"primary_score":	1999829,
			"second_score":	110580
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	585,
			"primary_score":	1999829,
			"second_score":	110579
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	586,
			"primary_score":	1999829,
			"second_score":	110578
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	587,
			"primary_score":	1999829,
			"second_score":	110577
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	588,
			"primary_score":	1999829,
			"second_score":	110576
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	589,
			"primary_score":	1999829,
			"second_score":	110575
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	592,
			"primary_score":	1999829,
			"second_score":	110574
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	593,
			"primary_score":	1999829,
			"second_score":	110156
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	594,
			"primary_score":	1999829,
			"second_score":	110155
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	597,
			"primary_score":	1999829,
			"second_score":	110154
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	600,
			"primary_score":	1999863,
			"second_score":	110220
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	601,
			"primary_score":	1999863,
			"second_score":	110277
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	603,
			"primary_score":	1999863,
			"second_score":	110276
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	609,
			"primary_score":	1999863,
			"second_score":	110269
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	612,
			"primary_score":	1999863,
			"second_score":	110262
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	618,
			"primary_score":	1999829,
			"second_score":	110147
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	622,
			"primary_score":	1999829,
			"second_score":	110590
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	623,
			"primary_score":	1999829,
			"second_score":	110589
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	624,
			"primary_score":	1999829,
			"second_score":	110588
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	626,
			"primary_score":	1999829,
			"second_score":	110587
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	627,
			"primary_score":	1999829,
			"second_score":	110586
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	629,
			"primary_score":	1999829,
			"second_score":	110585
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	631,
			"primary_score":	1999829,
			"second_score":	110146
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	632,
			"primary_score":	1999829,
			"second_score":	110145
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	633,
			"primary_score":	1999829,
			"second_score":	110144
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	636,
			"primary_score":	1999829,
			"second_score":	110132
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	637,
			"primary_score":	1999829,
			"second_score":	109658
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	640,
			"primary_score":	1999829,
			"second_score":	109642
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	647,
			"primary_score":	1999829,
			"second_score":	153496
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	649,
			"primary_score":	1999829,
			"second_score":	153495
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	652,
			"primary_score":	1999829,
			"second_score":	153494
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	655,
			"primary_score":	1999829,
			"second_score":	153489
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	656,
			"primary_score":	1999829,
			"second_score":	153488
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	660,
			"primary_score":	1999829,
			"second_score":	153487
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	662,
			"primary_score":	1999829,
			"second_score":	153486
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	664,
			"primary_score":	1999829,
			"second_score":	153473
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	665,
			"primary_score":	1999829,
			"second_score":	153472
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	666,
			"primary_score":	1999829,
			"second_score":	153471
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	669,
			"primary_score":	1999829,
			"second_score":	153470
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	670,
			"primary_score":	1999829,
			"second_score":	153456
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	672,
			"primary_score":	1999829,
			"second_score":	153435
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	673,
			"primary_score":	1999829,
			"second_score":	153421
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	674,
			"primary_score":	1999829,
			"second_score":	153400
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	685,
			"primary_score":	1999829,
			"second_score":	153387
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	686,
			"primary_score":	1999829,
			"second_score":	153386
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	689,
			"primary_score":	1999829,
			"second_score":	110021
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	691,
			"primary_score":	1999829,
			"second_score":	110005
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	698,
			"primary_score":	1999829,
			"second_score":	110110
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	707,
			"primary_score":	1999832,
			"second_score":	110054
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	709,
			"primary_score":	1999829,
			"second_score":	110041
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	712,
			"primary_score":	1999829,
			"second_score":	109968
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	713,
			"primary_score":	1999829,
			"second_score":	109955
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	714,
			"primary_score":	1999829,
			"second_score":	109939
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	715,
			"primary_score":	1999829,
			"second_score":	109926
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	717,
			"primary_score":	1999829,
			"second_score":	109907
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	720,
			"primary_score":	1999829,
			"second_score":	109858
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	724,
			"primary_score":	1999829,
			"second_score":	109838
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	729,
			"primary_score":	1999829,
			"second_score":	109808
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	734,
			"primary_score":	1999829,
			"second_score":	109673
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	736,
			"primary_score":	1999829,
			"second_score":	109660
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	777,
			"primary_score":	1999923,
			"second_score":	110090
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	781,
			"primary_score":	1999829,
			"second_score":	110074
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	815,
			"primary_score":	1999829,
			"second_score":	109659
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	821,
			"primary_score":	1999829,
			"second_score":	109641
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	823,
			"primary_score":	1999829,
			"second_score":	109628
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	827,
			"primary_score":	1999829,
			"second_score":	109627
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	834,
			"primary_score":	1999829,
			"second_score":	109626
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	835,
			"primary_score":	1999829,
			"second_score":	109625
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	837,
			"primary_score":	1999829,
			"second_score":	109624
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	840,
			"primary_score":	1999829,
			"second_score":	109620
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	845,
			"primary_score":	1999829,
			"second_score":	540554
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	846,
			"primary_score":	1999829,
			"second_score":	540553
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	848,
			"primary_score":	1999829,
			"second_score":	540526
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	849,
			"primary_score":	1999829,
			"second_score":	540525
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	850,
			"primary_score":	1999829,
			"second_score":	540524
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	852,
			"primary_score":	1999829,
			"second_score":	540523
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	853,
			"primary_score":	1999829,
			"second_score":	540522
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	855,
			"primary_score":	1999829,
			"second_score":	540521
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	857,
			"primary_score":	1999829,
			"second_score":	540520
		}, {
			"file":	"src/mod_auth.c",
			"line":	36,
			"primary_score":	1999826,
			"second_score":	539331
		}, {
			"file":	"src/mod_auth.c",
			"line":	38,
			"primary_score":	1999826,
			"second_score":	539330
		}, {
			"file":	"src/mod_auth.c",
			"line":	40,
			"primary_score":	1999826,
			"second_score":	539329
		}, {
			"file":	"src/mod_auth.c",
			"line":	42,
			"primary_score":	1999826,
			"second_score":	539328
		}, {
			"file":	"src/mod_auth.c",
			"line":	44,
			"primary_score":	1999826,
			"second_score":	539320
		}, {
			"file":	"src/mod_auth.c",
			"line":	49,
			"primary_score":	1999826,
			"second_score":	539312
		}, {
			"file":	"src/mod_auth.c",
			"line":	53,
			"primary_score":	1999826,
			"second_score":	16374
		}, {
			"file":	"src/mod_auth.c",
			"line":	55,
			"primary_score":	1999826,
			"second_score":	16373
		}, {
			"file":	"src/mod_auth.c",
			"line":	57,
			"primary_score":	1999826,
			"second_score":	16372
		}, {
			"file":	"src/mod_auth.c",
			"line":	59,
			"primary_score":	1999826,
			"second_score":	16371
		}, {
			"file":	"src/mod_auth.c",
			"line":	60,
			"primary_score":	1999826,
			"second_score":	16367
		}, {
			"file":	"src/mod_auth.c",
			"line":	65,
			"primary_score":	1999826,
			"second_score":	16363
		}, {
			"file":	"src/mod_auth.c",
			"line":	66,
			"primary_score":	1999826,
			"second_score":	16362
		}, {
			"file":	"src/mod_auth.c",
			"line":	67,
			"primary_score":	1999826,
			"second_score":	16361
		}, {
			"file":	"src/mod_auth.c",
			"line":	68,
			"primary_score":	1999826,
			"second_score":	14632
		}, {
			"file":	"src/mod_auth.c",
			"line":	70,
			"primary_score":	1999826,
			"second_score":	14631
		}, {
			"file":	"src/mod_auth.c",
			"line":	72,
			"primary_score":	1999826,
			"second_score":	14630
		}, {
			"file":	"src/mod_auth.c",
			"line":	73,
			"primary_score":	1999826,
			"second_score":	14622
		}, {
			"file":	"src/mod_auth.c",
			"line":	74,
			"primary_score":	1999826,
			"second_score":	14618
		}, {
			"file":	"src/mod_auth.c",
			"line":	75,
			"primary_score":	1999826,
			"second_score":	14614
		}, {
			"file":	"src/mod_auth.c",
			"line":	76,
			"primary_score":	1999826,
			"second_score":	14610
		}, {
			"file":	"src/mod_auth.c",
			"line":	77,
			"primary_score":	1999826,
			"second_score":	14606
		}, {
			"file":	"src/mod_auth.c",
			"line":	79,
			"primary_score":	1999826,
			"second_score":	14602
		}, {
			"file":	"src/mod_auth.c",
			"line":	80,
			"primary_score":	1999826,
			"second_score":	14598
		}, {
			"file":	"src/mod_auth.c",
			"line":	81,
			"primary_score":	1999826,
			"second_score":	14594
		}, {
			"file":	"src/mod_auth.c",
			"line":	82,
			"primary_score":	1999826,
			"second_score":	14590
		}, {
			"file":	"src/mod_auth.c",
			"line":	83,
			"primary_score":	1999826,
			"second_score":	14586
		}, {
			"file":	"src/mod_auth.c",
			"line":	84,
			"primary_score":	1999826,
			"second_score":	14582
		}, {
			"file":	"src/mod_auth.c",
			"line":	85,
			"primary_score":	1999826,
			"second_score":	14578
		}, {
			"file":	"src/mod_auth.c",
			"line":	86,
			"primary_score":	1999826,
			"second_score":	14574
		}, {
			"file":	"src/mod_auth.c",
			"line":	96,
			"primary_score":	1999826,
			"second_score":	14570
		}, {
			"file":	"src/mod_auth.c",
			"line":	98,
			"primary_score":	1999826,
			"second_score":	14569
		}, {
			"file":	"src/mod_auth.c",
			"line":	101,
			"primary_score":	1999826,
			"second_score":	14568
		}, {
			"file":	"src/mod_auth.c",
			"line":	103,
			"primary_score":	1999826,
			"second_score":	14567
		}, {
			"file":	"src/mod_auth.c",
			"line":	107,
			"primary_score":	1999867,
			"second_score":	121053
		}, {
			"file":	"src/mod_auth.c",
			"line":	108,
			"primary_score":	1999867,
			"second_score":	121052
		}, {
			"file":	"src/mod_auth.c",
			"line":	110,
			"primary_score":	1999867,
			"second_score":	121051
		}, {
			"file":	"src/mod_auth.c",
			"line":	111,
			"primary_score":	1999867,
			"second_score":	121050
		}, {
			"file":	"src/mod_auth.c",
			"line":	112,
			"primary_score":	1999867,
			"second_score":	121049
		}, {
			"file":	"src/mod_auth.c",
			"line":	113,
			"primary_score":	1999867,
			"second_score":	121048
		}, {
			"file":	"src/mod_auth.c",
			"line":	114,
			"primary_score":	1999867,
			"second_score":	121047
		}, {
			"file":	"src/mod_auth.c",
			"line":	115,
			"primary_score":	1999867,
			"second_score":	121046
		}, {
			"file":	"src/mod_auth.c",
			"line":	116,
			"primary_score":	1999867,
			"second_score":	121045
		}, {
			"file":	"src/mod_auth.c",
			"line":	117,
			"primary_score":	1999867,
			"second_score":	121044
		}, {
			"file":	"src/mod_auth.c",
			"line":	118,
			"primary_score":	1999867,
			"second_score":	121043
		}, {
			"file":	"src/mod_auth.c",
			"line":	119,
			"primary_score":	1999867,
			"second_score":	121042
		}, {
			"file":	"src/mod_auth.c",
			"line":	120,
			"primary_score":	1999867,
			"second_score":	121041
		}, {
			"file":	"src/mod_auth.c",
			"line":	121,
			"primary_score":	1999867,
			"second_score":	121040
		}, {
			"file":	"src/mod_auth.c",
			"line":	122,
			"primary_score":	1999867,
			"second_score":	121039
		}, {
			"file":	"src/mod_auth.c",
			"line":	123,
			"primary_score":	1999867,
			"second_score":	121038
		}, {
			"file":	"src/mod_auth.c",
			"line":	124,
			"primary_score":	1999867,
			"second_score":	121037
		}, {
			"file":	"src/mod_auth.c",
			"line":	125,
			"primary_score":	1999867,
			"second_score":	121036
		}, {
			"file":	"src/mod_auth.c",
			"line":	126,
			"primary_score":	1999867,
			"second_score":	121035
		}, {
			"file":	"src/mod_auth.c",
			"line":	132,
			"primary_score":	1999867,
			"second_score":	121034
		}, {
			"file":	"src/mod_auth.c",
			"line":	133,
			"primary_score":	1999867,
			"second_score":	119723
		}, {
			"file":	"src/mod_auth.c",
			"line":	134,
			"primary_score":	1999867,
			"second_score":	119722
		}, {
			"file":	"src/mod_auth.c",
			"line":	137,
			"primary_score":	1999867,
			"second_score":	119721
		}, {
			"file":	"src/mod_auth.c",
			"line":	140,
			"primary_score":	1999869,
			"second_score":	119787
		}, {
			"file":	"src/mod_auth.c",
			"line":	141,
			"primary_score":	1999869,
			"second_score":	119944
		}, {
			"file":	"src/mod_auth.c",
			"line":	143,
			"primary_score":	1999869,
			"second_score":	119943
		}, {
			"file":	"src/mod_auth.c",
			"line":	145,
			"primary_score":	1999869,
			"second_score":	119935
		}, {
			"file":	"src/mod_auth.c",
			"line":	147,
			"primary_score":	1999869,
			"second_score":	119928
		}, {
			"file":	"src/mod_auth.c",
			"line":	149,
			"primary_score":	1999869,
			"second_score":	119921
		}, {
			"file":	"src/mod_auth.c",
			"line":	151,
			"primary_score":	1999869,
			"second_score":	119914
		}, {
			"file":	"src/mod_auth.c",
			"line":	153,
			"primary_score":	1999869,
			"second_score":	119907
		}, {
			"file":	"src/mod_auth.c",
			"line":	155,
			"primary_score":	1999871,
			"second_score":	119899
		}, {
			"file":	"src/mod_auth.c",
			"line":	157,
			"primary_score":	1999871,
			"second_score":	119892
		}, {
			"file":	"src/mod_auth.c",
			"line":	162,
			"primary_score":	1999871,
			"second_score":	119885
		}, {
			"file":	"src/mod_auth.c",
			"line":	164,
			"primary_score":	1999871,
			"second_score":	119878
		}, {
			"file":	"src/mod_auth.c",
			"line":	166,
			"primary_score":	1999871,
			"second_score":	119871
		}, {
			"file":	"src/mod_auth.c",
			"line":	168,
			"primary_score":	1999871,
			"second_score":	119864
		}, {
			"file":	"src/mod_auth.c",
			"line":	170,
			"primary_score":	1999871,
			"second_score":	119857
		}, {
			"file":	"src/mod_auth.c",
			"line":	172,
			"primary_score":	1999871,
			"second_score":	119850
		}, {
			"file":	"src/mod_auth.c",
			"line":	174,
			"primary_score":	1999871,
			"second_score":	119843
		}, {
			"file":	"src/mod_auth.c",
			"line":	176,
			"primary_score":	1999871,
			"second_score":	119836
		}, {
			"file":	"src/mod_auth.c",
			"line":	178,
			"primary_score":	1999871,
			"second_score":	119829
		}, {
			"file":	"src/mod_auth.c",
			"line":	184,
			"primary_score":	1999867,
			"second_score":	119714
		}, {
			"file":	"src/mod_auth.c",
			"line":	188,
			"primary_score":	1999867,
			"second_score":	121060
		}, {
			"file":	"src/mod_auth.c",
			"line":	189,
			"primary_score":	1999867,
			"second_score":	121059
		}, {
			"file":	"src/mod_auth.c",
			"line":	190,
			"primary_score":	1999867,
			"second_score":	121058
		}, {
			"file":	"src/mod_auth.c",
			"line":	191,
			"primary_score":	1999867,
			"second_score":	121057
		}, {
			"file":	"src/mod_auth.c",
			"line":	192,
			"primary_score":	1999867,
			"second_score":	121056
		}, {
			"file":	"src/mod_auth.c",
			"line":	193,
			"primary_score":	1999867,
			"second_score":	121055
		}, {
			"file":	"src/mod_auth.c",
			"line":	196,
			"primary_score":	1999867,
			"second_score":	121054
		}, {
			"file":	"src/mod_auth.c",
			"line":	198,
			"primary_score":	1999867,
			"second_score":	119713
		}, {
			"file":	"src/mod_auth.c",
			"line":	207,
			"primary_score":	1999867,
			"second_score":	119712
		}, {
			"file":	"src/mod_auth.c",
			"line":	208,
			"primary_score":	1999867,
			"second_score":	119711
		}, {
			"file":	"src/mod_auth.c",
			"line":	211,
			"primary_score":	1999867,
			"second_score":	119710
		}, {
			"file":	"src/mod_auth.c",
			"line":	212,
			"primary_score":	1999871,
			"second_score":	119699
		}, {
			"file":	"src/mod_auth.c",
			"line":	214,
			"primary_score":	1999871,
			"second_score":	119698
		}, {
			"file":	"src/mod_auth.c",
			"line":	215,
			"primary_score":	1999871,
			"second_score":	119697
		}, {
			"file":	"src/mod_auth.c",
			"line":	219,
			"primary_score":	1999907,
			"second_score":	119696
		}, {
			"file":	"src/mod_auth.c",
			"line":	225,
			"primary_score":	1999909,
			"second_score":	119695
		}, {
			"file":	"src/mod_auth.c",
			"line":	233,
			"primary_score":	1999880,
			"second_score":	119693
		}, {
			"file":	"src/mod_auth.c",
			"line":	316,
			"primary_score":	1999826,
			"second_score":	499888
		}, {
			"file":	"src/mod_auth.c",
			"line":	317,
			"primary_score":	1999826,
			"second_score":	499887
		}, {
			"file":	"src/mod_auth.c",
			"line":	319,
			"primary_score":	1999826,
			"second_score":	499886
		}, {
			"file":	"src/mod_auth.c",
			"line":	340,
			"primary_score":	1999826,
			"second_score":	499885
		}, {
			"file":	"src/mod_auth.c",
			"line":	342,
			"primary_score":	1999826,
			"second_score":	499884
		}, {
			"file":	"src/mod_auth.c",
			"line":	343,
			"primary_score":	1999826,
			"second_score":	448080
		}, {
			"file":	"src/mod_auth.c",
			"line":	344,
			"primary_score":	1999826,
			"second_score":	448079
		}, {
			"file":	"src/mod_auth.c",
			"line":	345,
			"primary_score":	1999826,
			"second_score":	448078
		}, {
			"file":	"src/mod_auth.c",
			"line":	346,
			"primary_score":	1999826,
			"second_score":	448077
		}, {
			"file":	"src/mod_auth.c",
			"line":	348,
			"primary_score":	1999826,
			"second_score":	448076
		}, {
			"file":	"src/mod_auth.c",
			"line":	349,
			"primary_score":	1999826,
			"second_score":	448075
		}, {
			"file":	"src/mod_auth.c",
			"line":	350,
			"primary_score":	1999826,
			"second_score":	448067
		}, {
			"file":	"src/mod_auth.c",
			"line":	351,
			"primary_score":	1999826,
			"second_score":	448059
		}, {
			"file":	"src/mod_auth.c",
			"line":	352,
			"primary_score":	1999826,
			"second_score":	448051
		}, {
			"file":	"src/mod_auth.c",
			"line":	353,
			"primary_score":	1999826,
			"second_score":	448043
		}, {
			"file":	"src/mod_auth.c",
			"line":	355,
			"primary_score":	1999826,
			"second_score":	448035
		}, {
			"file":	"src/mod_auth.c",
			"line":	356,
			"primary_score":	1999826,
			"second_score":	448027
		}, {
			"file":	"src/mod_auth.c",
			"line":	357,
			"primary_score":	1999826,
			"second_score":	448019
		}, {
			"file":	"src/mod_auth.c",
			"line":	358,
			"primary_score":	1999826,
			"second_score":	448011
		}, {
			"file":	"src/mod_auth.c",
			"line":	359,
			"primary_score":	1999826,
			"second_score":	448003
		}, {
			"file":	"src/mod_auth.c",
			"line":	360,
			"primary_score":	1999826,
			"second_score":	447995
		}, {
			"file":	"src/mod_auth.c",
			"line":	361,
			"primary_score":	1999826,
			"second_score":	447987
		}, {
			"file":	"src/mod_auth.c",
			"line":	362,
			"primary_score":	1999826,
			"second_score":	447979
		}, {
			"file":	"src/mod_auth.c",
			"line":	363,
			"primary_score":	1999826,
			"second_score":	447971
		}, {
			"file":	"src/mod_auth.c",
			"line":	364,
			"primary_score":	1999826,
			"second_score":	447970
		}, {
			"file":	"src/mod_auth.c",
			"line":	366,
			"primary_score":	1999826,
			"second_score":	447969
		}, {
			"file":	"src/mod_auth.c",
			"line":	375,
			"primary_score":	1999826,
			"second_score":	447963
		}, {
			"file":	"src/mod_auth.c",
			"line":	376,
			"primary_score":	1999826,
			"second_score":	447962
		}, {
			"file":	"src/mod_auth.c",
			"line":	377,
			"primary_score":	1999826,
			"second_score":	447961
		}, {
			"file":	"src/mod_auth.c",
			"line":	378,
			"primary_score":	1999826,
			"second_score":	447960
		}, {
			"file":	"src/mod_auth.c",
			"line":	379,
			"primary_score":	1999826,
			"second_score":	447959
		}, {
			"file":	"src/mod_auth.c",
			"line":	380,
			"primary_score":	1999826,
			"second_score":	447958
		}, {
			"file":	"src/mod_auth.c",
			"line":	381,
			"primary_score":	1999826,
			"second_score":	447957
		}, {
			"file":	"src/mod_auth.c",
			"line":	382,
			"primary_score":	1999826,
			"second_score":	447956
		}, {
			"file":	"src/mod_auth.c",
			"line":	383,
			"primary_score":	1999826,
			"second_score":	447955
		}, {
			"file":	"src/mod_auth.c",
			"line":	384,
			"primary_score":	1999826,
			"second_score":	447954
		}, {
			"file":	"src/mod_auth.c",
			"line":	385,
			"primary_score":	1999826,
			"second_score":	447953
		}, {
			"file":	"src/mod_auth.c",
			"line":	386,
			"primary_score":	1999826,
			"second_score":	447952
		}, {
			"file":	"src/mod_auth.c",
			"line":	387,
			"primary_score":	1999826,
			"second_score":	447951
		}, {
			"file":	"src/mod_auth.c",
			"line":	388,
			"primary_score":	1999826,
			"second_score":	447950
		}, {
			"file":	"src/mod_auth.c",
			"line":	389,
			"primary_score":	1999826,
			"second_score":	447949
		}, {
			"file":	"src/mod_auth.c",
			"line":	390,
			"primary_score":	1999826,
			"second_score":	447948
		}, {
			"file":	"src/mod_auth.c",
			"line":	391,
			"primary_score":	1999826,
			"second_score":	447947
		}, {
			"file":	"src/mod_auth.c",
			"line":	393,
			"primary_score":	1999826,
			"second_score":	447946
		}, {
			"file":	"src/mod_auth.c",
			"line":	394,
			"primary_score":	1999826,
			"second_score":	447945
		}, {
			"file":	"src/mod_auth.c",
			"line":	396,
			"primary_score":	1999826,
			"second_score":	447944
		}, {
			"file":	"src/mod_auth.c",
			"line":	400,
			"primary_score":	1999826,
			"second_score":	446678
		}, {
			"file":	"src/mod_auth.c",
			"line":	401,
			"primary_score":	1999826,
			"second_score":	476504
		}, {
			"file":	"src/mod_auth.c",
			"line":	402,
			"primary_score":	1999834,
			"second_score":	476496
		}, {
			"file":	"src/mod_auth.c",
			"line":	403,
			"primary_score":	1999826,
			"second_score":	488332
		}, {
			"file":	"src/mod_auth.c",
			"line":	405,
			"primary_score":	1999826,
			"second_score":	488325
		}, {
			"file":	"src/mod_auth.c",
			"line":	406,
			"primary_score":	1999826,
			"second_score":	488317
		}, {
			"file":	"src/mod_auth.c",
			"line":	417,
			"primary_score":	1999826,
			"second_score":	446675
		}, {
			"file":	"src/mod_auth.c",
			"line":	419,
			"primary_score":	1999826,
			"second_score":	488188
		}, {
			"file":	"src/mod_auth.c",
			"line":	421,
			"primary_score":	1999826,
			"second_score":	488187
		}, {
			"file":	"src/mod_auth.c",
			"line":	422,
			"primary_score":	1999826,
			"second_score":	487128
		}, {
			"file":	"src/mod_auth.c",
			"line":	423,
			"primary_score":	1999826,
			"second_score":	487127
		}, {
			"file":	"src/mod_auth.c",
			"line":	424,
			"primary_score":	1999826,
			"second_score":	487126
		}, {
			"file":	"src/mod_auth.c",
			"line":	426,
			"primary_score":	1999826,
			"second_score":	487125
		}, {
			"file":	"src/mod_auth.c",
			"line":	434,
			"primary_score":	1999826,
			"second_score":	487124
		}, {
			"file":	"src/mod_auth.c",
			"line":	436,
			"primary_score":	1999826,
			"second_score":	487123
		}, {
			"file":	"src/mod_auth.c",
			"line":	437,
			"primary_score":	1999826,
			"second_score":	487093
		}, {
			"file":	"src/mod_auth.c",
			"line":	439,
			"primary_score":	1999826,
			"second_score":	487092
		}, {
			"file":	"src/mod_auth.c",
			"line":	449,
			"primary_score":	1999826,
			"second_score":	487091
		}, {
			"file":	"src/mod_auth.c",
			"line":	450,
			"primary_score":	1999826,
			"second_score":	487112
		}, {
			"file":	"src/mod_auth.c",
			"line":	451,
			"primary_score":	1999826,
			"second_score":	487084
		}, {
			"file":	"src/mod_auth.c",
			"line":	452,
			"primary_score":	1999826,
			"second_score":	487094
		}, {
			"file":	"src/mod_auth.c",
			"line":	453,
			"primary_score":	1999826,
			"second_score":	487077
		}, {
			"file":	"src/mod_auth.c",
			"line":	454,
			"primary_score":	1999826,
			"second_score":	487069
		}, {
			"file":	"src/mod_auth.c",
			"line":	467,
			"primary_score":	1999826,
			"second_score":	487068
		}, {
			"file":	"src/mod_auth.c",
			"line":	473,
			"primary_score":	1999826,
			"second_score":	487067
		}, {
			"file":	"src/mod_auth.c",
			"line":	481,
			"primary_score":	1999826,
			"second_score":	487059
		}, {
			"file":	"src/mod_auth.c",
			"line":	488,
			"primary_score":	1999826,
			"second_score":	487058
		}, {
			"file":	"src/mod_auth.c",
			"line":	495,
			"primary_score":	1999826,
			"second_score":	487057
		}, {
			"file":	"src/mod_auth.c",
			"line":	496,
			"primary_score":	1999826,
			"second_score":	487056
		}, {
			"file":	"src/mod_auth.c",
			"line":	497,
			"primary_score":	1999826,
			"second_score":	487055
		}, {
			"file":	"src/mod_auth.c",
			"line":	499,
			"primary_score":	1999826,
			"second_score":	487054
		}, {
			"file":	"src/mod_auth.c",
			"line":	500,
			"primary_score":	1999826,
			"second_score":	487030
		}, {
			"file":	"src/mod_auth.c",
			"line":	502,
			"primary_score":	1999826,
			"second_score":	487011
		}, {
			"file":	"src/mod_auth.c",
			"line":	504,
			"primary_score":	1999826,
			"second_score":	486984
		}, {
			"file":	"src/mod_auth.c",
			"line":	505,
			"primary_score":	1999826,
			"second_score":	486967
		}, {
			"file":	"src/mod_auth.c",
			"line":	507,
			"primary_score":	1999826,
			"second_score":	486948
		}, {
			"file":	"src/mod_auth.c",
			"line":	509,
			"primary_score":	1999826,
			"second_score":	486914
		}, {
			"file":	"src/mod_auth.c",
			"line":	511,
			"primary_score":	1999826,
			"second_score":	486887
		}, {
			"file":	"src/mod_auth.c",
			"line":	512,
			"primary_score":	1999826,
			"second_score":	486870
		}, {
			"file":	"src/mod_auth.c",
			"line":	514,
			"primary_score":	1999826,
			"second_score":	486851
		}, {
			"file":	"src/mod_auth.c",
			"line":	516,
			"primary_score":	1999826,
			"second_score":	486781
		}, {
			"file":	"src/mod_auth.c",
			"line":	518,
			"primary_score":	1999826,
			"second_score":	486754
		}, {
			"file":	"src/mod_auth.c",
			"line":	519,
			"primary_score":	1999826,
			"second_score":	486737
		}, {
			"file":	"src/mod_auth.c",
			"line":	521,
			"primary_score":	1999826,
			"second_score":	486718
		}, {
			"file":	"src/mod_auth.c",
			"line":	523,
			"primary_score":	1999826,
			"second_score":	486658
		}, {
			"file":	"src/mod_auth.c",
			"line":	528,
			"primary_score":	1999826,
			"second_score":	446639
		}, {
			"file":	"src/mod_auth.c",
			"line":	659,
			"primary_score":	1999826,
			"second_score":	542424
		}, {
			"file":	"src/mod_auth.c",
			"line":	660,
			"primary_score":	1999826,
			"second_score":	542423
		}, {
			"file":	"src/mod_auth.c",
			"line":	661,
			"primary_score":	1999826,
			"second_score":	542396
		}, {
			"file":	"src/mod_auth.c",
			"line":	662,
			"primary_score":	1999826,
			"second_score":	542395
		}, {
			"file":	"src/mod_auth.c",
			"line":	663,
			"primary_score":	1999826,
			"second_score":	542394
		}, {
			"file":	"src/mod_auth.c",
			"line":	664,
			"primary_score":	1999826,
			"second_score":	542393
		}, {
			"file":	"src/mod_auth.c",
			"line":	666,
			"primary_score":	1999826,
			"second_score":	542392
		}, {
			"file":	"src/mod_auth.c",
			"line":	668,
			"primary_score":	1999826,
			"second_score":	542391
		}, {
			"file":	"src/mod_cgi.c",
			"line":	122,
			"primary_score":	1999834,
			"second_score":	537440
		}, {
			"file":	"src/mod_cgi.c",
			"line":	124,
			"primary_score":	1999834,
			"second_score":	537439
		}, {
			"file":	"src/mod_cgi.c",
			"line":	126,
			"primary_score":	1999834,
			"second_score":	537438
		}, {
			"file":	"src/mod_cgi.c",
			"line":	128,
			"primary_score":	1999834,
			"second_score":	537437
		}, {
			"file":	"src/mod_cgi.c",
			"line":	130,
			"primary_score":	1999834,
			"second_score":	537436
		}, {
			"file":	"src/mod_cgi.c",
			"line":	131,
			"primary_score":	1999834,
			"second_score":	537428
		}, {
			"file":	"src/mod_cgi.c",
			"line":	133,
			"primary_score":	1999834,
			"second_score":	537410
		}, {
			"file":	"src/mod_cgi.c",
			"line":	138,
			"primary_score":	1999834,
			"second_score":	11075
		}, {
			"file":	"src/mod_cgi.c",
			"line":	139,
			"primary_score":	1999834,
			"second_score":	11074
		}, {
			"file":	"src/mod_cgi.c",
			"line":	141,
			"primary_score":	1999834,
			"second_score":	11073
		}, {
			"file":	"src/mod_cgi.c",
			"line":	143,
			"primary_score":	1999834,
			"second_score":	11072
		}, {
			"file":	"src/mod_cgi.c",
			"line":	144,
			"primary_score":	1999834,
			"second_score":	11071
		}, {
			"file":	"src/mod_cgi.c",
			"line":	145,
			"primary_score":	1999834,
			"second_score":	11070
		}, {
			"file":	"src/mod_cgi.c",
			"line":	146,
			"primary_score":	1999834,
			"second_score":	10778
		}, {
			"file":	"src/mod_cgi.c",
			"line":	148,
			"primary_score":	1999834,
			"second_score":	10777
		}, {
			"file":	"src/mod_cgi.c",
			"line":	150,
			"primary_score":	1999834,
			"second_score":	10769
		}, {
			"file":	"src/mod_cgi.c",
			"line":	152,
			"primary_score":	1999834,
			"second_score":	10768
		}, {
			"file":	"src/mod_cgi.c",
			"line":	156,
			"primary_score":	1999834,
			"second_score":	10767
		}, {
			"file":	"src/mod_cgi.c",
			"line":	158,
			"primary_score":	1999834,
			"second_score":	10766
		}, {
			"file":	"src/mod_cgi.c",
			"line":	159,
			"primary_score":	1999834,
			"second_score":	10762
		}, {
			"file":	"src/mod_cgi.c",
			"line":	161,
			"primary_score":	1999834,
			"second_score":	10747
		}, {
			"file":	"src/mod_cgi.c",
			"line":	163,
			"primary_score":	1999834,
			"second_score":	10746
		}, {
			"file":	"src/mod_cgi.c",
			"line":	171,
			"primary_score":	1999834,
			"second_score":	354442
		}, {
			"file":	"src/mod_cgi.c",
			"line":	172,
			"primary_score":	1999834,
			"second_score":	354441
		}, {
			"file":	"src/mod_cgi.c",
			"line":	174,
			"primary_score":	1999834,
			"second_score":	354440
		}, {
			"file":	"src/mod_cgi.c",
			"line":	180,
			"primary_score":	1999834,
			"second_score":	354439
		}, {
			"file":	"src/mod_cgi.c",
			"line":	182,
			"primary_score":	1999834,
			"second_score":	354438
		}, {
			"file":	"src/mod_cgi.c",
			"line":	184,
			"primary_score":	1999834,
			"second_score":	354437
		}, {
			"file":	"src/mod_cgi.c",
			"line":	185,
			"primary_score":	1999834,
			"second_score":	348567
		}, {
			"file":	"src/mod_cgi.c",
			"line":	187,
			"primary_score":	1999834,
			"second_score":	348566
		}, {
			"file":	"src/mod_cgi.c",
			"line":	188,
			"primary_score":	1999834,
			"second_score":	348565
		}, {
			"file":	"src/mod_cgi.c",
			"line":	190,
			"primary_score":	1999834,
			"second_score":	348564
		}, {
			"file":	"src/mod_cgi.c",
			"line":	191,
			"primary_score":	1999834,
			"second_score":	348558
		}, {
			"file":	"src/mod_cgi.c",
			"line":	193,
			"primary_score":	1999834,
			"second_score":	348557
		}, {
			"file":	"src/mod_cgi.c",
			"line":	194,
			"primary_score":	1999834,
			"second_score":	348556
		}, {
			"file":	"src/mod_cgi.c",
			"line":	196,
			"primary_score":	1999834,
			"second_score":	348555
		}, {
			"file":	"src/mod_cgi.c",
			"line":	198,
			"primary_score":	1999834,
			"second_score":	348554
		}, {
			"file":	"src/mod_cgi.c",
			"line":	203,
			"primary_score":	1999834,
			"second_score":	348399
		}, {
			"file":	"src/mod_cgi.c",
			"line":	390,
			"primary_score":	1999834,
			"second_score":	18961
		}, {
			"file":	"src/mod_cgi.c",
			"line":	391,
			"primary_score":	1999834,
			"second_score":	18960
		}, {
			"file":	"src/mod_cgi.c",
			"line":	392,
			"primary_score":	1999834,
			"second_score":	18959
		}, {
			"file":	"src/mod_cgi.c",
			"line":	394,
			"primary_score":	1999834,
			"second_score":	18958
		}, {
			"file":	"src/mod_cgi.c",
			"line":	491,
			"primary_score":	1999834,
			"second_score":	18963
		}, {
			"file":	"src/mod_cgi.c",
			"line":	493,
			"primary_score":	1999834,
			"second_score":	18962
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1126,
			"primary_score":	1999834,
			"second_score":	110919
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1127,
			"primary_score":	1999834,
			"second_score":	110918
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1128,
			"primary_score":	1999834,
			"second_score":	110917
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1130,
			"primary_score":	1999852,
			"second_score":	110915
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1225,
			"primary_score":	1999868,
			"second_score":	113693
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1226,
			"primary_score":	1999868,
			"second_score":	113692
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1228,
			"primary_score":	1999888,
			"second_score":	113690
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1263,
			"primary_score":	1999834,
			"second_score":	540981
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1264,
			"primary_score":	1999834,
			"second_score":	540980
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1266,
			"primary_score":	1999834,
			"second_score":	540953
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1267,
			"primary_score":	1999834,
			"second_score":	540952
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1268,
			"primary_score":	1999834,
			"second_score":	540951
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1269,
			"primary_score":	1999834,
			"second_score":	540950
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1271,
			"primary_score":	1999834,
			"second_score":	540949
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1272,
			"primary_score":	1999834,
			"second_score":	540948
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1273,
			"primary_score":	1999834,
			"second_score":	540947
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1274,
			"primary_score":	1999834,
			"second_score":	540946
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1276,
			"primary_score":	1999834,
			"second_score":	540945
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1278,
			"primary_score":	1999834,
			"second_score":	540944
		}, {
			"file":	"src/mod_chunked.c",
			"line":	63,
			"primary_score":	1999817,
			"second_score":	536516
		}, {
			"file":	"src/mod_chunked.c",
			"line":	65,
			"primary_score":	1999817,
			"second_score":	536515
		}, {
			"file":	"src/mod_chunked.c",
			"line":	67,
			"primary_score":	1999817,
			"second_score":	536514
		}, {
			"file":	"src/mod_chunked.c",
			"line":	69,
			"primary_score":	1999817,
			"second_score":	536513
		}, {
			"file":	"src/mod_chunked.c",
			"line":	74,
			"primary_score":	1999817,
			"second_score":	8167
		}, {
			"file":	"src/mod_chunked.c",
			"line":	76,
			"primary_score":	1999817,
			"second_score":	8166
		}, {
			"file":	"src/mod_chunked.c",
			"line":	78,
			"primary_score":	1999817,
			"second_score":	8165
		}, {
			"file":	"src/mod_chunked.c",
			"line":	80,
			"primary_score":	1999817,
			"second_score":	8164
		}, {
			"file":	"src/mod_chunked.c",
			"line":	81,
			"primary_score":	1999817,
			"second_score":	8163
		}, {
			"file":	"src/mod_chunked.c",
			"line":	83,
			"primary_score":	1999817,
			"second_score":	8162
		}, {
			"file":	"src/mod_chunked.c",
			"line":	84,
			"primary_score":	1999817,
			"second_score":	8089
		}, {
			"file":	"src/mod_chunked.c",
			"line":	86,
			"primary_score":	1999817,
			"second_score":	8088
		}, {
			"file":	"src/mod_chunked.c",
			"line":	88,
			"primary_score":	1999817,
			"second_score":	8087
		}, {
			"file":	"src/mod_chunked.c",
			"line":	90,
			"primary_score":	1999817,
			"second_score":	8086
		}, {
			"file":	"src/mod_chunked.c",
			"line":	93,
			"primary_score":	1999817,
			"second_score":	8085
		}, {
			"file":	"src/mod_chunked.c",
			"line":	95,
			"primary_score":	1999817,
			"second_score":	8084
		}, {
			"file":	"src/mod_chunked.c",
			"line":	101,
			"primary_score":	1999817,
			"second_score":	284800
		}, {
			"file":	"src/mod_chunked.c",
			"line":	102,
			"primary_score":	1999817,
			"second_score":	284799
		}, {
			"file":	"src/mod_chunked.c",
			"line":	104,
			"primary_score":	1999817,
			"second_score":	284798
		}, {
			"file":	"src/mod_chunked.c",
			"line":	110,
			"primary_score":	1999817,
			"second_score":	284797
		}, {
			"file":	"src/mod_chunked.c",
			"line":	112,
			"primary_score":	1999817,
			"second_score":	284796
		}, {
			"file":	"src/mod_chunked.c",
			"line":	114,
			"primary_score":	1999817,
			"second_score":	284795
		}, {
			"file":	"src/mod_chunked.c",
			"line":	115,
			"primary_score":	1999817,
			"second_score":	279806
		}, {
			"file":	"src/mod_chunked.c",
			"line":	117,
			"primary_score":	1999817,
			"second_score":	279805
		}, {
			"file":	"src/mod_chunked.c",
			"line":	118,
			"primary_score":	1999817,
			"second_score":	279804
		}, {
			"file":	"src/mod_chunked.c",
			"line":	119,
			"primary_score":	1999817,
			"second_score":	279803
		}, {
			"file":	"src/mod_chunked.c",
			"line":	121,
			"primary_score":	1999817,
			"second_score":	279802
		}, {
			"file":	"src/mod_chunked.c",
			"line":	122,
			"primary_score":	1999817,
			"second_score":	279801
		}, {
			"file":	"src/mod_chunked.c",
			"line":	124,
			"primary_score":	1999817,
			"second_score":	279800
		}, {
			"file":	"src/mod_chunked.c",
			"line":	126,
			"primary_score":	1999817,
			"second_score":	279799
		}, {
			"file":	"src/mod_chunked.c",
			"line":	131,
			"primary_score":	1999817,
			"second_score":	279644
		}, {
			"file":	"src/mod_chunked.c",
			"line":	135,
			"primary_score":	1999817,
			"second_score":	18953
		}, {
			"file":	"src/mod_chunked.c",
			"line":	136,
			"primary_score":	1999817,
			"second_score":	18952
		}, {
			"file":	"src/mod_chunked.c",
			"line":	138,
			"primary_score":	1999817,
			"second_score":	18951
		}, {
			"file":	"src/mod_chunked.c",
			"line":	140,
			"primary_score":	1999817,
			"second_score":	18950
		}, {
			"file":	"src/mod_chunked.c",
			"line":	149,
			"primary_score":	1999827,
			"second_score":	112779
		}, {
			"file":	"src/mod_chunked.c",
			"line":	150,
			"primary_score":	1999827,
			"second_score":	112778
		}, {
			"file":	"src/mod_chunked.c",
			"line":	152,
			"primary_score":	1999827,
			"second_score":	112777
		}, {
			"file":	"src/mod_chunked.c",
			"line":	153,
			"primary_score":	1999827,
			"second_score":	112776
		}, {
			"file":	"src/mod_chunked.c",
			"line":	156,
			"primary_score":	1999827,
			"second_score":	112775
		}, {
			"file":	"src/mod_chunked.c",
			"line":	157,
			"primary_score":	1999827,
			"second_score":	112422
		}, {
			"file":	"src/mod_chunked.c",
			"line":	158,
			"primary_score":	1999827,
			"second_score":	112421
		}, {
			"file":	"src/mod_chunked.c",
			"line":	161,
			"primary_score":	1999827,
			"second_score":	112420
		}, {
			"file":	"src/mod_chunked.c",
			"line":	164,
			"primary_score":	1999857,
			"second_score":	112486
		}, {
			"file":	"src/mod_chunked.c",
			"line":	165,
			"primary_score":	1999857,
			"second_score":	112536
		}, {
			"file":	"src/mod_chunked.c",
			"line":	167,
			"primary_score":	1999857,
			"second_score":	112535
		}, {
			"file":	"src/mod_chunked.c",
			"line":	169,
			"primary_score":	1999857,
			"second_score":	112528
		}, {
			"file":	"src/mod_chunked.c",
			"line":	175,
			"primary_score":	1999827,
			"second_score":	112413
		}, {
			"file":	"src/mod_chunked.c",
			"line":	179,
			"primary_score":	1999827,
			"second_score":	112785
		}, {
			"file":	"src/mod_chunked.c",
			"line":	180,
			"primary_score":	1999827,
			"second_score":	112784
		}, {
			"file":	"src/mod_chunked.c",
			"line":	181,
			"primary_score":	1999827,
			"second_score":	112783
		}, {
			"file":	"src/mod_chunked.c",
			"line":	182,
			"primary_score":	1999827,
			"second_score":	112782
		}, {
			"file":	"src/mod_chunked.c",
			"line":	183,
			"primary_score":	1999827,
			"second_score":	112781
		}, {
			"file":	"src/mod_chunked.c",
			"line":	185,
			"primary_score":	1999827,
			"second_score":	112780
		}, {
			"file":	"src/mod_chunked.c",
			"line":	188,
			"primary_score":	1999827,
			"second_score":	112412
		}, {
			"file":	"src/mod_chunked.c",
			"line":	189,
			"primary_score":	1999827,
			"second_score":	112404
		}, {
			"file":	"src/mod_chunked.c",
			"line":	190,
			"primary_score":	1999827,
			"second_score":	112403
		}, {
			"file":	"src/mod_chunked.c",
			"line":	191,
			"primary_score":	1999827,
			"second_score":	112402
		}, {
			"file":	"src/mod_chunked.c",
			"line":	194,
			"primary_score":	1999827,
			"second_score":	112380
		}, {
			"file":	"src/mod_chunked.c",
			"line":	198,
			"primary_score":	1999827,
			"second_score":	112379
		}, {
			"file":	"src/mod_chunked.c",
			"line":	201,
			"primary_score":	1999827,
			"second_score":	112378
		}, {
			"file":	"src/mod_chunked.c",
			"line":	202,
			"primary_score":	1999845,
			"second_score":	112377
		}, {
			"file":	"src/mod_chunked.c",
			"line":	204,
			"primary_score":	1999827,
			"second_score":	112370
		}, {
			"file":	"src/mod_chunked.c",
			"line":	205,
			"primary_score":	1999845,
			"second_score":	112369
		}, {
			"file":	"src/mod_chunked.c",
			"line":	206,
			"primary_score":	1999845,
			"second_score":	112368
		}, {
			"file":	"src/mod_chunked.c",
			"line":	225,
			"primary_score":	1999827,
			"second_score":	112367
		}, {
			"file":	"src/mod_chunked.c",
			"line":	227,
			"primary_score":	1999827,
			"second_score":	112366
		}, {
			"file":	"src/mod_chunked.c",
			"line":	228,
			"primary_score":	1999827,
			"second_score":	112365
		}, {
			"file":	"src/mod_chunked.c",
			"line":	229,
			"primary_score":	1999827,
			"second_score":	112346
		}, {
			"file":	"src/mod_chunked.c",
			"line":	282,
			"primary_score":	1999817,
			"second_score":	110903
		}, {
			"file":	"src/mod_chunked.c",
			"line":	283,
			"primary_score":	1999817,
			"second_score":	110902
		}, {
			"file":	"src/mod_chunked.c",
			"line":	284,
			"primary_score":	1999817,
			"second_score":	110901
		}, {
			"file":	"src/mod_chunked.c",
			"line":	285,
			"primary_score":	1999817,
			"second_score":	110900
		}, {
			"file":	"src/mod_chunked.c",
			"line":	286,
			"primary_score":	1999817,
			"second_score":	110899
		}, {
			"file":	"src/mod_chunked.c",
			"line":	287,
			"primary_score":	1999817,
			"second_score":	110898
		}, {
			"file":	"src/mod_chunked.c",
			"line":	289,
			"primary_score":	1999817,
			"second_score":	110897
		}, {
			"file":	"src/mod_chunked.c",
			"line":	292,
			"primary_score":	1999817,
			"second_score":	110896
		}, {
			"file":	"src/mod_chunked.c",
			"line":	365,
			"primary_score":	1999817,
			"second_score":	540127
		}, {
			"file":	"src/mod_chunked.c",
			"line":	366,
			"primary_score":	1999817,
			"second_score":	540126
		}, {
			"file":	"src/mod_chunked.c",
			"line":	368,
			"primary_score":	1999817,
			"second_score":	540099
		}, {
			"file":	"src/mod_chunked.c",
			"line":	369,
			"primary_score":	1999817,
			"second_score":	540098
		}, {
			"file":	"src/mod_chunked.c",
			"line":	370,
			"primary_score":	1999817,
			"second_score":	540097
		}, {
			"file":	"src/mod_chunked.c",
			"line":	371,
			"primary_score":	1999817,
			"second_score":	540096
		}, {
			"file":	"src/mod_chunked.c",
			"line":	372,
			"primary_score":	1999817,
			"second_score":	540095
		}, {
			"file":	"src/mod_chunked.c",
			"line":	373,
			"primary_score":	1999817,
			"second_score":	540094
		}, {
			"file":	"src/mod_chunked.c",
			"line":	375,
			"primary_score":	1999817,
			"second_score":	540093
		}, {
			"file":	"src/mod_chunked.c",
			"line":	377,
			"primary_score":	1999817,
			"second_score":	540092
		}, {
			"file":	"src/mod_compress.c",
			"line":	64,
			"primary_score":	1999830,
			"second_score":	537296
		}, {
			"file":	"src/mod_compress.c",
			"line":	66,
			"primary_score":	1999830,
			"second_score":	537295
		}, {
			"file":	"src/mod_compress.c",
			"line":	68,
			"primary_score":	1999830,
			"second_score":	537294
		}, {
			"file":	"src/mod_compress.c",
			"line":	70,
			"primary_score":	1999830,
			"second_score":	537293
		}, {
			"file":	"src/mod_compress.c",
			"line":	71,
			"primary_score":	1999830,
			"second_score":	537285
		}, {
			"file":	"src/mod_compress.c",
			"line":	73,
			"primary_score":	1999830,
			"second_score":	537277
		}, {
			"file":	"src/mod_compress.c",
			"line":	77,
			"primary_score":	1999830,
			"second_score":	10742
		}, {
			"file":	"src/mod_compress.c",
			"line":	79,
			"primary_score":	1999830,
			"second_score":	10741
		}, {
			"file":	"src/mod_compress.c",
			"line":	81,
			"primary_score":	1999830,
			"second_score":	10740
		}, {
			"file":	"src/mod_compress.c",
			"line":	83,
			"primary_score":	1999830,
			"second_score":	10739
		}, {
			"file":	"src/mod_compress.c",
			"line":	84,
			"primary_score":	1999830,
			"second_score":	10735
		}, {
			"file":	"src/mod_compress.c",
			"line":	86,
			"primary_score":	1999830,
			"second_score":	10731
		}, {
			"file":	"src/mod_compress.c",
			"line":	87,
			"primary_score":	1999830,
			"second_score":	10730
		}, {
			"file":	"src/mod_compress.c",
			"line":	88,
			"primary_score":	1999830,
			"second_score":	10729
		}, {
			"file":	"src/mod_compress.c",
			"line":	89,
			"primary_score":	1999830,
			"second_score":	10328
		}, {
			"file":	"src/mod_compress.c",
			"line":	91,
			"primary_score":	1999830,
			"second_score":	10327
		}, {
			"file":	"src/mod_compress.c",
			"line":	93,
			"primary_score":	1999830,
			"second_score":	10326
		}, {
			"file":	"src/mod_compress.c",
			"line":	94,
			"primary_score":	1999830,
			"second_score":	10318
		}, {
			"file":	"src/mod_compress.c",
			"line":	96,
			"primary_score":	1999830,
			"second_score":	10314
		}, {
			"file":	"src/mod_compress.c",
			"line":	98,
			"primary_score":	1999830,
			"second_score":	10313
		}, {
			"file":	"src/mod_compress.c",
			"line":	102,
			"primary_score":	1999830,
			"second_score":	10312
		}, {
			"file":	"src/mod_compress.c",
			"line":	104,
			"primary_score":	1999830,
			"second_score":	10311
		}, {
			"file":	"src/mod_compress.c",
			"line":	156,
			"primary_score":	1999830,
			"second_score":	348395
		}, {
			"file":	"src/mod_compress.c",
			"line":	157,
			"primary_score":	1999830,
			"second_score":	348394
		}, {
			"file":	"src/mod_compress.c",
			"line":	159,
			"primary_score":	1999830,
			"second_score":	348393
		}, {
			"file":	"src/mod_compress.c",
			"line":	166,
			"primary_score":	1999830,
			"second_score":	348392
		}, {
			"file":	"src/mod_compress.c",
			"line":	168,
			"primary_score":	1999830,
			"second_score":	348391
		}, {
			"file":	"src/mod_compress.c",
			"line":	169,
			"primary_score":	1999830,
			"second_score":	339025
		}, {
			"file":	"src/mod_compress.c",
			"line":	171,
			"primary_score":	1999830,
			"second_score":	339024
		}, {
			"file":	"src/mod_compress.c",
			"line":	172,
			"primary_score":	1999830,
			"second_score":	339023
		}, {
			"file":	"src/mod_compress.c",
			"line":	173,
			"primary_score":	1999830,
			"second_score":	339015
		}, {
			"file":	"src/mod_compress.c",
			"line":	174,
			"primary_score":	1999830,
			"second_score":	339009
		}, {
			"file":	"src/mod_compress.c",
			"line":	176,
			"primary_score":	1999830,
			"second_score":	339008
		}, {
			"file":	"src/mod_compress.c",
			"line":	177,
			"primary_score":	1999830,
			"second_score":	339007
		}, {
			"file":	"src/mod_compress.c",
			"line":	178,
			"primary_score":	1999830,
			"second_score":	339006
		}, {
			"file":	"src/mod_compress.c",
			"line":	180,
			"primary_score":	1999830,
			"second_score":	339005
		}, {
			"file":	"src/mod_compress.c",
			"line":	182,
			"primary_score":	1999830,
			"second_score":	339004
		}, {
			"file":	"src/mod_compress.c",
			"line":	186,
			"primary_score":	1999830,
			"second_score":	338768
		}, {
			"file":	"src/mod_compress.c",
			"line":	187,
			"primary_score":	1999830,
			"second_score":	345522
		}, {
			"file":	"src/mod_compress.c",
			"line":	188,
			"primary_score":	1999830,
			"second_score":	345521
		}, {
			"file":	"src/mod_compress.c",
			"line":	201,
			"primary_score":	1999830,
			"second_score":	338765
		}, {
			"file":	"src/mod_compress.c",
			"line":	604,
			"primary_score":	1999837,
			"second_score":	112864
		}, {
			"file":	"src/mod_compress.c",
			"line":	605,
			"primary_score":	1999837,
			"second_score":	112863
		}, {
			"file":	"src/mod_compress.c",
			"line":	606,
			"primary_score":	1999837,
			"second_score":	112862
		}, {
			"file":	"src/mod_compress.c",
			"line":	607,
			"primary_score":	1999837,
			"second_score":	112861
		}, {
			"file":	"src/mod_compress.c",
			"line":	608,
			"primary_score":	1999837,
			"second_score":	112860
		}, {
			"file":	"src/mod_compress.c",
			"line":	609,
			"primary_score":	1999837,
			"second_score":	112859
		}, {
			"file":	"src/mod_compress.c",
			"line":	610,
			"primary_score":	1999837,
			"second_score":	112858
		}, {
			"file":	"src/mod_compress.c",
			"line":	611,
			"primary_score":	1999837,
			"second_score":	112857
		}, {
			"file":	"src/mod_compress.c",
			"line":	612,
			"primary_score":	1999837,
			"second_score":	112856
		}, {
			"file":	"src/mod_compress.c",
			"line":	613,
			"primary_score":	1999837,
			"second_score":	112855
		}, {
			"file":	"src/mod_compress.c",
			"line":	614,
			"primary_score":	1999837,
			"second_score":	112854
		}, {
			"file":	"src/mod_compress.c",
			"line":	615,
			"primary_score":	1999837,
			"second_score":	112853
		}, {
			"file":	"src/mod_compress.c",
			"line":	617,
			"primary_score":	1999837,
			"second_score":	112852
		}, {
			"file":	"src/mod_compress.c",
			"line":	618,
			"primary_score":	1999837,
			"second_score":	112851
		}, {
			"file":	"src/mod_compress.c",
			"line":	619,
			"primary_score":	1999837,
			"second_score":	112850
		}, {
			"file":	"src/mod_compress.c",
			"line":	621,
			"primary_score":	1999837,
			"second_score":	112849
		}, {
			"file":	"src/mod_compress.c",
			"line":	623,
			"primary_score":	1999855,
			"second_score":	112848
		}, {
			"file":	"src/mod_compress.c",
			"line":	626,
			"primary_score":	1999855,
			"second_score":	112793
		}, {
			"file":	"src/mod_compress.c",
			"line":	631,
			"primary_score":	1999869,
			"second_score":	112792
		}, {
			"file":	"src/mod_compress.c",
			"line":	632,
			"primary_score":	1999937,
			"second_score":	112789
		}, {
			"file":	"src/mod_compress.c",
			"line":	794,
			"primary_score":	1999830,
			"second_score":	540836
		}, {
			"file":	"src/mod_compress.c",
			"line":	795,
			"primary_score":	1999830,
			"second_score":	540835
		}, {
			"file":	"src/mod_compress.c",
			"line":	797,
			"primary_score":	1999830,
			"second_score":	540808
		}, {
			"file":	"src/mod_compress.c",
			"line":	798,
			"primary_score":	1999830,
			"second_score":	540807
		}, {
			"file":	"src/mod_compress.c",
			"line":	801,
			"primary_score":	1999830,
			"second_score":	540806
		}, {
			"file":	"src/mod_compress.c",
			"line":	803,
			"primary_score":	1999830,
			"second_score":	540805
		}, {
			"file":	"src/mod_compress.c",
			"line":	805,
			"primary_score":	1999830,
			"second_score":	540804
		}, {
			"file":	"src/mod_compress.c",
			"line":	807,
			"primary_score":	1999830,
			"second_score":	540803
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	82,
			"primary_score":	1999817,
			"second_score":	288356
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	84,
			"primary_score":	1999817,
			"second_score":	288355
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	86,
			"primary_score":	1999817,
			"second_score":	288354
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	138,
			"primary_score":	1999817,
			"second_score":	8474
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	140,
			"primary_score":	1999817,
			"second_score":	8473
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	146,
			"primary_score":	1999817,
			"second_score":	8472
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	149,
			"primary_score":	1999817,
			"second_score":	8471
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	154,
			"primary_score":	1999817,
			"second_score":	536869
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	156,
			"primary_score":	1999817,
			"second_score":	536868
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	158,
			"primary_score":	1999817,
			"second_score":	536867
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	160,
			"primary_score":	1999817,
			"second_score":	536866
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	161,
			"primary_score":	1999817,
			"second_score":	536858
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	162,
			"primary_score":	1999817,
			"second_score":	536850
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	164,
			"primary_score":	1999817,
			"second_score":	536842
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	169,
			"primary_score":	1999817,
			"second_score":	8963
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	171,
			"primary_score":	1999817,
			"second_score":	8962
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	173,
			"primary_score":	1999817,
			"second_score":	8961
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	175,
			"primary_score":	1999817,
			"second_score":	8960
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	176,
			"primary_score":	1999817,
			"second_score":	8959
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	177,
			"primary_score":	1999817,
			"second_score":	8958
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	178,
			"primary_score":	1999817,
			"second_score":	8477
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	180,
			"primary_score":	1999817,
			"second_score":	8476
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	182,
			"primary_score":	1999817,
			"second_score":	8475
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	183,
			"primary_score":	1999817,
			"second_score":	8470
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	184,
			"primary_score":	1999817,
			"second_score":	8466
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	185,
			"primary_score":	1999817,
			"second_score":	8462
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	187,
			"primary_score":	1999817,
			"second_score":	8458
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	189,
			"primary_score":	1999817,
			"second_score":	8457
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	192,
			"primary_score":	1999817,
			"second_score":	8456
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	193,
			"primary_score":	1999817,
			"second_score":	8452
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	194,
			"primary_score":	1999817,
			"second_score":	8448
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	196,
			"primary_score":	1999817,
			"second_score":	8444
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	198,
			"primary_score":	1999817,
			"second_score":	8443
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	202,
			"primary_score":	1999817,
			"second_score":	287497
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	204,
			"primary_score":	1999817,
			"second_score":	287496
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	239,
			"primary_score":	1999817,
			"second_score":	287461
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	258,
			"primary_score":	1999817,
			"second_score":	317065
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	259,
			"primary_score":	1999817,
			"second_score":	317064
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	261,
			"primary_score":	1999817,
			"second_score":	317063
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	277,
			"primary_score":	1999817,
			"second_score":	317062
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	279,
			"primary_score":	1999817,
			"second_score":	317061
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	281,
			"primary_score":	1999817,
			"second_score":	317060
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	282,
			"primary_score":	1999817,
			"second_score":	288360
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	283,
			"primary_score":	1999817,
			"second_score":	288359
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	285,
			"primary_score":	1999817,
			"second_score":	288358
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	286,
			"primary_score":	1999817,
			"second_score":	288357
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	287,
			"primary_score":	1999817,
			"second_score":	288353
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	288,
			"primary_score":	1999817,
			"second_score":	288352
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	289,
			"primary_score":	1999817,
			"second_score":	288344
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	290,
			"primary_score":	1999817,
			"second_score":	288343
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	291,
			"primary_score":	1999817,
			"second_score":	288342
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	292,
			"primary_score":	1999817,
			"second_score":	288341
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	293,
			"primary_score":	1999817,
			"second_score":	288340
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	294,
			"primary_score":	1999817,
			"second_score":	288339
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	295,
			"primary_score":	1999817,
			"second_score":	288331
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	297,
			"primary_score":	1999817,
			"second_score":	288323
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	298,
			"primary_score":	1999817,
			"second_score":	288322
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	299,
			"primary_score":	1999817,
			"second_score":	288321
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	300,
			"primary_score":	1999817,
			"second_score":	288320
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	301,
			"primary_score":	1999817,
			"second_score":	288319
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	302,
			"primary_score":	1999817,
			"second_score":	288318
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	303,
			"primary_score":	1999817,
			"second_score":	288317
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	304,
			"primary_score":	1999817,
			"second_score":	288316
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	305,
			"primary_score":	1999817,
			"second_score":	288315
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	306,
			"primary_score":	1999817,
			"second_score":	288314
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	307,
			"primary_score":	1999817,
			"second_score":	288313
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	309,
			"primary_score":	1999817,
			"second_score":	288312
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	310,
			"primary_score":	1999817,
			"second_score":	288311
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	312,
			"primary_score":	1999817,
			"second_score":	288310
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	316,
			"primary_score":	1999817,
			"second_score":	287498
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	319,
			"primary_score":	1999817,
			"second_score":	287460
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	946,
			"primary_score":	1999817,
			"second_score":	540410
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	947,
			"primary_score":	1999817,
			"second_score":	540409
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	949,
			"primary_score":	1999817,
			"second_score":	540382
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	950,
			"primary_score":	1999817,
			"second_score":	540381
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	951,
			"primary_score":	1999817,
			"second_score":	540380
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	952,
			"primary_score":	1999817,
			"second_score":	540379
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	954,
			"primary_score":	1999817,
			"second_score":	540378
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	956,
			"primary_score":	1999817,
			"second_score":	540377
		}, {
			"file":	"src/mod_expire.c",
			"line":	40,
			"primary_score":	1999826,
			"second_score":	539106
		}, {
			"file":	"src/mod_expire.c",
			"line":	42,
			"primary_score":	1999826,
			"second_score":	539105
		}, {
			"file":	"src/mod_expire.c",
			"line":	44,
			"primary_score":	1999826,
			"second_score":	539104
		}, {
			"file":	"src/mod_expire.c",
			"line":	46,
			"primary_score":	1999826,
			"second_score":	539103
		}, {
			"file":	"src/mod_expire.c",
			"line":	48,
			"primary_score":	1999826,
			"second_score":	539095
		}, {
			"file":	"src/mod_expire.c",
			"line":	50,
			"primary_score":	1999826,
			"second_score":	539085
		}, {
			"file":	"src/mod_expire.c",
			"line":	55,
			"primary_score":	1999826,
			"second_score":	14197
		}, {
			"file":	"src/mod_expire.c",
			"line":	57,
			"primary_score":	1999826,
			"second_score":	14196
		}, {
			"file":	"src/mod_expire.c",
			"line":	59,
			"primary_score":	1999826,
			"second_score":	14195
		}, {
			"file":	"src/mod_expire.c",
			"line":	61,
			"primary_score":	1999826,
			"second_score":	14194
		}, {
			"file":	"src/mod_expire.c",
			"line":	63,
			"primary_score":	1999826,
			"second_score":	14190
		}, {
			"file":	"src/mod_expire.c",
			"line":	64,
			"primary_score":	1999826,
			"second_score":	14189
		}, {
			"file":	"src/mod_expire.c",
			"line":	65,
			"primary_score":	1999826,
			"second_score":	14188
		}, {
			"file":	"src/mod_expire.c",
			"line":	66,
			"primary_score":	1999826,
			"second_score":	13947
		}, {
			"file":	"src/mod_expire.c",
			"line":	68,
			"primary_score":	1999826,
			"second_score":	13946
		}, {
			"file":	"src/mod_expire.c",
			"line":	70,
			"primary_score":	1999826,
			"second_score":	13938
		}, {
			"file":	"src/mod_expire.c",
			"line":	72,
			"primary_score":	1999826,
			"second_score":	13937
		}, {
			"file":	"src/mod_expire.c",
			"line":	75,
			"primary_score":	1999826,
			"second_score":	13936
		}, {
			"file":	"src/mod_expire.c",
			"line":	77,
			"primary_score":	1999826,
			"second_score":	13935
		}, {
			"file":	"src/mod_expire.c",
			"line":	216,
			"primary_score":	1999826,
			"second_score":	436057
		}, {
			"file":	"src/mod_expire.c",
			"line":	217,
			"primary_score":	1999826,
			"second_score":	436056
		}, {
			"file":	"src/mod_expire.c",
			"line":	219,
			"primary_score":	1999826,
			"second_score":	436055
		}, {
			"file":	"src/mod_expire.c",
			"line":	224,
			"primary_score":	1999826,
			"second_score":	436054
		}, {
			"file":	"src/mod_expire.c",
			"line":	226,
			"primary_score":	1999826,
			"second_score":	436053
		}, {
			"file":	"src/mod_expire.c",
			"line":	228,
			"primary_score":	1999826,
			"second_score":	436052
		}, {
			"file":	"src/mod_expire.c",
			"line":	229,
			"primary_score":	1999826,
			"second_score":	433281
		}, {
			"file":	"src/mod_expire.c",
			"line":	231,
			"primary_score":	1999826,
			"second_score":	433280
		}, {
			"file":	"src/mod_expire.c",
			"line":	232,
			"primary_score":	1999826,
			"second_score":	433279
		}, {
			"file":	"src/mod_expire.c",
			"line":	234,
			"primary_score":	1999826,
			"second_score":	433273
		}, {
			"file":	"src/mod_expire.c",
			"line":	236,
			"primary_score":	1999826,
			"second_score":	433272
		}, {
			"file":	"src/mod_expire.c",
			"line":	238,
			"primary_score":	1999826,
			"second_score":	433271
		}, {
			"file":	"src/mod_expire.c",
			"line":	242,
			"primary_score":	1999826,
			"second_score":	433189
		}, {
			"file":	"src/mod_expire.c",
			"line":	255,
			"primary_score":	1999826,
			"second_score":	433188
		}, {
			"file":	"src/mod_expire.c",
			"line":	259,
			"primary_score":	1999860,
			"second_score":	113173
		}, {
			"file":	"src/mod_expire.c",
			"line":	260,
			"primary_score":	1999860,
			"second_score":	113172
		}, {
			"file":	"src/mod_expire.c",
			"line":	262,
			"primary_score":	1999860,
			"second_score":	113171
		}, {
			"file":	"src/mod_expire.c",
			"line":	265,
			"primary_score":	1999860,
			"second_score":	113170
		}, {
			"file":	"src/mod_expire.c",
			"line":	266,
			"primary_score":	1999860,
			"second_score":	112880
		}, {
			"file":	"src/mod_expire.c",
			"line":	267,
			"primary_score":	1999860,
			"second_score":	112879
		}, {
			"file":	"src/mod_expire.c",
			"line":	270,
			"primary_score":	1999860,
			"second_score":	112878
		}, {
			"file":	"src/mod_expire.c",
			"line":	273,
			"primary_score":	1999862,
			"second_score":	112944
		}, {
			"file":	"src/mod_expire.c",
			"line":	274,
			"primary_score":	1999862,
			"second_score":	112987
		}, {
			"file":	"src/mod_expire.c",
			"line":	276,
			"primary_score":	1999862,
			"second_score":	112986
		}, {
			"file":	"src/mod_expire.c",
			"line":	282,
			"primary_score":	1999860,
			"second_score":	112871
		}, {
			"file":	"src/mod_expire.c",
			"line":	286,
			"primary_score":	1999833,
			"second_score":	113178
		}, {
			"file":	"src/mod_expire.c",
			"line":	287,
			"primary_score":	1999833,
			"second_score":	113177
		}, {
			"file":	"src/mod_expire.c",
			"line":	288,
			"primary_score":	1999833,
			"second_score":	113176
		}, {
			"file":	"src/mod_expire.c",
			"line":	290,
			"primary_score":	1999833,
			"second_score":	113175
		}, {
			"file":	"src/mod_expire.c",
			"line":	292,
			"primary_score":	1999860,
			"second_score":	113174
		}, {
			"file":	"src/mod_expire.c",
			"line":	294,
			"primary_score":	1999860,
			"second_score":	112870
		}, {
			"file":	"src/mod_expire.c",
			"line":	296,
			"primary_score":	1999860,
			"second_score":	112869
		}, {
			"file":	"src/mod_expire.c",
			"line":	356,
			"primary_score":	1999860,
			"second_score":	112868
		}, {
			"file":	"src/mod_expire.c",
			"line":	362,
			"primary_score":	1999826,
			"second_score":	542138
		}, {
			"file":	"src/mod_expire.c",
			"line":	363,
			"primary_score":	1999826,
			"second_score":	542137
		}, {
			"file":	"src/mod_expire.c",
			"line":	365,
			"primary_score":	1999826,
			"second_score":	542110
		}, {
			"file":	"src/mod_expire.c",
			"line":	366,
			"primary_score":	1999826,
			"second_score":	542109
		}, {
			"file":	"src/mod_expire.c",
			"line":	367,
			"primary_score":	1999826,
			"second_score":	542108
		}, {
			"file":	"src/mod_expire.c",
			"line":	368,
			"primary_score":	1999826,
			"second_score":	542107
		}, {
			"file":	"src/mod_expire.c",
			"line":	370,
			"primary_score":	1999826,
			"second_score":	542106
		}, {
			"file":	"src/mod_expire.c",
			"line":	372,
			"primary_score":	1999826,
			"second_score":	542105
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	39,
			"primary_score":	1999817,
			"second_score":	539675
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	41,
			"primary_score":	1999817,
			"second_score":	539674
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	43,
			"primary_score":	1999817,
			"second_score":	539673
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	45,
			"primary_score":	1999817,
			"second_score":	539672
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	47,
			"primary_score":	1999817,
			"second_score":	539664
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	52,
			"primary_score":	1999817,
			"second_score":	18279
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	54,
			"primary_score":	1999817,
			"second_score":	18278
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	56,
			"primary_score":	1999817,
			"second_score":	18277
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	58,
			"primary_score":	1999817,
			"second_score":	18276
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	59,
			"primary_score":	1999817,
			"second_score":	18275
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	60,
			"primary_score":	1999817,
			"second_score":	18274
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	61,
			"primary_score":	1999817,
			"second_score":	17947
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	63,
			"primary_score":	1999817,
			"second_score":	17946
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	65,
			"primary_score":	1999817,
			"second_score":	17945
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	67,
			"primary_score":	1999817,
			"second_score":	17937
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	69,
			"primary_score":	1999817,
			"second_score":	17936
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	72,
			"primary_score":	1999817,
			"second_score":	17935
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	74,
			"primary_score":	1999817,
			"second_score":	17931
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	76,
			"primary_score":	1999817,
			"second_score":	17930
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	82,
			"primary_score":	1999817,
			"second_score":	536438
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	83,
			"primary_score":	1999817,
			"second_score":	536437
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	85,
			"primary_score":	1999817,
			"second_score":	536436
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	91,
			"primary_score":	1999817,
			"second_score":	536435
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	93,
			"primary_score":	1999817,
			"second_score":	536434
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	95,
			"primary_score":	1999817,
			"second_score":	536433
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	96,
			"primary_score":	1999817,
			"second_score":	530082
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	98,
			"primary_score":	1999817,
			"second_score":	530081
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	99,
			"primary_score":	1999817,
			"second_score":	530080
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	101,
			"primary_score":	1999817,
			"second_score":	530074
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	102,
			"primary_score":	1999817,
			"second_score":	530073
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	104,
			"primary_score":	1999817,
			"second_score":	530072
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	106,
			"primary_score":	1999817,
			"second_score":	530071
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	111,
			"primary_score":	1999817,
			"second_score":	529916
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	242,
			"primary_score":	1999817,
			"second_score":	542994
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	243,
			"primary_score":	1999817,
			"second_score":	542993
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	245,
			"primary_score":	1999817,
			"second_score":	542966
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	246,
			"primary_score":	1999817,
			"second_score":	542965
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	247,
			"primary_score":	1999817,
			"second_score":	542964
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	248,
			"primary_score":	1999817,
			"second_score":	542963
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	250,
			"primary_score":	1999817,
			"second_score":	542962
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	252,
			"primary_score":	1999817,
			"second_score":	542961
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	763,
			"primary_score":	1999834,
			"second_score":	537793
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	764,
			"primary_score":	1999834,
			"second_score":	537792
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	767,
			"primary_score":	1999834,
			"second_score":	537791
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	768,
			"primary_score":	1999834,
			"second_score":	537690
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	770,
			"primary_score":	1999834,
			"second_score":	537689
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	773,
			"primary_score":	1999834,
			"second_score":	537688
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	775,
			"primary_score":	1999834,
			"second_score":	537601
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	776,
			"primary_score":	1999834,
			"second_score":	537600
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	777,
			"primary_score":	1999834,
			"second_score":	537599
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	778,
			"primary_score":	1999834,
			"second_score":	537598
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	779,
			"primary_score":	1999834,
			"second_score":	537597
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	781,
			"primary_score":	1999834,
			"second_score":	537596
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	785,
			"primary_score":	1999834,
			"second_score":	11083
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	787,
			"primary_score":	1999834,
			"second_score":	11082
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	789,
			"primary_score":	1999834,
			"second_score":	11081
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	791,
			"primary_score":	1999834,
			"second_score":	11080
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	793,
			"primary_score":	1999834,
			"second_score":	11079
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	797,
			"primary_score":	1999834,
			"second_score":	541284
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	799,
			"primary_score":	1999834,
			"second_score":	541283
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	800,
			"primary_score":	1999834,
			"second_score":	541282
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	802,
			"primary_score":	1999834,
			"second_score":	541255
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	803,
			"primary_score":	1999834,
			"second_score":	541254
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	805,
			"primary_score":	1999834,
			"second_score":	541253
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	807,
			"primary_score":	1999834,
			"second_score":	541252
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	808,
			"primary_score":	1999834,
			"second_score":	541225
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	809,
			"primary_score":	1999834,
			"second_score":	541208
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	811,
			"primary_score":	1999834,
			"second_score":	541144
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	47,
			"primary_score":	1999834,
			"second_score":	538106
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	49,
			"primary_score":	1999834,
			"second_score":	538105
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	50,
			"primary_score":	1999834,
			"second_score":	538098
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	53,
			"primary_score":	1999834,
			"second_score":	538079
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	54,
			"primary_score":	1999834,
			"second_score":	538062
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	55,
			"primary_score":	1999834,
			"second_score":	538061
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	57,
			"primary_score":	1999834,
			"second_score":	537999
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	61,
			"primary_score":	1999834,
			"second_score":	537687
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	63,
			"primary_score":	1999834,
			"second_score":	537683
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	65,
			"primary_score":	1999834,
			"second_score":	537656
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	66,
			"primary_score":	1999834,
			"second_score":	537602
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	70,
			"primary_score":	1999834,
			"second_score":	538467
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	72,
			"primary_score":	1999834,
			"second_score":	538466
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	74,
			"primary_score":	1999834,
			"second_score":	538465
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	76,
			"primary_score":	1999834,
			"second_score":	538454
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	80,
			"primary_score":	1999834,
			"second_score":	538453
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	81,
			"primary_score":	1999834,
			"second_score":	538447
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	82,
			"primary_score":	1999834,
			"second_score":	538368
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	83,
			"primary_score":	1999834,
			"second_score":	538251
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	84,
			"primary_score":	1999834,
			"second_score":	538107
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	86,
			"primary_score":	1999834,
			"second_score":	537998
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	89,
			"primary_score":	1999834,
			"second_score":	537997
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	91,
			"primary_score":	1999834,
			"second_score":	537901
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	92,
			"primary_score":	1999834,
			"second_score":	537893
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	93,
			"primary_score":	1999834,
			"second_score":	537885
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	94,
			"primary_score":	1999834,
			"second_score":	537877
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	96,
			"primary_score":	1999834,
			"second_score":	537871
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	110,
			"primary_score":	1999834,
			"second_score":	537863
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	114,
			"primary_score":	1999834,
			"second_score":	12229
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	116,
			"primary_score":	1999834,
			"second_score":	12228
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	118,
			"primary_score":	1999834,
			"second_score":	12227
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	119,
			"primary_score":	1999834,
			"second_score":	12226
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	120,
			"primary_score":	1999834,
			"second_score":	12225
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	121,
			"primary_score":	1999834,
			"second_score":	11255
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	123,
			"primary_score":	1999834,
			"second_score":	11254
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	125,
			"primary_score":	1999834,
			"second_score":	11253
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	126,
			"primary_score":	1999834,
			"second_score":	11243
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	128,
			"primary_score":	1999834,
			"second_score":	11240
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	129,
			"primary_score":	1999834,
			"second_score":	11230
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	131,
			"primary_score":	1999834,
			"second_score":	11220
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	133,
			"primary_score":	1999834,
			"second_score":	11219
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	136,
			"primary_score":	1999834,
			"second_score":	11218
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	137,
			"primary_score":	1999834,
			"second_score":	11164
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	139,
			"primary_score":	1999834,
			"second_score":	11127
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	140,
			"primary_score":	1999834,
			"second_score":	11123
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	141,
			"primary_score":	1999834,
			"second_score":	11119
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	142,
			"primary_score":	1999834,
			"second_score":	11115
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	148,
			"primary_score":	1999834,
			"second_score":	11111
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	150,
			"primary_score":	1999834,
			"second_score":	11110
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	152,
			"primary_score":	1999834,
			"second_score":	11087
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	156,
			"primary_score":	1999834,
			"second_score":	354492
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	157,
			"primary_score":	1999834,
			"second_score":	354491
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	159,
			"primary_score":	1999834,
			"second_score":	354490
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	160,
			"primary_score":	1999834,
			"second_score":	377654
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	162,
			"primary_score":	1999834,
			"second_score":	377653
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	175,
			"primary_score":	1999834,
			"second_score":	377652
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	176,
			"primary_score":	1999834,
			"second_score":	377547
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	177,
			"primary_score":	1999834,
			"second_score":	377546
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	180,
			"primary_score":	1999834,
			"second_score":	377545
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	188,
			"primary_score":	1999834,
			"second_score":	377544
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	197,
			"primary_score":	1999834,
			"second_score":	377543
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	198,
			"primary_score":	1999834,
			"second_score":	377542
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	199,
			"primary_score":	1999834,
			"second_score":	377541
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	202,
			"primary_score":	1999834,
			"second_score":	377540
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	211,
			"primary_score":	1999834,
			"second_score":	377539
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	213,
			"primary_score":	1999834,
			"second_score":	377511
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	216,
			"primary_score":	1999834,
			"second_score":	377506
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	217,
			"primary_score":	1999834,
			"second_score":	377487
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	218,
			"primary_score":	1999834,
			"second_score":	377468
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	220,
			"primary_score":	1999834,
			"second_score":	377449
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	225,
			"primary_score":	1999834,
			"second_score":	354451
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	236,
			"primary_score":	1999834,
			"second_score":	379901
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	237,
			"primary_score":	1999834,
			"second_score":	379844
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	240,
			"primary_score":	1999834,
			"second_score":	379502
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	241,
			"primary_score":	1999834,
			"second_score":	379445
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	244,
			"primary_score":	1999834,
			"second_score":	379050
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	245,
			"primary_score":	1999834,
			"second_score":	378993
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	247,
			"primary_score":	1999834,
			"second_score":	378424
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	248,
			"primary_score":	1999834,
			"second_score":	378367
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	253,
			"primary_score":	1999834,
			"second_score":	397957
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	254,
			"primary_score":	1999834,
			"second_score":	397956
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	255,
			"primary_score":	1999834,
			"second_score":	397955
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	256,
			"primary_score":	1999834,
			"second_score":	397954
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	258,
			"primary_score":	1999834,
			"second_score":	397953
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	275,
			"primary_score":	1999834,
			"second_score":	397952
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	277,
			"primary_score":	1999834,
			"second_score":	397944
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	279,
			"primary_score":	1999834,
			"second_score":	397943
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	280,
			"primary_score":	1999834,
			"second_score":	355503
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	281,
			"primary_score":	1999834,
			"second_score":	355502
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	282,
			"primary_score":	1999834,
			"second_score":	355501
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	284,
			"primary_score":	1999834,
			"second_score":	355500
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	285,
			"primary_score":	1999834,
			"second_score":	355494
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	286,
			"primary_score":	1999834,
			"second_score":	355490
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	288,
			"primary_score":	1999834,
			"second_score":	355486
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	289,
			"primary_score":	1999834,
			"second_score":	355485
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	290,
			"primary_score":	1999834,
			"second_score":	355484
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	291,
			"primary_score":	1999834,
			"second_score":	355483
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	292,
			"primary_score":	1999834,
			"second_score":	355482
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	293,
			"primary_score":	1999834,
			"second_score":	355478
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	294,
			"primary_score":	1999834,
			"second_score":	355474
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	295,
			"primary_score":	1999834,
			"second_score":	355470
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	296,
			"primary_score":	1999834,
			"second_score":	355466
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	297,
			"primary_score":	1999834,
			"second_score":	355465
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	298,
			"primary_score":	1999834,
			"second_score":	355464
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	300,
			"primary_score":	1999834,
			"second_score":	355463
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	301,
			"primary_score":	1999834,
			"second_score":	355462
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	302,
			"primary_score":	1999834,
			"second_score":	355461
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	303,
			"primary_score":	1999834,
			"second_score":	355460
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	304,
			"primary_score":	1999834,
			"second_score":	355459
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	305,
			"primary_score":	1999834,
			"second_score":	355458
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	306,
			"primary_score":	1999834,
			"second_score":	355457
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	307,
			"primary_score":	1999834,
			"second_score":	355456
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	308,
			"primary_score":	1999834,
			"second_score":	355455
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	310,
			"primary_score":	1999834,
			"second_score":	355454
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	312,
			"primary_score":	1999834,
			"second_score":	355450
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	313,
			"primary_score":	1999834,
			"second_score":	355449
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	315,
			"primary_score":	1999834,
			"second_score":	355448
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	319,
			"primary_score":	1999834,
			"second_score":	354539
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	330,
			"primary_score":	1999834,
			"second_score":	354536
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	331,
			"primary_score":	1999834,
			"second_score":	380492
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	332,
			"primary_score":	1999834,
			"second_score":	380491
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	340,
			"primary_score":	1999834,
			"second_score":	380480
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	343,
			"primary_score":	1999834,
			"second_score":	354533
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	345,
			"primary_score":	1999834,
			"second_score":	380478
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	346,
			"primary_score":	1999834,
			"second_score":	380467
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	349,
			"primary_score":	1999834,
			"second_score":	380446
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	350,
			"primary_score":	1999834,
			"second_score":	380432
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	351,
			"primary_score":	1999834,
			"second_score":	380419
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	354,
			"primary_score":	1999834,
			"second_score":	380138
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	357,
			"primary_score":	1999834,
			"second_score":	380125
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	358,
			"primary_score":	1999834,
			"second_score":	380124
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	359,
			"primary_score":	1999834,
			"second_score":	380123
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	362,
			"primary_score":	1999834,
			"second_score":	380100
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	364,
			"primary_score":	1999834,
			"second_score":	380081
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	368,
			"primary_score":	1999834,
			"second_score":	379910
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	373,
			"primary_score":	1999834,
			"second_score":	379909
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	376,
			"primary_score":	1999834,
			"second_score":	379903
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	411,
			"primary_score":	1999834,
			"second_score":	379902
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	415,
			"primary_score":	1999834,
			"second_score":	377791
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	418,
			"primary_score":	1999834,
			"second_score":	354532
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	422,
			"primary_score":	1999834,
			"second_score":	354493
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	427,
			"primary_score":	1999834,
			"second_score":	354450
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	429,
			"primary_score":	1999834,
			"second_score":	354446
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2193,
			"primary_score":	1999834,
			"second_score":	18970
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2194,
			"primary_score":	1999834,
			"second_score":	18969
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2196,
			"primary_score":	1999834,
			"second_score":	18968
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2222,
			"primary_score":	1999834,
			"second_score":	110926
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2223,
			"primary_score":	1999834,
			"second_score":	110925
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2225,
			"primary_score":	1999834,
			"second_score":	110924
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2429,
			"primary_score":	1999868,
			"second_score":	113699
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2431,
			"primary_score":	1999868,
			"second_score":	113698
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2580,
			"primary_score":	1999834,
			"second_score":	541431
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2581,
			"primary_score":	1999834,
			"second_score":	541430
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2583,
			"primary_score":	1999834,
			"second_score":	541403
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2584,
			"primary_score":	1999834,
			"second_score":	541402
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2585,
			"primary_score":	1999834,
			"second_score":	541401
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2586,
			"primary_score":	1999834,
			"second_score":	541400
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2587,
			"primary_score":	1999834,
			"second_score":	541399
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2588,
			"primary_score":	1999834,
			"second_score":	541398
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2589,
			"primary_score":	1999834,
			"second_score":	541397
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2590,
			"primary_score":	1999834,
			"second_score":	541396
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2591,
			"primary_score":	1999834,
			"second_score":	541395
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2592,
			"primary_score":	1999834,
			"second_score":	541394
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2594,
			"primary_score":	1999834,
			"second_score":	541393
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2596,
			"primary_score":	1999834,
			"second_score":	541392
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	9,
			"primary_score":	1999834,
			"second_score":	380002
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	11,
			"primary_score":	1999834,
			"second_score":	380001
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	13,
			"primary_score":	1999834,
			"second_score":	380000
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	14,
			"primary_score":	1999834,
			"second_score":	379992
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	16,
			"primary_score":	1999834,
			"second_score":	379991
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	20,
			"primary_score":	1999834,
			"second_score":	12023
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	22,
			"primary_score":	1999834,
			"second_score":	12022
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	24,
			"primary_score":	1999834,
			"second_score":	12018
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	29,
			"primary_score":	1999834,
			"second_score":	380114
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	31,
			"primary_score":	1999834,
			"second_score":	380113
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	33,
			"primary_score":	1999834,
			"second_score":	380112
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	37,
			"primary_score":	1999834,
			"second_score":	12029
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	39,
			"primary_score":	1999834,
			"second_score":	12028
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	41,
			"primary_score":	1999834,
			"second_score":	12012
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	45,
			"primary_score":	1999834,
			"second_score":	379919
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	49,
			"primary_score":	1999834,
			"second_score":	379918
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	63,
			"primary_score":	1999834,
			"second_score":	379917
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	65,
			"primary_score":	1999834,
			"second_score":	379913
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	69,
			"primary_score":	1999834,
			"second_score":	380080
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	70,
			"primary_score":	1999834,
			"second_score":	380079
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	71,
			"primary_score":	1999834,
			"second_score":	380078
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	72,
			"primary_score":	1999834,
			"second_score":	380077
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	74,
			"primary_score":	1999834,
			"second_score":	380076
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	75,
			"primary_score":	1999834,
			"second_score":	380075
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	76,
			"primary_score":	1999834,
			"second_score":	380074
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	77,
			"primary_score":	1999834,
			"second_score":	380073
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	78,
			"primary_score":	1999834,
			"second_score":	380072
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	79,
			"primary_score":	1999834,
			"second_score":	380071
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	80,
			"primary_score":	1999834,
			"second_score":	380070
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	81,
			"primary_score":	1999834,
			"second_score":	380069
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	94,
			"primary_score":	1999834,
			"second_score":	380068
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	96,
			"primary_score":	1999834,
			"second_score":	380065
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	122,
			"primary_score":	1999834,
			"second_score":	380064
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	142,
			"primary_score":	1999834,
			"second_score":	380063
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	145,
			"primary_score":	1999834,
			"second_score":	380062
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	146,
			"primary_score":	1999834,
			"second_score":	380054
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	147,
			"primary_score":	1999834,
			"second_score":	380038
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	148,
			"primary_score":	1999834,
			"second_score":	380030
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	158,
			"primary_score":	1999834,
			"second_score":	380013
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	167,
			"primary_score":	1999834,
			"second_score":	380012
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	168,
			"primary_score":	1999834,
			"second_score":	380008
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	170,
			"primary_score":	1999834,
			"second_score":	380004
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	171,
			"primary_score":	1999834,
			"second_score":	380003
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	173,
			"primary_score":	1999834,
			"second_score":	379990
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	174,
			"primary_score":	1999834,
			"second_score":	379989
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	176,
			"primary_score":	1999834,
			"second_score":	379988
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	177,
			"primary_score":	1999834,
			"second_score":	379987
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	179,
			"primary_score":	1999834,
			"second_score":	379977
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	191,
			"primary_score":	1999834,
			"second_score":	379976
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	193,
			"primary_score":	1999834,
			"second_score":	379975
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	194,
			"primary_score":	1999834,
			"second_score":	379962
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	195,
			"primary_score":	1999834,
			"second_score":	379921
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	202,
			"primary_score":	1999834,
			"second_score":	379920
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	205,
			"primary_score":	1999834,
			"second_score":	379912
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	207,
			"primary_score":	1999834,
			"second_score":	379911
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	8,
			"primary_score":	1999834,
			"second_score":	380122
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	10,
			"primary_score":	1999834,
			"second_score":	380121
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	11,
			"primary_score":	1999834,
			"second_score":	380120
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	12,
			"primary_score":	1999834,
			"second_score":	380115
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	13,
			"primary_score":	1999834,
			"second_score":	380111
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	14,
			"primary_score":	1999834,
			"second_score":	380110
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	15,
			"primary_score":	1999834,
			"second_score":	380102
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	17,
			"primary_score":	1999834,
			"second_score":	380101
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	21,
			"primary_score":	1999834,
			"second_score":	12037
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	23,
			"primary_score":	1999834,
			"second_score":	12036
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	24,
			"primary_score":	1999834,
			"second_score":	12030
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	25,
			"primary_score":	1999834,
			"second_score":	12011
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	27,
			"primary_score":	1999834,
			"second_score":	12007
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	31,
			"primary_score":	1999834,
			"second_score":	355481
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	33,
			"primary_score":	1999834,
			"second_score":	355480
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	35,
			"primary_score":	1999834,
			"second_score":	355479
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	39,
			"primary_score":	1999834,
			"second_score":	11252
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	41,
			"primary_score":	1999834,
			"second_score":	12039
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	43,
			"primary_score":	1999834,
			"second_score":	11244
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	47,
			"primary_score":	1999834,
			"second_score":	379908
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	49,
			"primary_score":	1999834,
			"second_score":	379904
		}, {
			"file":	"src/mod_proxy_core_backlog.c",
			"line":	7,
			"primary_score":	1999834,
			"second_score":	355477
		}, {
			"file":	"src/mod_proxy_core_backlog.c",
			"line":	9,
			"primary_score":	1999834,
			"second_score":	355475
		}, {
			"file":	"src/mod_proxy_core_backlog.c",
			"line":	13,
			"primary_score":	1999834,
			"second_score":	11242
		}, {
			"file":	"src/mod_proxy_core_backlog.c",
			"line":	15,
			"primary_score":	1999834,
			"second_score":	11241
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	36,
			"primary_score":	1999834,
			"second_score":	380119
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	38,
			"primary_score":	1999834,
			"second_score":	380118
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	45,
			"primary_score":	1999834,
			"second_score":	380117
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	47,
			"primary_score":	1999834,
			"second_score":	380116
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	51,
			"primary_score":	1999834,
			"second_score":	12035
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	53,
			"primary_score":	1999834,
			"second_score":	12034
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	55,
			"primary_score":	1999834,
			"second_score":	12033
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	59,
			"primary_score":	1999834,
			"second_score":	12032
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	61,
			"primary_score":	1999834,
			"second_score":	12031
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	10,
			"primary_score":	1999834,
			"second_score":	537686
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	12,
			"primary_score":	1999834,
			"second_score":	537685
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	14,
			"primary_score":	1999834,
			"second_score":	537684
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	18,
			"primary_score":	1999834,
			"second_score":	11103
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	20,
			"primary_score":	1999834,
			"second_score":	11102
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	22,
			"primary_score":	1999834,
			"second_score":	11098
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	26,
			"primary_score":	1999834,
			"second_score":	538464
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	27,
			"primary_score":	1999834,
			"second_score":	538463
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	28,
			"primary_score":	1999834,
			"second_score":	538462
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	32,
			"primary_score":	1999834,
			"second_score":	11109
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	33,
			"primary_score":	1999834,
			"second_score":	11108
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	35,
			"primary_score":	1999834,
			"second_score":	11092
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	36,
			"primary_score":	1999834,
			"second_score":	11091
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	40,
			"primary_score":	1999834,
			"second_score":	537655
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	41,
			"primary_score":	1999834,
			"second_score":	537654
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	43,
			"primary_score":	1999834,
			"second_score":	537650
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	46,
			"primary_score":	1999834,
			"second_score":	537649
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	49,
			"primary_score":	1999834,
			"second_score":	537646
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	51,
			"primary_score":	1999834,
			"second_score":	537628
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	52,
			"primary_score":	1999834,
			"second_score":	537615
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	56,
			"primary_score":	1999834,
			"second_score":	380490
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	58,
			"primary_score":	1999834,
			"second_score":	380489
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	9,
			"primary_score":	1999834,
			"second_score":	377538
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	11,
			"primary_score":	1999834,
			"second_score":	377536
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	12,
			"primary_score":	1999834,
			"second_score":	377528
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	13,
			"primary_score":	1999834,
			"second_score":	377520
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	15,
			"primary_score":	1999834,
			"second_score":	377512
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	19,
			"primary_score":	1999834,
			"second_score":	11972
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	21,
			"primary_score":	1999834,
			"second_score":	11971
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	24,
			"primary_score":	1999834,
			"second_score":	11969
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	25,
			"primary_score":	1999834,
			"second_score":	11965
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	26,
			"primary_score":	1999834,
			"second_score":	11961
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	28,
			"primary_score":	1999834,
			"second_score":	11957
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	32,
			"primary_score":	1999834,
			"second_score":	377510
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	33,
			"primary_score":	1999834,
			"second_score":	377509
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	36,
			"primary_score":	1999834,
			"second_score":	377508
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	45,
			"primary_score":	1999834,
			"second_score":	377507
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	50,
			"primary_score":	1999834,
			"second_score":	355469
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	52,
			"primary_score":	1999834,
			"second_score":	355467
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	56,
			"primary_score":	1999834,
			"second_score":	377550
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	58,
			"primary_score":	1999834,
			"second_score":	377445
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	62,
			"primary_score":	1999834,
			"second_score":	11229
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	64,
			"primary_score":	1999834,
			"second_score":	11974
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	66,
			"primary_score":	1999834,
			"second_score":	11221
		}, {
			"file":	"src/mod_redirect.c",
			"line":	34,
			"primary_score":	1999821,
			"second_score":	538888
		}, {
			"file":	"src/mod_redirect.c",
			"line":	36,
			"primary_score":	1999821,
			"second_score":	538887
		}, {
			"file":	"src/mod_redirect.c",
			"line":	38,
			"primary_score":	1999821,
			"second_score":	538886
		}, {
			"file":	"src/mod_redirect.c",
			"line":	40,
			"primary_score":	1999821,
			"second_score":	538885
		}, {
			"file":	"src/mod_redirect.c",
			"line":	41,
			"primary_score":	1999821,
			"second_score":	538877
		}, {
			"file":	"src/mod_redirect.c",
			"line":	43,
			"primary_score":	1999821,
			"second_score":	538869
		}, {
			"file":	"src/mod_redirect.c",
			"line":	47,
			"primary_score":	1999821,
			"second_score":	13265
		}, {
			"file":	"src/mod_redirect.c",
			"line":	49,
			"primary_score":	1999821,
			"second_score":	13264
		}, {
			"file":	"src/mod_redirect.c",
			"line":	51,
			"primary_score":	1999821,
			"second_score":	13263
		}, {
			"file":	"src/mod_redirect.c",
			"line":	52,
			"primary_score":	1999821,
			"second_score":	13262
		}, {
			"file":	"src/mod_redirect.c",
			"line":	53,
			"primary_score":	1999821,
			"second_score":	13261
		}, {
			"file":	"src/mod_redirect.c",
			"line":	54,
			"primary_score":	1999821,
			"second_score":	12933
		}, {
			"file":	"src/mod_redirect.c",
			"line":	56,
			"primary_score":	1999821,
			"second_score":	12932
		}, {
			"file":	"src/mod_redirect.c",
			"line":	58,
			"primary_score":	1999821,
			"second_score":	12926
		}, {
			"file":	"src/mod_redirect.c",
			"line":	60,
			"primary_score":	1999821,
			"second_score":	12925
		}, {
			"file":	"src/mod_redirect.c",
			"line":	64,
			"primary_score":	1999821,
			"second_score":	12924
		}, {
			"file":	"src/mod_redirect.c",
			"line":	65,
			"primary_score":	1999821,
			"second_score":	12920
		}, {
			"file":	"src/mod_redirect.c",
			"line":	67,
			"primary_score":	1999821,
			"second_score":	12916
		}, {
			"file":	"src/mod_redirect.c",
			"line":	69,
			"primary_score":	1999821,
			"second_score":	12915
		}, {
			"file":	"src/mod_redirect.c",
			"line":	73,
			"primary_score":	1999821,
			"second_score":	421347
		}, {
			"file":	"src/mod_redirect.c",
			"line":	74,
			"primary_score":	1999821,
			"second_score":	421346
		}, {
			"file":	"src/mod_redirect.c",
			"line":	75,
			"primary_score":	1999821,
			"second_score":	421345
		}, {
			"file":	"src/mod_redirect.c",
			"line":	77,
			"primary_score":	1999821,
			"second_score":	421344
		}, {
			"file":	"src/mod_redirect.c",
			"line":	83,
			"primary_score":	1999821,
			"second_score":	421343
		}, {
			"file":	"src/mod_redirect.c",
			"line":	86,
			"primary_score":	1999821,
			"second_score":	421342
		}, {
			"file":	"src/mod_redirect.c",
			"line":	88,
			"primary_score":	1999821,
			"second_score":	421341
		}, {
			"file":	"src/mod_redirect.c",
			"line":	89,
			"primary_score":	1999821,
			"second_score":	414093
		}, {
			"file":	"src/mod_redirect.c",
			"line":	90,
			"primary_score":	1999821,
			"second_score":	414092
		}, {
			"file":	"src/mod_redirect.c",
			"line":	91,
			"primary_score":	1999821,
			"second_score":	414091
		}, {
			"file":	"src/mod_redirect.c",
			"line":	92,
			"primary_score":	1999821,
			"second_score":	414090
		}, {
			"file":	"src/mod_redirect.c",
			"line":	94,
			"primary_score":	1999821,
			"second_score":	414089
		}, {
			"file":	"src/mod_redirect.c",
			"line":	95,
			"primary_score":	1999821,
			"second_score":	414088
		}, {
			"file":	"src/mod_redirect.c",
			"line":	97,
			"primary_score":	1999821,
			"second_score":	414084
		}, {
			"file":	"src/mod_redirect.c",
			"line":	98,
			"primary_score":	1999821,
			"second_score":	414083
		}, {
			"file":	"src/mod_redirect.c",
			"line":	100,
			"primary_score":	1999821,
			"second_score":	414082
		}, {
			"file":	"src/mod_redirect.c",
			"line":	101,
			"primary_score":	1999821,
			"second_score":	414081
		}, {
			"file":	"src/mod_redirect.c",
			"line":	103,
			"primary_score":	1999821,
			"second_score":	414080
		}, {
			"file":	"src/mod_redirect.c",
			"line":	107,
			"primary_score":	1999821,
			"second_score":	413893
		}, {
			"file":	"src/mod_redirect.c",
			"line":	109,
			"primary_score":	1999825,
			"second_score":	413850
		}, {
			"file":	"src/mod_redirect.c",
			"line":	112,
			"primary_score":	1999829,
			"second_score":	415203
		}, {
			"file":	"src/mod_redirect.c",
			"line":	119,
			"primary_score":	1999829,
			"second_score":	415202
		}, {
			"file":	"src/mod_redirect.c",
			"line":	121,
			"primary_score":	1999829,
			"second_score":	415201
		}, {
			"file":	"src/mod_redirect.c",
			"line":	122,
			"primary_score":	1999829,
			"second_score":	415200
		}, {
			"file":	"src/mod_redirect.c",
			"line":	131,
			"primary_score":	1999829,
			"second_score":	415199
		}, {
			"file":	"src/mod_redirect.c",
			"line":	141,
			"primary_score":	1999821,
			"second_score":	413849
		}, {
			"file":	"src/mod_redirect.c",
			"line":	145,
			"primary_score":	1999875,
			"second_score":	119171
		}, {
			"file":	"src/mod_redirect.c",
			"line":	146,
			"primary_score":	1999875,
			"second_score":	119170
		}, {
			"file":	"src/mod_redirect.c",
			"line":	148,
			"primary_score":	1999875,
			"second_score":	119169
		}, {
			"file":	"src/mod_redirect.c",
			"line":	149,
			"primary_score":	1999875,
			"second_score":	119168
		}, {
			"file":	"src/mod_redirect.c",
			"line":	152,
			"primary_score":	1999875,
			"second_score":	119167
		}, {
			"file":	"src/mod_redirect.c",
			"line":	153,
			"primary_score":	1999875,
			"second_score":	118818
		}, {
			"file":	"src/mod_redirect.c",
			"line":	154,
			"primary_score":	1999875,
			"second_score":	118817
		}, {
			"file":	"src/mod_redirect.c",
			"line":	157,
			"primary_score":	1999875,
			"second_score":	118816
		}, {
			"file":	"src/mod_redirect.c",
			"line":	160,
			"primary_score":	1999877,
			"second_score":	118882
		}, {
			"file":	"src/mod_redirect.c",
			"line":	161,
			"primary_score":	1999877,
			"second_score":	118928
		}, {
			"file":	"src/mod_redirect.c",
			"line":	163,
			"primary_score":	1999877,
			"second_score":	118927
		}, {
			"file":	"src/mod_redirect.c",
			"line":	164,
			"primary_score":	1999988,
			"second_score":	118919
		}, {
			"file":	"src/mod_redirect.c",
			"line":	165,
			"primary_score":	1999988,
			"second_score":	118918
		}, {
			"file":	"src/mod_redirect.c",
			"line":	166,
			"primary_score":	1999877,
			"second_score":	118944
		}, {
			"file":	"src/mod_redirect.c",
			"line":	172,
			"primary_score":	1999875,
			"second_score":	118809
		}, {
			"file":	"src/mod_redirect.c",
			"line":	177,
			"primary_score":	1999875,
			"second_score":	119174
		}, {
			"file":	"src/mod_redirect.c",
			"line":	178,
			"primary_score":	1999875,
			"second_score":	119173
		}, {
			"file":	"src/mod_redirect.c",
			"line":	187,
			"primary_score":	1999875,
			"second_score":	119172
		}, {
			"file":	"src/mod_redirect.c",
			"line":	189,
			"primary_score":	1999875,
			"second_score":	118808
		}, {
			"file":	"src/mod_redirect.c",
			"line":	190,
			"primary_score":	1999875,
			"second_score":	118794
		}, {
			"file":	"src/mod_redirect.c",
			"line":	192,
			"primary_score":	1999875,
			"second_score":	118776
		}, {
			"file":	"src/mod_redirect.c",
			"line":	200,
			"primary_score":	1999884,
			"second_score":	118775
		}, {
			"file":	"src/mod_redirect.c",
			"line":	212,
			"primary_score":	1999884,
			"second_score":	118774
		}, {
			"file":	"src/mod_redirect.c",
			"line":	217,
			"primary_score":	1999821,
			"second_score":	541856
		}, {
			"file":	"src/mod_redirect.c",
			"line":	218,
			"primary_score":	1999821,
			"second_score":	541855
		}, {
			"file":	"src/mod_redirect.c",
			"line":	220,
			"primary_score":	1999821,
			"second_score":	541828
		}, {
			"file":	"src/mod_redirect.c",
			"line":	221,
			"primary_score":	1999821,
			"second_score":	541827
		}, {
			"file":	"src/mod_redirect.c",
			"line":	222,
			"primary_score":	1999821,
			"second_score":	541826
		}, {
			"file":	"src/mod_redirect.c",
			"line":	223,
			"primary_score":	1999821,
			"second_score":	541825
		}, {
			"file":	"src/mod_redirect.c",
			"line":	225,
			"primary_score":	1999821,
			"second_score":	541824
		}, {
			"file":	"src/mod_redirect.c",
			"line":	227,
			"primary_score":	1999821,
			"second_score":	541823
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	52,
			"primary_score":	1999826,
			"second_score":	539592
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	54,
			"primary_score":	1999826,
			"second_score":	539591
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	56,
			"primary_score":	1999826,
			"second_score":	539590
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	58,
			"primary_score":	1999826,
			"second_score":	539589
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	60,
			"primary_score":	1999826,
			"second_score":	539581
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	64,
			"primary_score":	1999826,
			"second_score":	17926
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	66,
			"primary_score":	1999826,
			"second_score":	17925
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	68,
			"primary_score":	1999826,
			"second_score":	17924
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	70,
			"primary_score":	1999826,
			"second_score":	17923
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	71,
			"primary_score":	1999826,
			"second_score":	17919
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	72,
			"primary_score":	1999826,
			"second_score":	17918
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	73,
			"primary_score":	1999826,
			"second_score":	17917
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	74,
			"primary_score":	1999826,
			"second_score":	17571
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	76,
			"primary_score":	1999826,
			"second_score":	17570
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	78,
			"primary_score":	1999826,
			"second_score":	17569
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	79,
			"primary_score":	1999826,
			"second_score":	17563
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	81,
			"primary_score":	1999826,
			"second_score":	17559
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	83,
			"primary_score":	1999826,
			"second_score":	17558
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	86,
			"primary_score":	1999826,
			"second_score":	17557
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	88,
			"primary_score":	1999826,
			"second_score":	17556
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	92,
			"primary_score":	1999826,
			"second_score":	515587
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	94,
			"primary_score":	1999826,
			"second_score":	515586
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	95,
			"primary_score":	1999834,
			"second_score":	528057
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	96,
			"primary_score":	1999834,
			"second_score":	528056
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	98,
			"primary_score":	1999834,
			"second_score":	528055
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	105,
			"primary_score":	1999834,
			"second_score":	528054
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	107,
			"primary_score":	1999834,
			"second_score":	528053
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	108,
			"primary_score":	1999834,
			"second_score":	527985
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	116,
			"primary_score":	1999834,
			"second_score":	527984
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	126,
			"primary_score":	1999834,
			"second_score":	527944
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	127,
			"primary_score":	1999834,
			"second_score":	527943
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	134,
			"primary_score":	1999826,
			"second_score":	515543
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	138,
			"primary_score":	1999826,
			"second_score":	529912
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	139,
			"primary_score":	1999826,
			"second_score":	529911
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	141,
			"primary_score":	1999826,
			"second_score":	529910
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	156,
			"primary_score":	1999826,
			"second_score":	529909
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	159,
			"primary_score":	1999826,
			"second_score":	529908
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	161,
			"primary_score":	1999826,
			"second_score":	529907
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	162,
			"primary_score":	1999826,
			"second_score":	516108
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	163,
			"primary_score":	1999826,
			"second_score":	516107
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	165,
			"primary_score":	1999826,
			"second_score":	516106
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	166,
			"primary_score":	1999826,
			"second_score":	516105
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	167,
			"primary_score":	1999826,
			"second_score":	516101
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	169,
			"primary_score":	1999826,
			"second_score":	516093
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	170,
			"primary_score":	1999826,
			"second_score":	516092
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	172,
			"primary_score":	1999826,
			"second_score":	516091
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	176,
			"primary_score":	1999826,
			"second_score":	515726
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	177,
			"primary_score":	1999826,
			"second_score":	515680
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	178,
			"primary_score":	1999826,
			"second_score":	515634
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	179,
			"primary_score":	1999826,
			"second_score":	515588
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	182,
			"primary_score":	1999826,
			"second_score":	515542
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	186,
			"primary_score":	1999860,
			"second_score":	124087
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	187,
			"primary_score":	1999860,
			"second_score":	124086
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	188,
			"primary_score":	1999860,
			"second_score":	124085
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	189,
			"primary_score":	1999860,
			"second_score":	124084
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	192,
			"primary_score":	1999860,
			"second_score":	124083
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	193,
			"primary_score":	1999860,
			"second_score":	123561
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	194,
			"primary_score":	1999860,
			"second_score":	123560
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	196,
			"primary_score":	1999868,
			"second_score":	124045
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	199,
			"primary_score":	1999860,
			"second_score":	123558
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	202,
			"primary_score":	1999862,
			"second_score":	123663
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	203,
			"primary_score":	1999862,
			"second_score":	123731
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	205,
			"primary_score":	1999862,
			"second_score":	123730
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	209,
			"primary_score":	1999862,
			"second_score":	123723
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	213,
			"primary_score":	1999862,
			"second_score":	123716
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	217,
			"primary_score":	1999862,
			"second_score":	123709
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	225,
			"primary_score":	1999860,
			"second_score":	123539
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	229,
			"primary_score":	1999826,
			"second_score":	18984
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	231,
			"primary_score":	1999826,
			"second_score":	18983
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	233,
			"primary_score":	1999826,
			"second_score":	18982
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	238,
			"primary_score":	1999826,
			"second_score":	18981
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	243,
			"primary_score":	1999860,
			"second_score":	124092
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	244,
			"primary_score":	1999860,
			"second_score":	124091
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	245,
			"primary_score":	1999860,
			"second_score":	124090
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	254,
			"primary_score":	1999860,
			"second_score":	124089
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	269,
			"primary_score":	1999860,
			"second_score":	124088
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	271,
			"primary_score":	1999860,
			"second_score":	123538
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	273,
			"primary_score":	1999860,
			"second_score":	123537
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	274,
			"primary_score":	1999860,
			"second_score":	123523
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	276,
			"primary_score":	1999860,
			"second_score":	123498
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	302,
			"primary_score":	1999860,
			"second_score":	123497
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	317,
			"primary_score":	1999860,
			"second_score":	123496
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	321,
			"primary_score":	1999826,
			"second_score":	542851
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	322,
			"primary_score":	1999826,
			"second_score":	542850
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	324,
			"primary_score":	1999826,
			"second_score":	542823
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	328,
			"primary_score":	1999826,
			"second_score":	542822
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	329,
			"primary_score":	1999826,
			"second_score":	542821
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	330,
			"primary_score":	1999826,
			"second_score":	542820
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	331,
			"primary_score":	1999826,
			"second_score":	542819
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	333,
			"primary_score":	1999826,
			"second_score":	542818
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	335,
			"primary_score":	1999826,
			"second_score":	542817
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	55,
			"primary_score":	1999826,
			"second_score":	538773
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	57,
			"primary_score":	1999826,
			"second_score":	538772
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	59,
			"primary_score":	1999826,
			"second_score":	538771
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	61,
			"primary_score":	1999826,
			"second_score":	538770
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	63,
			"primary_score":	1999826,
			"second_score":	538762
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	68,
			"primary_score":	1999826,
			"second_score":	12911
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	69,
			"primary_score":	1999826,
			"second_score":	12910
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	71,
			"primary_score":	1999826,
			"second_score":	12909
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	73,
			"primary_score":	1999826,
			"second_score":	12908
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	74,
			"primary_score":	1999826,
			"second_score":	12907
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	75,
			"primary_score":	1999826,
			"second_score":	12906
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	76,
			"primary_score":	1999826,
			"second_score":	12569
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	78,
			"primary_score":	1999826,
			"second_score":	12568
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	79,
			"primary_score":	1999826,
			"second_score":	12564
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	80,
			"primary_score":	1999826,
			"second_score":	12560
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	82,
			"primary_score":	1999826,
			"second_score":	12556
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	84,
			"primary_score":	1999826,
			"second_score":	12555
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	87,
			"primary_score":	1999826,
			"second_score":	12554
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	89,
			"primary_score":	1999826,
			"second_score":	12550
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	91,
			"primary_score":	1999826,
			"second_score":	12549
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	97,
			"primary_score":	1999826,
			"second_score":	413845
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	98,
			"primary_score":	1999826,
			"second_score":	413844
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	100,
			"primary_score":	1999826,
			"second_score":	413843
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	108,
			"primary_score":	1999826,
			"second_score":	413842
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	110,
			"primary_score":	1999826,
			"second_score":	413841
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	112,
			"primary_score":	1999826,
			"second_score":	413840
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	113,
			"primary_score":	1999826,
			"second_score":	401306
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	115,
			"primary_score":	1999826,
			"second_score":	401305
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	116,
			"primary_score":	1999826,
			"second_score":	401304
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	117,
			"primary_score":	1999826,
			"second_score":	401296
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	118,
			"primary_score":	1999826,
			"second_score":	401288
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	119,
			"primary_score":	1999826,
			"second_score":	401280
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	121,
			"primary_score":	1999826,
			"second_score":	401279
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	122,
			"primary_score":	1999826,
			"second_score":	401278
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	123,
			"primary_score":	1999826,
			"second_score":	401277
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	124,
			"primary_score":	1999826,
			"second_score":	401276
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	126,
			"primary_score":	1999826,
			"second_score":	401275
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	128,
			"primary_score":	1999826,
			"second_score":	401274
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	133,
			"primary_score":	1999826,
			"second_score":	400973
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	144,
			"primary_score":	1999997,
			"second_score":	116810
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	146,
			"primary_score":	1999997,
			"second_score":	116809
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	148,
			"primary_score":	1999997,
			"second_score":	116808
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	150,
			"primary_score":	1999997,
			"second_score":	116800
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	158,
			"primary_score":	1999998,
			"second_score":	116799
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	162,
			"primary_score":	1999885,
			"second_score":	117378
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	163,
			"primary_score":	1999885,
			"second_score":	117377
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	165,
			"primary_score":	1999885,
			"second_score":	117376
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	166,
			"primary_score":	1999885,
			"second_score":	117375
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	167,
			"primary_score":	1999885,
			"second_score":	117374
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	168,
			"primary_score":	1999885,
			"second_score":	117373
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	171,
			"primary_score":	1999885,
			"second_score":	117372
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	172,
			"primary_score":	1999885,
			"second_score":	116926
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	173,
			"primary_score":	1999885,
			"second_score":	116925
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	176,
			"primary_score":	1999885,
			"second_score":	116924
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	179,
			"primary_score":	1999887,
			"second_score":	116990
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	180,
			"primary_score":	1999887,
			"second_score":	117054
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	182,
			"primary_score":	1999887,
			"second_score":	117053
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	183,
			"primary_score":	1999997,
			"second_score":	117269
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	184,
			"primary_score":	1999887,
			"second_score":	117046
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	185,
			"primary_score":	1999997,
			"second_score":	117252
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	186,
			"primary_score":	1999887,
			"second_score":	117039
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	187,
			"primary_score":	1999997,
			"second_score":	117228
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	188,
			"primary_score":	1999887,
			"second_score":	117032
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	189,
			"primary_score":	1999997,
			"second_score":	117197
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	194,
			"primary_score":	1999885,
			"second_score":	116917
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	198,
			"primary_score":	1999885,
			"second_score":	117386
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	199,
			"primary_score":	1999885,
			"second_score":	117385
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	200,
			"primary_score":	1999885,
			"second_score":	117384
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	201,
			"primary_score":	1999885,
			"second_score":	117383
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	202,
			"primary_score":	1999885,
			"second_score":	117382
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	203,
			"primary_score":	1999885,
			"second_score":	117381
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	205,
			"primary_score":	1999885,
			"second_score":	117380
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	207,
			"primary_score":	1999885,
			"second_score":	117379
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	209,
			"primary_score":	1999885,
			"second_score":	116916
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	211,
			"primary_score":	1999997,
			"second_score":	116913
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	217,
			"primary_score":	1999997,
			"second_score":	116910
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	223,
			"primary_score":	1999997,
			"second_score":	116907
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	224,
			"primary_score":	1999997,
			"second_score":	116906
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	231,
			"primary_score":	1999997,
			"second_score":	116852
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	239,
			"primary_score":	1999997,
			"second_score":	116851
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	241,
			"primary_score":	1999997,
			"second_score":	116850
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	248,
			"primary_score":	1999998,
			"second_score":	116813
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	256,
			"primary_score":	1999998,
			"second_score":	116812
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	258,
			"primary_score":	1999998,
			"second_score":	116811
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	265,
			"primary_score":	1999998,
			"second_score":	116798
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	273,
			"primary_score":	1999998,
			"second_score":	116797
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	274,
			"primary_score":	1999998,
			"second_score":	116755
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	278,
			"primary_score":	1999998,
			"second_score":	116750
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	280,
			"primary_score":	2000000,
			"second_score":	177776
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	281,
			"primary_score":	2000000,
			"second_score":	177775
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	284,
			"primary_score":	2000000,
			"second_score":	177721
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	286,
			"primary_score":	2000000,
			"second_score":	177720
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	332,
			"primary_score":	1999826,
			"second_score":	541713
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	333,
			"primary_score":	1999826,
			"second_score":	541712
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	335,
			"primary_score":	1999826,
			"second_score":	541685
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	336,
			"primary_score":	1999826,
			"second_score":	541684
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	337,
			"primary_score":	1999826,
			"second_score":	541683
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	338,
			"primary_score":	1999826,
			"second_score":	541682
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	340,
			"primary_score":	1999826,
			"second_score":	541681
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	342,
			"primary_score":	1999826,
			"second_score":	541680
		}, {
			"file":	"src/mod_setenv.c",
			"line":	34,
			"primary_score":	1999868,
			"second_score":	121898
		}, {
			"file":	"src/mod_setenv.c",
			"line":	36,
			"primary_score":	1999868,
			"second_score":	121897
		}, {
			"file":	"src/mod_setenv.c",
			"line":	38,
			"primary_score":	1999868,
			"second_score":	121896
		}, {
			"file":	"src/mod_setenv.c",
			"line":	40,
			"primary_score":	1999868,
			"second_score":	121895
		}, {
			"file":	"src/mod_setenv.c",
			"line":	44,
			"primary_score":	1999868,
			"second_score":	109542
		}, {
			"file":	"src/mod_setenv.c",
			"line":	50,
			"primary_score":	1999826,
			"second_score":	539497
		}, {
			"file":	"src/mod_setenv.c",
			"line":	52,
			"primary_score":	1999826,
			"second_score":	539496
		}, {
			"file":	"src/mod_setenv.c",
			"line":	54,
			"primary_score":	1999826,
			"second_score":	539495
		}, {
			"file":	"src/mod_setenv.c",
			"line":	56,
			"primary_score":	1999826,
			"second_score":	539494
		}, {
			"file":	"src/mod_setenv.c",
			"line":	61,
			"primary_score":	1999826,
			"second_score":	17552
		}, {
			"file":	"src/mod_setenv.c",
			"line":	63,
			"primary_score":	1999826,
			"second_score":	17551
		}, {
			"file":	"src/mod_setenv.c",
			"line":	65,
			"primary_score":	1999826,
			"second_score":	17550
		}, {
			"file":	"src/mod_setenv.c",
			"line":	67,
			"primary_score":	1999826,
			"second_score":	17549
		}, {
			"file":	"src/mod_setenv.c",
			"line":	68,
			"primary_score":	1999826,
			"second_score":	17548
		}, {
			"file":	"src/mod_setenv.c",
			"line":	69,
			"primary_score":	1999826,
			"second_score":	17547
		}, {
			"file":	"src/mod_setenv.c",
			"line":	70,
			"primary_score":	1999826,
			"second_score":	16824
		}, {
			"file":	"src/mod_setenv.c",
			"line":	72,
			"primary_score":	1999826,
			"second_score":	16823
		}, {
			"file":	"src/mod_setenv.c",
			"line":	73,
			"primary_score":	1999826,
			"second_score":	16815
		}, {
			"file":	"src/mod_setenv.c",
			"line":	74,
			"primary_score":	1999826,
			"second_score":	16807
		}, {
			"file":	"src/mod_setenv.c",
			"line":	76,
			"primary_score":	1999826,
			"second_score":	16799
		}, {
			"file":	"src/mod_setenv.c",
			"line":	78,
			"primary_score":	1999826,
			"second_score":	16798
		}, {
			"file":	"src/mod_setenv.c",
			"line":	81,
			"primary_score":	1999826,
			"second_score":	16797
		}, {
			"file":	"src/mod_setenv.c",
			"line":	83,
			"primary_score":	1999826,
			"second_score":	16796
		}, {
			"file":	"src/mod_setenv.c",
			"line":	89,
			"primary_score":	1999826,
			"second_score":	515538
		}, {
			"file":	"src/mod_setenv.c",
			"line":	90,
			"primary_score":	1999826,
			"second_score":	515537
		}, {
			"file":	"src/mod_setenv.c",
			"line":	92,
			"primary_score":	1999826,
			"second_score":	515536
		}, {
			"file":	"src/mod_setenv.c",
			"line":	99,
			"primary_score":	1999826,
			"second_score":	515535
		}, {
			"file":	"src/mod_setenv.c",
			"line":	101,
			"primary_score":	1999826,
			"second_score":	515534
		}, {
			"file":	"src/mod_setenv.c",
			"line":	103,
			"primary_score":	1999826,
			"second_score":	515533
		}, {
			"file":	"src/mod_setenv.c",
			"line":	104,
			"primary_score":	1999826,
			"second_score":	506649
		}, {
			"file":	"src/mod_setenv.c",
			"line":	106,
			"primary_score":	1999826,
			"second_score":	506648
		}, {
			"file":	"src/mod_setenv.c",
			"line":	107,
			"primary_score":	1999826,
			"second_score":	506647
		}, {
			"file":	"src/mod_setenv.c",
			"line":	108,
			"primary_score":	1999826,
			"second_score":	506641
		}, {
			"file":	"src/mod_setenv.c",
			"line":	109,
			"primary_score":	1999826,
			"second_score":	506635
		}, {
			"file":	"src/mod_setenv.c",
			"line":	111,
			"primary_score":	1999826,
			"second_score":	506629
		}, {
			"file":	"src/mod_setenv.c",
			"line":	112,
			"primary_score":	1999826,
			"second_score":	506628
		}, {
			"file":	"src/mod_setenv.c",
			"line":	113,
			"primary_score":	1999826,
			"second_score":	506627
		}, {
			"file":	"src/mod_setenv.c",
			"line":	115,
			"primary_score":	1999826,
			"second_score":	506626
		}, {
			"file":	"src/mod_setenv.c",
			"line":	117,
			"primary_score":	1999826,
			"second_score":	506625
		}, {
			"file":	"src/mod_setenv.c",
			"line":	122,
			"primary_score":	1999826,
			"second_score":	506397
		}, {
			"file":	"src/mod_setenv.c",
			"line":	126,
			"primary_score":	1999860,
			"second_score":	122336
		}, {
			"file":	"src/mod_setenv.c",
			"line":	127,
			"primary_score":	1999860,
			"second_score":	122335
		}, {
			"file":	"src/mod_setenv.c",
			"line":	129,
			"primary_score":	1999860,
			"second_score":	122334
		}, {
			"file":	"src/mod_setenv.c",
			"line":	130,
			"primary_score":	1999860,
			"second_score":	122333
		}, {
			"file":	"src/mod_setenv.c",
			"line":	131,
			"primary_score":	1999860,
			"second_score":	122332
		}, {
			"file":	"src/mod_setenv.c",
			"line":	134,
			"primary_score":	1999860,
			"second_score":	122331
		}, {
			"file":	"src/mod_setenv.c",
			"line":	135,
			"primary_score":	1999860,
			"second_score":	121911
		}, {
			"file":	"src/mod_setenv.c",
			"line":	136,
			"primary_score":	1999860,
			"second_score":	121910
		}, {
			"file":	"src/mod_setenv.c",
			"line":	139,
			"primary_score":	1999860,
			"second_score":	121909
		}, {
			"file":	"src/mod_setenv.c",
			"line":	142,
			"primary_score":	1999862,
			"second_score":	121975
		}, {
			"file":	"src/mod_setenv.c",
			"line":	143,
			"primary_score":	1999862,
			"second_score":	122032
		}, {
			"file":	"src/mod_setenv.c",
			"line":	145,
			"primary_score":	1999862,
			"second_score":	122031
		}, {
			"file":	"src/mod_setenv.c",
			"line":	147,
			"primary_score":	1999862,
			"second_score":	122024
		}, {
			"file":	"src/mod_setenv.c",
			"line":	149,
			"primary_score":	1999862,
			"second_score":	122017
		}, {
			"file":	"src/mod_setenv.c",
			"line":	155,
			"primary_score":	1999860,
			"second_score":	121902
		}, {
			"file":	"src/mod_setenv.c",
			"line":	159,
			"primary_score":	1999860,
			"second_score":	122340
		}, {
			"file":	"src/mod_setenv.c",
			"line":	160,
			"primary_score":	1999860,
			"second_score":	122339
		}, {
			"file":	"src/mod_setenv.c",
			"line":	161,
			"primary_score":	1999860,
			"second_score":	122338
		}, {
			"file":	"src/mod_setenv.c",
			"line":	163,
			"primary_score":	1999860,
			"second_score":	122337
		}, {
			"file":	"src/mod_setenv.c",
			"line":	165,
			"primary_score":	1999860,
			"second_score":	121901
		}, {
			"file":	"src/mod_setenv.c",
			"line":	171,
			"primary_score":	1999868,
			"second_score":	121900
		}, {
			"file":	"src/mod_setenv.c",
			"line":	174,
			"primary_score":	1999868,
			"second_score":	121899
		}, {
			"file":	"src/mod_setenv.c",
			"line":	176,
			"primary_score":	1999868,
			"second_score":	121894
		}, {
			"file":	"src/mod_setenv.c",
			"line":	179,
			"primary_score":	1999868,
			"second_score":	121893
		}, {
			"file":	"src/mod_setenv.c",
			"line":	183,
			"primary_score":	1999868,
			"second_score":	121892
		}, {
			"file":	"src/mod_setenv.c",
			"line":	185,
			"primary_score":	1999868,
			"second_score":	121891
		}, {
			"file":	"src/mod_setenv.c",
			"line":	186,
			"primary_score":	1999868,
			"second_score":	121890
		}, {
			"file":	"src/mod_setenv.c",
			"line":	187,
			"primary_score":	1999868,
			"second_score":	121889
		}, {
			"file":	"src/mod_setenv.c",
			"line":	189,
			"primary_score":	1999868,
			"second_score":	121888
		}, {
			"file":	"src/mod_setenv.c",
			"line":	190,
			"primary_score":	1999868,
			"second_score":	211706
		}, {
			"file":	"src/mod_setenv.c",
			"line":	193,
			"primary_score":	1999868,
			"second_score":	121879
		}, {
			"file":	"src/mod_setenv.c",
			"line":	194,
			"primary_score":	1999868,
			"second_score":	121865
		}, {
			"file":	"src/mod_setenv.c",
			"line":	196,
			"primary_score":	1999868,
			"second_score":	121851
		}, {
			"file":	"src/mod_setenv.c",
			"line":	199,
			"primary_score":	1999868,
			"second_score":	121777
		}, {
			"file":	"src/mod_setenv.c",
			"line":	200,
			"primary_score":	1999868,
			"second_score":	121703
		}, {
			"file":	"src/mod_setenv.c",
			"line":	201,
			"primary_score":	1999868,
			"second_score":	121702
		}, {
			"file":	"src/mod_setenv.c",
			"line":	203,
			"primary_score":	1999868,
			"second_score":	121701
		}, {
			"file":	"src/mod_setenv.c",
			"line":	204,
			"primary_score":	1999868,
			"second_score":	211455
		}, {
			"file":	"src/mod_setenv.c",
			"line":	207,
			"primary_score":	1999868,
			"second_score":	121692
		}, {
			"file":	"src/mod_setenv.c",
			"line":	208,
			"primary_score":	1999868,
			"second_score":	121678
		}, {
			"file":	"src/mod_setenv.c",
			"line":	210,
			"primary_score":	1999868,
			"second_score":	121664
		}, {
			"file":	"src/mod_setenv.c",
			"line":	213,
			"primary_score":	1999868,
			"second_score":	121590
		}, {
			"file":	"src/mod_setenv.c",
			"line":	214,
			"primary_score":	1999868,
			"second_score":	121589
		}, {
			"file":	"src/mod_setenv.c",
			"line":	216,
			"primary_score":	1999868,
			"second_score":	121588
		}, {
			"file":	"src/mod_setenv.c",
			"line":	220,
			"primary_score":	1999868,
			"second_score":	121510
		}, {
			"file":	"src/mod_setenv.c",
			"line":	224,
			"primary_score":	1999826,
			"second_score":	18977
		}, {
			"file":	"src/mod_setenv.c",
			"line":	226,
			"primary_score":	1999826,
			"second_score":	18976
		}, {
			"file":	"src/mod_setenv.c",
			"line":	228,
			"primary_score":	1999826,
			"second_score":	18975
		}, {
			"file":	"src/mod_setenv.c",
			"line":	229,
			"primary_score":	1999868,
			"second_score":	109543
		}, {
			"file":	"src/mod_setenv.c",
			"line":	230,
			"primary_score":	1999868,
			"second_score":	109541
		}, {
			"file":	"src/mod_setenv.c",
			"line":	233,
			"primary_score":	1999826,
			"second_score":	18974
		}, {
			"file":	"src/mod_setenv.c",
			"line":	239,
			"primary_score":	1999826,
			"second_score":	542709
		}, {
			"file":	"src/mod_setenv.c",
			"line":	240,
			"primary_score":	1999826,
			"second_score":	542708
		}, {
			"file":	"src/mod_setenv.c",
			"line":	242,
			"primary_score":	1999826,
			"second_score":	542681
		}, {
			"file":	"src/mod_setenv.c",
			"line":	243,
			"primary_score":	1999826,
			"second_score":	542680
		}, {
			"file":	"src/mod_setenv.c",
			"line":	244,
			"primary_score":	1999826,
			"second_score":	542679
		}, {
			"file":	"src/mod_setenv.c",
			"line":	245,
			"primary_score":	1999826,
			"second_score":	542678
		}, {
			"file":	"src/mod_setenv.c",
			"line":	246,
			"primary_score":	1999826,
			"second_score":	542677
		}, {
			"file":	"src/mod_setenv.c",
			"line":	248,
			"primary_score":	1999826,
			"second_score":	542676
		}, {
			"file":	"src/mod_setenv.c",
			"line":	250,
			"primary_score":	1999826,
			"second_score":	542675
		}, {
			"file":	"src/mod_setenv.c",
			"line":	252,
			"primary_score":	1999826,
			"second_score":	542674
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	41,
			"primary_score":	1999834,
			"second_score":	538997
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	43,
			"primary_score":	1999834,
			"second_score":	538996
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	45,
			"primary_score":	1999834,
			"second_score":	538995
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	47,
			"primary_score":	1999834,
			"second_score":	538994
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	49,
			"primary_score":	1999834,
			"second_score":	538986
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	53,
			"primary_score":	1999834,
			"second_score":	13931
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	55,
			"primary_score":	1999834,
			"second_score":	13930
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	57,
			"primary_score":	1999834,
			"second_score":	13929
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	59,
			"primary_score":	1999834,
			"second_score":	13928
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	60,
			"primary_score":	1999834,
			"second_score":	13927
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	61,
			"primary_score":	1999834,
			"second_score":	13926
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	62,
			"primary_score":	1999834,
			"second_score":	13301
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	64,
			"primary_score":	1999834,
			"second_score":	13300
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	65,
			"primary_score":	1999834,
			"second_score":	13296
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	66,
			"primary_score":	1999834,
			"second_score":	13292
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	68,
			"primary_score":	1999834,
			"second_score":	13288
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	69,
			"primary_score":	1999834,
			"second_score":	13284
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	70,
			"primary_score":	1999834,
			"second_score":	13280
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	72,
			"primary_score":	1999834,
			"second_score":	13276
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	75,
			"primary_score":	1999834,
			"second_score":	13275
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	78,
			"primary_score":	1999834,
			"second_score":	13274
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	80,
			"primary_score":	1999834,
			"second_score":	13270
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	82,
			"primary_score":	1999834,
			"second_score":	13269
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	86,
			"primary_score":	1999834,
			"second_score":	433184
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	87,
			"primary_score":	1999834,
			"second_score":	433183
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	89,
			"primary_score":	1999834,
			"second_score":	433182
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	97,
			"primary_score":	1999834,
			"second_score":	433181
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	99,
			"primary_score":	1999834,
			"second_score":	433180
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	101,
			"primary_score":	1999834,
			"second_score":	433179
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	102,
			"primary_score":	1999834,
			"second_score":	421708
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	104,
			"primary_score":	1999834,
			"second_score":	421707
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	106,
			"primary_score":	1999834,
			"second_score":	421706
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	107,
			"primary_score":	1999834,
			"second_score":	421698
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	108,
			"primary_score":	1999834,
			"second_score":	421690
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	110,
			"primary_score":	1999834,
			"second_score":	421682
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	111,
			"primary_score":	1999834,
			"second_score":	421674
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	112,
			"primary_score":	1999834,
			"second_score":	421666
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	114,
			"primary_score":	1999834,
			"second_score":	421658
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	116,
			"primary_score":	1999834,
			"second_score":	421657
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	117,
			"primary_score":	1999834,
			"second_score":	421656
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	118,
			"primary_score":	1999834,
			"second_score":	421655
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	119,
			"primary_score":	1999834,
			"second_score":	421654
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	122,
			"primary_score":	1999834,
			"second_score":	421653
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	124,
			"primary_score":	1999834,
			"second_score":	421652
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	129,
			"primary_score":	1999834,
			"second_score":	421351
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	133,
			"primary_score":	1999889,
			"second_score":	117887
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	135,
			"primary_score":	1999889,
			"second_score":	117886
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	137,
			"primary_score":	1999889,
			"second_score":	117881
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	138,
			"primary_score":	1999890,
			"second_score":	117880
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	140,
			"primary_score":	1999890,
			"second_score":	117866
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	144,
			"primary_score":	1999890,
			"second_score":	117865
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	146,
			"primary_score":	1999890,
			"second_score":	117864
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	148,
			"primary_score":	1999890,
			"second_score":	117862
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	149,
			"primary_score":	1999891,
			"second_score":	117861
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	154,
			"primary_score":	1999890,
			"second_score":	117845
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	156,
			"primary_score":	1999890,
			"second_score":	117829
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	159,
			"primary_score":	1999890,
			"second_score":	117828
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	160,
			"primary_score":	1999890,
			"second_score":	117812
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	167,
			"primary_score":	1999889,
			"second_score":	117796
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	168,
			"primary_score":	1999977,
			"second_score":	117890
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	172,
			"primary_score":	1999977,
			"second_score":	117889
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	173,
			"primary_score":	1999889,
			"second_score":	117736
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	177,
			"primary_score":	1999889,
			"second_score":	117735
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	181,
			"primary_score":	1999889,
			"second_score":	118513
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	182,
			"primary_score":	1999889,
			"second_score":	118512
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	184,
			"primary_score":	1999889,
			"second_score":	118511
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	185,
			"primary_score":	1999889,
			"second_score":	118510
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	186,
			"primary_score":	1999889,
			"second_score":	118509
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	188,
			"primary_score":	1999889,
			"second_score":	118508
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	189,
			"primary_score":	1999889,
			"second_score":	118507
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	190,
			"primary_score":	1999889,
			"second_score":	118506
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	192,
			"primary_score":	1999889,
			"second_score":	118505
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	195,
			"primary_score":	1999889,
			"second_score":	118504
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	196,
			"primary_score":	1999889,
			"second_score":	118056
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	197,
			"primary_score":	1999889,
			"second_score":	118055
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	200,
			"primary_score":	1999889,
			"second_score":	118054
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	203,
			"primary_score":	1999889,
			"second_score":	118120
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	204,
			"primary_score":	1999889,
			"second_score":	118184
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	206,
			"primary_score":	1999889,
			"second_score":	118183
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	207,
			"primary_score":	1999890,
			"second_score":	118214
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	208,
			"primary_score":	1999890,
			"second_score":	118213
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	209,
			"primary_score":	1999890,
			"second_score":	118212
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	210,
			"primary_score":	1999890,
			"second_score":	118211
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	211,
			"primary_score":	1999889,
			"second_score":	118176
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	212,
			"primary_score":	1999890,
			"second_score":	118194
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	213,
			"primary_score":	1999889,
			"second_score":	118169
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	214,
			"primary_score":	1999890,
			"second_score":	118224
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	215,
			"primary_score":	1999986,
			"second_score":	118162
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	221,
			"primary_score":	1999889,
			"second_score":	118047
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	225,
			"primary_score":	1999889,
			"second_score":	118515
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	233,
			"primary_score":	1999889,
			"second_score":	118514
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	235,
			"primary_score":	1999889,
			"second_score":	118046
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	243,
			"primary_score":	1999889,
			"second_score":	118042
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	246,
			"primary_score":	1999929,
			"second_score":	117888
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	251,
			"primary_score":	1999929,
			"second_score":	117734
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	258,
			"primary_score":	1999889,
			"second_score":	117720
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	259,
			"primary_score":	1999889,
			"second_score":	117706
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	260,
			"primary_score":	1999889,
			"second_score":	117692
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	262,
			"primary_score":	1999889,
			"second_score":	117678
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	265,
			"primary_score":	1999889,
			"second_score":	117664
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	270,
			"primary_score":	1999834,
			"second_score":	541997
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	271,
			"primary_score":	1999834,
			"second_score":	541996
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	273,
			"primary_score":	1999834,
			"second_score":	541969
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	274,
			"primary_score":	1999834,
			"second_score":	541968
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	275,
			"primary_score":	1999834,
			"second_score":	541967
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	276,
			"primary_score":	1999834,
			"second_score":	541966
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	278,
			"primary_score":	1999834,
			"second_score":	541965
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	280,
			"primary_score":	1999834,
			"second_score":	541964
		}, {
			"file":	"src/mod_ssi.c",
			"line":	42,
			"primary_score":	1999834,
			"second_score":	538658
		}, {
			"file":	"src/mod_ssi.c",
			"line":	44,
			"primary_score":	1999834,
			"second_score":	538657
		}, {
			"file":	"src/mod_ssi.c",
			"line":	46,
			"primary_score":	1999834,
			"second_score":	538656
		}, {
			"file":	"src/mod_ssi.c",
			"line":	48,
			"primary_score":	1999834,
			"second_score":	538655
		}, {
			"file":	"src/mod_ssi.c",
			"line":	49,
			"primary_score":	1999834,
			"second_score":	538647
		}, {
			"file":	"src/mod_ssi.c",
			"line":	51,
			"primary_score":	1999834,
			"second_score":	538639
		}, {
			"file":	"src/mod_ssi.c",
			"line":	52,
			"primary_score":	1999834,
			"second_score":	538633
		}, {
			"file":	"src/mod_ssi.c",
			"line":	54,
			"primary_score":	1999834,
			"second_score":	538627
		}, {
			"file":	"src/mod_ssi.c",
			"line":	59,
			"primary_score":	1999834,
			"second_score":	12545
		}, {
			"file":	"src/mod_ssi.c",
			"line":	60,
			"primary_score":	1999834,
			"second_score":	12544
		}, {
			"file":	"src/mod_ssi.c",
			"line":	62,
			"primary_score":	1999834,
			"second_score":	12543
		}, {
			"file":	"src/mod_ssi.c",
			"line":	64,
			"primary_score":	1999834,
			"second_score":	12542
		}, {
			"file":	"src/mod_ssi.c",
			"line":	65,
			"primary_score":	1999834,
			"second_score":	12541
		}, {
			"file":	"src/mod_ssi.c",
			"line":	66,
			"primary_score":	1999834,
			"second_score":	12540
		}, {
			"file":	"src/mod_ssi.c",
			"line":	67,
			"primary_score":	1999834,
			"second_score":	12270
		}, {
			"file":	"src/mod_ssi.c",
			"line":	69,
			"primary_score":	1999834,
			"second_score":	12269
		}, {
			"file":	"src/mod_ssi.c",
			"line":	71,
			"primary_score":	1999834,
			"second_score":	12261
		}, {
			"file":	"src/mod_ssi.c",
			"line":	73,
			"primary_score":	1999834,
			"second_score":	12260
		}, {
			"file":	"src/mod_ssi.c",
			"line":	76,
			"primary_score":	1999834,
			"second_score":	12259
		}, {
			"file":	"src/mod_ssi.c",
			"line":	77,
			"primary_score":	1999834,
			"second_score":	12251
		}, {
			"file":	"src/mod_ssi.c",
			"line":	79,
			"primary_score":	1999834,
			"second_score":	12243
		}, {
			"file":	"src/mod_ssi.c",
			"line":	81,
			"primary_score":	1999834,
			"second_score":	12242
		}, {
			"file":	"src/mod_ssi.c",
			"line":	82,
			"primary_score":	1999834,
			"second_score":	12238
		}, {
			"file":	"src/mod_ssi.c",
			"line":	84,
			"primary_score":	1999834,
			"second_score":	12234
		}, {
			"file":	"src/mod_ssi.c",
			"line":	86,
			"primary_score":	1999834,
			"second_score":	12233
		}, {
			"file":	"src/mod_ssi.c",
			"line":	92,
			"primary_score":	1999834,
			"second_score":	400969
		}, {
			"file":	"src/mod_ssi.c",
			"line":	93,
			"primary_score":	1999834,
			"second_score":	400968
		}, {
			"file":	"src/mod_ssi.c",
			"line":	95,
			"primary_score":	1999834,
			"second_score":	400967
		}, {
			"file":	"src/mod_ssi.c",
			"line":	96,
			"primary_score":	1999834,
			"second_score":	400966
		}, {
			"file":	"src/mod_ssi.c",
			"line":	99,
			"primary_score":	1999834,
			"second_score":	400965
		}, {
			"file":	"src/mod_ssi.c",
			"line":	104,
			"primary_score":	1999834,
			"second_score":	400964
		}, {
			"file":	"src/mod_ssi.c",
			"line":	106,
			"primary_score":	1999834,
			"second_score":	400963
		}, {
			"file":	"src/mod_ssi.c",
			"line":	108,
			"primary_score":	1999834,
			"second_score":	400962
		}, {
			"file":	"src/mod_ssi.c",
			"line":	109,
			"primary_score":	1999834,
			"second_score":	398054
		}, {
			"file":	"src/mod_ssi.c",
			"line":	111,
			"primary_score":	1999834,
			"second_score":	398053
		}, {
			"file":	"src/mod_ssi.c",
			"line":	112,
			"primary_score":	1999834,
			"second_score":	398052
		}, {
			"file":	"src/mod_ssi.c",
			"line":	114,
			"primary_score":	1999834,
			"second_score":	398046
		}, {
			"file":	"src/mod_ssi.c",
			"line":	116,
			"primary_score":	1999834,
			"second_score":	398045
		}, {
			"file":	"src/mod_ssi.c",
			"line":	118,
			"primary_score":	1999834,
			"second_score":	398044
		}, {
			"file":	"src/mod_ssi.c",
			"line":	125,
			"primary_score":	1999834,
			"second_score":	397962
		}, {
			"file":	"src/mod_ssi.c",
			"line":	137,
			"primary_score":	1999834,
			"second_score":	397961
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1072,
			"primary_score":	1999834,
			"second_score":	541572
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1073,
			"primary_score":	1999834,
			"second_score":	541571
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1075,
			"primary_score":	1999834,
			"second_score":	541544
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1076,
			"primary_score":	1999834,
			"second_score":	541543
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1077,
			"primary_score":	1999834,
			"second_score":	541542
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1078,
			"primary_score":	1999834,
			"second_score":	541541
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1080,
			"primary_score":	1999834,
			"second_score":	541540
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1082,
			"primary_score":	1999834,
			"second_score":	541539
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	47,
			"primary_score":	1999817,
			"second_score":	536690
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	49,
			"primary_score":	1999817,
			"second_score":	536689
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	51,
			"primary_score":	1999817,
			"second_score":	536688
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	53,
			"primary_score":	1999817,
			"second_score":	536687
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	55,
			"primary_score":	1999817,
			"second_score":	536679
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	57,
			"primary_score":	1999817,
			"second_score":	536674
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	62,
			"primary_score":	1999817,
			"second_score":	8439
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	64,
			"primary_score":	1999817,
			"second_score":	8438
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	66,
			"primary_score":	1999817,
			"second_score":	8437
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	68,
			"primary_score":	1999817,
			"second_score":	8436
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	69,
			"primary_score":	1999817,
			"second_score":	8435
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	70,
			"primary_score":	1999817,
			"second_score":	8434
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	71,
			"primary_score":	1999817,
			"second_score":	8193
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	73,
			"primary_score":	1999817,
			"second_score":	8192
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	75,
			"primary_score":	1999817,
			"second_score":	8184
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	77,
			"primary_score":	1999817,
			"second_score":	8183
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	79,
			"primary_score":	1999817,
			"second_score":	8182
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	81,
			"primary_score":	1999817,
			"second_score":	8178
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	83,
			"primary_score":	1999817,
			"second_score":	8172
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	85,
			"primary_score":	1999817,
			"second_score":	8171
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	91,
			"primary_score":	1999817,
			"second_score":	287456
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	92,
			"primary_score":	1999817,
			"second_score":	287455
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	94,
			"primary_score":	1999817,
			"second_score":	287454
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	99,
			"primary_score":	1999817,
			"second_score":	287453
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	101,
			"primary_score":	1999817,
			"second_score":	287452
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	103,
			"primary_score":	1999817,
			"second_score":	287451
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	104,
			"primary_score":	1999817,
			"second_score":	284896
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	106,
			"primary_score":	1999817,
			"second_score":	284895
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	107,
			"primary_score":	1999817,
			"second_score":	284894
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	109,
			"primary_score":	1999817,
			"second_score":	284888
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	111,
			"primary_score":	1999817,
			"second_score":	284887
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	113,
			"primary_score":	1999817,
			"second_score":	284886
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	118,
			"primary_score":	1999817,
			"second_score":	284804
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	488,
			"primary_score":	1999852,
			"second_score":	113686
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	489,
			"primary_score":	1999852,
			"second_score":	113685
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	491,
			"primary_score":	1999852,
			"second_score":	113684
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	492,
			"primary_score":	1999852,
			"second_score":	113683
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	494,
			"primary_score":	1999852,
			"second_score":	113682
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	497,
			"primary_score":	1999871,
			"second_score":	113681
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	498,
			"primary_score":	1999872,
			"second_score":	113680
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	539,
			"primary_score":	1999817,
			"second_score":	540269
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	540,
			"primary_score":	1999817,
			"second_score":	540268
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	542,
			"primary_score":	1999817,
			"second_score":	540241
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	543,
			"primary_score":	1999817,
			"second_score":	540240
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	544,
			"primary_score":	1999817,
			"second_score":	540239
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	545,
			"primary_score":	1999817,
			"second_score":	540238
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	546,
			"primary_score":	1999817,
			"second_score":	540237
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	548,
			"primary_score":	1999817,
			"second_score":	540236
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	550,
			"primary_score":	1999817,
			"second_score":	540235
		}, {
			"file":	"src/mod_status.c",
			"line":	62,
			"primary_score":	1999826,
			"second_score":	539212
		}, {
			"file":	"src/mod_status.c",
			"line":	63,
			"primary_score":	1999826,
			"second_score":	539211
		}, {
			"file":	"src/mod_status.c",
			"line":	65,
			"primary_score":	1999826,
			"second_score":	539210
		}, {
			"file":	"src/mod_status.c",
			"line":	67,
			"primary_score":	1999826,
			"second_score":	539209
		}, {
			"file":	"src/mod_status.c",
			"line":	69,
			"primary_score":	1999826,
			"second_score":	539208
		}, {
			"file":	"src/mod_status.c",
			"line":	70,
			"primary_score":	1999826,
			"second_score":	539207
		}, {
			"file":	"src/mod_status.c",
			"line":	71,
			"primary_score":	1999826,
			"second_score":	539206
		}, {
			"file":	"src/mod_status.c",
			"line":	72,
			"primary_score":	1999826,
			"second_score":	539205
		}, {
			"file":	"src/mod_status.c",
			"line":	73,
			"primary_score":	1999826,
			"second_score":	539204
		}, {
			"file":	"src/mod_status.c",
			"line":	75,
			"primary_score":	1999826,
			"second_score":	539196
		}, {
			"file":	"src/mod_status.c",
			"line":	76,
			"primary_score":	1999826,
			"second_score":	539191
		}, {
			"file":	"src/mod_status.c",
			"line":	79,
			"primary_score":	1999826,
			"second_score":	539190
		}, {
			"file":	"src/mod_status.c",
			"line":	83,
			"primary_score":	1999826,
			"second_score":	14563
		}, {
			"file":	"src/mod_status.c",
			"line":	85,
			"primary_score":	1999826,
			"second_score":	14562
		}, {
			"file":	"src/mod_status.c",
			"line":	87,
			"primary_score":	1999826,
			"second_score":	14561
		}, {
			"file":	"src/mod_status.c",
			"line":	89,
			"primary_score":	1999826,
			"second_score":	14560
		}, {
			"file":	"src/mod_status.c",
			"line":	91,
			"primary_score":	1999826,
			"second_score":	14556
		}, {
			"file":	"src/mod_status.c",
			"line":	92,
			"primary_score":	1999826,
			"second_score":	14555
		}, {
			"file":	"src/mod_status.c",
			"line":	93,
			"primary_score":	1999826,
			"second_score":	14554
		}, {
			"file":	"src/mod_status.c",
			"line":	94,
			"primary_score":	1999826,
			"second_score":	14217
		}, {
			"file":	"src/mod_status.c",
			"line":	96,
			"primary_score":	1999826,
			"second_score":	14216
		}, {
			"file":	"src/mod_status.c",
			"line":	97,
			"primary_score":	1999826,
			"second_score":	14212
		}, {
			"file":	"src/mod_status.c",
			"line":	98,
			"primary_score":	1999826,
			"second_score":	14208
		}, {
			"file":	"src/mod_status.c",
			"line":	100,
			"primary_score":	1999826,
			"second_score":	14204
		}, {
			"file":	"src/mod_status.c",
			"line":	102,
			"primary_score":	1999826,
			"second_score":	14203
		}, {
			"file":	"src/mod_status.c",
			"line":	106,
			"primary_score":	1999826,
			"second_score":	14202
		}, {
			"file":	"src/mod_status.c",
			"line":	108,
			"primary_score":	1999826,
			"second_score":	14201
		}, {
			"file":	"src/mod_status.c",
			"line":	112,
			"primary_score":	1999826,
			"second_score":	446635
		}, {
			"file":	"src/mod_status.c",
			"line":	113,
			"primary_score":	1999826,
			"second_score":	446634
		}, {
			"file":	"src/mod_status.c",
			"line":	115,
			"primary_score":	1999826,
			"second_score":	446633
		}, {
			"file":	"src/mod_status.c",
			"line":	123,
			"primary_score":	1999826,
			"second_score":	446632
		}, {
			"file":	"src/mod_status.c",
			"line":	125,
			"primary_score":	1999826,
			"second_score":	446631
		}, {
			"file":	"src/mod_status.c",
			"line":	127,
			"primary_score":	1999826,
			"second_score":	446630
		}, {
			"file":	"src/mod_status.c",
			"line":	128,
			"primary_score":	1999826,
			"second_score":	436402
		}, {
			"file":	"src/mod_status.c",
			"line":	130,
			"primary_score":	1999826,
			"second_score":	436401
		}, {
			"file":	"src/mod_status.c",
			"line":	131,
			"primary_score":	1999826,
			"second_score":	436400
		}, {
			"file":	"src/mod_status.c",
			"line":	132,
			"primary_score":	1999826,
			"second_score":	436392
		}, {
			"file":	"src/mod_status.c",
			"line":	133,
			"primary_score":	1999826,
			"second_score":	436384
		}, {
			"file":	"src/mod_status.c",
			"line":	134,
			"primary_score":	1999826,
			"second_score":	436383
		}, {
			"file":	"src/mod_status.c",
			"line":	136,
			"primary_score":	1999826,
			"second_score":	436375
		}, {
			"file":	"src/mod_status.c",
			"line":	137,
			"primary_score":	1999826,
			"second_score":	436374
		}, {
			"file":	"src/mod_status.c",
			"line":	138,
			"primary_score":	1999826,
			"second_score":	436373
		}, {
			"file":	"src/mod_status.c",
			"line":	139,
			"primary_score":	1999826,
			"second_score":	436372
		}, {
			"file":	"src/mod_status.c",
			"line":	141,
			"primary_score":	1999826,
			"second_score":	436371
		}, {
			"file":	"src/mod_status.c",
			"line":	143,
			"primary_score":	1999826,
			"second_score":	436370
		}, {
			"file":	"src/mod_status.c",
			"line":	148,
			"primary_score":	1999826,
			"second_score":	436061
		}, {
			"file":	"src/mod_status.c",
			"line":	787,
			"primary_score":	1999877,
			"second_score":	119687
		}, {
			"file":	"src/mod_status.c",
			"line":	788,
			"primary_score":	1999877,
			"second_score":	119686
		}, {
			"file":	"src/mod_status.c",
			"line":	790,
			"primary_score":	1999877,
			"second_score":	119685
		}, {
			"file":	"src/mod_status.c",
			"line":	791,
			"primary_score":	1999877,
			"second_score":	119684
		}, {
			"file":	"src/mod_status.c",
			"line":	792,
			"primary_score":	1999877,
			"second_score":	119683
		}, {
			"file":	"src/mod_status.c",
			"line":	793,
			"primary_score":	1999877,
			"second_score":	119682
		}, {
			"file":	"src/mod_status.c",
			"line":	796,
			"primary_score":	1999877,
			"second_score":	119681
		}, {
			"file":	"src/mod_status.c",
			"line":	797,
			"primary_score":	1999877,
			"second_score":	119201
		}, {
			"file":	"src/mod_status.c",
			"line":	798,
			"primary_score":	1999877,
			"second_score":	119200
		}, {
			"file":	"src/mod_status.c",
			"line":	801,
			"primary_score":	1999877,
			"second_score":	119199
		}, {
			"file":	"src/mod_status.c",
			"line":	804,
			"primary_score":	1999879,
			"second_score":	119265
		}, {
			"file":	"src/mod_status.c",
			"line":	805,
			"primary_score":	1999879,
			"second_score":	119329
		}, {
			"file":	"src/mod_status.c",
			"line":	807,
			"primary_score":	1999879,
			"second_score":	119328
		}, {
			"file":	"src/mod_status.c",
			"line":	809,
			"primary_score":	1999879,
			"second_score":	119321
		}, {
			"file":	"src/mod_status.c",
			"line":	811,
			"primary_score":	1999879,
			"second_score":	119314
		}, {
			"file":	"src/mod_status.c",
			"line":	813,
			"primary_score":	1999879,
			"second_score":	119307
		}, {
			"file":	"src/mod_status.c",
			"line":	819,
			"primary_score":	1999877,
			"second_score":	119192
		}, {
			"file":	"src/mod_status.c",
			"line":	823,
			"primary_score":	1999877,
			"second_score":	119689
		}, {
			"file":	"src/mod_status.c",
			"line":	825,
			"primary_score":	1999877,
			"second_score":	119688
		}, {
			"file":	"src/mod_status.c",
			"line":	827,
			"primary_score":	1999877,
			"second_score":	119191
		}, {
			"file":	"src/mod_status.c",
			"line":	830,
			"primary_score":	1999877,
			"second_score":	119186
		}, {
			"file":	"src/mod_status.c",
			"line":	833,
			"primary_score":	1999880,
			"second_score":	119181
		}, {
			"file":	"src/mod_status.c",
			"line":	838,
			"primary_score":	1999880,
			"second_score":	119178
		}, {
			"file":	"src/mod_status.c",
			"line":	871,
			"primary_score":	1999826,
			"second_score":	110600
		}, {
			"file":	"src/mod_status.c",
			"line":	873,
			"primary_score":	1999826,
			"second_score":	110599
		}, {
			"file":	"src/mod_status.c",
			"line":	875,
			"primary_score":	1999826,
			"second_score":	110598
		}, {
			"file":	"src/mod_status.c",
			"line":	876,
			"primary_score":	1999826,
			"second_score":	110597
		}, {
			"file":	"src/mod_status.c",
			"line":	877,
			"primary_score":	1999826,
			"second_score":	110596
		}, {
			"file":	"src/mod_status.c",
			"line":	879,
			"primary_score":	1999826,
			"second_score":	110595
		}, {
			"file":	"src/mod_status.c",
			"line":	881,
			"primary_score":	1999826,
			"second_score":	110594
		}, {
			"file":	"src/mod_status.c",
			"line":	885,
			"primary_score":	1999826,
			"second_score":	542281
		}, {
			"file":	"src/mod_status.c",
			"line":	886,
			"primary_score":	1999826,
			"second_score":	542280
		}, {
			"file":	"src/mod_status.c",
			"line":	888,
			"primary_score":	1999826,
			"second_score":	542253
		}, {
			"file":	"src/mod_status.c",
			"line":	889,
			"primary_score":	1999826,
			"second_score":	542252
		}, {
			"file":	"src/mod_status.c",
			"line":	890,
			"primary_score":	1999826,
			"second_score":	542251
		}, {
			"file":	"src/mod_status.c",
			"line":	892,
			"primary_score":	1999826,
			"second_score":	542250
		}, {
			"file":	"src/mod_status.c",
			"line":	893,
			"primary_score":	1999826,
			"second_score":	542249
		}, {
			"file":	"src/mod_status.c",
			"line":	894,
			"primary_score":	1999826,
			"second_score":	542248
		}, {
			"file":	"src/mod_status.c",
			"line":	896,
			"primary_score":	1999826,
			"second_score":	542247
		}, {
			"file":	"src/mod_status.c",
			"line":	898,
			"primary_score":	1999826,
			"second_score":	542246
		}, {
			"file":	"src/mod_userdir.c",
			"line":	41,
			"primary_score":	1999834,
			"second_score":	537157
		}, {
			"file":	"src/mod_userdir.c",
			"line":	43,
			"primary_score":	1999834,
			"second_score":	537156
		}, {
			"file":	"src/mod_userdir.c",
			"line":	45,
			"primary_score":	1999834,
			"second_score":	537155
		}, {
			"file":	"src/mod_userdir.c",
			"line":	47,
			"primary_score":	1999834,
			"second_score":	537154
		}, {
			"file":	"src/mod_userdir.c",
			"line":	48,
			"primary_score":	1999834,
			"second_score":	537146
		}, {
			"file":	"src/mod_userdir.c",
			"line":	50,
			"primary_score":	1999834,
			"second_score":	537138
		}, {
			"file":	"src/mod_userdir.c",
			"line":	55,
			"primary_score":	1999834,
			"second_score":	10307
		}, {
			"file":	"src/mod_userdir.c",
			"line":	57,
			"primary_score":	1999834,
			"second_score":	10306
		}, {
			"file":	"src/mod_userdir.c",
			"line":	59,
			"primary_score":	1999834,
			"second_score":	10305
		}, {
			"file":	"src/mod_userdir.c",
			"line":	60,
			"primary_score":	1999834,
			"second_score":	10304
		}, {
			"file":	"src/mod_userdir.c",
			"line":	62,
			"primary_score":	1999834,
			"second_score":	10303
		}, {
			"file":	"src/mod_userdir.c",
			"line":	63,
			"primary_score":	1999834,
			"second_score":	9649
		}, {
			"file":	"src/mod_userdir.c",
			"line":	65,
			"primary_score":	1999834,
			"second_score":	9648
		}, {
			"file":	"src/mod_userdir.c",
			"line":	66,
			"primary_score":	1999834,
			"second_score":	9640
		}, {
			"file":	"src/mod_userdir.c",
			"line":	67,
			"primary_score":	1999834,
			"second_score":	9632
		}, {
			"file":	"src/mod_userdir.c",
			"line":	68,
			"primary_score":	1999834,
			"second_score":	9628
		}, {
			"file":	"src/mod_userdir.c",
			"line":	70,
			"primary_score":	1999834,
			"second_score":	9624
		}, {
			"file":	"src/mod_userdir.c",
			"line":	72,
			"primary_score":	1999834,
			"second_score":	9623
		}, {
			"file":	"src/mod_userdir.c",
			"line":	75,
			"primary_score":	1999834,
			"second_score":	9622
		}, {
			"file":	"src/mod_userdir.c",
			"line":	76,
			"primary_score":	1999834,
			"second_score":	9618
		}, {
			"file":	"src/mod_userdir.c",
			"line":	78,
			"primary_score":	1999834,
			"second_score":	9614
		}, {
			"file":	"src/mod_userdir.c",
			"line":	80,
			"primary_score":	1999834,
			"second_score":	9613
		}, {
			"file":	"src/mod_userdir.c",
			"line":	86,
			"primary_score":	1999834,
			"second_score":	338761
		}, {
			"file":	"src/mod_userdir.c",
			"line":	87,
			"primary_score":	1999834,
			"second_score":	338760
		}, {
			"file":	"src/mod_userdir.c",
			"line":	89,
			"primary_score":	1999834,
			"second_score":	338759
		}, {
			"file":	"src/mod_userdir.c",
			"line":	98,
			"primary_score":	1999834,
			"second_score":	338758
		}, {
			"file":	"src/mod_userdir.c",
			"line":	100,
			"primary_score":	1999834,
			"second_score":	338757
		}, {
			"file":	"src/mod_userdir.c",
			"line":	102,
			"primary_score":	1999834,
			"second_score":	338756
		}, {
			"file":	"src/mod_userdir.c",
			"line":	103,
			"primary_score":	1999834,
			"second_score":	326854
		}, {
			"file":	"src/mod_userdir.c",
			"line":	105,
			"primary_score":	1999834,
			"second_score":	326853
		}, {
			"file":	"src/mod_userdir.c",
			"line":	106,
			"primary_score":	1999834,
			"second_score":	326852
		}, {
			"file":	"src/mod_userdir.c",
			"line":	107,
			"primary_score":	1999834,
			"second_score":	326846
		}, {
			"file":	"src/mod_userdir.c",
			"line":	108,
			"primary_score":	1999834,
			"second_score":	326840
		}, {
			"file":	"src/mod_userdir.c",
			"line":	109,
			"primary_score":	1999834,
			"second_score":	326832
		}, {
			"file":	"src/mod_userdir.c",
			"line":	110,
			"primary_score":	1999834,
			"second_score":	326824
		}, {
			"file":	"src/mod_userdir.c",
			"line":	112,
			"primary_score":	1999834,
			"second_score":	326823
		}, {
			"file":	"src/mod_userdir.c",
			"line":	113,
			"primary_score":	1999834,
			"second_score":	326822
		}, {
			"file":	"src/mod_userdir.c",
			"line":	114,
			"primary_score":	1999834,
			"second_score":	326821
		}, {
			"file":	"src/mod_userdir.c",
			"line":	115,
			"primary_score":	1999834,
			"second_score":	326820
		}, {
			"file":	"src/mod_userdir.c",
			"line":	116,
			"primary_score":	1999834,
			"second_score":	326819
		}, {
			"file":	"src/mod_userdir.c",
			"line":	118,
			"primary_score":	1999834,
			"second_score":	326818
		}, {
			"file":	"src/mod_userdir.c",
			"line":	120,
			"primary_score":	1999834,
			"second_score":	326817
		}, {
			"file":	"src/mod_userdir.c",
			"line":	125,
			"primary_score":	1999834,
			"second_score":	326415
		}, {
			"file":	"src/mod_userdir.c",
			"line":	294,
			"primary_score":	1999834,
			"second_score":	540695
		}, {
			"file":	"src/mod_userdir.c",
			"line":	295,
			"primary_score":	1999834,
			"second_score":	540694
		}, {
			"file":	"src/mod_userdir.c",
			"line":	297,
			"primary_score":	1999834,
			"second_score":	540667
		}, {
			"file":	"src/mod_userdir.c",
			"line":	298,
			"primary_score":	1999834,
			"second_score":	540666
		}, {
			"file":	"src/mod_userdir.c",
			"line":	299,
			"primary_score":	1999834,
			"second_score":	540665
		}, {
			"file":	"src/mod_userdir.c",
			"line":	300,
			"primary_score":	1999834,
			"second_score":	540664
		}, {
			"file":	"src/mod_userdir.c",
			"line":	302,
			"primary_score":	1999834,
			"second_score":	540663
		}, {
			"file":	"src/mod_userdir.c",
			"line":	304,
			"primary_score":	1999834,
			"second_score":	540662
		}, {
			"file":	"src/network.c",
			"line":	155,
			"primary_score":	1999817,
			"second_score":	539876
		}, {
			"file":	"src/network.c",
			"line":	172,
			"primary_score":	1999817,
			"second_score":	539877
		}, {
			"file":	"src/network.c",
			"line":	174,
			"primary_score":	1999817,
			"second_score":	539875
		}, {
			"file":	"src/network.c",
			"line":	175,
			"primary_score":	1999817,
			"second_score":	539874
		}, {
			"file":	"src/network.c",
			"line":	176,
			"primary_score":	1999817,
			"second_score":	539873
		}, {
			"file":	"src/network.c",
			"line":	198,
			"primary_score":	1999817,
			"second_score":	131102
		}, {
			"file":	"src/network.c",
			"line":	199,
			"primary_score":	1999817,
			"second_score":	131101
		}, {
			"file":	"src/network.c",
			"line":	200,
			"primary_score":	1999817,
			"second_score":	131100
		}, {
			"file":	"src/network.c",
			"line":	201,
			"primary_score":	1999817,
			"second_score":	131099
		}, {
			"file":	"src/network.c",
			"line":	203,
			"primary_score":	1999817,
			"second_score":	131098
		}, {
			"file":	"src/network.c",
			"line":	205,
			"primary_score":	1999817,
			"second_score":	131097
		}, {
			"file":	"src/network.c",
			"line":	216,
			"primary_score":	1999817,
			"second_score":	131096
		}, {
			"file":	"src/network.c",
			"line":	217,
			"primary_score":	1999817,
			"second_score":	130509
		}, {
			"file":	"src/network.c",
			"line":	219,
			"primary_score":	1999817,
			"second_score":	130495
		}, {
			"file":	"src/network.c",
			"line":	223,
			"primary_score":	1999817,
			"second_score":	539999
		}, {
			"file":	"src/network.c",
			"line":	224,
			"primary_score":	1999817,
			"second_score":	539998
		}, {
			"file":	"src/network.c",
			"line":	225,
			"primary_score":	1999817,
			"second_score":	539997
		}, {
			"file":	"src/network.c",
			"line":	226,
			"primary_score":	1999817,
			"second_score":	539996
		}, {
			"file":	"src/network.c",
			"line":	227,
			"primary_score":	1999817,
			"second_score":	539995
		}, {
			"file":	"src/network.c",
			"line":	228,
			"primary_score":	1999817,
			"second_score":	539994
		}, {
			"file":	"src/network.c",
			"line":	229,
			"primary_score":	1999817,
			"second_score":	539993
		}, {
			"file":	"src/network.c",
			"line":	230,
			"primary_score":	1999817,
			"second_score":	539992
		}, {
			"file":	"src/network.c",
			"line":	231,
			"primary_score":	1999817,
			"second_score":	539991
		}, {
			"file":	"src/network.c",
			"line":	252,
			"primary_score":	1999817,
			"second_score":	539990
		}, {
			"file":	"src/network.c",
			"line":	253,
			"primary_score":	1999817,
			"second_score":	539989
		}, {
			"file":	"src/network.c",
			"line":	255,
			"primary_score":	1999817,
			"second_score":	539982
		}, {
			"file":	"src/network.c",
			"line":	256,
			"primary_score":	1999817,
			"second_score":	539974
		}, {
			"file":	"src/network.c",
			"line":	258,
			"primary_score":	1999817,
			"second_score":	539955
		}, {
			"file":	"src/network.c",
			"line":	259,
			"primary_score":	1999817,
			"second_score":	539947
		}, {
			"file":	"src/network.c",
			"line":	264,
			"primary_score":	1999817,
			"second_score":	539928
		}, {
			"file":	"src/network.c",
			"line":	270,
			"primary_score":	1999817,
			"second_score":	539927
		}, {
			"file":	"src/network.c",
			"line":	273,
			"primary_score":	1999817,
			"second_score":	539926
		}, {
			"file":	"src/network.c",
			"line":	280,
			"primary_score":	1999817,
			"second_score":	539925
		}, {
			"file":	"src/network.c",
			"line":	282,
			"primary_score":	1999817,
			"second_score":	539924
		}, {
			"file":	"src/network.c",
			"line":	284,
			"primary_score":	1999817,
			"second_score":	539923
		}, {
			"file":	"src/network.c",
			"line":	287,
			"primary_score":	1999817,
			"second_score":	539922
		}, {
			"file":	"src/network.c",
			"line":	293,
			"primary_score":	1999834,
			"second_score":	539920
		}, {
			"file":	"src/network.c",
			"line":	295,
			"primary_score":	1999817,
			"second_score":	539919
		}, {
			"file":	"src/network.c",
			"line":	312,
			"primary_score":	1999817,
			"second_score":	539918
		}, {
			"file":	"src/network.c",
			"line":	323,
			"primary_score":	1999817,
			"second_score":	539917
		}, {
			"file":	"src/network.c",
			"line":	324,
			"primary_score":	1999817,
			"second_score":	539916
		}, {
			"file":	"src/network.c",
			"line":	325,
			"primary_score":	1999817,
			"second_score":	539915
		}, {
			"file":	"src/network.c",
			"line":	331,
			"primary_score":	1999817,
			"second_score":	539914
		}, {
			"file":	"src/network.c",
			"line":	332,
			"primary_score":	1999817,
			"second_score":	539913
		}, {
			"file":	"src/network.c",
			"line":	337,
			"primary_score":	1999817,
			"second_score":	539912
		}, {
			"file":	"src/network.c",
			"line":	372,
			"primary_score":	1999817,
			"second_score":	539911
		}, {
			"file":	"src/network.c",
			"line":	373,
			"primary_score":	1999817,
			"second_score":	539910
		}, {
			"file":	"src/network.c",
			"line":	374,
			"primary_score":	1999834,
			"second_score":	539909
		}, {
			"file":	"src/network.c",
			"line":	396,
			"primary_score":	1999817,
			"second_score":	539904
		}, {
			"file":	"src/network.c",
			"line":	398,
			"primary_score":	1999817,
			"second_score":	539899
		}, {
			"file":	"src/network.c",
			"line":	400,
			"primary_score":	1999817,
			"second_score":	539898
		}, {
			"file":	"src/network.c",
			"line":	448,
			"primary_score":	1999817,
			"second_score":	539897
		}, {
			"file":	"src/network.c",
			"line":	464,
			"primary_score":	1999817,
			"second_score":	539896
		}, {
			"file":	"src/network.c",
			"line":	469,
			"primary_score":	1999817,
			"second_score":	539895
		}, {
			"file":	"src/network.c",
			"line":	567,
			"primary_score":	1999817,
			"second_score":	539894
		}, {
			"file":	"src/network.c",
			"line":	569,
			"primary_score":	1999817,
			"second_score":	539893
		}, {
			"file":	"src/network.c",
			"line":	570,
			"primary_score":	1999817,
			"second_score":	539892
		}, {
			"file":	"src/network.c",
			"line":	571,
			"primary_score":	1999817,
			"second_score":	539891
		}, {
			"file":	"src/network.c",
			"line":	572,
			"primary_score":	1999817,
			"second_score":	539890
		}, {
			"file":	"src/network.c",
			"line":	578,
			"primary_score":	1999817,
			"second_score":	539889
		}, {
			"file":	"src/network.c",
			"line":	579,
			"primary_score":	1999817,
			"second_score":	539888
		}, {
			"file":	"src/network.c",
			"line":	581,
			"primary_score":	1999817,
			"second_score":	539884
		}, {
			"file":	"src/network.c",
			"line":	585,
			"primary_score":	1999817,
			"second_score":	108797
		}, {
			"file":	"src/network.c",
			"line":	586,
			"primary_score":	1999817,
			"second_score":	108796
		}, {
			"file":	"src/network.c",
			"line":	587,
			"primary_score":	1999817,
			"second_score":	108795
		}, {
			"file":	"src/network.c",
			"line":	589,
			"primary_score":	1999817,
			"second_score":	108794
		}, {
			"file":	"src/network.c",
			"line":	591,
			"primary_score":	1999817,
			"second_score":	108793
		}, {
			"file":	"src/network.c",
			"line":	592,
			"primary_score":	1999817,
			"second_score":	108792
		}, {
			"file":	"src/network.c",
			"line":	593,
			"primary_score":	1999817,
			"second_score":	108778
		}, {
			"file":	"src/network.c",
			"line":	597,
			"primary_score":	1999817,
			"second_score":	108768
		}, {
			"file":	"src/network.c",
			"line":	603,
			"primary_score":	1999817,
			"second_score":	108767
		}, {
			"file":	"src/network.c",
			"line":	605,
			"primary_score":	1999817,
			"second_score":	108761
		}, {
			"file":	"src/network.c",
			"line":	607,
			"primary_score":	1999817,
			"second_score":	108757
		}, {
			"file":	"src/network.c",
			"line":	611,
			"primary_score":	1999817,
			"second_score":	108756
		}, {
			"file":	"src/network.c",
			"line":	613,
			"primary_score":	1999817,
			"second_score":	108755
		}, {
			"file":	"src/network.c",
			"line":	615,
			"primary_score":	1999817,
			"second_score":	108754
		}, {
			"file":	"src/network.c",
			"line":	619,
			"primary_score":	1999817,
			"second_score":	540071
		}, {
			"file":	"src/network.c",
			"line":	620,
			"primary_score":	1999817,
			"second_score":	540070
		}, {
			"file":	"src/network.c",
			"line":	621,
			"primary_score":	1999817,
			"second_score":	540069
		}, {
			"file":	"src/network.c",
			"line":	623,
			"primary_score":	1999817,
			"second_score":	540068
		}, {
			"file":	"src/network.c",
			"line":	625,
			"primary_score":	1999817,
			"second_score":	540060
		}, {
			"file":	"src/network.c",
			"line":	626,
			"primary_score":	1999817,
			"second_score":	540055
		}, {
			"file":	"src/network.c",
			"line":	627,
			"primary_score":	1999817,
			"second_score":	540037
		}, {
			"file":	"src/network.c",
			"line":	629,
			"primary_score":	1999817,
			"second_score":	540000
		}, {
			"file":	"src/network.c",
			"line":	632,
			"primary_score":	1999817,
			"second_score":	539883
		}, {
			"file":	"src/network.c",
			"line":	635,
			"primary_score":	1999817,
			"second_score":	539879
		}, {
			"file":	"src/network.c",
			"line":	638,
			"primary_score":	1999817,
			"second_score":	539878
		}, {
			"file":	"src/network.c",
			"line":	639,
			"primary_score":	1999817,
			"second_score":	539872
		}, {
			"file":	"src/network.c",
			"line":	640,
			"primary_score":	1999817,
			"second_score":	539871
		}, {
			"file":	"src/network.c",
			"line":	641,
			"primary_score":	1999817,
			"second_score":	539870
		}, {
			"file":	"src/network.c",
			"line":	644,
			"primary_score":	1999817,
			"second_score":	539869
		}, {
			"file":	"src/network.c",
			"line":	645,
			"primary_score":	1999817,
			"second_score":	539868
		}, {
			"file":	"src/network.c",
			"line":	649,
			"primary_score":	1999817,
			"second_score":	539867
		}, {
			"file":	"src/network.c",
			"line":	650,
			"primary_score":	1999817,
			"second_score":	539751
		}, {
			"file":	"src/network.c",
			"line":	651,
			"primary_score":	1999817,
			"second_score":	539750
		}, {
			"file":	"src/network.c",
			"line":	652,
			"primary_score":	1999817,
			"second_score":	539749
		}, {
			"file":	"src/network.c",
			"line":	655,
			"primary_score":	1999817,
			"second_score":	539748
		}, {
			"file":	"src/network.c",
			"line":	676,
			"primary_score":	1999817,
			"second_score":	539746
		}, {
			"file":	"src/network.c",
			"line":	680,
			"primary_score":	1999817,
			"second_score":	265535
		}, {
			"file":	"src/network.c",
			"line":	681,
			"primary_score":	1999817,
			"second_score":	265534
		}, {
			"file":	"src/network.c",
			"line":	685,
			"primary_score":	1999817,
			"second_score":	265531
		}, {
			"file":	"src/network.c",
			"line":	686,
			"primary_score":	1999817,
			"second_score":	265530
		}, {
			"file":	"src/network.c",
			"line":	687,
			"primary_score":	1999817,
			"second_score":	265529
		}, {
			"file":	"src/network.c",
			"line":	688,
			"primary_score":	1999817,
			"second_score":	265515
		}, {
			"file":	"src/network.c",
			"line":	690,
			"primary_score":	1999817,
			"second_score":	265502
		}, {
			"file":	"src/network.c",
			"line":	694,
			"primary_score":	1999817,
			"second_score":	130224
		}, {
			"file":	"src/network.c",
			"line":	695,
			"primary_score":	1999817,
			"second_score":	130223
		}, {
			"file":	"src/network.c",
			"line":	696,
			"primary_score":	1999817,
			"second_score":	130222
		}, {
			"file":	"src/network.c",
			"line":	698,
			"primary_score":	1999817,
			"second_score":	130221
		}, {
			"file":	"src/network.c",
			"line":	705,
			"primary_score":	1999817,
			"second_score":	130220
		}, {
			"file":	"src/network.c",
			"line":	708,
			"primary_score":	1999817,
			"second_score":	130168
		}, {
			"file":	"src/network.c",
			"line":	710,
			"primary_score":	1999817,
			"second_score":	130167
		}, {
			"file":	"src/network.c",
			"line":	714,
			"primary_score":	1999817,
			"second_score":	110767
		}, {
			"file":	"src/network.c",
			"line":	715,
			"primary_score":	1999817,
			"second_score":	110766
		}, {
			"file":	"src/network.c",
			"line":	717,
			"primary_score":	1999817,
			"second_score":	110765
		}, {
			"file":	"src/network.c",
			"line":	719,
			"primary_score":	1999817,
			"second_score":	110764
		}, {
			"file":	"src/network.c",
			"line":	721,
			"primary_score":	1999817,
			"second_score":	110763
		}, {
			"file":	"src/network.c",
			"line":	731,
			"primary_score":	1999817,
			"second_score":	110762
		}, {
			"file":	"src/network.c",
			"line":	737,
			"primary_score":	1999817,
			"second_score":	110761
		}, {
			"file":	"src/network.c",
			"line":	738,
			"primary_score":	1999863,
			"second_score":	110760
		}, {
			"file":	"src/network.c",
			"line":	739,
			"primary_score":	1999863,
			"second_score":	110759
		}, {
			"file":	"src/network.c",
			"line":	743,
			"primary_score":	1999817,
			"second_score":	110758
		}, {
			"file":	"src/network.c",
			"line":	748,
			"primary_score":	1999817,
			"second_score":	110757
		}, {
			"file":	"src/network.c",
			"line":	751,
			"primary_score":	1999817,
			"second_score":	110705
		}, {
			"file":	"src/network.c",
			"line":	758,
			"primary_score":	1999817,
			"second_score":	110632
		}, {
			"file":	"src/network.c",
			"line":	764,
			"primary_score":	1999817,
			"second_score":	110631
		}, {
			"file":	"src/network.c",
			"line":	765,
			"primary_score":	1999863,
			"second_score":	110630
		}, {
			"file":	"src/network.c",
			"line":	766,
			"primary_score":	1999863,
			"second_score":	110629
		}, {
			"file":	"src/network.c",
			"line":	770,
			"primary_score":	1999817,
			"second_score":	110628
		}, {
			"file":	"src/network.c",
			"line":	771,
			"primary_score":	1999817,
			"second_score":	110627
		}, {
			"file":	"src/network.c",
			"line":	772,
			"primary_score":	1999817,
			"second_score":	110626
		}, {
			"file":	"src/network.c",
			"line":	774,
			"primary_score":	1999817,
			"second_score":	110625
		}, {
			"file":	"src/network.c",
			"line":	776,
			"primary_score":	1999817,
			"second_score":	110624
		}, {
			"file":	"src/network.c",
			"line":	783,
			"primary_score":	1999817,
			"second_score":	110623
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	35,
			"primary_score":	1999817,
			"second_score":	110756
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	36,
			"primary_score":	1999817,
			"second_score":	110755
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	38,
			"primary_score":	1999817,
			"second_score":	110754
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	39,
			"primary_score":	1999817,
			"second_score":	110753
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	40,
			"primary_score":	1999817,
			"second_score":	110752
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	42,
			"primary_score":	1999817,
			"second_score":	110751
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	47,
			"primary_score":	1999817,
			"second_score":	110716
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	49,
			"primary_score":	1999817,
			"second_score":	110711
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	50,
			"primary_score":	1999911,
			"second_score":	110710
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	52,
			"primary_score":	1999817,
			"second_score":	110713
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	56,
			"primary_score":	1999817,
			"second_score":	110709
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	60,
			"primary_score":	1999817,
			"second_score":	110708
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	177,
			"primary_score":	1999817,
			"second_score":	110707
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	184,
			"primary_score":	1999817,
			"second_score":	110706
		}, {
			"file":	"src/network_write.c",
			"line":	38,
			"primary_score":	1999817,
			"second_score":	130219
		}, {
			"file":	"src/network_write.c",
			"line":	39,
			"primary_score":	1999817,
			"second_score":	130218
		}, {
			"file":	"src/network_write.c",
			"line":	40,
			"primary_score":	1999817,
			"second_score":	130217
		}, {
			"file":	"src/network_write.c",
			"line":	41,
			"primary_score":	1999817,
			"second_score":	130216
		}, {
			"file":	"src/network_write.c",
			"line":	46,
			"primary_score":	1999817,
			"second_score":	130215
		}, {
			"file":	"src/network_write.c",
			"line":	48,
			"primary_score":	1999817,
			"second_score":	130214
		}, {
			"file":	"src/network_write.c",
			"line":	49,
			"primary_score":	1999817,
			"second_score":	130213
		}, {
			"file":	"src/network_write.c",
			"line":	51,
			"primary_score":	1999817,
			"second_score":	130212
		}, {
			"file":	"src/network_write.c",
			"line":	54,
			"primary_score":	1999817,
			"second_score":	130211
		}, {
			"file":	"src/network_write.c",
			"line":	55,
			"primary_score":	1999817,
			"second_score":	130210
		}, {
			"file":	"src/network_write.c",
			"line":	57,
			"primary_score":	1999817,
			"second_score":	130209
		}, {
			"file":	"src/network_write.c",
			"line":	59,
			"primary_score":	1999817,
			"second_score":	130186
		}, {
			"file":	"src/network_write.c",
			"line":	61,
			"primary_score":	1999817,
			"second_score":	130176
		}, {
			"file":	"src/network_write.c",
			"line":	76,
			"primary_score":	1999817,
			"second_score":	130175
		}, {
			"file":	"src/network_write.c",
			"line":	77,
			"primary_score":	1999817,
			"second_score":	221063
		}, {
			"file":	"src/network_write.c",
			"line":	78,
			"primary_score":	1999817,
			"second_score":	221014
		}, {
			"file":	"src/network_write.c",
			"line":	81,
			"primary_score":	1999817,
			"second_score":	130174
		}, {
			"file":	"src/network_write.c",
			"line":	83,
			"primary_score":	1999817,
			"second_score":	130173
		}, {
			"file":	"src/network_write.c",
			"line":	84,
			"primary_score":	1999817,
			"second_score":	130172
		}, {
			"file":	"src/network_write.c",
			"line":	85,
			"primary_score":	1999817,
			"second_score":	130171
		}, {
			"file":	"src/network_write.c",
			"line":	87,
			"primary_score":	1999817,
			"second_score":	130170
		}, {
			"file":	"src/network_write.c",
			"line":	90,
			"primary_score":	1999817,
			"second_score":	130169
		}, {
			"file":	"src/network_writev.c",
			"line":	60,
			"primary_score":	1999817,
			"second_score":	110750
		}, {
			"file":	"src/network_writev.c",
			"line":	61,
			"primary_score":	1999817,
			"second_score":	110749
		}, {
			"file":	"src/network_writev.c",
			"line":	62,
			"primary_score":	1999817,
			"second_score":	110748
		}, {
			"file":	"src/network_writev.c",
			"line":	64,
			"primary_score":	1999817,
			"second_score":	110747
		}, {
			"file":	"src/network_writev.c",
			"line":	65,
			"primary_score":	1999817,
			"second_score":	110746
		}, {
			"file":	"src/network_writev.c",
			"line":	66,
			"primary_score":	1999817,
			"second_score":	110745
		}, {
			"file":	"src/network_writev.c",
			"line":	67,
			"primary_score":	1999817,
			"second_score":	110744
		}, {
			"file":	"src/network_writev.c",
			"line":	69,
			"primary_score":	1999817,
			"second_score":	110743
		}, {
			"file":	"src/network_writev.c",
			"line":	77,
			"primary_score":	1999817,
			"second_score":	110742
		}, {
			"file":	"src/network_writev.c",
			"line":	79,
			"primary_score":	1999817,
			"second_score":	110741
		}, {
			"file":	"src/network_writev.c",
			"line":	80,
			"primary_score":	1999817,
			"second_score":	110733
		}, {
			"file":	"src/network_writev.c",
			"line":	84,
			"primary_score":	1999817,
			"second_score":	110732
		}, {
			"file":	"src/network_writev.c",
			"line":	85,
			"primary_score":	1999817,
			"second_score":	110731
		}, {
			"file":	"src/network_writev.c",
			"line":	87,
			"primary_score":	1999817,
			"second_score":	110730
		}, {
			"file":	"src/network_writev.c",
			"line":	90,
			"primary_score":	1999817,
			"second_score":	110729
		}, {
			"file":	"src/network_writev.c",
			"line":	97,
			"primary_score":	1999817,
			"second_score":	110728
		}, {
			"file":	"src/network_writev.c",
			"line":	100,
			"primary_score":	1999817,
			"second_score":	110727
		}, {
			"file":	"src/network_writev.c",
			"line":	104,
			"primary_score":	1999817,
			"second_score":	110726
		}, {
			"file":	"src/network_writev.c",
			"line":	121,
			"primary_score":	1999817,
			"second_score":	110725
		}, {
			"file":	"src/network_writev.c",
			"line":	125,
			"primary_score":	1999817,
			"second_score":	110724
		}, {
			"file":	"src/network_writev.c",
			"line":	126,
			"primary_score":	1999817,
			"second_score":	110720
		}, {
			"file":	"src/network_writev.c",
			"line":	128,
			"primary_score":	1999817,
			"second_score":	110719
		}, {
			"file":	"src/network_writev.c",
			"line":	129,
			"primary_score":	1999817,
			"second_score":	110718
		}, {
			"file":	"src/network_writev.c",
			"line":	140,
			"primary_score":	1999817,
			"second_score":	110717
		}, {
			"file":	"src/plugin.c",
			"line":	56,
			"primary_score":	1999817,
			"second_score":	540223
		}, {
			"file":	"src/plugin.c",
			"line":	58,
			"primary_score":	1999817,
			"second_score":	540222
		}, {
			"file":	"src/plugin.c",
			"line":	60,
			"primary_score":	1999817,
			"second_score":	540221
		}, {
			"file":	"src/plugin.c",
			"line":	62,
			"primary_score":	1999817,
			"second_score":	540215
		}, {
			"file":	"src/plugin.c",
			"line":	66,
			"primary_score":	1999817,
			"second_score":	7461
		}, {
			"file":	"src/plugin.c",
			"line":	68,
			"primary_score":	1999817,
			"second_score":	7460
		}, {
			"file":	"src/plugin.c",
			"line":	70,
			"primary_score":	1999817,
			"second_score":	7455
		}, {
			"file":	"src/plugin.c",
			"line":	74,
			"primary_score":	1999817,
			"second_score":	7447
		}, {
			"file":	"src/plugin.c",
			"line":	77,
			"primary_score":	1999817,
			"second_score":	7435
		}, {
			"file":	"src/plugin.c",
			"line":	81,
			"primary_score":	1999817,
			"second_score":	7434
		}, {
			"file":	"src/plugin.c",
			"line":	86,
			"primary_score":	1999817,
			"second_score":	7433
		}, {
			"file":	"src/plugin.c",
			"line":	90,
			"primary_score":	1999817,
			"second_score":	540089
		}, {
			"file":	"src/plugin.c",
			"line":	91,
			"primary_score":	1999817,
			"second_score":	540088
		}, {
			"file":	"src/plugin.c",
			"line":	92,
			"primary_score":	1999817,
			"second_score":	542956
		}, {
			"file":	"src/plugin.c",
			"line":	93,
			"primary_score":	1999817,
			"second_score":	542955
		}, {
			"file":	"src/plugin.c",
			"line":	94,
			"primary_score":	1999817,
			"second_score":	542954
		}, {
			"file":	"src/plugin.c",
			"line":	95,
			"primary_score":	1999817,
			"second_score":	540087
		}, {
			"file":	"src/plugin.c",
			"line":	96,
			"primary_score":	1999817,
			"second_score":	540514
		}, {
			"file":	"src/plugin.c",
			"line":	97,
			"primary_score":	1999817,
			"second_score":	540513
		}, {
			"file":	"src/plugin.c",
			"line":	100,
			"primary_score":	1999817,
			"second_score":	540086
		}, {
			"file":	"src/plugin.c",
			"line":	101,
			"primary_score":	1999817,
			"second_score":	540085
		}, {
			"file":	"src/plugin.c",
			"line":	103,
			"primary_score":	1999817,
			"second_score":	540084
		}, {
			"file":	"src/plugin.c",
			"line":	206,
			"primary_score":	1999817,
			"second_score":	543098
		}, {
			"file":	"src/plugin.c",
			"line":	207,
			"primary_score":	1999817,
			"second_score":	543097
		}, {
			"file":	"src/plugin.c",
			"line":	209,
			"primary_score":	1999817,
			"second_score":	543096
		}, {
			"file":	"src/plugin.c",
			"line":	210,
			"primary_score":	1999817,
			"second_score":	543095
		}, {
			"file":	"src/plugin.c",
			"line":	212,
			"primary_score":	1999817,
			"second_score":	543094
		}, {
			"file":	"src/plugin.c",
			"line":	213,
			"primary_score":	1999817,
			"second_score":	540226
		}, {
			"file":	"src/plugin.c",
			"line":	214,
			"primary_score":	1999817,
			"second_score":	540225
		}, {
			"file":	"src/plugin.c",
			"line":	216,
			"primary_score":	1999817,
			"second_score":	540224
		}, {
			"file":	"src/plugin.c",
			"line":	232,
			"primary_score":	1999817,
			"second_score":	540214
		}, {
			"file":	"src/plugin.c",
			"line":	234,
			"primary_score":	1999817,
			"second_score":	540200
		}, {
			"file":	"src/plugin.c",
			"line":	235,
			"primary_score":	1999817,
			"second_score":	540186
		}, {
			"file":	"src/plugin.c",
			"line":	239,
			"primary_score":	1999817,
			"second_score":	540173
		}, {
			"file":	"src/plugin.c",
			"line":	263,
			"primary_score":	1999817,
			"second_score":	540160
		}, {
			"file":	"src/plugin.c",
			"line":	273,
			"primary_score":	1999817,
			"second_score":	540159
		}, {
			"file":	"src/plugin.c",
			"line":	274,
			"primary_score":	1999817,
			"second_score":	540155
		}, {
			"file":	"src/plugin.c",
			"line":	275,
			"primary_score":	1999817,
			"second_score":	540143
		}, {
			"file":	"src/plugin.c",
			"line":	299,
			"primary_score":	1999817,
			"second_score":	540130
		}, {
			"file":	"src/plugin.c",
			"line":	303,
			"primary_score":	1999817,
			"second_score":	540129
		}, {
			"file":	"src/plugin.c",
			"line":	312,
			"primary_score":	1999817,
			"second_score":	540128
		}, {
			"file":	"src/plugin.c",
			"line":	320,
			"primary_score":	1999817,
			"second_score":	540091
		}, {
			"file":	"src/plugin.c",
			"line":	321,
			"primary_score":	1999834,
			"second_score":	541142
		}, {
			"file":	"src/plugin.c",
			"line":	323,
			"primary_score":	1999834,
			"second_score":	541141
		}, {
			"file":	"src/plugin.c",
			"line":	324,
			"primary_score":	1999834,
			"second_score":	541096
		}, {
			"file":	"src/plugin.c",
			"line":	326,
			"primary_score":	1999834,
			"second_score":	541095
		}, {
			"file":	"src/plugin.c",
			"line":	329,
			"primary_score":	1999834,
			"second_score":	541090
		}, {
			"file":	"src/plugin.c",
			"line":	338,
			"primary_score":	1999817,
			"second_score":	540090
		}, {
			"file":	"src/plugin.c",
			"line":	341,
			"primary_score":	1999817,
			"second_score":	540083
		}, {
			"file":	"src/plugin.c",
			"line":	380,
			"primary_score":	1999884,
			"second_score":	118773
		}, {
			"file":	"src/plugin.c",
			"line":	381,
			"primary_score":	1999860,
			"second_score":	124096
		}, {
			"file":	"src/plugin.c",
			"line":	382,
			"primary_score":	1999889,
			"second_score":	118519
		}, {
			"file":	"src/plugin.c",
			"line":	383,
			"primary_score":	1999998,
			"second_score":	177719
		}, {
			"file":	"src/plugin.c",
			"line":	385,
			"primary_score":	1999852,
			"second_score":	113679
		}, {
			"file":	"src/plugin.c",
			"line":	386,
			"primary_score":	1999827,
			"second_score":	112345
		}, {
			"file":	"src/plugin.c",
			"line":	387,
			"primary_score":	1999852,
			"second_score":	110914
		}, {
			"file":	"src/plugin.c",
			"line":	388,
			"primary_score":	1999817,
			"second_score":	110912
		}, {
			"file":	"src/plugin.c",
			"line":	389,
			"primary_score":	1999834,
			"second_score":	109610
		}, {
			"file":	"src/plugin.c",
			"line":	390,
			"primary_score":	1999821,
			"second_score":	110604
		}, {
			"file":	"src/plugin.c",
			"line":	391,
			"primary_score":	1999817,
			"second_score":	108884
		}, {
			"file":	"src/plugin.c",
			"line":	392,
			"primary_score":	1999817,
			"second_score":	18993
		}, {
			"file":	"src/plugin.c",
			"line":	432,
			"primary_score":	1999817,
			"second_score":	18288
		}, {
			"file":	"src/plugin.c",
			"line":	433,
			"primary_score":	1999817,
			"second_score":	536447
		}, {
			"file":	"src/plugin.c",
			"line":	480,
			"primary_score":	1999817,
			"second_score":	539741
		}, {
			"file":	"src/plugin.c",
			"line":	481,
			"primary_score":	1999817,
			"second_score":	539740
		}, {
			"file":	"src/plugin.c",
			"line":	483,
			"primary_score":	1999817,
			"second_score":	539739
		}, {
			"file":	"src/plugin.c",
			"line":	487,
			"primary_score":	1999817,
			"second_score":	539738
		}, {
			"file":	"src/plugin.c",
			"line":	489,
			"primary_score":	1999817,
			"second_score":	539737
		}, {
			"file":	"src/plugin.c",
			"line":	490,
			"primary_score":	1999817,
			"second_score":	536671
		}, {
			"file":	"src/plugin.c",
			"line":	493,
			"primary_score":	1999817,
			"second_score":	536670
		}, {
			"file":	"src/plugin.c",
			"line":	510,
			"primary_score":	1999826,
			"second_score":	538970
		}, {
			"file":	"src/plugin.c",
			"line":	511,
			"primary_score":	1999826,
			"second_score":	539656
		}, {
			"file":	"src/plugin.c",
			"line":	512,
			"primary_score":	1999834,
			"second_score":	539075
		}, {
			"file":	"src/plugin.c",
			"line":	513,
			"primary_score":	1999834,
			"second_score":	537259
		}, {
			"file":	"src/plugin.c",
			"line":	514,
			"primary_score":	1999817,
			"second_score":	539723
		}, {
			"file":	"src/plugin.c",
			"line":	515,
			"primary_score":	1999834,
			"second_score":	536800
		}, {
			"file":	"src/plugin.c",
			"line":	516,
			"primary_score":	1999822,
			"second_score":	536650
		}, {
			"file":	"src/plugin.c",
			"line":	517,
			"primary_score":	1999834,
			"second_score":	538575
		}, {
			"file":	"src/plugin.c",
			"line":	518,
			"primary_score":	1999817,
			"second_score":	536643
		}, {
			"file":	"src/plugin.c",
			"line":	519,
			"primary_score":	1999834,
			"second_score":	537111
		}, {
			"file":	"src/plugin.c",
			"line":	520,
			"primary_score":	1999834,
			"second_score":	538564
		}, {
			"file":	"src/plugin.c",
			"line":	522,
			"primary_score":	1999817,
			"second_score":	536630
		}, {
			"file":	"src/plugin.c",
			"line":	523,
			"primary_score":	1999826,
			"second_score":	536617
		}, {
			"file":	"src/plugin.c",
			"line":	524,
			"primary_score":	1999817,
			"second_score":	539698
		}, {
			"file":	"src/plugin.c",
			"line":	525,
			"primary_score":	1999817,
			"second_score":	539688
		}, {
			"file":	"src/plugin.c",
			"line":	526,
			"primary_score":	1999834,
			"second_score":	537449
		}, {
			"file":	"src/plugin.c",
			"line":	527,
			"primary_score":	1999829,
			"second_score":	537019
		}, {
			"file":	"src/plugin.c",
			"line":	530,
			"primary_score":	1999817,
			"second_score":	536518
		}, {
			"file":	"src/plugin.c",
			"line":	531,
			"primary_score":	1999817,
			"second_score":	536517
		}, {
			"file":	"src/plugin.c",
			"line":	538,
			"primary_score":	1999817,
			"second_score":	536512
		}, {
			"file":	"src/plugin.c",
			"line":	540,
			"primary_score":	1999817,
			"second_score":	536511
		}, {
			"file":	"src/plugin.c",
			"line":	550,
			"primary_score":	1999817,
			"second_score":	536510
		}, {
			"file":	"src/plugin.c",
			"line":	557,
			"primary_score":	1999834,
			"second_score":	537790
		}, {
			"file":	"src/plugin.c",
			"line":	559,
			"primary_score":	1999834,
			"second_score":	537789
		}, {
			"file":	"src/plugin.c",
			"line":	560,
			"primary_score":	1999834,
			"second_score":	537700
		}, {
			"file":	"src/plugin.c",
			"line":	562,
			"primary_score":	1999834,
			"second_score":	537699
		}, {
			"file":	"src/plugin.c",
			"line":	563,
			"primary_score":	1999834,
			"second_score":	537691
		}, {
			"file":	"src/plugin.c",
			"line":	571,
			"primary_score":	1999817,
			"second_score":	18290
		}, {
			"file":	"src/plugin.c",
			"line":	572,
			"primary_score":	1999817,
			"second_score":	18289
		}, {
			"file":	"src/plugin.c",
			"line":	574,
			"primary_score":	1999817,
			"second_score":	8082
		}, {
			"file":	"src/plugin.c",
			"line":	575,
			"primary_score":	1999817,
			"second_score":	7463
		}, {
			"file":	"src/plugin.c",
			"line":	577,
			"primary_score":	1999817,
			"second_score":	7462
		}, {
			"file":	"src/plugin.c",
			"line":	580,
			"primary_score":	1999817,
			"second_score":	7432
		}, {
			"file":	"src/plugin.c",
			"line":	581,
			"primary_score":	1999817,
			"second_score":	7380
		}, {
			"file":	"src/plugin.c",
			"line":	583,
			"primary_score":	1999817,
			"second_score":	7379
		}, {
			"file":	"src/plugin.c",
			"line":	586,
			"primary_score":	1999817,
			"second_score":	7377
		}, {
			"file":	"src/plugin.c",
			"line":	587,
			"primary_score":	1999817,
			"second_score":	7376
		}, {
			"file":	"src/plugin.c",
			"line":	589,
			"primary_score":	1999817,
			"second_score":	7375
		}, {
			"file":	"src/plugin.c",
			"line":	590,
			"primary_score":	1999817,
			"second_score":	7374
		}, {
			"file":	"src/plugin.c",
			"line":	591,
			"primary_score":	1999817,
			"second_score":	7373
		}, {
			"file":	"src/request.c",
			"line":	18,
			"primary_score":	1999903,
			"second_score":	128156
		}, {
			"file":	"src/request.c",
			"line":	19,
			"primary_score":	1999903,
			"second_score":	128155
		}, {
			"file":	"src/request.c",
			"line":	20,
			"primary_score":	1999903,
			"second_score":	128154
		}, {
			"file":	"src/request.c",
			"line":	21,
			"primary_score":	1999903,
			"second_score":	128153
		}, {
			"file":	"src/request.c",
			"line":	22,
			"primary_score":	1999903,
			"second_score":	128152
		}, {
			"file":	"src/request.c",
			"line":	23,
			"primary_score":	1999903,
			"second_score":	128151
		}, {
			"file":	"src/request.c",
			"line":	24,
			"primary_score":	1999903,
			"second_score":	128150
		}, {
			"file":	"src/request.c",
			"line":	38,
			"primary_score":	1999903,
			"second_score":	128149
		}, {
			"file":	"src/request.c",
			"line":	39,
			"primary_score":	1999903,
			"second_score":	128146
		}, {
			"file":	"src/request.c",
			"line":	41,
			"primary_score":	1999903,
			"second_score":	128145
		}, {
			"file":	"src/request.c",
			"line":	44,
			"primary_score":	1999903,
			"second_score":	128144
		}, {
			"file":	"src/request.c",
			"line":	75,
			"primary_score":	1999905,
			"second_score":	128143
		}, {
			"file":	"src/request.c",
			"line":	88,
			"primary_score":	1999908,
			"second_score":	128142
		}, {
			"file":	"src/request.c",
			"line":	91,
			"primary_score":	1999908,
			"second_score":	128141
		}, {
			"file":	"src/request.c",
			"line":	92,
			"primary_score":	1999908,
			"second_score":	127985
		}, {
			"file":	"src/request.c",
			"line":	94,
			"primary_score":	1999908,
			"second_score":	127984
		}, {
			"file":	"src/request.c",
			"line":	98,
			"primary_score":	1999915,
			"second_score":	128102
		}, {
			"file":	"src/request.c",
			"line":	99,
			"primary_score":	1999916,
			"second_score":	128101
		}, {
			"file":	"src/request.c",
			"line":	104,
			"primary_score":	1999916,
			"second_score":	128100
		}, {
			"file":	"src/request.c",
			"line":	105,
			"primary_score":	1999920,
			"second_score":	128099
		}, {
			"file":	"src/request.c",
			"line":	117,
			"primary_score":	1999916,
			"second_score":	128096
		}, {
			"file":	"src/request.c",
			"line":	119,
			"primary_score":	1999916,
			"second_score":	128095
		}, {
			"file":	"src/request.c",
			"line":	120,
			"primary_score":	1999916,
			"second_score":	128094
		}, {
			"file":	"src/request.c",
			"line":	125,
			"primary_score":	1999909,
			"second_score":	128113
		}, {
			"file":	"src/request.c",
			"line":	132,
			"primary_score":	1999909,
			"second_score":	128112
		}, {
			"file":	"src/request.c",
			"line":	135,
			"primary_score":	1999909,
			"second_score":	128107
		}, {
			"file":	"src/request.c",
			"line":	136,
			"primary_score":	1999913,
			"second_score":	128129
		}, {
			"file":	"src/request.c",
			"line":	138,
			"primary_score":	1999909,
			"second_score":	128106
		}, {
			"file":	"src/request.c",
			"line":	141,
			"primary_score":	1999909,
			"second_score":	128093
		}, {
			"file":	"src/request.c",
			"line":	157,
			"primary_score":	1999920,
			"second_score":	127983
		}, {
			"file":	"src/request.c",
			"line":	158,
			"primary_score":	1999922,
			"second_score":	128012
		}, {
			"file":	"src/request.c",
			"line":	163,
			"primary_score":	1999922,
			"second_score":	128011
		}, {
			"file":	"src/request.c",
			"line":	167,
			"primary_score":	1999922,
			"second_score":	128010
		}, {
			"file":	"src/request.c",
			"line":	168,
			"primary_score":	1999922,
			"second_score":	128009
		}, {
			"file":	"src/request.c",
			"line":	169,
			"primary_score":	1999920,
			"second_score":	127982
		}, {
			"file":	"src/request.c",
			"line":	170,
			"primary_score":	1999925,
			"second_score":	127981
		}, {
			"file":	"src/request.c",
			"line":	173,
			"primary_score":	1999926,
			"second_score":	127976
		}, {
			"file":	"src/request.c",
			"line":	175,
			"primary_score":	1999920,
			"second_score":	127992
		}, {
			"file":	"src/request.c",
			"line":	178,
			"primary_score":	1999920,
			"second_score":	127987
		}, {
			"file":	"src/request.c",
			"line":	182,
			"primary_score":	1999916,
			"second_score":	127975
		}, {
			"file":	"src/request.c",
			"line":	187,
			"primary_score":	1999914,
			"second_score":	127974
		}, {
			"file":	"src/request.c",
			"line":	191,
			"primary_score":	1999915,
			"second_score":	127973
		}, {
			"file":	"src/request.c",
			"line":	195,
			"primary_score":	1999917,
			"second_score":	127972
		}, {
			"file":	"src/request.c",
			"line":	273,
			"primary_score":	1999824,
			"second_score":	128274
		}, {
			"file":	"src/request.c",
			"line":	274,
			"primary_score":	1999824,
			"second_score":	128273
		}, {
			"file":	"src/request.c",
			"line":	276,
			"primary_score":	1999824,
			"second_score":	128272
		}, {
			"file":	"src/request.c",
			"line":	281,
			"primary_score":	1999829,
			"second_score":	128271
		}, {
			"file":	"src/request.c",
			"line":	286,
			"primary_score":	1999830,
			"second_score":	128270
		}, {
			"file":	"src/request.c",
			"line":	294,
			"primary_score":	1999830,
			"second_score":	128267
		}, {
			"file":	"src/request.c",
			"line":	295,
			"primary_score":	1999830,
			"second_score":	128253
		}, {
			"file":	"src/request.c",
			"line":	296,
			"primary_score":	1999833,
			"second_score":	128252
		}, {
			"file":	"src/request.c",
			"line":	333,
			"primary_score":	1999830,
			"second_score":	128238
		}, {
			"file":	"src/request.c",
			"line":	334,
			"primary_score":	1999830,
			"second_score":	128237
		}, {
			"file":	"src/request.c",
			"line":	336,
			"primary_score":	1999830,
			"second_score":	128236
		}, {
			"file":	"src/request.c",
			"line":	337,
			"primary_score":	1999870,
			"second_score":	128235
		}, {
			"file":	"src/request.c",
			"line":	338,
			"primary_score":	1999870,
			"second_score":	128234
		}, {
			"file":	"src/request.c",
			"line":	339,
			"primary_score":	1999870,
			"second_score":	128233
		}, {
			"file":	"src/request.c",
			"line":	342,
			"primary_score":	1999870,
			"second_score":	128232
		}, {
			"file":	"src/request.c",
			"line":	365,
			"primary_score":	1999871,
			"second_score":	128215
		}, {
			"file":	"src/request.c",
			"line":	414,
			"primary_score":	1999876,
			"second_score":	128196
		}, {
			"file":	"src/request.c",
			"line":	435,
			"primary_score":	1999876,
			"second_score":	128179
		}, {
			"file":	"src/request.c",
			"line":	436,
			"primary_score":	1999905,
			"second_score":	128157
		}, {
			"file":	"src/request.c",
			"line":	444,
			"primary_score":	1999917,
			"second_score":	127971
		}, {
			"file":	"src/request.c",
			"line":	451,
			"primary_score":	1999917,
			"second_score":	127968
		}, {
			"file":	"src/request.c",
			"line":	491,
			"primary_score":	1999884,
			"second_score":	127954
		}, {
			"file":	"src/request.c",
			"line":	492,
			"primary_score":	1999886,
			"second_score":	217843
		}, {
			"file":	"src/request.c",
			"line":	495,
			"primary_score":	1999884,
			"second_score":	127945
		}, {
			"file":	"src/request.c",
			"line":	496,
			"primary_score":	1999884,
			"second_score":	127931
		}, {
			"file":	"src/request.c",
			"line":	498,
			"primary_score":	1999884,
			"second_score":	127917
		}, {
			"file":	"src/request.c",
			"line":	502,
			"primary_score":	1999844,
			"second_score":	127883
		}, {
			"file":	"src/request.c",
			"line":	506,
			"primary_score":	1999844,
			"second_score":	127882
		}, {
			"file":	"src/request.c",
			"line":	531,
			"primary_score":	1999853,
			"second_score":	127881
		}, {
			"file":	"src/request.c",
			"line":	537,
			"primary_score":	1999853,
			"second_score":	127880
		}, {
			"file":	"src/request.c",
			"line":	541,
			"primary_score":	1999846,
			"second_score":	127879
		}, {
			"file":	"src/request.c",
			"line":	555,
			"primary_score":	1999855,
			"second_score":	127878
		}, {
			"file":	"src/request.c",
			"line":	578,
			"primary_score":	1999850,
			"second_score":	127877
		}, {
			"file":	"src/request.c",
			"line":	595,
			"primary_score":	1999851,
			"second_score":	127876
		}, {
			"file":	"src/response.c",
			"line":	32,
			"primary_score":	1999817,
			"second_score":	112334
		}, {
			"file":	"src/response.c",
			"line":	33,
			"primary_score":	1999817,
			"second_score":	112333
		}, {
			"file":	"src/response.c",
			"line":	34,
			"primary_score":	1999817,
			"second_score":	112332
		}, {
			"file":	"src/response.c",
			"line":	35,
			"primary_score":	1999817,
			"second_score":	112331
		}, {
			"file":	"src/response.c",
			"line":	36,
			"primary_score":	1999817,
			"second_score":	112330
		}, {
			"file":	"src/response.c",
			"line":	38,
			"primary_score":	1999817,
			"second_score":	112329
		}, {
			"file":	"src/response.c",
			"line":	40,
			"primary_score":	1999817,
			"second_score":	112285
		}, {
			"file":	"src/response.c",
			"line":	43,
			"primary_score":	1999826,
			"second_score":	112284
		}, {
			"file":	"src/response.c",
			"line":	45,
			"primary_score":	1999817,
			"second_score":	112268
		}, {
			"file":	"src/response.c",
			"line":	46,
			"primary_score":	1999817,
			"second_score":	112238
		}, {
			"file":	"src/response.c",
			"line":	47,
			"primary_score":	1999817,
			"second_score":	112225
		}, {
			"file":	"src/response.c",
			"line":	49,
			"primary_score":	1999817,
			"second_score":	112180
		}, {
			"file":	"src/response.c",
			"line":	52,
			"primary_score":	1999817,
			"second_score":	112179
		}, {
			"file":	"src/response.c",
			"line":	60,
			"primary_score":	1999821,
			"second_score":	112178
		}, {
			"file":	"src/response.c",
			"line":	61,
			"primary_score":	1999848,
			"second_score":	112177
		}, {
			"file":	"src/response.c",
			"line":	62,
			"primary_score":	1999848,
			"second_score":	112143
		}, {
			"file":	"src/response.c",
			"line":	64,
			"primary_score":	1999848,
			"second_score":	111900
		}, {
			"file":	"src/response.c",
			"line":	68,
			"primary_score":	1999817,
			"second_score":	111899
		}, {
			"file":	"src/response.c",
			"line":	71,
			"primary_score":	1999817,
			"second_score":	111898
		}, {
			"file":	"src/response.c",
			"line":	75,
			"primary_score":	1999817,
			"second_score":	111897
		}, {
			"file":	"src/response.c",
			"line":	76,
			"primary_score":	1999817,
			"second_score":	111896
		}, {
			"file":	"src/response.c",
			"line":	79,
			"primary_score":	1999817,
			"second_score":	111895
		}, {
			"file":	"src/response.c",
			"line":	85,
			"primary_score":	1999817,
			"second_score":	111578
		}, {
			"file":	"src/response.c",
			"line":	86,
			"primary_score":	1999817,
			"second_score":	111348
		}, {
			"file":	"src/response.c",
			"line":	88,
			"primary_score":	1999817,
			"second_score":	111347
		}, {
			"file":	"src/response.c",
			"line":	90,
			"primary_score":	1999817,
			"second_score":	111346
		}, {
			"file":	"src/response.c",
			"line":	93,
			"primary_score":	1999817,
			"second_score":	111345
		}, {
			"file":	"src/response.c",
			"line":	94,
			"primary_score":	1999817,
			"second_score":	111338
		}, {
			"file":	"src/response.c",
			"line":	96,
			"primary_score":	1999817,
			"second_score":	111331
		}, {
			"file":	"src/response.c",
			"line":	97,
			"primary_score":	1999817,
			"second_score":	111318
		}, {
			"file":	"src/response.c",
			"line":	98,
			"primary_score":	1999817,
			"second_score":	111302
		}, {
			"file":	"src/response.c",
			"line":	99,
			"primary_score":	1999817,
			"second_score":	111289
		}, {
			"file":	"src/response.c",
			"line":	107,
			"primary_score":	1999817,
			"second_score":	111273
		}, {
			"file":	"src/response.c",
			"line":	109,
			"primary_score":	1999817,
			"second_score":	111272
		}, {
			"file":	"src/response.c",
			"line":	112,
			"primary_score":	1999817,
			"second_score":	111259
		}, {
			"file":	"src/response.c",
			"line":	113,
			"primary_score":	1999817,
			"second_score":	154697
		}, {
			"file":	"src/response.c",
			"line":	115,
			"primary_score":	1999817,
			"second_score":	154692
		}, {
			"file":	"src/response.c",
			"line":	118,
			"primary_score":	1999817,
			"second_score":	154691
		}, {
			"file":	"src/response.c",
			"line":	120,
			"primary_score":	1999817,
			"second_score":	154690
		}, {
			"file":	"src/response.c",
			"line":	123,
			"primary_score":	1999817,
			"second_score":	111245
		}, {
			"file":	"src/response.c",
			"line":	126,
			"primary_score":	1999817,
			"second_score":	111225
		}, {
			"file":	"src/response.c",
			"line":	127,
			"primary_score":	1999817,
			"second_score":	111224
		}, {
			"file":	"src/response.c",
			"line":	130,
			"primary_score":	1999829,
			"second_score":	111221
		}, {
			"file":	"src/response.c",
			"line":	131,
			"primary_score":	1999829,
			"second_score":	111208
		}, {
			"file":	"src/response.c",
			"line":	135,
			"primary_score":	1999817,
			"second_score":	111192
		}, {
			"file":	"src/response.c",
			"line":	138,
			"primary_score":	1999817,
			"second_score":	111179
		}, {
			"file":	"src/response.c",
			"line":	139,
			"primary_score":	1999817,
			"second_score":	111178
		}, {
			"file":	"src/response.c",
			"line":	141,
			"primary_score":	1999817,
			"second_score":	111177
		}, {
			"file":	"src/response.c",
			"line":	142,
			"primary_score":	1999834,
			"second_score":	111176
		}, {
			"file":	"src/response.c",
			"line":	145,
			"primary_score":	1999817,
			"second_score":	110954
		}, {
			"file":	"src/response.c",
			"line":	151,
			"primary_score":	1999851,
			"second_score":	125468
		}, {
			"file":	"src/response.c",
			"line":	154,
			"primary_score":	1999851,
			"second_score":	125467
		}, {
			"file":	"src/response.c",
			"line":	162,
			"primary_score":	1999851,
			"second_score":	125466
		}, {
			"file":	"src/response.c",
			"line":	163,
			"primary_score":	1999851,
			"second_score":	127820
		}, {
			"file":	"src/response.c",
			"line":	177,
			"primary_score":	1999851,
			"second_score":	127819
		}, {
			"file":	"src/response.c",
			"line":	180,
			"primary_score":	1999851,
			"second_score":	127818
		}, {
			"file":	"src/response.c",
			"line":	204,
			"primary_score":	1999851,
			"second_score":	127716
		}, {
			"file":	"src/response.c",
			"line":	205,
			"primary_score":	1999851,
			"second_score":	127704
		}, {
			"file":	"src/response.c",
			"line":	206,
			"primary_score":	1999851,
			"second_score":	127690
		}, {
			"file":	"src/response.c",
			"line":	208,
			"primary_score":	1999851,
			"second_score":	127670
		}, {
			"file":	"src/response.c",
			"line":	209,
			"primary_score":	1999851,
			"second_score":	127568
		}, {
			"file":	"src/response.c",
			"line":	210,
			"primary_score":	1999851,
			"second_score":	125207
		}, {
			"file":	"src/response.c",
			"line":	211,
			"primary_score":	1999851,
			"second_score":	125038
		}, {
			"file":	"src/response.c",
			"line":	212,
			"primary_score":	1999851,
			"second_score":	124821
		}, {
			"file":	"src/response.c",
			"line":	213,
			"primary_score":	1999851,
			"second_score":	124719
		}, {
			"file":	"src/response.c",
			"line":	214,
			"primary_score":	1999851,
			"second_score":	124550
		}, {
			"file":	"src/response.c",
			"line":	217,
			"primary_score":	1999851,
			"second_score":	124448
		}, {
			"file":	"src/response.c",
			"line":	223,
			"primary_score":	1999851,
			"second_score":	124447
		}, {
			"file":	"src/response.c",
			"line":	227,
			"primary_score":	1999870,
			"second_score":	124446
		}, {
			"file":	"src/response.c",
			"line":	228,
			"primary_score":	1999870,
			"second_score":	124442
		}, {
			"file":	"src/response.c",
			"line":	231,
			"primary_score":	1999851,
			"second_score":	124428
		}, {
			"file":	"src/response.c",
			"line":	232,
			"primary_score":	1999859,
			"second_score":	124427
		}, {
			"file":	"src/response.c",
			"line":	233,
			"primary_score":	1999859,
			"second_score":	124373
		}, {
			"file":	"src/response.c",
			"line":	234,
			"primary_score":	1999859,
			"second_score":	124319
		}, {
			"file":	"src/response.c",
			"line":	235,
			"primary_score":	1999859,
			"second_score":	124265
		}, {
			"file":	"src/response.c",
			"line":	236,
			"primary_score":	1999859,
			"second_score":	124211
		}, {
			"file":	"src/response.c",
			"line":	237,
			"primary_score":	1999859,
			"second_score":	124157
		}, {
			"file":	"src/response.c",
			"line":	240,
			"primary_score":	1999851,
			"second_score":	124103
		}, {
			"file":	"src/response.c",
			"line":	253,
			"primary_score":	1999851,
			"second_score":	124102
		}, {
			"file":	"src/response.c",
			"line":	274,
			"primary_score":	1999851,
			"second_score":	123494
		}, {
			"file":	"src/response.c",
			"line":	279,
			"primary_score":	1999852,
			"second_score":	123493
		}, {
			"file":	"src/response.c",
			"line":	280,
			"primary_score":	1999852,
			"second_score":	123479
		}, {
			"file":	"src/response.c",
			"line":	281,
			"primary_score":	1999852,
			"second_score":	123192
		}, {
			"file":	"src/response.c",
			"line":	284,
			"primary_score":	1999851,
			"second_score":	122714
		}, {
			"file":	"src/response.c",
			"line":	285,
			"primary_score":	1999859,
			"second_score":	122713
		}, {
			"file":	"src/response.c",
			"line":	286,
			"primary_score":	1999859,
			"second_score":	122659
		}, {
			"file":	"src/response.c",
			"line":	297,
			"primary_score":	1999851,
			"second_score":	122605
		}, {
			"file":	"src/response.c",
			"line":	298,
			"primary_score":	1999851,
			"second_score":	122453
		}, {
			"file":	"src/response.c",
			"line":	301,
			"primary_score":	1999851,
			"second_score":	122351
		}, {
			"file":	"src/response.c",
			"line":	305,
			"primary_score":	1999851,
			"second_score":	122350
		}, {
			"file":	"src/response.c",
			"line":	318,
			"primary_score":	1999880,
			"second_score":	118772
		}, {
			"file":	"src/response.c",
			"line":	361,
			"primary_score":	1999881,
			"second_score":	118771
		}, {
			"file":	"src/response.c",
			"line":	362,
			"primary_score":	1999881,
			"second_score":	118757
		}, {
			"file":	"src/response.c",
			"line":	364,
			"primary_score":	1999881,
			"second_score":	118743
		}, {
			"file":	"src/response.c",
			"line":	401,
			"primary_score":	1999881,
			"second_score":	118742
		}, {
			"file":	"src/response.c",
			"line":	402,
			"primary_score":	1999885,
			"second_score":	118741
		}, {
			"file":	"src/response.c",
			"line":	403,
			"primary_score":	1999885,
			"second_score":	118687
		}, {
			"file":	"src/response.c",
			"line":	404,
			"primary_score":	1999885,
			"second_score":	118633
		}, {
			"file":	"src/response.c",
			"line":	405,
			"primary_score":	1999885,
			"second_score":	118579
		}, {
			"file":	"src/response.c",
			"line":	410,
			"primary_score":	1999881,
			"second_score":	118525
		}, {
			"file":	"src/response.c",
			"line":	426,
			"primary_score":	1999881,
			"second_score":	117662
		}, {
			"file":	"src/response.c",
			"line":	431,
			"primary_score":	1999881,
			"second_score":	117661
		}, {
			"file":	"src/response.c",
			"line":	441,
			"primary_score":	1999881,
			"second_score":	117658
		}, {
			"file":	"src/response.c",
			"line":	442,
			"primary_score":	1999881,
			"second_score":	117644
		}, {
			"file":	"src/response.c",
			"line":	443,
			"primary_score":	1999881,
			"second_score":	117642
		}, {
			"file":	"src/response.c",
			"line":	444,
			"primary_score":	1999881,
			"second_score":	117628
		}, {
			"file":	"src/response.c",
			"line":	446,
			"primary_score":	1999881,
			"second_score":	117627
		}, {
			"file":	"src/response.c",
			"line":	452,
			"primary_score":	1999881,
			"second_score":	117614
		}, {
			"file":	"src/response.c",
			"line":	457,
			"primary_score":	1999881,
			"second_score":	117613
		}, {
			"file":	"src/response.c",
			"line":	458,
			"primary_score":	1999885,
			"second_score":	117612
		}, {
			"file":	"src/response.c",
			"line":	459,
			"primary_score":	1999885,
			"second_score":	117558
		}, {
			"file":	"src/response.c",
			"line":	460,
			"primary_score":	1999885,
			"second_score":	117504
		}, {
			"file":	"src/response.c",
			"line":	461,
			"primary_score":	1999885,
			"second_score":	117450
		}, {
			"file":	"src/response.c",
			"line":	464,
			"primary_score":	1999881,
			"second_score":	117396
		}, {
			"file":	"src/server.c",
			"line":	111,
			"primary_score":	1999817,
			"second_score":	108856
		}, {
			"file":	"src/server.c",
			"line":	113,
			"primary_score":	1999817,
			"second_score":	108855
		}, {
			"file":	"src/server.c",
			"line":	116,
			"primary_score":	1999817,
			"second_score":	108854
		}, {
			"file":	"src/server.c",
			"line":	117,
			"primary_score":	1999817,
			"second_score":	108853
		}, {
			"file":	"src/server.c",
			"line":	253,
			"primary_score":	1999817,
			"second_score":	7371
		}, {
			"file":	"src/server.c",
			"line":	255,
			"primary_score":	1999817,
			"second_score":	7370
		}, {
			"file":	"src/server.c",
			"line":	256,
			"primary_score":	1999817,
			"second_score":	7309
		}, {
			"file":	"src/server.c",
			"line":	269,
			"primary_score":	1999817,
			"second_score":	7305
		}, {
			"file":	"src/server.c",
			"line":	270,
			"primary_score":	1999817,
			"second_score":	7300
		}, {
			"file":	"src/server.c",
			"line":	271,
			"primary_score":	1999817,
			"second_score":	7295
		}, {
			"file":	"src/server.c",
			"line":	272,
			"primary_score":	1999817,
			"second_score":	7290
		}, {
			"file":	"src/server.c",
			"line":	273,
			"primary_score":	1999817,
			"second_score":	7285
		}, {
			"file":	"src/server.c",
			"line":	274,
			"primary_score":	1999817,
			"second_score":	7280
		}, {
			"file":	"src/server.c",
			"line":	275,
			"primary_score":	1999817,
			"second_score":	7275
		}, {
			"file":	"src/server.c",
			"line":	276,
			"primary_score":	1999817,
			"second_score":	7270
		}, {
			"file":	"src/server.c",
			"line":	278,
			"primary_score":	1999817,
			"second_score":	7265
		}, {
			"file":	"src/server.c",
			"line":	279,
			"primary_score":	1999817,
			"second_score":	7260
		}, {
			"file":	"src/server.c",
			"line":	280,
			"primary_score":	1999817,
			"second_score":	7255
		}, {
			"file":	"src/server.c",
			"line":	281,
			"primary_score":	1999817,
			"second_score":	7250
		}, {
			"file":	"src/server.c",
			"line":	282,
			"primary_score":	1999817,
			"second_score":	7245
		}, {
			"file":	"src/server.c",
			"line":	283,
			"primary_score":	1999817,
			"second_score":	7240
		}, {
			"file":	"src/server.c",
			"line":	284,
			"primary_score":	1999817,
			"second_score":	7235
		}, {
			"file":	"src/server.c",
			"line":	285,
			"primary_score":	1999817,
			"second_score":	7230
		}, {
			"file":	"src/server.c",
			"line":	286,
			"primary_score":	1999817,
			"second_score":	7225
		}, {
			"file":	"src/server.c",
			"line":	288,
			"primary_score":	1999817,
			"second_score":	7220
		}, {
			"file":	"src/server.c",
			"line":	294,
			"primary_score":	1999817,
			"second_score":	7215
		}, {
			"file":	"src/server.c",
			"line":	296,
			"primary_score":	1999817,
			"second_score":	6179
		}, {
			"file":	"src/server.c",
			"line":	298,
			"primary_score":	1999817,
			"second_score":	6178
		}, {
			"file":	"src/server.c",
			"line":	299,
			"primary_score":	1999817,
			"second_score":	6177
		}, {
			"file":	"src/server.c",
			"line":	300,
			"primary_score":	1999817,
			"second_score":	5057
		}, {
			"file":	"src/server.c",
			"line":	302,
			"primary_score":	1999817,
			"second_score":	5056
		}, {
			"file":	"src/server.c",
			"line":	304,
			"primary_score":	1999817,
			"second_score":	5055
		}, {
			"file":	"src/server.c",
			"line":	305,
			"primary_score":	1999817,
			"second_score":	5051
		}, {
			"file":	"src/server.c",
			"line":	306,
			"primary_score":	1999817,
			"second_score":	5047
		}, {
			"file":	"src/server.c",
			"line":	307,
			"primary_score":	1999817,
			"second_score":	5043
		}, {
			"file":	"src/server.c",
			"line":	308,
			"primary_score":	1999817,
			"second_score":	5039
		}, {
			"file":	"src/server.c",
			"line":	309,
			"primary_score":	1999817,
			"second_score":	5035
		}, {
			"file":	"src/server.c",
			"line":	310,
			"primary_score":	1999817,
			"second_score":	5031
		}, {
			"file":	"src/server.c",
			"line":	311,
			"primary_score":	1999817,
			"second_score":	5027
		}, {
			"file":	"src/server.c",
			"line":	313,
			"primary_score":	1999817,
			"second_score":	5019
		}, {
			"file":	"src/server.c",
			"line":	315,
			"primary_score":	1999817,
			"second_score":	5018
		}, {
			"file":	"src/server.c",
			"line":	316,
			"primary_score":	1999817,
			"second_score":	5017
		}, {
			"file":	"src/server.c",
			"line":	322,
			"primary_score":	1999817,
			"second_score":	5016
		}, {
			"file":	"src/server.c",
			"line":	323,
			"primary_score":	1999817,
			"second_score":	1250
		}, {
			"file":	"src/server.c",
			"line":	324,
			"primary_score":	1999817,
			"second_score":	625
		}, {
			"file":	"src/server.c",
			"line":	327,
			"primary_score":	1999817,
			"second_score":	616
		}, {
			"file":	"src/server.c",
			"line":	328,
			"primary_score":	1999817,
			"second_score":	612
		}, {
			"file":	"src/server.c",
			"line":	329,
			"primary_score":	1999817,
			"second_score":	608
		}, {
			"file":	"src/server.c",
			"line":	331,
			"primary_score":	1999817,
			"second_score":	604
		}, {
			"file":	"src/server.c",
			"line":	332,
			"primary_score":	1999817,
			"second_score":	603
		}, {
			"file":	"src/server.c",
			"line":	335,
			"primary_score":	1999817,
			"second_score":	447
		}, {
			"file":	"src/server.c",
			"line":	336,
			"primary_score":	1999817,
			"second_score":	185
		}, {
			"file":	"src/server.c",
			"line":	338,
			"primary_score":	1999817,
			"second_score":	177
		}, {
			"file":	"src/server.c",
			"line":	345,
			"primary_score":	1999817,
			"second_score":	176
		}, {
			"file":	"src/server.c",
			"line":	525,
			"primary_score":	1999817,
			"second_score":	265369
		}, {
			"file":	"src/server.c",
			"line":	527,
			"primary_score":	1999817,
			"second_score":	265368
		}, {
			"file":	"src/server.c",
			"line":	528,
			"primary_score":	1999817,
			"second_score":	128682
		}, {
			"file":	"src/server.c",
			"line":	529,
			"primary_score":	1999817,
			"second_score":	128681
		}, {
			"file":	"src/server.c",
			"line":	531,
			"primary_score":	1999817,
			"second_score":	128680
		}, {
			"file":	"src/server.c",
			"line":	534,
			"primary_score":	1999817,
			"second_score":	108860
		}, {
			"file":	"src/server.c",
			"line":	541,
			"primary_score":	1999817,
			"second_score":	108859
		}, {
			"file":	"src/server.c",
			"line":	542,
			"primary_score":	1999817,
			"second_score":	108858
		}, {
			"file":	"src/server.c",
			"line":	546,
			"primary_score":	1999817,
			"second_score":	108857
		}, {
			"file":	"src/server.c",
			"line":	547,
			"primary_score":	1999817,
			"second_score":	108848
		}, {
			"file":	"src/server.c",
			"line":	548,
			"primary_score":	1999817,
			"second_score":	108847
		}, {
			"file":	"src/server.c",
			"line":	549,
			"primary_score":	1999817,
			"second_score":	108846
		}, {
			"file":	"src/server.c",
			"line":	559,
			"primary_score":	1999817,
			"second_score":	108845
		}, {
			"file":	"src/server.c",
			"line":	562,
			"primary_score":	1999817,
			"second_score":	108844
		}, {
			"file":	"src/server.c",
			"line":	565,
			"primary_score":	1999817,
			"second_score":	108843
		}, {
			"file":	"src/server.c",
			"line":	586,
			"primary_score":	1999817,
			"second_score":	265393
		}, {
			"file":	"src/server.c",
			"line":	587,
			"primary_score":	1999817,
			"second_score":	265389
		}, {
			"file":	"src/server.c",
			"line":	588,
			"primary_score":	1999817,
			"second_score":	265388
		}, {
			"file":	"src/server.c",
			"line":	594,
			"primary_score":	1999817,
			"second_score":	265387
		}, {
			"file":	"src/server.c",
			"line":	595,
			"primary_score":	1999817,
			"second_score":	108877
		}, {
			"file":	"src/server.c",
			"line":	596,
			"primary_score":	1999817,
			"second_score":	108876
		}, {
			"file":	"src/server.c",
			"line":	597,
			"primary_score":	1999817,
			"second_score":	108875
		}, {
			"file":	"src/server.c",
			"line":	599,
			"primary_score":	1999817,
			"second_score":	108874
		}, {
			"file":	"src/server.c",
			"line":	652,
			"primary_score":	1999817,
			"second_score":	108873
		}, {
			"file":	"src/server.c",
			"line":	661,
			"primary_score":	1999817,
			"second_score":	108872
		}, {
			"file":	"src/server.c",
			"line":	663,
			"primary_score":	1999817,
			"second_score":	108871
		}, {
			"file":	"src/server.c",
			"line":	790,
			"primary_score":	1999817,
			"second_score":	108870
		}, {
			"file":	"src/server.c",
			"line":	808,
			"primary_score":	1999817,
			"second_score":	108869
		}, {
			"file":	"src/server.c",
			"line":	866,
			"primary_score":	1999817,
			"second_score":	108868
		}, {
			"file":	"src/server.c",
			"line":	873,
			"primary_score":	1999817,
			"second_score":	108867
		}, {
			"file":	"src/server.c",
			"line":	904,
			"primary_score":	1999817,
			"second_score":	108866
		}, {
			"file":	"src/server.c",
			"line":	905,
			"primary_score":	1999817,
			"second_score":	108865
		}, {
			"file":	"src/server.c",
			"line":	907,
			"primary_score":	1999817,
			"second_score":	108864
		}, {
			"file":	"src/server.c",
			"line":	908,
			"primary_score":	1999817,
			"second_score":	108852
		}, {
			"file":	"src/server.c",
			"line":	911,
			"primary_score":	1999817,
			"second_score":	108851
		}, {
			"file":	"src/server.c",
			"line":	918,
			"primary_score":	1999817,
			"second_score":	108850
		}, {
			"file":	"src/server.c",
			"line":	920,
			"primary_score":	1999817,
			"second_score":	108849
		}, {
			"file":	"src/server.c",
			"line":	923,
			"primary_score":	1999817,
			"second_score":	108842
		}, {
			"file":	"src/server.c",
			"line":	925,
			"primary_score":	1999817,
			"second_score":	130312
		}, {
			"file":	"src/server.c",
			"line":	926,
			"primary_score":	1999817,
			"second_score":	130311
		}, {
			"file":	"src/server.c",
			"line":	938,
			"primary_score":	1999817,
			"second_score":	130283
		}, {
			"file":	"src/server.c",
			"line":	939,
			"primary_score":	1999817,
			"second_score":	130282
		}, {
			"file":	"src/server.c",
			"line":	940,
			"primary_score":	1999817,
			"second_score":	130281
		}, {
			"file":	"src/server.c",
			"line":	943,
			"primary_score":	1999817,
			"second_score":	131108
		}, {
			"file":	"src/server.c",
			"line":	962,
			"primary_score":	1999817,
			"second_score":	130264
		}, {
			"file":	"src/server.c",
			"line":	963,
			"primary_score":	1999817,
			"second_score":	130263
		}, {
			"file":	"src/server.c",
			"line":	964,
			"primary_score":	1999817,
			"second_score":	130262
		}, {
			"file":	"src/server.c",
			"line":	967,
			"primary_score":	1999817,
			"second_score":	130261
		}, {
			"file":	"src/server.c",
			"line":	969,
			"primary_score":	1999817,
			"second_score":	131103
		}, {
			"file":	"src/server.c",
			"line":	986,
			"primary_score":	1999817,
			"second_score":	108841
		}, {
			"file":	"src/server.c",
			"line":	994,
			"primary_score":	1999817,
			"second_score":	108840
		}, {
			"file":	"src/server.c",
			"line":	995,
			"primary_score":	1999817,
			"second_score":	128030
		}, {
			"file":	"src/server.c",
			"line":	997,
			"primary_score":	1999817,
			"second_score":	128029
		}, {
			"file":	"src/server.c",
			"line":	998,
			"primary_score":	1999817,
			"second_score":	128028
		}, {
			"file":	"src/server.c",
			"line":	1000,
			"primary_score":	1999817,
			"second_score":	108839
		}, {
			"file":	"src/server.c",
			"line":	1001,
			"primary_score":	1999817,
			"second_score":	128026
		}, {
			"file":	"src/server.c",
			"line":	1002,
			"primary_score":	1999817,
			"second_score":	128025
		}, {
			"file":	"src/server.c",
			"line":	1004,
			"primary_score":	1999817,
			"second_score":	128024
		}, {
			"file":	"src/server.c",
			"line":	1005,
			"primary_score":	1999817,
			"second_score":	128023
		}, {
			"file":	"src/server.c",
			"line":	1007,
			"primary_score":	1999817,
			"second_score":	108885
		}, {
			"file":	"src/server.c",
			"line":	1017,
			"primary_score":	1999817,
			"second_score":	108838
		}, {
			"file":	"src/server.c",
			"line":	1020,
			"primary_score":	1999817,
			"second_score":	108837
		}, {
			"file":	"src/server.c",
			"line":	1022,
			"primary_score":	1999817,
			"second_score":	108827
		}, {
			"file":	"src/server.c",
			"line":	1198,
			"primary_score":	1999817,
			"second_score":	540082
		}, {
			"file":	"src/server.c",
			"line":	1199,
			"primary_score":	1999817,
			"second_score":	540081
		}, {
			"file":	"src/server.c",
			"line":	1226,
			"primary_score":	1999817,
			"second_score":	540080
		}, {
			"file":	"src/server.c",
			"line":	1234,
			"primary_score":	1999817,
			"second_score":	540079
		}, {
			"file":	"src/server.c",
			"line":	1237,
			"primary_score":	1999817,
			"second_score":	540078
		}, {
			"file":	"src/server.c",
			"line":	1368,
			"primary_score":	1999817,
			"second_score":	540077
		}, {
			"file":	"src/server.c",
			"line":	1375,
			"primary_score":	1999817,
			"second_score":	540076
		}, {
			"file":	"src/server.c",
			"line":	1378,
			"primary_score":	1999817,
			"second_score":	540075
		}, {
			"file":	"src/server.c",
			"line":	1382,
			"primary_score":	1999817,
			"second_score":	540074
		}, {
			"file":	"src/server.c",
			"line":	1388,
			"primary_score":	1999817,
			"second_score":	540073
		}, {
			"file":	"src/server.c",
			"line":	1398,
			"primary_score":	1999817,
			"second_score":	540072
		}, {
			"file":	"src/server.c",
			"line":	1407,
			"primary_score":	1999817,
			"second_score":	539745
		}, {
			"file":	"src/server.c",
			"line":	1410,
			"primary_score":	1999817,
			"second_score":	539744
		}, {
			"file":	"src/server.c",
			"line":	1415,
			"primary_score":	1999817,
			"second_score":	539743
		}, {
			"file":	"src/server.c",
			"line":	1418,
			"primary_score":	1999817,
			"second_score":	539742
		}, {
			"file":	"src/server.c",
			"line":	1430,
			"primary_score":	1999817,
			"second_score":	536509
		}, {
			"file":	"src/server.c",
			"line":	1434,
			"primary_score":	1999817,
			"second_score":	536508
		}, {
			"file":	"src/server.c",
			"line":	1435,
			"primary_score":	1999817,
			"second_score":	536507
		}, {
			"file":	"src/server.c",
			"line":	1439,
			"primary_score":	1999817,
			"second_score":	536506
		}, {
			"file":	"src/server.c",
			"line":	1440,
			"primary_score":	1999817,
			"second_score":	536505
		}, {
			"file":	"src/server.c",
			"line":	1441,
			"primary_score":	1999817,
			"second_score":	536464
		}, {
			"file":	"src/server.c",
			"line":	1442,
			"primary_score":	1999817,
			"second_score":	536451
		}, {
			"file":	"src/server.c",
			"line":	1445,
			"primary_score":	1999817,
			"second_score":	536450
		}, {
			"file":	"src/server.c",
			"line":	1446,
			"primary_score":	1999817,
			"second_score":	536449
		}, {
			"file":	"src/server.c",
			"line":	1449,
			"primary_score":	1999817,
			"second_score":	536448
		}, {
			"file":	"src/server.c",
			"line":	1460,
			"primary_score":	1999817,
			"second_score":	279642
		}, {
			"file":	"src/server.c",
			"line":	1461,
			"primary_score":	1999817,
			"second_score":	265861
		}, {
			"file":	"src/server.c",
			"line":	1462,
			"primary_score":	1999817,
			"second_score":	265860
		}, {
			"file":	"src/server.c",
			"line":	1464,
			"primary_score":	1999817,
			"second_score":	265859
		}, {
			"file":	"src/server.c",
			"line":	1465,
			"primary_score":	1999817,
			"second_score":	265858
		}, {
			"file":	"src/server.c",
			"line":	1468,
			"primary_score":	1999817,
			"second_score":	265857
		}, {
			"file":	"src/server.c",
			"line":	1469,
			"primary_score":	1999817,
			"second_score":	279633
		}, {
			"file":	"src/server.c",
			"line":	1472,
			"primary_score":	1999817,
			"second_score":	265856
		}, {
			"file":	"src/server.c",
			"line":	1481,
			"primary_score":	1999817,
			"second_score":	265665
		}, {
			"file":	"src/server.c",
			"line":	1486,
			"primary_score":	1999817,
			"second_score":	265664
		}, {
			"file":	"src/server.c",
			"line":	1491,
			"primary_score":	1999817,
			"second_score":	265663
		}, {
			"file":	"src/server.c",
			"line":	1499,
			"primary_score":	1999817,
			"second_score":	265662
		}, {
			"file":	"src/server.c",
			"line":	1510,
			"primary_score":	1999817,
			"second_score":	265576
		}, {
			"file":	"src/server.c",
			"line":	1511,
			"primary_score":	1999817,
			"second_score":	265575
		}, {
			"file":	"src/server.c",
			"line":	1512,
			"primary_score":	1999817,
			"second_score":	265574
		}, {
			"file":	"src/server.c",
			"line":	1514,
			"primary_score":	1999817,
			"second_score":	265573
		}, {
			"file":	"src/server.c",
			"line":	1515,
			"primary_score":	1999817,
			"second_score":	265572
		}, {
			"file":	"src/server.c",
			"line":	1516,
			"primary_score":	1999817,
			"second_score":	265571
		}, {
			"file":	"src/server.c",
			"line":	1522,
			"primary_score":	1999817,
			"second_score":	265570
		}, {
			"file":	"src/server.c",
			"line":	1523,
			"primary_score":	1999817,
			"second_score":	265569
		}, {
			"file":	"src/server.c",
			"line":	1524,
			"primary_score":	1999817,
			"second_score":	265568
		}, {
			"file":	"src/server.c",
			"line":	1525,
			"primary_score":	1999817,
			"second_score":	265567
		}, {
			"file":	"src/server.c",
			"line":	1526,
			"primary_score":	1999817,
			"second_score":	265566
		}, {
			"file":	"src/server.c",
			"line":	1527,
			"primary_score":	1999817,
			"second_score":	265565
		}, {
			"file":	"src/server.c",
			"line":	1554,
			"primary_score":	1999817,
			"second_score":	265564
		}, {
			"file":	"src/server.c",
			"line":	1555,
			"primary_score":	1999817,
			"second_score":	265563
		}, {
			"file":	"src/server.c",
			"line":	1609,
			"primary_score":	1999817,
			"second_score":	265562
		}, {
			"file":	"src/server.c",
			"line":	1619,
			"primary_score":	1999817,
			"second_score":	265536
		}, {
			"file":	"src/server.c",
			"line":	1628,
			"primary_score":	1999817,
			"second_score":	265501
		}, {
			"file":	"src/server.c",
			"line":	1635,
			"primary_score":	1999817,
			"second_score":	265480
		}, {
			"file":	"src/server.c",
			"line":	1637,
			"primary_score":	1999817,
			"second_score":	265479
		}, {
			"file":	"src/server.c",
			"line":	1638,
			"primary_score":	1999817,
			"second_score":	265478
		}, {
			"file":	"src/server.c",
			"line":	1639,
			"primary_score":	1999817,
			"second_score":	265477
		}, {
			"file":	"src/server.c",
			"line":	1648,
			"primary_score":	1999817,
			"second_score":	265476
		}, {
			"file":	"src/server.c",
			"line":	1649,
			"primary_score":	1999817,
			"second_score":	265475
		}, {
			"file":	"src/server.c",
			"line":	1650,
			"primary_score":	1999817,
			"second_score":	265474
		}, {
			"file":	"src/server.c",
			"line":	1652,
			"primary_score":	1999817,
			"second_score":	265473
		}, {
			"file":	"src/server.c",
			"line":	1654,
			"primary_score":	1999817,
			"second_score":	265472
		}, {
			"file":	"src/server.c",
			"line":	1655,
			"primary_score":	1999817,
			"second_score":	265462
		}, {
			"file":	"src/server.c",
			"line":	1656,
			"primary_score":	1999817,
			"second_score":	265433
		}, {
			"file":	"src/server.c",
			"line":	1657,
			"primary_score":	1999817,
			"second_score":	265432
		}, {
			"file":	"src/server.c",
			"line":	1665,
			"primary_score":	1999817,
			"second_score":	265431
		}, {
			"file":	"src/server.c",
			"line":	1729,
			"primary_score":	1999817,
			"second_score":	265430
		}, {
			"file":	"src/server.c",
			"line":	1730,
			"primary_score":	1999817,
			"second_score":	265429
		}, {
			"file":	"src/server.c",
			"line":	1731,
			"primary_score":	1999817,
			"second_score":	265401
		}, {
			"file":	"src/server.c",
			"line":	1737,
			"primary_score":	1999817,
			"second_score":	265400
		}, {
			"file":	"src/server.c",
			"line":	1738,
			"primary_score":	1999817,
			"second_score":	265399
		}, {
			"file":	"src/server.c",
			"line":	1739,
			"primary_score":	1999817,
			"second_score":	265398
		}, {
			"file":	"src/server.c",
			"line":	1745,
			"primary_score":	1999817,
			"second_score":	265394
		}, {
			"file":	"src/server.c",
			"line":	1747,
			"primary_score":	1999817,
			"second_score":	108826
		}, {
			"file":	"src/server.c",
			"line":	1750,
			"primary_score":	1999817,
			"second_score":	108825
		}, {
			"file":	"src/server.c",
			"line":	1763,
			"primary_score":	1999817,
			"second_score":	108824
		}, {
			"file":	"src/server.c",
			"line":	1776,
			"primary_score":	1999817,
			"second_score":	108823
		}, {
			"file":	"src/server.c",
			"line":	1783,
			"primary_score":	1999817,
			"second_score":	108822
		}, {
			"file":	"src/server.c",
			"line":	1784,
			"primary_score":	1999817,
			"second_score":	108809
		}, {
			"file":	"src/server.c",
			"line":	1790,
			"primary_score":	1999817,
			"second_score":	108805
		}, {
			"file":	"src/server.c",
			"line":	1791,
			"primary_score":	1999817,
			"second_score":	108804
		}, {
			"file":	"src/server.c",
			"line":	1793,
			"primary_score":	1999817,
			"second_score":	108803
		}, {
			"file":	"src/server.c",
			"line":	1818,
			"primary_score":	1999817,
			"second_score":	108801
		}, {
			"file":	"src/server.c",
			"line":	1819,
			"primary_score":	1999817,
			"second_score":	108800
		}, {
			"file":	"src/server.c",
			"line":	1820,
			"primary_score":	1999817,
			"second_score":	108799
		}, {
			"file":	"src/server.c",
			"line":	1823,
			"primary_score":	1999817,
			"second_score":	108798
		}, {
			"file":	"src/server.c",
			"line":	1824,
			"primary_score":	1999817,
			"second_score":	108753
		}, {
			"file":	"src/server.c",
			"line":	1825,
			"primary_score":	1999817,
			"second_score":	18291
		}, {
			"file":	"src/server.c",
			"line":	1826,
			"primary_score":	1999817,
			"second_score":	7372
		}, {
			"file":	"src/server.c",
			"line":	1828,
			"primary_score":	1999817,
			"second_score":	175
		}, {
			"file":	"src/server.c",
			"line":	1830,
			"primary_score":	1999817,
			"second_score":	121
		}, {
			"file":	"src/server.c",
			"line":	1831,
			"primary_score":	1999817,
			"second_score":	106
		}, {
			"file":	"src/server.c",
			"line":	1834,
			"primary_score":	1999817,
			"second_score":	2
		}, {
			"file":	"src/server.c",
			"line":	1837,
			"primary_score":	1999817,
			"second_score":	1
		}, {
			"file":	"src/stat_cache.c",
			"line":	99,
			"primary_score":	1999817,
			"second_score":	265423
		}, {
			"file":	"src/stat_cache.c",
			"line":	100,
			"primary_score":	1999817,
			"second_score":	265422
		}, {
			"file":	"src/stat_cache.c",
			"line":	103,
			"primary_score":	1999817,
			"second_score":	265421
		}, {
			"file":	"src/stat_cache.c",
			"line":	104,
			"primary_score":	1999817,
			"second_score":	265420
		}, {
			"file":	"src/stat_cache.c",
			"line":	106,
			"primary_score":	1999817,
			"second_score":	265419
		}, {
			"file":	"src/stat_cache.c",
			"line":	107,
			"primary_score":	1999817,
			"second_score":	265417
		}, {
			"file":	"src/stat_cache.c",
			"line":	109,
			"primary_score":	1999817,
			"second_score":	265411
		}, {
			"file":	"src/stat_cache.c",
			"line":	110,
			"primary_score":	1999817,
			"second_score":	265410
		}, {
			"file":	"src/stat_cache.c",
			"line":	113,
			"primary_score":	1999817,
			"second_score":	265409
		}, {
			"file":	"src/stat_cache.c",
			"line":	115,
			"primary_score":	1999817,
			"second_score":	173156
		}, {
			"file":	"src/stat_cache.c",
			"line":	116,
			"primary_score":	1999817,
			"second_score":	173155
		}, {
			"file":	"src/stat_cache.c",
			"line":	119,
			"primary_score":	1999817,
			"second_score":	173154
		}, {
			"file":	"src/stat_cache.c",
			"line":	120,
			"primary_score":	1999817,
			"second_score":	173153
		}, {
			"file":	"src/stat_cache.c",
			"line":	122,
			"primary_score":	1999817,
			"second_score":	173152
		}, {
			"file":	"src/stat_cache.c",
			"line":	132,
			"primary_score":	1999817,
			"second_score":	108808
		}, {
			"file":	"src/stat_cache.c",
			"line":	133,
			"primary_score":	1999817,
			"second_score":	108807
		}, {
			"file":	"src/stat_cache.c",
			"line":	135,
			"primary_score":	1999817,
			"second_score":	108806
		}, {
			"file":	"src/stat_cache.c",
			"line":	141,
			"primary_score":	1999881,
			"second_score":	115063
		}, {
			"file":	"src/stat_cache.c",
			"line":	143,
			"primary_score":	1999881,
			"second_score":	115062
		}, {
			"file":	"src/stat_cache.c",
			"line":	155,
			"primary_score":	1999817,
			"second_score":	265500
		}, {
			"file":	"src/stat_cache.c",
			"line":	157,
			"primary_score":	1999817,
			"second_score":	265499
		}, {
			"file":	"src/stat_cache.c",
			"line":	159,
			"primary_score":	1999817,
			"second_score":	265498
		}, {
			"file":	"src/stat_cache.c",
			"line":	160,
			"primary_score":	1999817,
			"second_score":	265490
		}, {
			"file":	"src/stat_cache.c",
			"line":	166,
			"primary_score":	1999817,
			"second_score":	265482
		}, {
			"file":	"src/stat_cache.c",
			"line":	169,
			"primary_score":	1999817,
			"second_score":	265481
		}, {
			"file":	"src/stat_cache.c",
			"line":	173,
			"primary_score":	1999881,
			"second_score":	115136
		}, {
			"file":	"src/stat_cache.c",
			"line":	175,
			"primary_score":	1999881,
			"second_score":	115135
		}, {
			"file":	"src/stat_cache.c",
			"line":	177,
			"primary_score":	1999881,
			"second_score":	115134
		}, {
			"file":	"src/stat_cache.c",
			"line":	178,
			"primary_score":	1999881,
			"second_score":	115126
		}, {
			"file":	"src/stat_cache.c",
			"line":	179,
			"primary_score":	1999881,
			"second_score":	115118
		}, {
			"file":	"src/stat_cache.c",
			"line":	181,
			"primary_score":	1999881,
			"second_score":	115110
		}, {
			"file":	"src/stat_cache.c",
			"line":	185,
			"primary_score":	1999881,
			"second_score":	473
		}, {
			"file":	"src/stat_cache.c",
			"line":	186,
			"primary_score":	1999881,
			"second_score":	472
		}, {
			"file":	"src/stat_cache.c",
			"line":	188,
			"primary_score":	1999881,
			"second_score":	471
		}, {
			"file":	"src/stat_cache.c",
			"line":	189,
			"primary_score":	1999881,
			"second_score":	467
		}, {
			"file":	"src/stat_cache.c",
			"line":	190,
			"primary_score":	1999881,
			"second_score":	463
		}, {
			"file":	"src/stat_cache.c",
			"line":	192,
			"primary_score":	1999881,
			"second_score":	459
		}, {
			"file":	"src/stat_cache.c",
			"line":	197,
			"primary_score":	1999881,
			"second_score":	481
		}, {
			"file":	"src/stat_cache.c",
			"line":	198,
			"primary_score":	1999881,
			"second_score":	480
		}, {
			"file":	"src/stat_cache.c",
			"line":	199,
			"primary_score":	1999881,
			"second_score":	479
		}, {
			"file":	"src/stat_cache.c",
			"line":	201,
			"primary_score":	1999881,
			"second_score":	478
		}, {
			"file":	"src/stat_cache.c",
			"line":	202,
			"primary_score":	1999881,
			"second_score":	474
		}, {
			"file":	"src/stat_cache.c",
			"line":	204,
			"primary_score":	1999881,
			"second_score":	458
		}, {
			"file":	"src/stat_cache.c",
			"line":	210,
			"primary_score":	1999817,
			"second_score":	602
		}, {
			"file":	"src/stat_cache.c",
			"line":	211,
			"primary_score":	1999817,
			"second_score":	457
		}, {
			"file":	"src/stat_cache.c",
			"line":	214,
			"primary_score":	1999817,
			"second_score":	456
		}, {
			"file":	"src/stat_cache.c",
			"line":	215,
			"primary_score":	1999817,
			"second_score":	452
		}, {
			"file":	"src/stat_cache.c",
			"line":	221,
			"primary_score":	1999817,
			"second_score":	448
		}, {
			"file":	"src/stat_cache.c",
			"line":	287,
			"primary_score":	1999881,
			"second_score":	115184
		}, {
			"file":	"src/stat_cache.c",
			"line":	288,
			"primary_score":	1999881,
			"second_score":	115183
		}, {
			"file":	"src/stat_cache.c",
			"line":	289,
			"primary_score":	1999881,
			"second_score":	115182
		}, {
			"file":	"src/stat_cache.c",
			"line":	290,
			"primary_score":	1999881,
			"second_score":	115181
		}, {
			"file":	"src/stat_cache.c",
			"line":	291,
			"primary_score":	1999881,
			"second_score":	115180
		}, {
			"file":	"src/stat_cache.c",
			"line":	292,
			"primary_score":	1999881,
			"second_score":	115179
		}, {
			"file":	"src/stat_cache.c",
			"line":	294,
			"primary_score":	1999881,
			"second_score":	115178
		}, {
			"file":	"src/stat_cache.c",
			"line":	300,
			"primary_score":	1999881,
			"second_score":	115177
		}, {
			"file":	"src/stat_cache.c",
			"line":	302,
			"primary_score":	1999881,
			"second_score":	115176
		}, {
			"file":	"src/stat_cache.c",
			"line":	303,
			"primary_score":	1999881,
			"second_score":	115162
		}, {
			"file":	"src/stat_cache.c",
			"line":	306,
			"primary_score":	1999881,
			"second_score":	115141
		}, {
			"file":	"src/stat_cache.c",
			"line":	319,
			"primary_score":	1999881,
			"second_score":	115138
		}, {
			"file":	"src/stat_cache.c",
			"line":	320,
			"primary_score":	1999881,
			"second_score":	115137
		}, {
			"file":	"src/stat_cache.c",
			"line":	322,
			"primary_score":	1999881,
			"second_score":	115109
		}, {
			"file":	"src/stat_cache.c",
			"line":	324,
			"primary_score":	1999881,
			"second_score":	115090
		}, {
			"file":	"src/stat_cache.c",
			"line":	344,
			"primary_score":	1999881,
			"second_score":	115061
		}, {
			"file":	"src/stat_cache.c",
			"line":	370,
			"primary_score":	1999881,
			"second_score":	115060
		}, {
			"file":	"src/stat_cache.c",
			"line":	371,
			"primary_score":	1999945,
			"second_score":	115282
		}, {
			"file":	"src/stat_cache.c",
			"line":	376,
			"primary_score":	1999945,
			"second_score":	115281
		}, {
			"file":	"src/stat_cache.c",
			"line":	380,
			"primary_score":	1999881,
			"second_score":	140367
		}, {
			"file":	"src/stat_cache.c",
			"line":	385,
			"primary_score":	1999881,
			"second_score":	140365
		}, {
			"file":	"src/stat_cache.c",
			"line":	387,
			"primary_score":	1999881,
			"second_score":	140364
		}, {
			"file":	"src/stat_cache.c",
			"line":	388,
			"primary_score":	1999881,
			"second_score":	140363
		}, {
			"file":	"src/stat_cache.c",
			"line":	389,
			"primary_score":	1999881,
			"second_score":	140362
		}, {
			"file":	"src/stat_cache.c",
			"line":	405,
			"primary_score":	1999881,
			"second_score":	140361
		}, {
			"file":	"src/stat_cache.c",
			"line":	409,
			"primary_score":	1999881,
			"second_score":	140360
		}, {
			"file":	"src/stat_cache.c",
			"line":	455,
			"primary_score":	1999881,
			"second_score":	140359
		}, {
			"file":	"src/stat_cache.c",
			"line":	479,
			"primary_score":	1999889,
			"second_score":	207271
		}, {
			"file":	"src/stat_cache.c",
			"line":	480,
			"primary_score":	1999889,
			"second_score":	207270
		}, {
			"file":	"src/stat_cache.c",
			"line":	483,
			"primary_score":	1999881,
			"second_score":	140118
		}, {
			"file":	"src/stat_cache.c",
			"line":	485,
			"primary_score":	1999881,
			"second_score":	140117
		}, {
			"file":	"src/stat_cache.c",
			"line":	494,
			"primary_score":	1999883,
			"second_score":	117795
		}, {
			"file":	"src/status_counter.c",
			"line":	24,
			"primary_score":	1999817,
			"second_score":	105
		}, {
			"file":	"src/status_counter.c",
			"line":	28,
			"primary_score":	1999834,
			"second_score":	378364
		}, {
			"file":	"src/status_counter.c",
			"line":	32,
			"primary_score":	1999834,
			"second_score":	378366
		}, {
			"file":	"src/status_counter.c",
			"line":	33,
			"primary_score":	1999834,
			"second_score":	378365
		}, {
			"file":	"src/status_counter.c",
			"line":	35,
			"primary_score":	1999834,
			"second_score":	378363
		}, {
			"file":	"src/status_counter.c",
			"line":	38,
			"primary_score":	1999834,
			"second_score":	378131
		}, {
			"file":	"src/status_counter.c",
			"line":	39,
			"primary_score":	1999834,
			"second_score":	378124
		}, {
			"file":	"src/status_counter.c",
			"line":	41,
			"primary_score":	1999834,
			"second_score":	378105
		}, {
			"file":	"src/status_counter.c",
			"line":	42,
			"primary_score":	1999834,
			"second_score":	378089
		}, {
			"file":	"src/status_counter.c",
			"line":	44,
			"primary_score":	1999834,
			"second_score":	378088
		}, {
			"file":	"src/status_counter.c",
			"line":	46,
			"primary_score":	1999834,
			"second_score":	377792
		}],
	"mutation_info":	[{
			"file":	"src/mod_secure_download.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"src/mod_secure_download.c",
			"lines":	[{
					"line":	144,
					"switches":	[]
				}, {
					"line":	146,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [3], [], [], [], [], [1, 2], [], [], [], [], [], [], []],
							"begin_line":	147,
							"begin_column":	0,
							"end_line":	147,
							"end_column":	0,
							"patch_codes":	["log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "if (__is_neg(\"\", \"L147\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-7.3114524745084566, -7.6750871925084576, -8.35338604630846]
								}]
						}, {
							"switch":	1,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	147,
							"begin_column":	2,
							"end_line":	147,
							"end_column":	26,
							"patch_codes":	["if (__is_neg(\"\", \"L147\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i)))\n    return 0;\n", "if ((((void *)0) == str) || __is_neg(\"\", \"L147\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i)))\n    return 0;\n", "if ((((void *)0) == str) && !__is_neg(\"\", \"L147\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.324988410428146, -4.119226936428146, -5.1429156004281458]
								}, {
									"case":	2,
									"scores":	[-3.4788346111281458, -5.2730731371281463, -6.2967618011281461]
								}, {
									"case":	3,
									"scores":	[-3.4788346111281458, -5.2730731371281463, -6.2967618011281461]
								}]
						}, {
							"switch":	2,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	147,
							"begin_column":	2,
							"end_line":	147,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L147\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i)))\n    if (((void *)0) == str)\n        return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.3216063275084577, -5.1158448535084569, -6.1395335175084567]
								}]
						}]
				}, {
					"line":	150,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [3, 4], [], [], [], [], [1, 2], [], [], [], [], [], [], []],
							"begin_line":	151,
							"begin_column":	1,
							"end_line":	151,
							"end_column":	1,
							"patch_codes":	["log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "if (__is_neg(\"\", \"L151\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i)))\n    break;\n", "if (__is_neg(\"\", \"L151\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	2,
									"scores":	[-4.1948609078734185]
								}, {
									"case":	3,
									"scores":	[-6.4830260428734183, -6.5694597478734185, -6.8483079078734175]
								}, {
									"case":	4,
									"scores":	[-6.5829342428734181, -6.6693679478734182, -6.9482161078734181]
								}]
						}, {
							"switch":	5,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	151,
							"begin_column":	3,
							"end_line":	156,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L151\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i))) {\n    return 0;\n}\n", "if ((!((*str >= '0' && *str <= '9') || (*str >= 'a' && *str <= 'f') || (*str >= 'A' && *str <= 'F'))) || __is_neg(\"\", \"L151\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i))) {\n    return 0;\n}\n", "if ((!((*str >= '0' && *str <= '9') || (*str >= 'a' && *str <= 'f') || (*str >= 'A' && *str <= 'F'))) && !__is_neg(\"\", \"L151\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i))) {\n    return 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7056787054281459, -3.790456835428146, -3.7696022054281459]
								}, {
									"case":	2,
									"scores":	[-3.1183052954281458, -3.2030834254281459, -3.1822287954281459]
								}, {
									"case":	3,
									"scores":	[-3.1183052954281458, -3.2030834254281459, -3.1822287954281459]
								}]
						}, {
							"switch":	6,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	151,
							"begin_column":	3,
							"end_line":	156,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L151\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i)))\n    if (!((*str >= '0' && *str <= '9') || (*str >= 'a' && *str <= 'f') || (*str >= 'A' && *str <= 'F'))) {\n        return 0;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7116584078734185, -5.7964365378734186, -5.7755819078734181]
								}]
						}]
				}, {
					"line":	148,
					"switches":	[{
							"switch":	3,
							"types":	[[], [], [], [], [3], [], [], [], [], [1, 2], [], [], [], [], [], [], []],
							"begin_line":	149,
							"begin_column":	0,
							"end_line":	149,
							"end_column":	0,
							"patch_codes":	["log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "if (__is_neg(\"\", \"L149\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.215063615190938]
								}, {
									"case":	2,
									"scores":	[-4.215063615190938]
								}, {
									"case":	3,
									"scores":	[-5.4830586623909383, -6.0754230691909372, -6.5903711238909377]
								}]
						}, {
							"switch":	7,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	149,
							"begin_column":	2,
							"end_line":	157,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L149\", 3, &(str), sizeof (str), &(len), sizeof (len), &(i), sizeof (i)))\n    for (i = 0; i < len && *str; i++ , str++) {\n        if (!((*str >= '0' && *str <= '9') || (*str >= 'a' && *str <= 'f') || (*str >= 'A' && *str <= 'F'))) {\n            return 0;\n        }\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5227015271909377, -3.2435713341909378, -4.19277511019094]
								}]
						}]
				}, {
					"line":	158,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [3], [], [], [], [], [1, 2], [], [], [], [], [], [], []],
							"begin_line":	159,
							"begin_column":	0,
							"end_line":	159,
							"end_column":	0,
							"patch_codes":	["log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "if (__is_neg(\"\", \"L159\", 3, &(len), sizeof (len), &(i), sizeof (i), &(str), sizeof (str)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	2,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	3,
									"scores":	[-6.2366165969683, -5.2564611489683015, -6.5946566951683]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], []],
							"begin_line":	159,
							"begin_column":	2,
							"end_line":	159,
							"end_column":	14,
							"patch_codes":	["if (!__is_neg(\"\", \"L159\", 3, &(len), sizeof (len), &(i), sizeof (i), &(str), sizeof (str)))\n    return i == len;\n", "return i == len & !__is_neg(\"\", \"L159\", 3, &(len), sizeof (len), &(i), sizeof (i), &(str), sizeof (str));\n", "return i == len | __is_neg(\"\", \"L159\", 3, &(len), sizeof (len), &(i), sizeof (i), &(str), sizeof (str));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.3513035589683016, -3.2175638759683016, -6.6422220609683]
								}, {
									"case":	2,
									"scores":	[-2.2574486311683, -3.1237089481683018, -6.5483671331683]
								}, {
									"case":	3,
									"scores":	[-2.2574486311683, -3.1237089481683018, -6.5483671331683]
								}]
						}]
				}, {
					"line":	183,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [196, 197, 198], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], [], [], [], [189, 190, 191, 192, 193, 194, 195], [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], [], [], [], [], [], []],
							"begin_line":	184,
							"begin_column":	3,
							"end_line":	184,
							"end_column":	3,
							"patch_codes":	["memset(&dc->childs, 0, sizeof (*(&dc->childs)))", "memset(&dc->comp, 0, sizeof (*(&dc->comp)))", "memset(&dc->comp_key, 0, sizeof (*(&dc->comp_key)))", "memset(&dc->cond, 0, sizeof (*(&dc->cond)))", "memset(&dc->context_ndx, 0, sizeof (*(&dc->context_ndx)))", "memset(&dc->copy, 0, sizeof (*(&dc->copy)))", "memset(&dc->free, 0, sizeof (*(&dc->free)))", "memset(&dc->insert_dup, 0, sizeof (*(&dc->insert_dup)))", "memset(&dc->is_index_key, 0, sizeof (*(&dc->is_index_key)))", "memset(&dc->key, 0, sizeof (*(&dc->key)))", "memset(&dc->next, 0, sizeof (*(&dc->next)))", "memset(&dc->op, 0, sizeof (*(&dc->op)))", "memset(&dc->parent, 0, sizeof (*(&dc->parent)))", "memset(&dc->prev, 0, sizeof (*(&dc->prev)))", "memset(&dc->print, 0, sizeof (*(&dc->print)))", "memset(&dc->regex, 0, sizeof (*(&dc->regex)))", "memset(&dc->regex_study, 0, sizeof (*(&dc->regex_study)))", "memset(&dc->reset, 0, sizeof (*(&dc->reset)))", "memset(&dc->string, 0, sizeof (*(&dc->string)))", "memset(&dc->type, 0, sizeof (*(&dc->type)))", "memset(&dc->value, 0, sizeof (*(&dc->value)))", "memset(&dc->value->data, 0, sizeof (*(&dc->value->data)))", "memset(&dc->value->is_weakref, 0, sizeof (*(&dc->value->is_weakref)))", "memset(&dc->value->next_power_of_2, 0, sizeof (*(&dc->value->next_power_of_2)))", "memset(&dc->value->size, 0, sizeof (*(&dc->value->size)))", "memset(&dc->value->sorted, 0, sizeof (*(&dc->value->sorted)))", "memset(&dc->value->unique_ndx, 0, sizeof (*(&dc->value->unique_ndx)))", "memset(&dc->value->used, 0, sizeof (*(&dc->value->used)))", "memset(&du->copy, 0, sizeof (*(&du->copy)))", "memset(&du->free, 0, sizeof (*(&du->free)))", "memset(&du->insert_dup, 0, sizeof (*(&du->insert_dup)))", "memset(&du->is_index_key, 0, sizeof (*(&du->is_index_key)))", "memset(&du->key, 0, sizeof (*(&du->key)))", "memset(&du->print, 0, sizeof (*(&du->print)))", "memset(&du->reset, 0, sizeof (*(&du->reset)))", "memset(&du->type, 0, sizeof (*(&du->type)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&s->doc_root, 0, sizeof (*(&s->doc_root)))", "memset(&s->secret, 0, sizeof (*(&s->secret)))", "memset(&s->timeout, 0, sizeof (*(&s->timeout)))", "memset(&s->uri_prefix, 0, sizeof (*(&s->uri_prefix)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_context->data, 0, sizeof (*(&srv->config_context->data)))", "memset(&srv->config_context->is_weakref, 0, sizeof (*(&srv->config_context->is_weakref)))", "memset(&srv->config_context->next_power_of_2, 0, sizeof (*(&srv->config_context->next_power_of_2)))", "memset(&srv->config_context->size, 0, sizeof (*(&srv->config_context->size)))", "memset(&srv->config_context->sorted, 0, sizeof (*(&srv->config_context->sorted)))", "memset(&srv->config_context->unique_ndx, 0, sizeof (*(&srv->config_context->unique_ndx)))", "memset(&srv->config_context->used, 0, sizeof (*(&srv->config_context->used)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(dc->childs, 0, sizeof (*(dc->childs)))", "memset(dc->comp_key, 0, sizeof (*(dc->comp_key)))", "memset(dc->copy, 0, sizeof (*(dc->copy)))", "memset(dc->free, 0, sizeof (*(dc->free)))", "memset(dc->insert_dup, 0, sizeof (*(dc->insert_dup)))", "memset(dc->key, 0, sizeof (*(dc->key)))", "memset(dc->next, 0, sizeof (*(dc->next)))", "memset(dc->op, 0, sizeof (*(dc->op)))", "memset(dc->parent, 0, sizeof (*(dc->parent)))", "memset(dc->prev, 0, sizeof (*(dc->prev)))", "memset(dc->print, 0, sizeof (*(dc->print)))", "memset(dc->regex, 0, sizeof (*(dc->regex)))", "memset(dc->regex_study, 0, sizeof (*(dc->regex_study)))", "memset(dc->reset, 0, sizeof (*(dc->reset)))", "memset(dc->string, 0, sizeof (*(dc->string)))", "memset(dc->value, 0, sizeof (*(dc->value)))", "memset(dc->value->data, 0, sizeof (*(dc->value->data)))", "memset(dc->value->sorted, 0, sizeof (*(dc->value->sorted)))", "memset(du->copy, 0, sizeof (*(du->copy)))", "memset(du->free, 0, sizeof (*(du->free)))", "memset(du->insert_dup, 0, sizeof (*(du->insert_dup)))", "memset(du->key, 0, sizeof (*(du->key)))", "memset(du->print, 0, sizeof (*(du->print)))", "memset(du->reset, 0, sizeof (*(du->reset)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(s, 0, sizeof (*(s)))", "memset(s->doc_root, 0, sizeof (*(s->doc_root)))", "memset(s->secret, 0, sizeof (*(s->secret)))", "memset(s->uri_prefix, 0, sizeof (*(s->uri_prefix)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_context->data, 0, sizeof (*(srv->config_context->data)))", "memset(srv->config_context->sorted, 0, sizeof (*(srv->config_context->sorted)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "buffer_free((p)->md5)", "buffer_free((s)->doc_root)", "buffer_free((s)->secret)", "buffer_free((s)->uri_prefix)", "free((p))", "free((p)->config_storage)", "free((s))", "p->conf.doc_root = (s)->doc_root", "p->conf.secret = (s)->secret", "p->conf.timeout = (0)", "p->conf.timeout = (1)", "p->conf.timeout = (s)->timeout", "p->conf.uri_prefix = (s)->uri_prefix", "s = (p)->config_storage[i]", "s = (s)", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "p->conf.doc_root = s->doc_root", "p->conf.secret = s->secret", "p->conf.timeout = s->timeout", "p->conf.uri_prefix = s->uri_prefix", "s = p->config_storage[i]", "if (__is_neg(\"\", \"L184\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(j), sizeof (j), &(dc), sizeof (dc), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    break;\n", "if (__is_neg(\"\", \"L184\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(j), sizeof (j), &(dc), sizeof (dc), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    return 0;\n", "if (__is_neg(\"\", \"L184\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(j), sizeof (j), &(dc), sizeof (dc), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.47769881031869]
								}, {
									"case":	2,
									"scores":	[-4.47769881031869]
								}, {
									"case":	3,
									"scores":	[-4.47769881031869]
								}, {
									"case":	4,
									"scores":	[-4.47769881031869]
								}, {
									"case":	5,
									"scores":	[-4.47769881031869]
								}, {
									"case":	6,
									"scores":	[-4.47769881031869]
								}, {
									"case":	7,
									"scores":	[-4.47769881031869]
								}, {
									"case":	8,
									"scores":	[-4.47769881031869]
								}, {
									"case":	9,
									"scores":	[-4.47769881031869]
								}, {
									"case":	10,
									"scores":	[-4.47769881031869]
								}, {
									"case":	11,
									"scores":	[-4.47769881031869]
								}, {
									"case":	12,
									"scores":	[-4.47769881031869]
								}, {
									"case":	13,
									"scores":	[-4.47769881031869]
								}, {
									"case":	14,
									"scores":	[-4.47769881031869]
								}, {
									"case":	15,
									"scores":	[-4.47769881031869]
								}, {
									"case":	16,
									"scores":	[-4.47769881031869]
								}, {
									"case":	17,
									"scores":	[-4.47769881031869]
								}, {
									"case":	18,
									"scores":	[-4.47769881031869]
								}, {
									"case":	19,
									"scores":	[-4.47769881031869]
								}, {
									"case":	20,
									"scores":	[-4.47769881031869]
								}, {
									"case":	21,
									"scores":	[-4.47769881031869]
								}, {
									"case":	22,
									"scores":	[-4.47769881031869]
								}, {
									"case":	23,
									"scores":	[-4.47769881031869]
								}, {
									"case":	24,
									"scores":	[-4.47769881031869]
								}, {
									"case":	25,
									"scores":	[-4.47769881031869]
								}, {
									"case":	26,
									"scores":	[-4.47769881031869]
								}, {
									"case":	27,
									"scores":	[-4.47769881031869]
								}, {
									"case":	28,
									"scores":	[-4.47769881031869]
								}, {
									"case":	29,
									"scores":	[-4.47769881031869]
								}, {
									"case":	30,
									"scores":	[-4.47769881031869]
								}, {
									"case":	31,
									"scores":	[-4.47769881031869]
								}, {
									"case":	32,
									"scores":	[-4.47769881031869]
								}, {
									"case":	33,
									"scores":	[-4.47769881031869]
								}, {
									"case":	34,
									"scores":	[-4.47769881031869]
								}, {
									"case":	35,
									"scores":	[-4.47769881031869]
								}, {
									"case":	36,
									"scores":	[-4.47769881031869]
								}, {
									"case":	37,
									"scores":	[-4.47769881031869]
								}, {
									"case":	38,
									"scores":	[-4.47769881031869]
								}, {
									"case":	39,
									"scores":	[-4.47769881031869]
								}, {
									"case":	40,
									"scores":	[-4.47769881031869]
								}, {
									"case":	41,
									"scores":	[-4.47769881031869]
								}, {
									"case":	42,
									"scores":	[-4.47769881031869]
								}, {
									"case":	43,
									"scores":	[-4.47769881031869]
								}, {
									"case":	44,
									"scores":	[-4.47769881031869]
								}, {
									"case":	45,
									"scores":	[-4.47769881031869]
								}, {
									"case":	46,
									"scores":	[-4.47769881031869]
								}, {
									"case":	47,
									"scores":	[-4.47769881031869]
								}, {
									"case":	48,
									"scores":	[-4.47769881031869]
								}, {
									"case":	49,
									"scores":	[-4.47769881031869]
								}, {
									"case":	50,
									"scores":	[-4.47769881031869]
								}, {
									"case":	51,
									"scores":	[-4.47769881031869]
								}, {
									"case":	52,
									"scores":	[-4.47769881031869]
								}, {
									"case":	53,
									"scores":	[-4.47769881031869]
								}, {
									"case":	54,
									"scores":	[-4.47769881031869]
								}, {
									"case":	55,
									"scores":	[-4.47769881031869]
								}, {
									"case":	56,
									"scores":	[-4.47769881031869]
								}, {
									"case":	57,
									"scores":	[-4.47769881031869]
								}, {
									"case":	58,
									"scores":	[-4.47769881031869]
								}, {
									"case":	59,
									"scores":	[-4.47769881031869]
								}, {
									"case":	60,
									"scores":	[-4.47769881031869]
								}, {
									"case":	61,
									"scores":	[-4.47769881031869]
								}, {
									"case":	62,
									"scores":	[-4.47769881031869]
								}, {
									"case":	63,
									"scores":	[-4.47769881031869]
								}, {
									"case":	64,
									"scores":	[-4.47769881031869]
								}, {
									"case":	65,
									"scores":	[-4.47769881031869]
								}, {
									"case":	66,
									"scores":	[-4.47769881031869]
								}, {
									"case":	67,
									"scores":	[-4.47769881031869]
								}, {
									"case":	68,
									"scores":	[-4.47769881031869]
								}, {
									"case":	69,
									"scores":	[-4.47769881031869]
								}, {
									"case":	70,
									"scores":	[-4.47769881031869]
								}, {
									"case":	71,
									"scores":	[-4.47769881031869]
								}, {
									"case":	72,
									"scores":	[-4.47769881031869]
								}, {
									"case":	73,
									"scores":	[-4.47769881031869]
								}, {
									"case":	74,
									"scores":	[-4.47769881031869]
								}, {
									"case":	75,
									"scores":	[-4.47769881031869]
								}, {
									"case":	76,
									"scores":	[-4.47769881031869]
								}, {
									"case":	77,
									"scores":	[-4.47769881031869]
								}, {
									"case":	78,
									"scores":	[-4.47769881031869]
								}, {
									"case":	79,
									"scores":	[-4.47769881031869]
								}, {
									"case":	80,
									"scores":	[-4.47769881031869]
								}, {
									"case":	81,
									"scores":	[-4.47769881031869]
								}, {
									"case":	82,
									"scores":	[-4.47769881031869]
								}, {
									"case":	83,
									"scores":	[-4.47769881031869]
								}, {
									"case":	84,
									"scores":	[-4.47769881031869]
								}, {
									"case":	85,
									"scores":	[-4.47769881031869]
								}, {
									"case":	86,
									"scores":	[-4.47769881031869]
								}, {
									"case":	87,
									"scores":	[-4.47769881031869]
								}, {
									"case":	88,
									"scores":	[-4.47769881031869]
								}, {
									"case":	89,
									"scores":	[-4.47769881031869]
								}, {
									"case":	90,
									"scores":	[-4.47769881031869]
								}, {
									"case":	91,
									"scores":	[-4.47769881031869]
								}, {
									"case":	92,
									"scores":	[-4.47769881031869]
								}, {
									"case":	93,
									"scores":	[-4.47769881031869]
								}, {
									"case":	94,
									"scores":	[-4.47769881031869]
								}, {
									"case":	95,
									"scores":	[-4.47769881031869]
								}, {
									"case":	96,
									"scores":	[-4.47769881031869]
								}, {
									"case":	97,
									"scores":	[-4.47769881031869]
								}, {
									"case":	98,
									"scores":	[-4.47769881031869]
								}, {
									"case":	99,
									"scores":	[-4.47769881031869]
								}, {
									"case":	100,
									"scores":	[-4.47769881031869]
								}, {
									"case":	101,
									"scores":	[-4.47769881031869]
								}, {
									"case":	102,
									"scores":	[-4.47769881031869]
								}, {
									"case":	103,
									"scores":	[-4.47769881031869]
								}, {
									"case":	104,
									"scores":	[-4.47769881031869]
								}, {
									"case":	105,
									"scores":	[-4.47769881031869]
								}, {
									"case":	106,
									"scores":	[-4.47769881031869]
								}, {
									"case":	107,
									"scores":	[-4.47769881031869]
								}, {
									"case":	108,
									"scores":	[-4.47769881031869]
								}, {
									"case":	109,
									"scores":	[-4.47769881031869]
								}, {
									"case":	110,
									"scores":	[-4.47769881031869]
								}, {
									"case":	111,
									"scores":	[-4.47769881031869]
								}, {
									"case":	112,
									"scores":	[-4.47769881031869]
								}, {
									"case":	113,
									"scores":	[-4.47769881031869]
								}, {
									"case":	114,
									"scores":	[-4.47769881031869]
								}, {
									"case":	115,
									"scores":	[-4.47769881031869]
								}, {
									"case":	116,
									"scores":	[-4.47769881031869]
								}, {
									"case":	117,
									"scores":	[-4.47769881031869]
								}, {
									"case":	118,
									"scores":	[-4.47769881031869]
								}, {
									"case":	119,
									"scores":	[-4.47769881031869]
								}, {
									"case":	120,
									"scores":	[-4.47769881031869]
								}, {
									"case":	121,
									"scores":	[-4.47769881031869]
								}, {
									"case":	122,
									"scores":	[-4.47769881031869]
								}, {
									"case":	123,
									"scores":	[-4.47769881031869]
								}, {
									"case":	124,
									"scores":	[-4.47769881031869]
								}, {
									"case":	125,
									"scores":	[-4.47769881031869]
								}, {
									"case":	126,
									"scores":	[-4.47769881031869]
								}, {
									"case":	127,
									"scores":	[-4.47769881031869]
								}, {
									"case":	128,
									"scores":	[-4.47769881031869]
								}, {
									"case":	129,
									"scores":	[-4.47769881031869]
								}, {
									"case":	130,
									"scores":	[-4.47769881031869]
								}, {
									"case":	131,
									"scores":	[-4.47769881031869]
								}, {
									"case":	132,
									"scores":	[-4.47769881031869]
								}, {
									"case":	133,
									"scores":	[-4.47769881031869]
								}, {
									"case":	134,
									"scores":	[-4.47769881031869]
								}, {
									"case":	135,
									"scores":	[-4.47769881031869]
								}, {
									"case":	136,
									"scores":	[-4.47769881031869]
								}, {
									"case":	137,
									"scores":	[-4.47769881031869]
								}, {
									"case":	138,
									"scores":	[-4.47769881031869]
								}, {
									"case":	139,
									"scores":	[-4.47769881031869]
								}, {
									"case":	140,
									"scores":	[-4.47769881031869]
								}, {
									"case":	141,
									"scores":	[-4.47769881031869]
								}, {
									"case":	142,
									"scores":	[-4.47769881031869]
								}, {
									"case":	143,
									"scores":	[-4.47769881031869]
								}, {
									"case":	144,
									"scores":	[-4.47769881031869]
								}, {
									"case":	145,
									"scores":	[-4.47769881031869]
								}, {
									"case":	146,
									"scores":	[-4.47769881031869]
								}, {
									"case":	147,
									"scores":	[-4.47769881031869]
								}, {
									"case":	148,
									"scores":	[-4.47769881031869]
								}, {
									"case":	149,
									"scores":	[-4.47769881031869]
								}, {
									"case":	150,
									"scores":	[-4.47769881031869]
								}, {
									"case":	151,
									"scores":	[-4.47769881031869]
								}, {
									"case":	152,
									"scores":	[-4.47769881031869]
								}, {
									"case":	153,
									"scores":	[-4.47769881031869]
								}, {
									"case":	154,
									"scores":	[-4.47769881031869]
								}, {
									"case":	155,
									"scores":	[-4.47769881031869]
								}, {
									"case":	156,
									"scores":	[-4.47769881031869]
								}, {
									"case":	157,
									"scores":	[-4.47769881031869]
								}, {
									"case":	158,
									"scores":	[-4.47769881031869]
								}, {
									"case":	159,
									"scores":	[-4.47769881031869]
								}, {
									"case":	160,
									"scores":	[-4.47769881031869]
								}, {
									"case":	161,
									"scores":	[-4.47769881031869]
								}, {
									"case":	162,
									"scores":	[-4.47769881031869]
								}, {
									"case":	163,
									"scores":	[-4.47769881031869]
								}, {
									"case":	164,
									"scores":	[-4.47769881031869]
								}, {
									"case":	165,
									"scores":	[-4.47769881031869]
								}, {
									"case":	166,
									"scores":	[-4.47769881031869]
								}, {
									"case":	167,
									"scores":	[-4.47769881031869]
								}, {
									"case":	168,
									"scores":	[-4.47769881031869]
								}, {
									"case":	169,
									"scores":	[-4.47769881031869]
								}, {
									"case":	170,
									"scores":	[-4.47769881031869]
								}, {
									"case":	171,
									"scores":	[-4.47769881031869]
								}, {
									"case":	172,
									"scores":	[-4.47769881031869]
								}, {
									"case":	173,
									"scores":	[-4.47769881031869]
								}, {
									"case":	174,
									"scores":	[-4.47769881031869]
								}, {
									"case":	175,
									"scores":	[-4.47769881031869]
								}, {
									"case":	176,
									"scores":	[-4.47769881031869]
								}, {
									"case":	177,
									"scores":	[-4.47769881031869]
								}, {
									"case":	178,
									"scores":	[-4.47769881031869]
								}, {
									"case":	179,
									"scores":	[-4.47769881031869]
								}, {
									"case":	180,
									"scores":	[-4.47769881031869]
								}, {
									"case":	181,
									"scores":	[-4.47769881031869]
								}, {
									"case":	182,
									"scores":	[-4.47769881031869]
								}, {
									"case":	183,
									"scores":	[-4.47769881031869]
								}, {
									"case":	184,
									"scores":	[-4.47769881031869]
								}, {
									"case":	185,
									"scores":	[-4.47769881031869]
								}, {
									"case":	186,
									"scores":	[-4.47769881031869]
								}, {
									"case":	187,
									"scores":	[-4.47769881031869]
								}, {
									"case":	188,
									"scores":	[-4.47769881031869]
								}, {
									"case":	189,
									"scores":	[-4.47769881031869]
								}, {
									"case":	190,
									"scores":	[-4.47769881031869]
								}, {
									"case":	191,
									"scores":	[-4.47769881031869]
								}, {
									"case":	192,
									"scores":	[-4.47769881031869]
								}, {
									"case":	193,
									"scores":	[-4.47769881031869]
								}, {
									"case":	194,
									"scores":	[-4.47769881031869]
								}, {
									"case":	195,
									"scores":	[-4.47769881031869]
								}, {
									"case":	196,
									"scores":	[-4.35283793431869, -4.17557509431869, -5.92513402751869, -5.33807471031869, -5.43002170031869, -6.20340530031869, -6.20340530031869, -6.20340530031869, -5.23938970031869, -5.43002170031869, -6.20340530031869, -6.20340530031869, -6.01277330031869, -6.01277330031869, -5.60728454031869, -5.60728454031869, -5.73127370031869, -6.10219600031869, -6.01277330031869, -6.20340530031869, -6.01277330031869, -6.01277330031869, -6.01277330031869, -6.01277330031869, -6.01277330031869, -6.01277330031869, -6.01277330031869]
								}, {
									"case":	197,
									"scores":	[-4.45274613431869, -4.27548329431869, -6.02504222751869, -5.43798291031869, -5.52992990031869, -6.30331350031869, -6.30331350031869, -6.30331350031869, -5.33929790031869, -5.52992990031869, -6.30331350031869, -6.30331350031869, -6.11268150031869, -6.11268150031869, -5.70719274031869, -5.70719274031869, -5.83118190031869, -6.20210420031869, -6.11268150031869, -6.30331350031869, -6.11268150031869, -6.11268150031869, -6.11268150031869, -6.11268150031869, -6.11268150031869, -6.11268150031869, -6.11268150031869]
								}, {
									"case":	198,
									"scores":	[-6.7155279343186915, -6.53826509431869, -8.28782402751869, -7.70076471031869, -7.79271170031869, -8.56609530031869, -8.56609530031869, -8.56609530031869, -7.60207970031869, -7.79271170031869, -8.56609530031869, -8.56609530031869, -8.37546330031869, -8.37546330031869, -7.96997454031869, -7.96997454031869, -8.09396370031869, -8.46488600031869, -8.37546330031869, -8.56609530031869, -8.37546330031869, -8.37546330031869, -8.37546330031869, -8.37546330031869, -8.37546330031869, -8.37546330031869, -8.37546330031869]
								}]
						}, {
							"switch":	14,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	184,
							"begin_column":	5,
							"end_line":	184,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L184\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(j), sizeof (j), &(dc), sizeof (dc), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    p->conf.secret = s->secret;\n", "{\n}\n", "p->conf.secret = (&con)->secret", "p->conf.secret = (&dc)->secret", "p->conf.secret = (&du)->secret", "p->conf.secret = (&i)->secret", "p->conf.secret = (&j)->secret", "p->conf.secret = (&p)->secret", "p->conf.secret = (&s)->secret", "p->conf.secret = (&srv)->secret", "p->conf.secret = (s)->secret"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.44309507331869, -5.17831357331869, -6.44213597331869, -5.91810527331869, -5.60040960031869, -6.37124330031869, -6.37124330031869, -6.37124330031869, -4.75650460031869, -5.60040960031869, -6.37124330031869, -6.37124330031869, -5.52733830031869, -5.52733830031869, -5.86519110031869, -5.86519110031869, -5.29779760031869, -5.96430330031869, -5.52733830031869, -6.37124330031869, -5.52733830031869, -5.52733830031869, -5.52733830031869, -5.52733830031869, -5.52733830031869, -5.52733830031869, -5.52733830031869]
								}, {
									"case":	2,
									"scores":	[-4.47769881031869]
								}, {
									"case":	3,
									"scores":	[-4.47769881031869]
								}, {
									"case":	4,
									"scores":	[-4.47769881031869]
								}, {
									"case":	5,
									"scores":	[-4.47769881031869]
								}, {
									"case":	6,
									"scores":	[-4.47769881031869]
								}, {
									"case":	7,
									"scores":	[-4.47769881031869]
								}, {
									"case":	8,
									"scores":	[-4.47769881031869]
								}, {
									"case":	9,
									"scores":	[-4.47769881031869]
								}, {
									"case":	10,
									"scores":	[-4.47769881031869]
								}, {
									"case":	11,
									"scores":	[-4.47769881031869]
								}]
						}]
				}, {
					"line":	185,
					"switches":	[{
							"switch":	17,
							"types":	[[], [], [], [], [196, 197, 198], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], [], [], [], [189, 190, 191, 192, 193, 194, 195], [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], [], [], [], [], [], []],
							"begin_line":	186,
							"begin_column":	3,
							"end_line":	186,
							"end_column":	3,
							"patch_codes":	["memset(&dc->childs, 0, sizeof (*(&dc->childs)))", "memset(&dc->comp, 0, sizeof (*(&dc->comp)))", "memset(&dc->comp_key, 0, sizeof (*(&dc->comp_key)))", "memset(&dc->cond, 0, sizeof (*(&dc->cond)))", "memset(&dc->context_ndx, 0, sizeof (*(&dc->context_ndx)))", "memset(&dc->copy, 0, sizeof (*(&dc->copy)))", "memset(&dc->free, 0, sizeof (*(&dc->free)))", "memset(&dc->insert_dup, 0, sizeof (*(&dc->insert_dup)))", "memset(&dc->is_index_key, 0, sizeof (*(&dc->is_index_key)))", "memset(&dc->key, 0, sizeof (*(&dc->key)))", "memset(&dc->next, 0, sizeof (*(&dc->next)))", "memset(&dc->op, 0, sizeof (*(&dc->op)))", "memset(&dc->parent, 0, sizeof (*(&dc->parent)))", "memset(&dc->prev, 0, sizeof (*(&dc->prev)))", "memset(&dc->print, 0, sizeof (*(&dc->print)))", "memset(&dc->regex, 0, sizeof (*(&dc->regex)))", "memset(&dc->regex_study, 0, sizeof (*(&dc->regex_study)))", "memset(&dc->reset, 0, sizeof (*(&dc->reset)))", "memset(&dc->string, 0, sizeof (*(&dc->string)))", "memset(&dc->type, 0, sizeof (*(&dc->type)))", "memset(&dc->value, 0, sizeof (*(&dc->value)))", "memset(&dc->value->data, 0, sizeof (*(&dc->value->data)))", "memset(&dc->value->is_weakref, 0, sizeof (*(&dc->value->is_weakref)))", "memset(&dc->value->next_power_of_2, 0, sizeof (*(&dc->value->next_power_of_2)))", "memset(&dc->value->size, 0, sizeof (*(&dc->value->size)))", "memset(&dc->value->sorted, 0, sizeof (*(&dc->value->sorted)))", "memset(&dc->value->unique_ndx, 0, sizeof (*(&dc->value->unique_ndx)))", "memset(&dc->value->used, 0, sizeof (*(&dc->value->used)))", "memset(&du->copy, 0, sizeof (*(&du->copy)))", "memset(&du->free, 0, sizeof (*(&du->free)))", "memset(&du->insert_dup, 0, sizeof (*(&du->insert_dup)))", "memset(&du->is_index_key, 0, sizeof (*(&du->is_index_key)))", "memset(&du->key, 0, sizeof (*(&du->key)))", "memset(&du->print, 0, sizeof (*(&du->print)))", "memset(&du->reset, 0, sizeof (*(&du->reset)))", "memset(&du->type, 0, sizeof (*(&du->type)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&s->doc_root, 0, sizeof (*(&s->doc_root)))", "memset(&s->secret, 0, sizeof (*(&s->secret)))", "memset(&s->timeout, 0, sizeof (*(&s->timeout)))", "memset(&s->uri_prefix, 0, sizeof (*(&s->uri_prefix)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_context->data, 0, sizeof (*(&srv->config_context->data)))", "memset(&srv->config_context->is_weakref, 0, sizeof (*(&srv->config_context->is_weakref)))", "memset(&srv->config_context->next_power_of_2, 0, sizeof (*(&srv->config_context->next_power_of_2)))", "memset(&srv->config_context->size, 0, sizeof (*(&srv->config_context->size)))", "memset(&srv->config_context->sorted, 0, sizeof (*(&srv->config_context->sorted)))", "memset(&srv->config_context->unique_ndx, 0, sizeof (*(&srv->config_context->unique_ndx)))", "memset(&srv->config_context->used, 0, sizeof (*(&srv->config_context->used)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(dc->childs, 0, sizeof (*(dc->childs)))", "memset(dc->comp_key, 0, sizeof (*(dc->comp_key)))", "memset(dc->copy, 0, sizeof (*(dc->copy)))", "memset(dc->free, 0, sizeof (*(dc->free)))", "memset(dc->insert_dup, 0, sizeof (*(dc->insert_dup)))", "memset(dc->key, 0, sizeof (*(dc->key)))", "memset(dc->next, 0, sizeof (*(dc->next)))", "memset(dc->op, 0, sizeof (*(dc->op)))", "memset(dc->parent, 0, sizeof (*(dc->parent)))", "memset(dc->prev, 0, sizeof (*(dc->prev)))", "memset(dc->print, 0, sizeof (*(dc->print)))", "memset(dc->regex, 0, sizeof (*(dc->regex)))", "memset(dc->regex_study, 0, sizeof (*(dc->regex_study)))", "memset(dc->reset, 0, sizeof (*(dc->reset)))", "memset(dc->string, 0, sizeof (*(dc->string)))", "memset(dc->value, 0, sizeof (*(dc->value)))", "memset(dc->value->data, 0, sizeof (*(dc->value->data)))", "memset(dc->value->sorted, 0, sizeof (*(dc->value->sorted)))", "memset(du->copy, 0, sizeof (*(du->copy)))", "memset(du->free, 0, sizeof (*(du->free)))", "memset(du->insert_dup, 0, sizeof (*(du->insert_dup)))", "memset(du->key, 0, sizeof (*(du->key)))", "memset(du->print, 0, sizeof (*(du->print)))", "memset(du->reset, 0, sizeof (*(du->reset)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(s, 0, sizeof (*(s)))", "memset(s->doc_root, 0, sizeof (*(s->doc_root)))", "memset(s->secret, 0, sizeof (*(s->secret)))", "memset(s->uri_prefix, 0, sizeof (*(s->uri_prefix)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_context->data, 0, sizeof (*(srv->config_context->data)))", "memset(srv->config_context->sorted, 0, sizeof (*(srv->config_context->sorted)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "buffer_free((p)->md5)", "buffer_free((s)->doc_root)", "buffer_free((s)->secret)", "buffer_free((s)->uri_prefix)", "free((p))", "free((p)->config_storage)", "free((s))", "p->conf.doc_root = (s)->doc_root", "p->conf.secret = (s)->secret", "p->conf.timeout = (0)", "p->conf.timeout = (1)", "p->conf.timeout = (s)->timeout", "p->conf.uri_prefix = (s)->uri_prefix", "s = (p)->config_storage[i]", "s = (s)", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "p->conf.doc_root = s->doc_root", "p->conf.secret = s->secret", "p->conf.timeout = s->timeout", "p->conf.uri_prefix = s->uri_prefix", "s = p->config_storage[i]", "if (__is_neg(\"\", \"L186\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->secret), sizeof (s->secret), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    break;\n", "if (__is_neg(\"\", \"L186\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->secret), sizeof (s->secret), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    return 0;\n", "if (__is_neg(\"\", \"L186\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->secret), sizeof (s->secret), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.45749610300117]
								}, {
									"case":	2,
									"scores":	[-4.45749610300117]
								}, {
									"case":	3,
									"scores":	[-4.45749610300117]
								}, {
									"case":	4,
									"scores":	[-4.45749610300117]
								}, {
									"case":	5,
									"scores":	[-4.45749610300117]
								}, {
									"case":	6,
									"scores":	[-4.45749610300117]
								}, {
									"case":	7,
									"scores":	[-4.45749610300117]
								}, {
									"case":	8,
									"scores":	[-4.45749610300117]
								}, {
									"case":	9,
									"scores":	[-4.45749610300117]
								}, {
									"case":	10,
									"scores":	[-4.45749610300117]
								}, {
									"case":	11,
									"scores":	[-4.45749610300117]
								}, {
									"case":	12,
									"scores":	[-4.45749610300117]
								}, {
									"case":	13,
									"scores":	[-4.45749610300117]
								}, {
									"case":	14,
									"scores":	[-4.45749610300117]
								}, {
									"case":	15,
									"scores":	[-4.45749610300117]
								}, {
									"case":	16,
									"scores":	[-4.45749610300117]
								}, {
									"case":	17,
									"scores":	[-4.45749610300117]
								}, {
									"case":	18,
									"scores":	[-4.45749610300117]
								}, {
									"case":	19,
									"scores":	[-4.45749610300117]
								}, {
									"case":	20,
									"scores":	[-4.45749610300117]
								}, {
									"case":	21,
									"scores":	[-4.45749610300117]
								}, {
									"case":	22,
									"scores":	[-4.45749610300117]
								}, {
									"case":	23,
									"scores":	[-4.45749610300117]
								}, {
									"case":	24,
									"scores":	[-4.45749610300117]
								}, {
									"case":	25,
									"scores":	[-4.45749610300117]
								}, {
									"case":	26,
									"scores":	[-4.45749610300117]
								}, {
									"case":	27,
									"scores":	[-4.45749610300117]
								}, {
									"case":	28,
									"scores":	[-4.45749610300117]
								}, {
									"case":	29,
									"scores":	[-4.45749610300117]
								}, {
									"case":	30,
									"scores":	[-4.45749610300117]
								}, {
									"case":	31,
									"scores":	[-4.45749610300117]
								}, {
									"case":	32,
									"scores":	[-4.45749610300117]
								}, {
									"case":	33,
									"scores":	[-4.45749610300117]
								}, {
									"case":	34,
									"scores":	[-4.45749610300117]
								}, {
									"case":	35,
									"scores":	[-4.45749610300117]
								}, {
									"case":	36,
									"scores":	[-4.45749610300117]
								}, {
									"case":	37,
									"scores":	[-4.45749610300117]
								}, {
									"case":	38,
									"scores":	[-4.45749610300117]
								}, {
									"case":	39,
									"scores":	[-4.45749610300117]
								}, {
									"case":	40,
									"scores":	[-4.45749610300117]
								}, {
									"case":	41,
									"scores":	[-4.45749610300117]
								}, {
									"case":	42,
									"scores":	[-4.45749610300117]
								}, {
									"case":	43,
									"scores":	[-4.45749610300117]
								}, {
									"case":	44,
									"scores":	[-4.45749610300117]
								}, {
									"case":	45,
									"scores":	[-4.45749610300117]
								}, {
									"case":	46,
									"scores":	[-4.45749610300117]
								}, {
									"case":	47,
									"scores":	[-4.45749610300117]
								}, {
									"case":	48,
									"scores":	[-4.45749610300117]
								}, {
									"case":	49,
									"scores":	[-4.45749610300117]
								}, {
									"case":	50,
									"scores":	[-4.45749610300117]
								}, {
									"case":	51,
									"scores":	[-4.45749610300117]
								}, {
									"case":	52,
									"scores":	[-4.45749610300117]
								}, {
									"case":	53,
									"scores":	[-4.45749610300117]
								}, {
									"case":	54,
									"scores":	[-4.45749610300117]
								}, {
									"case":	55,
									"scores":	[-4.45749610300117]
								}, {
									"case":	56,
									"scores":	[-4.45749610300117]
								}, {
									"case":	57,
									"scores":	[-4.45749610300117]
								}, {
									"case":	58,
									"scores":	[-4.45749610300117]
								}, {
									"case":	59,
									"scores":	[-4.45749610300117]
								}, {
									"case":	60,
									"scores":	[-4.45749610300117]
								}, {
									"case":	61,
									"scores":	[-4.45749610300117]
								}, {
									"case":	62,
									"scores":	[-4.45749610300117]
								}, {
									"case":	63,
									"scores":	[-4.45749610300117]
								}, {
									"case":	64,
									"scores":	[-4.45749610300117]
								}, {
									"case":	65,
									"scores":	[-4.45749610300117]
								}, {
									"case":	66,
									"scores":	[-4.45749610300117]
								}, {
									"case":	67,
									"scores":	[-4.45749610300117]
								}, {
									"case":	68,
									"scores":	[-4.45749610300117]
								}, {
									"case":	69,
									"scores":	[-4.45749610300117]
								}, {
									"case":	70,
									"scores":	[-4.45749610300117]
								}, {
									"case":	71,
									"scores":	[-4.45749610300117]
								}, {
									"case":	72,
									"scores":	[-4.45749610300117]
								}, {
									"case":	73,
									"scores":	[-4.45749610300117]
								}, {
									"case":	74,
									"scores":	[-4.45749610300117]
								}, {
									"case":	75,
									"scores":	[-4.45749610300117]
								}, {
									"case":	76,
									"scores":	[-4.45749610300117]
								}, {
									"case":	77,
									"scores":	[-4.45749610300117]
								}, {
									"case":	78,
									"scores":	[-4.45749610300117]
								}, {
									"case":	79,
									"scores":	[-4.45749610300117]
								}, {
									"case":	80,
									"scores":	[-4.45749610300117]
								}, {
									"case":	81,
									"scores":	[-4.45749610300117]
								}, {
									"case":	82,
									"scores":	[-4.45749610300117]
								}, {
									"case":	83,
									"scores":	[-4.45749610300117]
								}, {
									"case":	84,
									"scores":	[-4.45749610300117]
								}, {
									"case":	85,
									"scores":	[-4.45749610300117]
								}, {
									"case":	86,
									"scores":	[-4.45749610300117]
								}, {
									"case":	87,
									"scores":	[-4.45749610300117]
								}, {
									"case":	88,
									"scores":	[-4.45749610300117]
								}, {
									"case":	89,
									"scores":	[-4.45749610300117]
								}, {
									"case":	90,
									"scores":	[-4.45749610300117]
								}, {
									"case":	91,
									"scores":	[-4.45749610300117]
								}, {
									"case":	92,
									"scores":	[-4.45749610300117]
								}, {
									"case":	93,
									"scores":	[-4.45749610300117]
								}, {
									"case":	94,
									"scores":	[-4.45749610300117]
								}, {
									"case":	95,
									"scores":	[-4.45749610300117]
								}, {
									"case":	96,
									"scores":	[-4.45749610300117]
								}, {
									"case":	97,
									"scores":	[-4.45749610300117]
								}, {
									"case":	98,
									"scores":	[-4.45749610300117]
								}, {
									"case":	99,
									"scores":	[-4.45749610300117]
								}, {
									"case":	100,
									"scores":	[-4.45749610300117]
								}, {
									"case":	101,
									"scores":	[-4.45749610300117]
								}, {
									"case":	102,
									"scores":	[-4.45749610300117]
								}, {
									"case":	103,
									"scores":	[-4.45749610300117]
								}, {
									"case":	104,
									"scores":	[-4.45749610300117]
								}, {
									"case":	105,
									"scores":	[-4.45749610300117]
								}, {
									"case":	106,
									"scores":	[-4.45749610300117]
								}, {
									"case":	107,
									"scores":	[-4.45749610300117]
								}, {
									"case":	108,
									"scores":	[-4.45749610300117]
								}, {
									"case":	109,
									"scores":	[-4.45749610300117]
								}, {
									"case":	110,
									"scores":	[-4.45749610300117]
								}, {
									"case":	111,
									"scores":	[-4.45749610300117]
								}, {
									"case":	112,
									"scores":	[-4.45749610300117]
								}, {
									"case":	113,
									"scores":	[-4.45749610300117]
								}, {
									"case":	114,
									"scores":	[-4.45749610300117]
								}, {
									"case":	115,
									"scores":	[-4.45749610300117]
								}, {
									"case":	116,
									"scores":	[-4.45749610300117]
								}, {
									"case":	117,
									"scores":	[-4.45749610300117]
								}, {
									"case":	118,
									"scores":	[-4.45749610300117]
								}, {
									"case":	119,
									"scores":	[-4.45749610300117]
								}, {
									"case":	120,
									"scores":	[-4.45749610300117]
								}, {
									"case":	121,
									"scores":	[-4.45749610300117]
								}, {
									"case":	122,
									"scores":	[-4.45749610300117]
								}, {
									"case":	123,
									"scores":	[-4.45749610300117]
								}, {
									"case":	124,
									"scores":	[-4.45749610300117]
								}, {
									"case":	125,
									"scores":	[-4.45749610300117]
								}, {
									"case":	126,
									"scores":	[-4.45749610300117]
								}, {
									"case":	127,
									"scores":	[-4.45749610300117]
								}, {
									"case":	128,
									"scores":	[-4.45749610300117]
								}, {
									"case":	129,
									"scores":	[-4.45749610300117]
								}, {
									"case":	130,
									"scores":	[-4.45749610300117]
								}, {
									"case":	131,
									"scores":	[-4.45749610300117]
								}, {
									"case":	132,
									"scores":	[-4.45749610300117]
								}, {
									"case":	133,
									"scores":	[-4.45749610300117]
								}, {
									"case":	134,
									"scores":	[-4.45749610300117]
								}, {
									"case":	135,
									"scores":	[-4.45749610300117]
								}, {
									"case":	136,
									"scores":	[-4.45749610300117]
								}, {
									"case":	137,
									"scores":	[-4.45749610300117]
								}, {
									"case":	138,
									"scores":	[-4.45749610300117]
								}, {
									"case":	139,
									"scores":	[-4.45749610300117]
								}, {
									"case":	140,
									"scores":	[-4.45749610300117]
								}, {
									"case":	141,
									"scores":	[-4.45749610300117]
								}, {
									"case":	142,
									"scores":	[-4.45749610300117]
								}, {
									"case":	143,
									"scores":	[-4.45749610300117]
								}, {
									"case":	144,
									"scores":	[-4.45749610300117]
								}, {
									"case":	145,
									"scores":	[-4.45749610300117]
								}, {
									"case":	146,
									"scores":	[-4.45749610300117]
								}, {
									"case":	147,
									"scores":	[-4.45749610300117]
								}, {
									"case":	148,
									"scores":	[-4.45749610300117]
								}, {
									"case":	149,
									"scores":	[-4.45749610300117]
								}, {
									"case":	150,
									"scores":	[-4.45749610300117]
								}, {
									"case":	151,
									"scores":	[-4.45749610300117]
								}, {
									"case":	152,
									"scores":	[-4.45749610300117]
								}, {
									"case":	153,
									"scores":	[-4.45749610300117]
								}, {
									"case":	154,
									"scores":	[-4.45749610300117]
								}, {
									"case":	155,
									"scores":	[-4.45749610300117]
								}, {
									"case":	156,
									"scores":	[-4.45749610300117]
								}, {
									"case":	157,
									"scores":	[-4.45749610300117]
								}, {
									"case":	158,
									"scores":	[-4.45749610300117]
								}, {
									"case":	159,
									"scores":	[-4.45749610300117]
								}, {
									"case":	160,
									"scores":	[-4.45749610300117]
								}, {
									"case":	161,
									"scores":	[-4.45749610300117]
								}, {
									"case":	162,
									"scores":	[-4.45749610300117]
								}, {
									"case":	163,
									"scores":	[-4.45749610300117]
								}, {
									"case":	164,
									"scores":	[-4.45749610300117]
								}, {
									"case":	165,
									"scores":	[-4.45749610300117]
								}, {
									"case":	166,
									"scores":	[-4.45749610300117]
								}, {
									"case":	167,
									"scores":	[-4.45749610300117]
								}, {
									"case":	168,
									"scores":	[-4.45749610300117]
								}, {
									"case":	169,
									"scores":	[-4.45749610300117]
								}, {
									"case":	170,
									"scores":	[-4.45749610300117]
								}, {
									"case":	171,
									"scores":	[-4.45749610300117]
								}, {
									"case":	172,
									"scores":	[-4.45749610300117]
								}, {
									"case":	173,
									"scores":	[-4.45749610300117]
								}, {
									"case":	174,
									"scores":	[-4.45749610300117]
								}, {
									"case":	175,
									"scores":	[-4.45749610300117]
								}, {
									"case":	176,
									"scores":	[-4.45749610300117]
								}, {
									"case":	177,
									"scores":	[-4.45749610300117]
								}, {
									"case":	178,
									"scores":	[-4.45749610300117]
								}, {
									"case":	179,
									"scores":	[-4.45749610300117]
								}, {
									"case":	180,
									"scores":	[-4.45749610300117]
								}, {
									"case":	181,
									"scores":	[-4.45749610300117]
								}, {
									"case":	182,
									"scores":	[-4.45749610300117]
								}, {
									"case":	183,
									"scores":	[-4.45749610300117]
								}, {
									"case":	184,
									"scores":	[-4.45749610300117]
								}, {
									"case":	185,
									"scores":	[-4.45749610300117]
								}, {
									"case":	186,
									"scores":	[-4.45749610300117]
								}, {
									"case":	187,
									"scores":	[-4.45749610300117]
								}, {
									"case":	188,
									"scores":	[-4.45749610300117]
								}, {
									"case":	189,
									"scores":	[-4.45749610300117]
								}, {
									"case":	190,
									"scores":	[-4.45749610300117]
								}, {
									"case":	191,
									"scores":	[-4.45749610300117]
								}, {
									"case":	192,
									"scores":	[-4.45749610300117]
								}, {
									"case":	193,
									"scores":	[-4.45749610300117]
								}, {
									"case":	194,
									"scores":	[-4.45749610300117]
								}, {
									"case":	195,
									"scores":	[-4.45749610300117]
								}, {
									"case":	196,
									"scores":	[-4.3326352270011714, -4.1553723870011714, -5.90493132020117, -5.31787200300117, -5.40981899300117, -6.18320259300117, -6.18320259300117, -6.18320259300117, -6.18320259300117, -6.18320259300117, -5.99257059300117, -5.99257059300117, -5.21918699300117, -5.40981899300117, -5.58708183300117, -5.58708183300117, -5.71107099300117, -6.08199329300117, -5.99257059300117, -6.18320259300117, -5.99257059300117, -5.99257059300117, -5.99257059300117, -5.99257059300117, -5.99257059300117, -5.99257059300117, -5.99257059300117]
								}, {
									"case":	197,
									"scores":	[-4.43254342700117, -4.25528058700117, -6.0048395202011715, -5.41778020300117, -5.50972719300117, -6.28311079300117, -6.28311079300117, -6.28311079300117, -6.28311079300117, -6.28311079300117, -6.09247879300117, -6.09247879300117, -5.3190951930011714, -5.50972719300117, -5.6869900330011713, -5.6869900330011713, -5.81097919300117, -6.18190149300117, -6.09247879300117, -6.28311079300117, -6.09247879300117, -6.09247879300117, -6.09247879300117, -6.09247879300117, -6.09247879300117, -6.09247879300117, -6.09247879300117]
								}, {
									"case":	198,
									"scores":	[-6.6953252270011721, -6.51806238700117, -8.26762132020117, -7.68056200300117, -7.77250899300117, -8.54589259300117, -8.54589259300117, -8.54589259300117, -8.54589259300117, -8.54589259300117, -8.35526059300117, -8.35526059300117, -7.5818769930011713, -7.77250899300117, -7.94977183300117, -7.94977183300117, -8.07376099300117, -8.44468329300117, -8.35526059300117, -8.54589259300117, -8.35526059300117, -8.35526059300117, -8.35526059300117, -8.35526059300117, -8.35526059300117, -8.35526059300117, -8.35526059300117]
								}]
						}, {
							"switch":	18,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	186,
							"begin_column":	5,
							"end_line":	186,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L186\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->secret), sizeof (s->secret), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    p->conf.doc_root = s->doc_root;\n", "{\n}\n", "p->conf.doc_root = (&con)->doc_root", "p->conf.doc_root = (&dc)->doc_root", "p->conf.doc_root = (&du)->doc_root", "p->conf.doc_root = (&i)->doc_root", "p->conf.doc_root = (&j)->doc_root", "p->conf.doc_root = (&p)->doc_root", "p->conf.doc_root = (&s)->doc_root", "p->conf.doc_root = (&srv)->doc_root", "p->conf.doc_root = (s)->doc_root"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.42289236600117, -5.15811086600117, -6.4219332660011714, -5.8979025660011715, -5.58020689300117, -6.35104059300117, -6.35104059300117, -6.35104059300117, -6.35104059300117, -6.35104059300117, -5.50713559300117, -5.50713559300117, -4.73630189300117, -5.58020689300117, -5.84498839300117, -5.84498839300117, -5.2775948930011714, -5.94410059300117, -5.50713559300117, -6.35104059300117, -5.50713559300117, -5.50713559300117, -5.50713559300117, -5.50713559300117, -5.50713559300117, -5.50713559300117, -5.50713559300117]
								}, {
									"case":	2,
									"scores":	[-4.45749610300117]
								}, {
									"case":	3,
									"scores":	[-4.45749610300117]
								}, {
									"case":	4,
									"scores":	[-4.45749610300117]
								}, {
									"case":	5,
									"scores":	[-4.45749610300117]
								}, {
									"case":	6,
									"scores":	[-4.45749610300117]
								}, {
									"case":	7,
									"scores":	[-4.45749610300117]
								}, {
									"case":	8,
									"scores":	[-4.45749610300117]
								}, {
									"case":	9,
									"scores":	[-4.45749610300117]
								}, {
									"case":	10,
									"scores":	[-4.45749610300117]
								}, {
									"case":	11,
									"scores":	[-4.45749610300117]
								}]
						}]
				}, {
					"line":	187,
					"switches":	[{
							"switch":	21,
							"types":	[[], [], [], [], [196, 197, 198], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], [], [], [], [189, 190, 191, 192, 193, 194, 195], [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], [], [], [], [], [], []],
							"begin_line":	188,
							"begin_column":	3,
							"end_line":	188,
							"end_column":	3,
							"patch_codes":	["memset(&dc->childs, 0, sizeof (*(&dc->childs)))", "memset(&dc->comp, 0, sizeof (*(&dc->comp)))", "memset(&dc->comp_key, 0, sizeof (*(&dc->comp_key)))", "memset(&dc->cond, 0, sizeof (*(&dc->cond)))", "memset(&dc->context_ndx, 0, sizeof (*(&dc->context_ndx)))", "memset(&dc->copy, 0, sizeof (*(&dc->copy)))", "memset(&dc->free, 0, sizeof (*(&dc->free)))", "memset(&dc->insert_dup, 0, sizeof (*(&dc->insert_dup)))", "memset(&dc->is_index_key, 0, sizeof (*(&dc->is_index_key)))", "memset(&dc->key, 0, sizeof (*(&dc->key)))", "memset(&dc->next, 0, sizeof (*(&dc->next)))", "memset(&dc->op, 0, sizeof (*(&dc->op)))", "memset(&dc->parent, 0, sizeof (*(&dc->parent)))", "memset(&dc->prev, 0, sizeof (*(&dc->prev)))", "memset(&dc->print, 0, sizeof (*(&dc->print)))", "memset(&dc->regex, 0, sizeof (*(&dc->regex)))", "memset(&dc->regex_study, 0, sizeof (*(&dc->regex_study)))", "memset(&dc->reset, 0, sizeof (*(&dc->reset)))", "memset(&dc->string, 0, sizeof (*(&dc->string)))", "memset(&dc->type, 0, sizeof (*(&dc->type)))", "memset(&dc->value, 0, sizeof (*(&dc->value)))", "memset(&dc->value->data, 0, sizeof (*(&dc->value->data)))", "memset(&dc->value->is_weakref, 0, sizeof (*(&dc->value->is_weakref)))", "memset(&dc->value->next_power_of_2, 0, sizeof (*(&dc->value->next_power_of_2)))", "memset(&dc->value->size, 0, sizeof (*(&dc->value->size)))", "memset(&dc->value->sorted, 0, sizeof (*(&dc->value->sorted)))", "memset(&dc->value->unique_ndx, 0, sizeof (*(&dc->value->unique_ndx)))", "memset(&dc->value->used, 0, sizeof (*(&dc->value->used)))", "memset(&du->copy, 0, sizeof (*(&du->copy)))", "memset(&du->free, 0, sizeof (*(&du->free)))", "memset(&du->insert_dup, 0, sizeof (*(&du->insert_dup)))", "memset(&du->is_index_key, 0, sizeof (*(&du->is_index_key)))", "memset(&du->key, 0, sizeof (*(&du->key)))", "memset(&du->print, 0, sizeof (*(&du->print)))", "memset(&du->reset, 0, sizeof (*(&du->reset)))", "memset(&du->type, 0, sizeof (*(&du->type)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&s->doc_root, 0, sizeof (*(&s->doc_root)))", "memset(&s->secret, 0, sizeof (*(&s->secret)))", "memset(&s->timeout, 0, sizeof (*(&s->timeout)))", "memset(&s->uri_prefix, 0, sizeof (*(&s->uri_prefix)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_context->data, 0, sizeof (*(&srv->config_context->data)))", "memset(&srv->config_context->is_weakref, 0, sizeof (*(&srv->config_context->is_weakref)))", "memset(&srv->config_context->next_power_of_2, 0, sizeof (*(&srv->config_context->next_power_of_2)))", "memset(&srv->config_context->size, 0, sizeof (*(&srv->config_context->size)))", "memset(&srv->config_context->sorted, 0, sizeof (*(&srv->config_context->sorted)))", "memset(&srv->config_context->unique_ndx, 0, sizeof (*(&srv->config_context->unique_ndx)))", "memset(&srv->config_context->used, 0, sizeof (*(&srv->config_context->used)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(dc->childs, 0, sizeof (*(dc->childs)))", "memset(dc->comp_key, 0, sizeof (*(dc->comp_key)))", "memset(dc->copy, 0, sizeof (*(dc->copy)))", "memset(dc->free, 0, sizeof (*(dc->free)))", "memset(dc->insert_dup, 0, sizeof (*(dc->insert_dup)))", "memset(dc->key, 0, sizeof (*(dc->key)))", "memset(dc->next, 0, sizeof (*(dc->next)))", "memset(dc->op, 0, sizeof (*(dc->op)))", "memset(dc->parent, 0, sizeof (*(dc->parent)))", "memset(dc->prev, 0, sizeof (*(dc->prev)))", "memset(dc->print, 0, sizeof (*(dc->print)))", "memset(dc->regex, 0, sizeof (*(dc->regex)))", "memset(dc->regex_study, 0, sizeof (*(dc->regex_study)))", "memset(dc->reset, 0, sizeof (*(dc->reset)))", "memset(dc->string, 0, sizeof (*(dc->string)))", "memset(dc->value, 0, sizeof (*(dc->value)))", "memset(dc->value->data, 0, sizeof (*(dc->value->data)))", "memset(dc->value->sorted, 0, sizeof (*(dc->value->sorted)))", "memset(du->copy, 0, sizeof (*(du->copy)))", "memset(du->free, 0, sizeof (*(du->free)))", "memset(du->insert_dup, 0, sizeof (*(du->insert_dup)))", "memset(du->key, 0, sizeof (*(du->key)))", "memset(du->print, 0, sizeof (*(du->print)))", "memset(du->reset, 0, sizeof (*(du->reset)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(s, 0, sizeof (*(s)))", "memset(s->doc_root, 0, sizeof (*(s->doc_root)))", "memset(s->secret, 0, sizeof (*(s->secret)))", "memset(s->uri_prefix, 0, sizeof (*(s->uri_prefix)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_context->data, 0, sizeof (*(srv->config_context->data)))", "memset(srv->config_context->sorted, 0, sizeof (*(srv->config_context->sorted)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "buffer_free((p)->md5)", "buffer_free((s)->doc_root)", "buffer_free((s)->secret)", "buffer_free((s)->uri_prefix)", "free((p))", "free((p)->config_storage)", "free((s))", "p->conf.doc_root = (s)->doc_root", "p->conf.secret = (s)->secret", "p->conf.timeout = (0)", "p->conf.timeout = (1)", "p->conf.timeout = (s)->timeout", "p->conf.uri_prefix = (s)->uri_prefix", "s = (p)->config_storage[i]", "s = (s)", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "p->conf.doc_root = s->doc_root", "p->conf.secret = s->secret", "p->conf.timeout = s->timeout", "p->conf.uri_prefix = s->uri_prefix", "s = p->config_storage[i]", "if (__is_neg(\"\", \"L188\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->doc_root), sizeof (s->doc_root), &(s->timeout), sizeof (s->timeout), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    break;\n", "if (__is_neg(\"\", \"L188\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->doc_root), sizeof (s->doc_root), &(s->timeout), sizeof (s->timeout), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    return 0;\n", "if (__is_neg(\"\", \"L188\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->doc_root), sizeof (s->doc_root), &(s->timeout), sizeof (s->timeout), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	2,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	3,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	4,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	5,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	6,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	7,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	8,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	9,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	10,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	11,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	12,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	13,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	14,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	15,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	16,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	17,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	18,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	19,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	20,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	21,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	22,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	23,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	24,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	25,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	26,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	27,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	28,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	29,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	30,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	31,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	32,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	33,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	34,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	35,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	36,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	37,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	38,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	39,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	40,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	41,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	42,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	43,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	44,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	45,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	46,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	47,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	48,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	49,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	50,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	51,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	52,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	53,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	54,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	55,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	56,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	57,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	58,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	59,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	60,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	61,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	62,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	63,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	64,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	65,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	66,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	67,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	68,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	69,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	70,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	71,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	72,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	73,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	74,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	75,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	76,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	77,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	78,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	79,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	80,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	81,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	82,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	83,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	84,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	85,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	86,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	87,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	88,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	89,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	90,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	91,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	92,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	93,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	94,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	95,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	96,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	97,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	98,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	99,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	100,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	101,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	102,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	103,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	104,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	105,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	106,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	107,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	108,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	109,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	110,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	111,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	112,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	113,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	114,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	115,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	116,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	117,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	118,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	119,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	120,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	121,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	122,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	123,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	124,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	125,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	126,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	127,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	128,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	129,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	130,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	131,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	132,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	133,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	134,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	135,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	136,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	137,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	138,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	139,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	140,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	141,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	142,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	143,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	144,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	145,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	146,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	147,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	148,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	149,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	150,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	151,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	152,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	153,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	154,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	155,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	156,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	157,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	158,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	159,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	160,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	161,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	162,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	163,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	164,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	165,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	166,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	167,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	168,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	169,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	170,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	171,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	172,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	173,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	174,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	175,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	176,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	177,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	178,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	179,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	180,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	181,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	182,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	183,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	184,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	185,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	186,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	187,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	188,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	189,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	190,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	191,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	192,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	193,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	194,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	195,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	196,
									"scores":	[-4.3124325196836528, -4.1351696796836528, -5.8847286128836522, -5.2976692956836526, -5.3896162856836529, -6.1629998856836519, -6.1629998856836519, -5.9723678856836528, -6.1629998856836519, -5.9723678856836528, -6.1629998856836519, -6.1629998856836519, -5.1989842856836521, -5.3896162856836529, -5.5668791256836521, -5.5668791256836521, -5.6908682856836528, -6.061790585683652, -5.9723678856836528, -6.1629998856836519, -5.9723678856836528, -5.9723678856836528, -5.9723678856836528, -5.9723678856836528, -5.9723678856836528, -5.9723678856836528, -5.9723678856836528]
								}, {
									"case":	197,
									"scores":	[-4.4123407196836526, -4.2350778796836526, -5.984636812883652, -5.3975774956836524, -5.4895244856836527, -6.2629080856836516, -6.2629080856836516, -6.0722760856836526, -6.2629080856836516, -6.0722760856836526, -6.2629080856836516, -6.2629080856836516, -5.2988924856836519, -5.4895244856836527, -5.6667873256836518, -5.6667873256836518, -5.7907764856836526, -6.1616987856836527, -6.0722760856836526, -6.2629080856836516, -6.0722760856836526, -6.0722760856836526, -6.0722760856836526, -6.0722760856836526, -6.0722760856836526, -6.0722760856836526, -6.0722760856836526]
								}, {
									"case":	198,
									"scores":	[-6.6751225196836526, -6.4978596796836534, -8.2474186128836529, -7.6603592956836524, -7.7523062856836527, -8.52568988568365, -8.52568988568365, -8.3350578856836535, -8.52568988568365, -8.3350578856836535, -8.52568988568365, -8.52568988568365, -7.5616742856836527, -7.7523062856836527, -7.9295691256836527, -7.9295691256836527, -8.0535582856836534, -8.4244805856836535, -8.3350578856836535, -8.52568988568365, -8.3350578856836535, -8.3350578856836535, -8.3350578856836535, -8.3350578856836535, -8.3350578856836535, -8.3350578856836535, -8.3350578856836535]
								}]
						}, {
							"switch":	22,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	188,
							"begin_column":	5,
							"end_line":	188,
							"end_column":	28,
							"patch_codes":	["if (!__is_neg(\"\", \"L188\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->doc_root), sizeof (s->doc_root), &(s->timeout), sizeof (s->timeout), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print)))\n    p->conf.uri_prefix = s->uri_prefix;\n", "{\n}\n", "p->conf.uri_prefix = (&con)->uri_prefix", "p->conf.uri_prefix = (&dc)->uri_prefix", "p->conf.uri_prefix = (&du)->uri_prefix", "p->conf.uri_prefix = (&i)->uri_prefix", "p->conf.uri_prefix = (&j)->uri_prefix", "p->conf.uri_prefix = (&p)->uri_prefix", "p->conf.uri_prefix = (&s)->uri_prefix", "p->conf.uri_prefix = (&srv)->uri_prefix", "p->conf.uri_prefix = (s)->uri_prefix"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4026896586836521, -5.1379081586836524, -6.4017305586836528, -5.877699858683652, -5.5600041856836526, -6.3308378856836525, -6.3308378856836525, -5.4869328856836521, -6.3308378856836525, -5.4869328856836521, -6.3308378856836525, -6.3308378856836525, -4.7160991856836523, -5.5600041856836526, -5.8247856856836524, -5.8247856856836524, -5.2573921856836527, -5.9238978856836528, -5.4869328856836521, -6.3308378856836525, -5.4869328856836521, -5.4869328856836521, -5.4869328856836521, -5.4869328856836521, -5.4869328856836521, -5.4869328856836521, -5.4869328856836521]
								}, {
									"case":	2,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	3,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	4,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	5,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	6,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	7,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	8,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	9,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	10,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	11,
									"scores":	[-4.4372933956836524]
								}]
						}]
				}, {
					"line":	189,
					"switches":	[{
							"switch":	25,
							"types":	[[], [], [], [], [196, 197, 198], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], [], [], [], [189, 190, 191, 192, 193, 194, 195], [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], [], [], [], [], [], []],
							"begin_line":	190,
							"begin_column":	3,
							"end_line":	190,
							"end_column":	3,
							"patch_codes":	["memset(&dc->childs, 0, sizeof (*(&dc->childs)))", "memset(&dc->comp, 0, sizeof (*(&dc->comp)))", "memset(&dc->comp_key, 0, sizeof (*(&dc->comp_key)))", "memset(&dc->cond, 0, sizeof (*(&dc->cond)))", "memset(&dc->context_ndx, 0, sizeof (*(&dc->context_ndx)))", "memset(&dc->copy, 0, sizeof (*(&dc->copy)))", "memset(&dc->free, 0, sizeof (*(&dc->free)))", "memset(&dc->insert_dup, 0, sizeof (*(&dc->insert_dup)))", "memset(&dc->is_index_key, 0, sizeof (*(&dc->is_index_key)))", "memset(&dc->key, 0, sizeof (*(&dc->key)))", "memset(&dc->next, 0, sizeof (*(&dc->next)))", "memset(&dc->op, 0, sizeof (*(&dc->op)))", "memset(&dc->parent, 0, sizeof (*(&dc->parent)))", "memset(&dc->prev, 0, sizeof (*(&dc->prev)))", "memset(&dc->print, 0, sizeof (*(&dc->print)))", "memset(&dc->regex, 0, sizeof (*(&dc->regex)))", "memset(&dc->regex_study, 0, sizeof (*(&dc->regex_study)))", "memset(&dc->reset, 0, sizeof (*(&dc->reset)))", "memset(&dc->string, 0, sizeof (*(&dc->string)))", "memset(&dc->type, 0, sizeof (*(&dc->type)))", "memset(&dc->value, 0, sizeof (*(&dc->value)))", "memset(&dc->value->data, 0, sizeof (*(&dc->value->data)))", "memset(&dc->value->is_weakref, 0, sizeof (*(&dc->value->is_weakref)))", "memset(&dc->value->next_power_of_2, 0, sizeof (*(&dc->value->next_power_of_2)))", "memset(&dc->value->size, 0, sizeof (*(&dc->value->size)))", "memset(&dc->value->sorted, 0, sizeof (*(&dc->value->sorted)))", "memset(&dc->value->unique_ndx, 0, sizeof (*(&dc->value->unique_ndx)))", "memset(&dc->value->used, 0, sizeof (*(&dc->value->used)))", "memset(&du->copy, 0, sizeof (*(&du->copy)))", "memset(&du->free, 0, sizeof (*(&du->free)))", "memset(&du->insert_dup, 0, sizeof (*(&du->insert_dup)))", "memset(&du->is_index_key, 0, sizeof (*(&du->is_index_key)))", "memset(&du->key, 0, sizeof (*(&du->key)))", "memset(&du->print, 0, sizeof (*(&du->print)))", "memset(&du->reset, 0, sizeof (*(&du->reset)))", "memset(&du->type, 0, sizeof (*(&du->type)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&s->doc_root, 0, sizeof (*(&s->doc_root)))", "memset(&s->secret, 0, sizeof (*(&s->secret)))", "memset(&s->timeout, 0, sizeof (*(&s->timeout)))", "memset(&s->uri_prefix, 0, sizeof (*(&s->uri_prefix)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_context->data, 0, sizeof (*(&srv->config_context->data)))", "memset(&srv->config_context->is_weakref, 0, sizeof (*(&srv->config_context->is_weakref)))", "memset(&srv->config_context->next_power_of_2, 0, sizeof (*(&srv->config_context->next_power_of_2)))", "memset(&srv->config_context->size, 0, sizeof (*(&srv->config_context->size)))", "memset(&srv->config_context->sorted, 0, sizeof (*(&srv->config_context->sorted)))", "memset(&srv->config_context->unique_ndx, 0, sizeof (*(&srv->config_context->unique_ndx)))", "memset(&srv->config_context->used, 0, sizeof (*(&srv->config_context->used)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(dc->childs, 0, sizeof (*(dc->childs)))", "memset(dc->comp_key, 0, sizeof (*(dc->comp_key)))", "memset(dc->copy, 0, sizeof (*(dc->copy)))", "memset(dc->free, 0, sizeof (*(dc->free)))", "memset(dc->insert_dup, 0, sizeof (*(dc->insert_dup)))", "memset(dc->key, 0, sizeof (*(dc->key)))", "memset(dc->next, 0, sizeof (*(dc->next)))", "memset(dc->op, 0, sizeof (*(dc->op)))", "memset(dc->parent, 0, sizeof (*(dc->parent)))", "memset(dc->prev, 0, sizeof (*(dc->prev)))", "memset(dc->print, 0, sizeof (*(dc->print)))", "memset(dc->regex, 0, sizeof (*(dc->regex)))", "memset(dc->regex_study, 0, sizeof (*(dc->regex_study)))", "memset(dc->reset, 0, sizeof (*(dc->reset)))", "memset(dc->string, 0, sizeof (*(dc->string)))", "memset(dc->value, 0, sizeof (*(dc->value)))", "memset(dc->value->data, 0, sizeof (*(dc->value->data)))", "memset(dc->value->sorted, 0, sizeof (*(dc->value->sorted)))", "memset(du->copy, 0, sizeof (*(du->copy)))", "memset(du->free, 0, sizeof (*(du->free)))", "memset(du->insert_dup, 0, sizeof (*(du->insert_dup)))", "memset(du->key, 0, sizeof (*(du->key)))", "memset(du->print, 0, sizeof (*(du->print)))", "memset(du->reset, 0, sizeof (*(du->reset)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(s, 0, sizeof (*(s)))", "memset(s->doc_root, 0, sizeof (*(s->doc_root)))", "memset(s->secret, 0, sizeof (*(s->secret)))", "memset(s->uri_prefix, 0, sizeof (*(s->uri_prefix)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_context->data, 0, sizeof (*(srv->config_context->data)))", "memset(srv->config_context->sorted, 0, sizeof (*(srv->config_context->sorted)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "buffer_free((p)->md5)", "buffer_free((s)->doc_root)", "buffer_free((s)->secret)", "buffer_free((s)->uri_prefix)", "free((p))", "free((p)->config_storage)", "free((s))", "p->conf.doc_root = (s)->doc_root", "p->conf.secret = (s)->secret", "p->conf.timeout = (0)", "p->conf.timeout = (1)", "p->conf.timeout = (s)->timeout", "p->conf.uri_prefix = (s)->uri_prefix", "s = (p)->config_storage[i]", "s = (s)", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "p->conf.doc_root = s->doc_root", "p->conf.secret = s->secret", "p->conf.timeout = s->timeout", "p->conf.uri_prefix = s->uri_prefix", "s = p->config_storage[i]", "if (__is_neg(\"\", \"L190\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5)))\n    break;\n", "if (__is_neg(\"\", \"L190\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5)))\n    return 0;\n", "if (__is_neg(\"\", \"L190\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	2,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	3,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	4,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	5,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	6,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	7,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	8,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	9,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	10,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	11,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	12,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	13,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	14,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	15,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	16,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	17,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	18,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	19,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	20,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	21,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	22,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	23,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	24,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	25,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	26,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	27,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	28,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	29,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	30,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	31,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	32,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	33,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	34,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	35,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	36,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	37,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	38,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	39,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	40,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	41,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	42,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	43,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	44,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	45,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	46,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	47,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	48,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	49,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	50,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	51,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	52,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	53,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	54,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	55,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	56,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	57,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	58,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	59,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	60,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	61,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	62,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	63,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	64,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	65,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	66,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	67,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	68,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	69,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	70,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	71,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	72,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	73,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	74,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	75,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	76,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	77,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	78,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	79,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	80,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	81,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	82,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	83,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	84,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	85,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	86,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	87,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	88,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	89,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	90,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	91,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	92,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	93,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	94,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	95,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	96,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	97,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	98,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	99,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	100,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	101,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	102,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	103,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	104,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	105,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	106,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	107,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	108,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	109,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	110,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	111,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	112,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	113,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	114,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	115,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	116,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	117,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	118,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	119,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	120,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	121,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	122,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	123,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	124,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	125,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	126,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	127,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	128,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	129,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	130,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	131,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	132,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	133,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	134,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	135,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	136,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	137,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	138,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	139,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	140,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	141,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	142,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	143,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	144,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	145,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	146,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	147,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	148,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	149,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	150,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	151,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	152,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	153,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	154,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	155,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	156,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	157,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	158,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	159,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	160,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	161,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	162,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	163,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	164,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	165,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	166,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	167,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	168,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	169,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	170,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	171,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	172,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	173,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	174,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	175,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	176,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	177,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	178,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	179,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	180,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	181,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	182,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	183,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	184,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	185,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	186,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	187,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	188,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	189,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	190,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	191,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	192,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	193,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	194,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	195,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	196,
									"scores":	[-4.2922298123661333, -4.1149669723661333, -5.6738939055661328, -5.0868345883661323, -5.3694135783661334, -6.1427971783661324, -6.1427971783661324, -6.1427971783661324, -6.1427971783661324, -6.1427971783661324, -6.1427971783661324, -6.1427971783661324, -5.1787815783661326, -5.3694135783661334, -5.5466764183661326, -5.5466764183661326, -5.6706655783661333, -6.0415878783661325, -5.9521651783661333, -5.9521651783661333, -5.9521651783661333, -5.9521651783661333, -5.9521651783661333, -5.9521651783661333, -5.9521651783661333, -5.9521651783661333, -6.1427971783661324]
								}, {
									"case":	197,
									"scores":	[-4.3921380123661331, -4.2148751723661331, -5.7738021055661335, -5.186742788366133, -5.4693217783661332, -6.2427053783661322, -6.2427053783661322, -6.2427053783661322, -6.2427053783661322, -6.2427053783661322, -6.2427053783661322, -6.2427053783661322, -5.2786897783661324, -5.4693217783661332, -5.6465846183661323, -5.6465846183661323, -5.7705737783661331, -6.1414960783661332, -6.0520733783661331, -6.0520733783661331, -6.0520733783661331, -6.0520733783661331, -6.0520733783661331, -6.0520733783661331, -6.0520733783661331, -6.0520733783661331, -6.2427053783661322]
								}, {
									"case":	198,
									"scores":	[-6.6549198123661331, -6.4776569723661339, -8.03658390556613, -7.449524588366133, -7.7321035783661332, -8.505487178366133, -8.505487178366133, -8.505487178366133, -8.505487178366133, -8.505487178366133, -8.505487178366133, -8.505487178366133, -7.5414715783661332, -7.7321035783661332, -7.9093664183661332, -7.9093664183661332, -8.0333555783661339, -8.404277878366134, -8.314855178366134, -8.314855178366134, -8.314855178366134, -8.314855178366134, -8.314855178366134, -8.314855178366134, -8.314855178366134, -8.314855178366134, -8.505487178366133]
								}]
						}, {
							"switch":	26,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	190,
							"begin_column":	5,
							"end_line":	190,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L190\", 27, &(p), sizeof (p), &(s), sizeof (s), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(du), sizeof (du), &(du->key), sizeof (du->key), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5)))\n    p->conf.timeout = s->timeout;\n", "{\n}\n", "p->conf.timeout = (&con)->timeout", "p->conf.timeout = (&dc)->timeout", "p->conf.timeout = (&du)->timeout", "p->conf.timeout = (&i)->timeout", "p->conf.timeout = (&j)->timeout", "p->conf.timeout = (&p)->timeout", "p->conf.timeout = (&s)->timeout", "p->conf.timeout = (&srv)->timeout", "p->conf.timeout = (0)", "p->conf.timeout = (1)", "p->conf.timeout = (s)->timeout"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3824869513661326, -5.1177054513661329, -5.537622851366133, -5.013592151366133, -5.5398014783661331, -6.310635178366133, -6.310635178366133, -6.310635178366133, -6.310635178366133, -6.310635178366133, -6.310635178366133, -6.310635178366133, -4.6958964783661328, -5.5398014783661331, -5.8045829783661329, -5.8045829783661329, -5.2371894783661332, -5.9036951783661333, -5.4667301783661326, -5.4667301783661326, -5.4667301783661326, -5.4667301783661326, -5.4667301783661326, -5.4667301783661326, -5.4667301783661326, -5.4667301783661326, -6.310635178366133]
								}, {
									"case":	2,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	3,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	4,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	5,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	6,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	7,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	8,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	9,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	10,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	11,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	12,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	13,
									"scores":	[-4.4170906883661329]
								}]
						}]
				}, {
					"line":	188,
					"switches":	[{
							"switch":	23,
							"types":	[[], [], [], [], [], [], [], [], [], [16, 17, 18, 19, 20, 21, 22], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [], [], []],
							"begin_line":	189,
							"begin_column":	9,
							"end_line":	189,
							"end_column":	9,
							"patch_codes":	["buffer_free((p)->md5)", "buffer_free((s)->doc_root)", "buffer_free((s)->secret)", "buffer_free((s)->uri_prefix)", "free((p))", "free((p)->config_storage)", "free((s))", "p->conf.doc_root = (s)->doc_root", "p->conf.secret = (s)->secret", "p->conf.timeout = (0)", "p->conf.timeout = (1)", "p->conf.timeout = (s)->timeout", "p->conf.uri_prefix = (s)->uri_prefix", "s = (p)->config_storage[i]", "s = (s)", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "p->conf.doc_root = s->doc_root", "p->conf.secret = s->secret", "p->conf.timeout = s->timeout", "p->conf.uri_prefix = s->uri_prefix", "s = p->config_storage[i]"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	2,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	3,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	4,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	5,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	6,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	7,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	8,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	9,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	10,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	11,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	12,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	13,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	14,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	15,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	16,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	17,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	18,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	19,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	20,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	21,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	22,
									"scores":	[-4.4170906883661329]
								}]
						}, {
							"switch":	24,
							"types":	[[63], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], []],
							"begin_line":	189,
							"begin_column":	11,
							"end_line":	191,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L189\", 27, &(du), sizeof (du), &(du->key), sizeof (du->key), &(p), sizeof (p), &(s), sizeof (s), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->uri_prefix), sizeof (s->uri_prefix), &(s->timeout), sizeof (s->timeout), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print))) {\n    p->conf.timeout = s->timeout;\n}\n", "if (BIO_printf(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (OPENSSL_strlcat(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (OPENSSL_strlcpy(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (VALGRIND_PRINTF(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (VALGRIND_PRINTF_BACKTRACE(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_add1_host(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_set1_email(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_set1_host(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (__builtin_va_start(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (__stpncpy(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (array_get_element(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_memory(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_string_len(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_string_rfill(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_memory(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_string_hex(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_string_len(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_is_equal_right_len(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_search_string_len(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (chunkqueue_append_mem(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (fprintf(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_ascii_strncasecmp(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_build_filename(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_build_path(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_dpgettext(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_markup_printf_escaped(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_prefix_error(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_print(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_printerr(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_relation_exists(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_relation_insert(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_scanner_error(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_scanner_warn(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strconcat(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strdup_printf(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_string_append_printf(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_string_printf(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strjoin(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strlcat(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strlcpy(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_test_message(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_utf8_strncpy(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_builder_add(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_builder_add_parsed(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_get(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_iter_loop(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_iter_next(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new_parsed(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new_printf(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (log_trace(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (mbstowcs(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (mbtowc(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (printf(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (sprintf(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (stpncpy(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncasecmp(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncat(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncmp(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncpy(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strxfrm(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if ((buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) && !__is_neg(\"\", \"L189\", 27, &(du), sizeof (du), &(du->key), sizeof (du->key), &(p), sizeof (p), &(s), sizeof (s), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->uri_prefix), sizeof (s->uri_prefix), &(s->timeout), sizeof (s->timeout), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print))) {\n    p->conf.timeout = s->timeout;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.6237240793281451, -3.5671031793281456, -3.3036985523281452, -3.038917052328145, -4.231846779328146, -3.4588344523281456, -4.231846779328146, -2.9348037523281452, -4.231846779328146, -4.231846779328146, -4.231846779328146, -4.231846779328146, -2.6171080793281458, -3.4610130793281457, -3.725794579328146, -3.725794579328146, -3.1584010793281458, -3.8249067793281459, -3.3879417793281457, -4.231846779328146, -3.3879417793281457, -3.3879417793281457, -3.3879417793281457, -3.3879417793281457, -3.3879417793281457, -3.3879417793281457, -3.3879417793281457]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-2.6917971444281452, -3.6351762444281466, -3.3717716174281458, -3.1069901174281456, -4.2999198444281461, -3.5269075174281461, -4.2999198444281461, -3.0028768174281462, -4.2999198444281461, -4.2999198444281461, -4.2999198444281461, -4.2999198444281461, -2.6851811444281459, -3.5290861444281463, -3.7938676444281465, -3.7938676444281465, -3.2264741444281464, -3.8929798444281465, -3.4560148444281467, -4.2999198444281461, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467]
								}]
						}]
				}, {
					"line":	186,
					"switches":	[{
							"switch":	19,
							"types":	[[], [], [], [], [], [], [], [], [], [16, 17, 18, 19, 20, 21, 22], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [], [], []],
							"begin_line":	187,
							"begin_column":	9,
							"end_line":	187,
							"end_column":	9,
							"patch_codes":	["buffer_free((p)->md5)", "buffer_free((s)->doc_root)", "buffer_free((s)->secret)", "buffer_free((s)->uri_prefix)", "free((p))", "free((p)->config_storage)", "free((s))", "p->conf.doc_root = (s)->doc_root", "p->conf.secret = (s)->secret", "p->conf.timeout = (0)", "p->conf.timeout = (1)", "p->conf.timeout = (s)->timeout", "p->conf.uri_prefix = (s)->uri_prefix", "s = (p)->config_storage[i]", "s = (s)", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "p->conf.doc_root = s->doc_root", "p->conf.secret = s->secret", "p->conf.timeout = s->timeout", "p->conf.uri_prefix = s->uri_prefix", "s = p->config_storage[i]"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	2,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	3,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	4,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	5,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	6,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	7,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	8,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	9,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	10,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	11,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	12,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	13,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	14,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	15,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	16,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	17,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	18,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	19,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	20,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	21,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	22,
									"scores":	[-4.4372933956836524]
								}]
						}, {
							"switch":	20,
							"types":	[[63], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], []],
							"begin_line":	187,
							"begin_column":	11,
							"end_line":	191,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L187\", 27, &(du), sizeof (du), &(du->key), sizeof (du->key), &(p), sizeof (p), &(s), sizeof (s), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->doc_root), sizeof (s->doc_root), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->secret), sizeof (s->secret), &(s->timeout), sizeof (s->timeout), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print))) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (BIO_printf(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (OPENSSL_strlcat(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (OPENSSL_strlcpy(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (VALGRIND_PRINTF(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (VALGRIND_PRINTF_BACKTRACE(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_add1_host(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_set1_email(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_set1_host(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (__builtin_va_start(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (__stpncpy(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (array_get_element(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_memory(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_string_len(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_string_rfill(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_memory(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_string_hex(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_string_len(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_is_equal_right_len(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_search_string_len(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (chunkqueue_append_mem(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (fprintf(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_ascii_strncasecmp(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_build_filename(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_build_path(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_dpgettext(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_markup_printf_escaped(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_prefix_error(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_print(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_printerr(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_relation_exists(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_relation_insert(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_scanner_error(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_scanner_warn(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strconcat(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strdup_printf(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_string_append_printf(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_string_printf(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strjoin(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strlcat(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strlcpy(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_test_message(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_utf8_strncpy(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_builder_add(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_builder_add_parsed(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_get(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_iter_loop(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_iter_next(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new_parsed(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new_printf(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (log_trace(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (mbstowcs(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (mbtowc(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (printf(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (sprintf(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (stpncpy(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncasecmp(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncat(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncmp(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncpy(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strxfrm(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if ((buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) && !__is_neg(\"\", \"L187\", 27, &(du), sizeof (du), &(du->key), sizeof (du->key), &(p), sizeof (p), &(s), sizeof (s), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->doc_root), sizeof (s->doc_root), &(s->uri_prefix), sizeof (s->uri_prefix), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->secret), sizeof (s->secret), &(s->timeout), sizeof (s->timeout), &(j), sizeof (j), &(dc), sizeof (dc), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print))) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.7994603483281462, -2.7428394483281462, -2.4794348213281454, -2.2146533213281456, -3.4075830483281457, -3.4784757213281456, -3.4075830483281457, -2.9544450213281461, -3.4075830483281457, -2.6345707213281457, -3.4075830483281457, -2.1105400213281458, -1.7928443483281464, -2.6367493483281459, -2.9015308483281457, -2.9015308483281457, -2.334137348328146, -3.0006430483281461, -2.5636780483281454, -3.4075830483281457, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-2.6917971444281452, -3.6351762444281466, -3.3717716174281458, -3.1069901174281456, -4.2999198444281461, -4.3708125174281456, -4.2999198444281461, -3.8467818174281461, -4.2999198444281461, -3.5269075174281461, -4.2999198444281461, -3.0028768174281462, -2.6851811444281459, -3.5290861444281463, -3.7938676444281465, -3.7938676444281465, -3.2264741444281464, -3.8929798444281465, -3.4560148444281467, -4.2999198444281461, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467]
								}]
						}]
				}, {
					"line":	184,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [], [], [], [], [], [16, 17, 18, 19, 20, 21, 22], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [], [], []],
							"begin_line":	185,
							"begin_column":	9,
							"end_line":	185,
							"end_column":	9,
							"patch_codes":	["buffer_free((p)->md5)", "buffer_free((s)->doc_root)", "buffer_free((s)->secret)", "buffer_free((s)->uri_prefix)", "free((p))", "free((p)->config_storage)", "free((s))", "p->conf.doc_root = (s)->doc_root", "p->conf.secret = (s)->secret", "p->conf.timeout = (0)", "p->conf.timeout = (1)", "p->conf.timeout = (s)->timeout", "p->conf.uri_prefix = (s)->uri_prefix", "s = (p)->config_storage[i]", "s = (s)", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "p->conf.doc_root = s->doc_root", "p->conf.secret = s->secret", "p->conf.timeout = s->timeout", "p->conf.uri_prefix = s->uri_prefix", "s = p->config_storage[i]"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.45749610300117]
								}, {
									"case":	2,
									"scores":	[-4.45749610300117]
								}, {
									"case":	3,
									"scores":	[-4.45749610300117]
								}, {
									"case":	4,
									"scores":	[-4.45749610300117]
								}, {
									"case":	5,
									"scores":	[-4.45749610300117]
								}, {
									"case":	6,
									"scores":	[-4.45749610300117]
								}, {
									"case":	7,
									"scores":	[-4.45749610300117]
								}, {
									"case":	8,
									"scores":	[-4.45749610300117]
								}, {
									"case":	9,
									"scores":	[-4.45749610300117]
								}, {
									"case":	10,
									"scores":	[-4.45749610300117]
								}, {
									"case":	11,
									"scores":	[-4.45749610300117]
								}, {
									"case":	12,
									"scores":	[-4.45749610300117]
								}, {
									"case":	13,
									"scores":	[-4.45749610300117]
								}, {
									"case":	14,
									"scores":	[-4.45749610300117]
								}, {
									"case":	15,
									"scores":	[-4.45749610300117]
								}, {
									"case":	16,
									"scores":	[-4.45749610300117]
								}, {
									"case":	17,
									"scores":	[-4.45749610300117]
								}, {
									"case":	18,
									"scores":	[-4.45749610300117]
								}, {
									"case":	19,
									"scores":	[-4.45749610300117]
								}, {
									"case":	20,
									"scores":	[-4.45749610300117]
								}, {
									"case":	21,
									"scores":	[-4.45749610300117]
								}, {
									"case":	22,
									"scores":	[-4.45749610300117]
								}]
						}, {
							"switch":	16,
							"types":	[[63], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], []],
							"begin_line":	185,
							"begin_column":	11,
							"end_line":	191,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L185\", 27, &(du), sizeof (du), &(du->key), sizeof (du->key), &(p), sizeof (p), &(s), sizeof (s), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(s->doc_root), sizeof (s->doc_root), &(s->secret), sizeof (s->secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(j), sizeof (j), &(dc), sizeof (dc), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print))) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (BIO_printf(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (OPENSSL_strlcat(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (OPENSSL_strlcpy(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (VALGRIND_PRINTF(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (VALGRIND_PRINTF_BACKTRACE(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_add1_host(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_set1_email(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_set1_host(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (__builtin_va_start(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (__stpncpy(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (array_get_element(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_memory(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_string_len(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_string_rfill(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_memory(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_string_hex(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_string_len(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_is_equal_right_len(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_search_string_len(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (chunkqueue_append_mem(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (fprintf(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_ascii_strncasecmp(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_build_filename(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_build_path(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_dpgettext(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_markup_printf_escaped(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_prefix_error(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_print(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_printerr(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_relation_exists(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_relation_insert(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_scanner_error(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_scanner_warn(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strconcat(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strdup_printf(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_string_append_printf(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_string_printf(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strjoin(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strlcat(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strlcpy(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_test_message(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_utf8_strncpy(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_builder_add(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_builder_add_parsed(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_get(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_iter_loop(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_iter_next(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new_parsed(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new_printf(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (log_trace(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (mbstowcs(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (mbtowc(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (printf(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (sprintf(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (stpncpy(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncasecmp(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncat(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncmp(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncpy(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strxfrm(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if ((buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) && !__is_neg(\"\", \"L185\", 27, &(du), sizeof (du), &(du->key), sizeof (du->key), &(p), sizeof (p), &(s), sizeof (s), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(s->doc_root), sizeof (s->doc_root), &(s->secret), sizeof (s->secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(j), sizeof (j), &(dc), sizeof (dc), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(srv), sizeof (srv), &(con), sizeof (con), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print))) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.7994603483281462, -2.7428394483281462, -2.4794348213281454, -2.2146533213281456, -3.4784757213281456, -3.4075830483281457, -2.9544450213281461, -3.4075830483281457, -3.4784757213281456, -2.9544450213281461, -1.7928443483281464, -2.6367493483281459, -2.6345707213281457, -2.1105400213281458, -2.9015308483281457, -2.9015308483281457, -2.334137348328146, -3.0006430483281461, -2.5636780483281454, -3.4075830483281457, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-2.6917971444281452, -3.6351762444281466, -3.3717716174281458, -3.1069901174281456, -4.3708125174281456, -4.2999198444281461, -3.8467818174281461, -4.2999198444281461, -4.3708125174281456, -3.8467818174281461, -2.6851811444281459, -3.5290861444281463, -3.5269075174281461, -3.0028768174281462, -3.7938676444281465, -3.7938676444281465, -3.2264741444281464, -3.8929798444281465, -3.4560148444281467, -4.2999198444281461, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467]
								}]
						}]
				}, {
					"line":	182,
					"switches":	[{
							"switch":	11,
							"types":	[[], [], [], [], [], [], [], [], [], [16, 17, 18, 19, 20, 21, 22], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [], [], []],
							"begin_line":	183,
							"begin_column":	2,
							"end_line":	183,
							"end_column":	2,
							"patch_codes":	["buffer_free((p)->md5)", "buffer_free((s)->doc_root)", "buffer_free((s)->secret)", "buffer_free((s)->uri_prefix)", "free((p))", "free((p)->config_storage)", "free((s))", "p->conf.doc_root = (s)->doc_root", "p->conf.secret = (s)->secret", "p->conf.timeout = (0)", "p->conf.timeout = (1)", "p->conf.timeout = (s)->timeout", "p->conf.uri_prefix = (s)->uri_prefix", "s = (p)->config_storage[i]", "s = (s)", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "p->conf.doc_root = s->doc_root", "p->conf.secret = s->secret", "p->conf.timeout = s->timeout", "p->conf.uri_prefix = s->uri_prefix", "s = p->config_storage[i]"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.47769881031869]
								}, {
									"case":	2,
									"scores":	[-4.47769881031869]
								}, {
									"case":	3,
									"scores":	[-4.47769881031869]
								}, {
									"case":	4,
									"scores":	[-4.47769881031869]
								}, {
									"case":	5,
									"scores":	[-4.47769881031869]
								}, {
									"case":	6,
									"scores":	[-4.47769881031869]
								}, {
									"case":	7,
									"scores":	[-4.47769881031869]
								}, {
									"case":	8,
									"scores":	[-4.47769881031869]
								}, {
									"case":	9,
									"scores":	[-4.47769881031869]
								}, {
									"case":	10,
									"scores":	[-4.47769881031869]
								}, {
									"case":	11,
									"scores":	[-4.47769881031869]
								}, {
									"case":	12,
									"scores":	[-4.47769881031869]
								}, {
									"case":	13,
									"scores":	[-4.47769881031869]
								}, {
									"case":	14,
									"scores":	[-4.47769881031869]
								}, {
									"case":	15,
									"scores":	[-4.47769881031869]
								}, {
									"case":	16,
									"scores":	[-4.47769881031869]
								}, {
									"case":	17,
									"scores":	[-4.47769881031869]
								}, {
									"case":	18,
									"scores":	[-4.47769881031869]
								}, {
									"case":	19,
									"scores":	[-4.47769881031869]
								}, {
									"case":	20,
									"scores":	[-4.47769881031869]
								}, {
									"case":	21,
									"scores":	[-4.47769881031869]
								}, {
									"case":	22,
									"scores":	[-4.47769881031869]
								}]
						}, {
							"switch":	12,
							"types":	[[63], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], []],
							"begin_line":	183,
							"begin_column":	4,
							"end_line":	191,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L183\", 27, &(du), sizeof (du), &(du->key), sizeof (du->key), &(p), sizeof (p), &(s), sizeof (s), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print))) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (BIO_printf(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (OPENSSL_strlcat(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (OPENSSL_strlcpy(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (VALGRIND_PRINTF(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (VALGRIND_PRINTF_BACKTRACE(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_add1_host(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_set1_email(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (X509_VERIFY_PARAM_set1_host(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (__builtin_va_start(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (__stpncpy(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (array_get_element(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_memory(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_string_len(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_append_string_rfill(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_memory(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_string_hex(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_copy_string_len(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_is_equal_right_len(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (buffer_search_string_len(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (chunkqueue_append_mem(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (fprintf(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_ascii_strncasecmp(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_build_filename(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_build_path(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_dpgettext(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_markup_printf_escaped(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_prefix_error(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_print(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_printerr(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_relation_exists(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_relation_insert(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_scanner_error(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_scanner_warn(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strconcat(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strdup_printf(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_string_append_printf(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_string_printf(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strjoin(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strlcat(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_strlcpy(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_test_message(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_utf8_strncpy(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_builder_add(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_builder_add_parsed(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_get(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_iter_loop(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_iter_next(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new_parsed(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (g_variant_new_printf(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (log_trace(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (mbstowcs(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (mbtowc(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (printf(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (sprintf(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (stpncpy(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncasecmp(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncat(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncmp(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strncpy(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if (strxfrm(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n", "if ((buffer_is_equal_string(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) && !__is_neg(\"\", \"L183\", 27, &(du), sizeof (du), &(du->key), sizeof (du->key), &(p), sizeof (p), &(s), sizeof (s), &(p->conf.secret), sizeof (p->conf.secret), &(s->secret), sizeof (s->secret), &(j), sizeof (j), &(dc), sizeof (dc), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(s->doc_root), sizeof (s->doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(s->uri_prefix), sizeof (s->uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.timeout), sizeof (p->conf.timeout), &(s->timeout), sizeof (s->timeout), &(i), sizeof (i), &(p->config_storage), sizeof (p->config_storage), &(p->id), sizeof (p->id), &(p->md5), sizeof (p->md5), &(du->type), sizeof (du->type), &(du->is_index_key), sizeof (du->is_index_key), &(du->copy), sizeof (du->copy), &(du->free), sizeof (du->free), &(du->reset), sizeof (du->reset), &(du->insert_dup), sizeof (du->insert_dup), &(du->print), sizeof (du->print))) {\n    p->conf.secret = s->secret;\n} else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n    p->conf.doc_root = s->doc_root;\n} else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n    p->conf.uri_prefix = s->uri_prefix;\n} else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n    p->conf.timeout = s->timeout;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.7994603483281462, -2.7428394483281462, -2.4794348213281454, -2.2146533213281456, -3.4784757213281456, -2.9544450213281461, -2.2268893483281458, -3.1067019793281458, -3.4784757213281456, -2.9544450213281461, -3.4784757213281456, -2.9544450213281461, -2.9015308483281457, -2.9015308483281457, -2.6345707213281457, -2.1105400213281458, -2.334137348328146, -3.0006430483281461, -2.5636780483281454, -3.4075830483281457, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454, -2.5636780483281454]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-2.6917971444281452, -3.6351762444281466, -3.3717716174281458, -3.1069901174281456, -4.3708125174281456, -3.8467818174281461, -3.1192261444281462, -3.9990387754281462, -4.3708125174281456, -3.8467818174281461, -4.3708125174281456, -3.8467818174281461, -3.7938676444281465, -3.7938676444281465, -3.5269075174281461, -3.0028768174281462, -3.2264741444281464, -3.8929798444281465, -3.4560148444281467, -4.2999198444281461, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467, -3.4560148444281467]
								}]
						}]
				}, {
					"line":	179,
					"switches":	[{
							"switch":	10,
							"types":	[[], [], [], [], [183, 184, 185], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], [], [], [], [176, 177, 178, 179, 180, 181, 182], [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], [], [], [], [], [], []],
							"begin_line":	180,
							"begin_column":	1,
							"end_line":	180,
							"end_column":	1,
							"patch_codes":	["memset(&dc->childs, 0, sizeof (*(&dc->childs)))", "memset(&dc->comp, 0, sizeof (*(&dc->comp)))", "memset(&dc->comp_key, 0, sizeof (*(&dc->comp_key)))", "memset(&dc->cond, 0, sizeof (*(&dc->cond)))", "memset(&dc->context_ndx, 0, sizeof (*(&dc->context_ndx)))", "memset(&dc->copy, 0, sizeof (*(&dc->copy)))", "memset(&dc->free, 0, sizeof (*(&dc->free)))", "memset(&dc->insert_dup, 0, sizeof (*(&dc->insert_dup)))", "memset(&dc->is_index_key, 0, sizeof (*(&dc->is_index_key)))", "memset(&dc->key, 0, sizeof (*(&dc->key)))", "memset(&dc->next, 0, sizeof (*(&dc->next)))", "memset(&dc->op, 0, sizeof (*(&dc->op)))", "memset(&dc->parent, 0, sizeof (*(&dc->parent)))", "memset(&dc->prev, 0, sizeof (*(&dc->prev)))", "memset(&dc->print, 0, sizeof (*(&dc->print)))", "memset(&dc->regex, 0, sizeof (*(&dc->regex)))", "memset(&dc->regex_study, 0, sizeof (*(&dc->regex_study)))", "memset(&dc->reset, 0, sizeof (*(&dc->reset)))", "memset(&dc->string, 0, sizeof (*(&dc->string)))", "memset(&dc->type, 0, sizeof (*(&dc->type)))", "memset(&dc->value, 0, sizeof (*(&dc->value)))", "memset(&dc->value->data, 0, sizeof (*(&dc->value->data)))", "memset(&dc->value->is_weakref, 0, sizeof (*(&dc->value->is_weakref)))", "memset(&dc->value->next_power_of_2, 0, sizeof (*(&dc->value->next_power_of_2)))", "memset(&dc->value->size, 0, sizeof (*(&dc->value->size)))", "memset(&dc->value->sorted, 0, sizeof (*(&dc->value->sorted)))", "memset(&dc->value->unique_ndx, 0, sizeof (*(&dc->value->unique_ndx)))", "memset(&dc->value->used, 0, sizeof (*(&dc->value->used)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&s->doc_root, 0, sizeof (*(&s->doc_root)))", "memset(&s->secret, 0, sizeof (*(&s->secret)))", "memset(&s->timeout, 0, sizeof (*(&s->timeout)))", "memset(&s->uri_prefix, 0, sizeof (*(&s->uri_prefix)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_context->data, 0, sizeof (*(&srv->config_context->data)))", "memset(&srv->config_context->is_weakref, 0, sizeof (*(&srv->config_context->is_weakref)))", "memset(&srv->config_context->next_power_of_2, 0, sizeof (*(&srv->config_context->next_power_of_2)))", "memset(&srv->config_context->size, 0, sizeof (*(&srv->config_context->size)))", "memset(&srv->config_context->sorted, 0, sizeof (*(&srv->config_context->sorted)))", "memset(&srv->config_context->unique_ndx, 0, sizeof (*(&srv->config_context->unique_ndx)))", "memset(&srv->config_context->used, 0, sizeof (*(&srv->config_context->used)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(dc, 0, sizeof (*(dc)))", "memset(dc->childs, 0, sizeof (*(dc->childs)))", "memset(dc->comp_key, 0, sizeof (*(dc->comp_key)))", "memset(dc->copy, 0, sizeof (*(dc->copy)))", "memset(dc->free, 0, sizeof (*(dc->free)))", "memset(dc->insert_dup, 0, sizeof (*(dc->insert_dup)))", "memset(dc->key, 0, sizeof (*(dc->key)))", "memset(dc->next, 0, sizeof (*(dc->next)))", "memset(dc->op, 0, sizeof (*(dc->op)))", "memset(dc->parent, 0, sizeof (*(dc->parent)))", "memset(dc->prev, 0, sizeof (*(dc->prev)))", "memset(dc->print, 0, sizeof (*(dc->print)))", "memset(dc->regex, 0, sizeof (*(dc->regex)))", "memset(dc->regex_study, 0, sizeof (*(dc->regex_study)))", "memset(dc->reset, 0, sizeof (*(dc->reset)))", "memset(dc->string, 0, sizeof (*(dc->string)))", "memset(dc->value, 0, sizeof (*(dc->value)))", "memset(dc->value->data, 0, sizeof (*(dc->value->data)))", "memset(dc->value->sorted, 0, sizeof (*(dc->value->sorted)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(s, 0, sizeof (*(s)))", "memset(s->doc_root, 0, sizeof (*(s->doc_root)))", "memset(s->secret, 0, sizeof (*(s->secret)))", "memset(s->uri_prefix, 0, sizeof (*(s->uri_prefix)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_context->data, 0, sizeof (*(srv->config_context->data)))", "memset(srv->config_context->sorted, 0, sizeof (*(srv->config_context->sorted)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "buffer_free((p)->md5)", "buffer_free((s)->doc_root)", "buffer_free((s)->secret)", "buffer_free((s)->uri_prefix)", "free((p))", "free((p)->config_storage)", "free((s))", "p->conf.doc_root = (s)->doc_root", "p->conf.secret = (s)->secret", "p->conf.timeout = (0)", "p->conf.timeout = (1)", "p->conf.timeout = (s)->timeout", "p->conf.uri_prefix = (s)->uri_prefix", "s = (p)->config_storage[i]", "s = (s)", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "p->conf.doc_root = s->doc_root", "p->conf.secret = s->secret", "p->conf.timeout = s->timeout", "p->conf.uri_prefix = s->uri_prefix", "s = p->config_storage[i]", "if (__is_neg(\"\", \"L180\", 35, &(j), sizeof (j), &(dc), sizeof (dc), &(dc->value), sizeof (dc->value), &(dc->value->used), sizeof (dc->value->used), &(dc->value->data), sizeof (dc->value->data), &(srv), sizeof (srv), &(con), sizeof (con), &(p), sizeof (p), &(s), sizeof (s), &(i), sizeof (i), &(dc->type), sizeof (dc->type), &(dc->key), sizeof (dc->key), &(dc->is_index_key), sizeof (dc->is_index_key), &(dc->copy), sizeof (dc->copy), &(dc->free), sizeof (dc->free), &(dc->reset), sizeof (dc->reset), &(dc->insert_dup), sizeof (dc->insert_dup), &(dc->print), sizeof (dc->print), &(dc->comp_key), sizeof (dc->comp_key), &(dc->comp), sizeof (dc->comp), &(dc->cond), sizeof (dc->cond), &(dc->op), sizeof (dc->op), &(dc->context_ndx), sizeof (dc->context_ndx), &(dc->childs), sizeof (dc->childs), &(dc->parent), sizeof (dc->parent), &(dc->prev), sizeof (dc->prev), &(dc->next), sizeof (dc->next), &(dc->string), sizeof (dc->string), &(dc->regex), sizeof (dc->regex), &(dc->regex_study), sizeof (dc->regex_study), &(dc->value->sorted), sizeof (dc->value->sorted), &(dc->value->size), sizeof (dc->value->size), &(dc->value->unique_ndx), sizeof (dc->value->unique_ndx), &(dc->value->next_power_of_2), sizeof (dc->value->next_power_of_2), &(dc->value->is_weakref), sizeof (dc->value->is_weakref)))\n    break;\n", "if (__is_neg(\"\", \"L180\", 35, &(j), sizeof (j), &(dc), sizeof (dc), &(dc->value), sizeof (dc->value), &(dc->value->used), sizeof (dc->value->used), &(dc->value->data), sizeof (dc->value->data), &(srv), sizeof (srv), &(con), sizeof (con), &(p), sizeof (p), &(s), sizeof (s), &(i), sizeof (i), &(dc->type), sizeof (dc->type), &(dc->key), sizeof (dc->key), &(dc->is_index_key), sizeof (dc->is_index_key), &(dc->copy), sizeof (dc->copy), &(dc->free), sizeof (dc->free), &(dc->reset), sizeof (dc->reset), &(dc->insert_dup), sizeof (dc->insert_dup), &(dc->print), sizeof (dc->print), &(dc->comp_key), sizeof (dc->comp_key), &(dc->comp), sizeof (dc->comp), &(dc->cond), sizeof (dc->cond), &(dc->op), sizeof (dc->op), &(dc->context_ndx), sizeof (dc->context_ndx), &(dc->childs), sizeof (dc->childs), &(dc->parent), sizeof (dc->parent), &(dc->prev), sizeof (dc->prev), &(dc->next), sizeof (dc->next), &(dc->string), sizeof (dc->string), &(dc->regex), sizeof (dc->regex), &(dc->regex_study), sizeof (dc->regex_study), &(dc->value->sorted), sizeof (dc->value->sorted), &(dc->value->size), sizeof (dc->value->size), &(dc->value->unique_ndx), sizeof (dc->value->unique_ndx), &(dc->value->next_power_of_2), sizeof (dc->value->next_power_of_2), &(dc->value->is_weakref), sizeof (dc->value->is_weakref)))\n    return 0;\n", "if (__is_neg(\"\", \"L180\", 35, &(j), sizeof (j), &(dc), sizeof (dc), &(dc->value), sizeof (dc->value), &(dc->value->used), sizeof (dc->value->used), &(dc->value->data), sizeof (dc->value->data), &(srv), sizeof (srv), &(con), sizeof (con), &(p), sizeof (p), &(s), sizeof (s), &(i), sizeof (i), &(dc->type), sizeof (dc->type), &(dc->key), sizeof (dc->key), &(dc->is_index_key), sizeof (dc->is_index_key), &(dc->copy), sizeof (dc->copy), &(dc->free), sizeof (dc->free), &(dc->reset), sizeof (dc->reset), &(dc->insert_dup), sizeof (dc->insert_dup), &(dc->print), sizeof (dc->print), &(dc->comp_key), sizeof (dc->comp_key), &(dc->comp), sizeof (dc->comp), &(dc->cond), sizeof (dc->cond), &(dc->op), sizeof (dc->op), &(dc->context_ndx), sizeof (dc->context_ndx), &(dc->childs), sizeof (dc->childs), &(dc->parent), sizeof (dc->parent), &(dc->prev), sizeof (dc->prev), &(dc->next), sizeof (dc->next), &(dc->string), sizeof (dc->string), &(dc->regex), sizeof (dc->regex), &(dc->regex_study), sizeof (dc->regex_study), &(dc->value->sorted), sizeof (dc->value->sorted), &(dc->value->size), sizeof (dc->value->size), &(dc->value->unique_ndx), sizeof (dc->value->unique_ndx), &(dc->value->next_power_of_2), sizeof (dc->value->next_power_of_2), &(dc->value->is_weakref), sizeof (dc->value->is_weakref)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.93236176161452]
								}, {
									"case":	2,
									"scores":	[-7.93236176161452]
								}, {
									"case":	3,
									"scores":	[-7.93236176161452]
								}, {
									"case":	4,
									"scores":	[-7.93236176161452]
								}, {
									"case":	5,
									"scores":	[-7.93236176161452]
								}, {
									"case":	6,
									"scores":	[-7.93236176161452]
								}, {
									"case":	7,
									"scores":	[-7.93236176161452]
								}, {
									"case":	8,
									"scores":	[-7.93236176161452]
								}, {
									"case":	9,
									"scores":	[-7.93236176161452]
								}, {
									"case":	10,
									"scores":	[-7.93236176161452]
								}, {
									"case":	11,
									"scores":	[-7.93236176161452]
								}, {
									"case":	12,
									"scores":	[-7.93236176161452]
								}, {
									"case":	13,
									"scores":	[-7.93236176161452]
								}, {
									"case":	14,
									"scores":	[-7.93236176161452]
								}, {
									"case":	15,
									"scores":	[-7.93236176161452]
								}, {
									"case":	16,
									"scores":	[-7.93236176161452]
								}, {
									"case":	17,
									"scores":	[-7.93236176161452]
								}, {
									"case":	18,
									"scores":	[-7.93236176161452]
								}, {
									"case":	19,
									"scores":	[-7.93236176161452]
								}, {
									"case":	20,
									"scores":	[-7.93236176161452]
								}, {
									"case":	21,
									"scores":	[-7.93236176161452]
								}, {
									"case":	22,
									"scores":	[-7.93236176161452]
								}, {
									"case":	23,
									"scores":	[-7.93236176161452]
								}, {
									"case":	24,
									"scores":	[-7.93236176161452]
								}, {
									"case":	25,
									"scores":	[-7.93236176161452]
								}, {
									"case":	26,
									"scores":	[-7.93236176161452]
								}, {
									"case":	27,
									"scores":	[-7.93236176161452]
								}, {
									"case":	28,
									"scores":	[-7.93236176161452]
								}, {
									"case":	29,
									"scores":	[-7.93236176161452]
								}, {
									"case":	30,
									"scores":	[-7.93236176161452]
								}, {
									"case":	31,
									"scores":	[-7.93236176161452]
								}, {
									"case":	32,
									"scores":	[-7.93236176161452]
								}, {
									"case":	33,
									"scores":	[-7.93236176161452]
								}, {
									"case":	34,
									"scores":	[-7.93236176161452]
								}, {
									"case":	35,
									"scores":	[-7.93236176161452]
								}, {
									"case":	36,
									"scores":	[-7.93236176161452]
								}, {
									"case":	37,
									"scores":	[-7.93236176161452]
								}, {
									"case":	38,
									"scores":	[-7.93236176161452]
								}, {
									"case":	39,
									"scores":	[-7.93236176161452]
								}, {
									"case":	40,
									"scores":	[-7.93236176161452]
								}, {
									"case":	41,
									"scores":	[-7.93236176161452]
								}, {
									"case":	42,
									"scores":	[-7.93236176161452]
								}, {
									"case":	43,
									"scores":	[-7.93236176161452]
								}, {
									"case":	44,
									"scores":	[-7.93236176161452]
								}, {
									"case":	45,
									"scores":	[-7.93236176161452]
								}, {
									"case":	46,
									"scores":	[-7.93236176161452]
								}, {
									"case":	47,
									"scores":	[-7.93236176161452]
								}, {
									"case":	48,
									"scores":	[-7.93236176161452]
								}, {
									"case":	49,
									"scores":	[-7.93236176161452]
								}, {
									"case":	50,
									"scores":	[-7.93236176161452]
								}, {
									"case":	51,
									"scores":	[-7.93236176161452]
								}, {
									"case":	52,
									"scores":	[-7.93236176161452]
								}, {
									"case":	53,
									"scores":	[-7.93236176161452]
								}, {
									"case":	54,
									"scores":	[-7.93236176161452]
								}, {
									"case":	55,
									"scores":	[-7.93236176161452]
								}, {
									"case":	56,
									"scores":	[-7.93236176161452]
								}, {
									"case":	57,
									"scores":	[-7.93236176161452]
								}, {
									"case":	58,
									"scores":	[-7.93236176161452]
								}, {
									"case":	59,
									"scores":	[-7.93236176161452]
								}, {
									"case":	60,
									"scores":	[-7.93236176161452]
								}, {
									"case":	61,
									"scores":	[-7.93236176161452]
								}, {
									"case":	62,
									"scores":	[-7.93236176161452]
								}, {
									"case":	63,
									"scores":	[-7.93236176161452]
								}, {
									"case":	64,
									"scores":	[-7.93236176161452]
								}, {
									"case":	65,
									"scores":	[-7.93236176161452]
								}, {
									"case":	66,
									"scores":	[-7.93236176161452]
								}, {
									"case":	67,
									"scores":	[-7.93236176161452]
								}, {
									"case":	68,
									"scores":	[-7.93236176161452]
								}, {
									"case":	69,
									"scores":	[-7.93236176161452]
								}, {
									"case":	70,
									"scores":	[-7.93236176161452]
								}, {
									"case":	71,
									"scores":	[-7.93236176161452]
								}, {
									"case":	72,
									"scores":	[-7.93236176161452]
								}, {
									"case":	73,
									"scores":	[-7.93236176161452]
								}, {
									"case":	74,
									"scores":	[-7.93236176161452]
								}, {
									"case":	75,
									"scores":	[-7.93236176161452]
								}, {
									"case":	76,
									"scores":	[-7.93236176161452]
								}, {
									"case":	77,
									"scores":	[-7.93236176161452]
								}, {
									"case":	78,
									"scores":	[-7.93236176161452]
								}, {
									"case":	79,
									"scores":	[-7.93236176161452]
								}, {
									"case":	80,
									"scores":	[-7.93236176161452]
								}, {
									"case":	81,
									"scores":	[-7.93236176161452]
								}, {
									"case":	82,
									"scores":	[-7.93236176161452]
								}, {
									"case":	83,
									"scores":	[-7.93236176161452]
								}, {
									"case":	84,
									"scores":	[-7.93236176161452]
								}, {
									"case":	85,
									"scores":	[-7.93236176161452]
								}, {
									"case":	86,
									"scores":	[-7.93236176161452]
								}, {
									"case":	87,
									"scores":	[-7.93236176161452]
								}, {
									"case":	88,
									"scores":	[-7.93236176161452]
								}, {
									"case":	89,
									"scores":	[-7.93236176161452]
								}, {
									"case":	90,
									"scores":	[-7.93236176161452]
								}, {
									"case":	91,
									"scores":	[-7.93236176161452]
								}, {
									"case":	92,
									"scores":	[-7.93236176161452]
								}, {
									"case":	93,
									"scores":	[-7.93236176161452]
								}, {
									"case":	94,
									"scores":	[-7.93236176161452]
								}, {
									"case":	95,
									"scores":	[-7.93236176161452]
								}, {
									"case":	96,
									"scores":	[-7.93236176161452]
								}, {
									"case":	97,
									"scores":	[-7.93236176161452]
								}, {
									"case":	98,
									"scores":	[-7.93236176161452]
								}, {
									"case":	99,
									"scores":	[-7.93236176161452]
								}, {
									"case":	100,
									"scores":	[-7.93236176161452]
								}, {
									"case":	101,
									"scores":	[-7.93236176161452]
								}, {
									"case":	102,
									"scores":	[-7.93236176161452]
								}, {
									"case":	103,
									"scores":	[-7.93236176161452]
								}, {
									"case":	104,
									"scores":	[-7.93236176161452]
								}, {
									"case":	105,
									"scores":	[-7.93236176161452]
								}, {
									"case":	106,
									"scores":	[-7.93236176161452]
								}, {
									"case":	107,
									"scores":	[-7.93236176161452]
								}, {
									"case":	108,
									"scores":	[-7.93236176161452]
								}, {
									"case":	109,
									"scores":	[-7.93236176161452]
								}, {
									"case":	110,
									"scores":	[-7.93236176161452]
								}, {
									"case":	111,
									"scores":	[-7.93236176161452]
								}, {
									"case":	112,
									"scores":	[-7.93236176161452]
								}, {
									"case":	113,
									"scores":	[-7.93236176161452]
								}, {
									"case":	114,
									"scores":	[-7.93236176161452]
								}, {
									"case":	115,
									"scores":	[-7.93236176161452]
								}, {
									"case":	116,
									"scores":	[-7.93236176161452]
								}, {
									"case":	117,
									"scores":	[-7.93236176161452]
								}, {
									"case":	118,
									"scores":	[-7.93236176161452]
								}, {
									"case":	119,
									"scores":	[-7.93236176161452]
								}, {
									"case":	120,
									"scores":	[-7.93236176161452]
								}, {
									"case":	121,
									"scores":	[-7.93236176161452]
								}, {
									"case":	122,
									"scores":	[-7.93236176161452]
								}, {
									"case":	123,
									"scores":	[-7.93236176161452]
								}, {
									"case":	124,
									"scores":	[-7.93236176161452]
								}, {
									"case":	125,
									"scores":	[-7.93236176161452]
								}, {
									"case":	126,
									"scores":	[-7.93236176161452]
								}, {
									"case":	127,
									"scores":	[-7.93236176161452]
								}, {
									"case":	128,
									"scores":	[-7.93236176161452]
								}, {
									"case":	129,
									"scores":	[-7.93236176161452]
								}, {
									"case":	130,
									"scores":	[-7.93236176161452]
								}, {
									"case":	131,
									"scores":	[-7.93236176161452]
								}, {
									"case":	132,
									"scores":	[-7.93236176161452]
								}, {
									"case":	133,
									"scores":	[-7.93236176161452]
								}, {
									"case":	134,
									"scores":	[-7.93236176161452]
								}, {
									"case":	135,
									"scores":	[-7.93236176161452]
								}, {
									"case":	136,
									"scores":	[-7.93236176161452]
								}, {
									"case":	137,
									"scores":	[-7.93236176161452]
								}, {
									"case":	138,
									"scores":	[-7.93236176161452]
								}, {
									"case":	139,
									"scores":	[-7.93236176161452]
								}, {
									"case":	140,
									"scores":	[-7.93236176161452]
								}, {
									"case":	141,
									"scores":	[-7.93236176161452]
								}, {
									"case":	142,
									"scores":	[-7.93236176161452]
								}, {
									"case":	143,
									"scores":	[-7.93236176161452]
								}, {
									"case":	144,
									"scores":	[-7.93236176161452]
								}, {
									"case":	145,
									"scores":	[-7.93236176161452]
								}, {
									"case":	146,
									"scores":	[-7.93236176161452]
								}, {
									"case":	147,
									"scores":	[-7.93236176161452]
								}, {
									"case":	148,
									"scores":	[-7.93236176161452]
								}, {
									"case":	149,
									"scores":	[-7.93236176161452]
								}, {
									"case":	150,
									"scores":	[-7.93236176161452]
								}, {
									"case":	151,
									"scores":	[-7.93236176161452]
								}, {
									"case":	152,
									"scores":	[-7.93236176161452]
								}, {
									"case":	153,
									"scores":	[-7.93236176161452]
								}, {
									"case":	154,
									"scores":	[-7.93236176161452]
								}, {
									"case":	155,
									"scores":	[-7.93236176161452]
								}, {
									"case":	156,
									"scores":	[-7.93236176161452]
								}, {
									"case":	157,
									"scores":	[-7.93236176161452]
								}, {
									"case":	158,
									"scores":	[-7.93236176161452]
								}, {
									"case":	159,
									"scores":	[-7.93236176161452]
								}, {
									"case":	160,
									"scores":	[-7.93236176161452]
								}, {
									"case":	161,
									"scores":	[-7.93236176161452]
								}, {
									"case":	162,
									"scores":	[-7.93236176161452]
								}, {
									"case":	163,
									"scores":	[-7.93236176161452]
								}, {
									"case":	164,
									"scores":	[-7.93236176161452]
								}, {
									"case":	165,
									"scores":	[-7.93236176161452]
								}, {
									"case":	166,
									"scores":	[-7.93236176161452]
								}, {
									"case":	167,
									"scores":	[-7.93236176161452]
								}, {
									"case":	168,
									"scores":	[-7.93236176161452]
								}, {
									"case":	169,
									"scores":	[-7.93236176161452]
								}, {
									"case":	170,
									"scores":	[-7.93236176161452]
								}, {
									"case":	171,
									"scores":	[-7.93236176161452]
								}, {
									"case":	172,
									"scores":	[-7.93236176161452]
								}, {
									"case":	173,
									"scores":	[-7.93236176161452]
								}, {
									"case":	174,
									"scores":	[-7.93236176161452]
								}, {
									"case":	175,
									"scores":	[-7.93236176161452]
								}, {
									"case":	176,
									"scores":	[-7.93236176161452]
								}, {
									"case":	177,
									"scores":	[-7.93236176161452]
								}, {
									"case":	178,
									"scores":	[-7.93236176161452]
								}, {
									"case":	179,
									"scores":	[-7.93236176161452]
								}, {
									"case":	180,
									"scores":	[-7.93236176161452]
								}, {
									"case":	181,
									"scores":	[-7.93236176161452]
								}, {
									"case":	182,
									"scores":	[-7.93236176161452]
								}, {
									"case":	183,
									"scores":	[-8.91872567571452, -9.55715376731452, -10.13997439761452, -9.48957652361452, -10.03069240861452, -10.969967023314519, -10.358311323314519, -9.14205644761452, -6.46115390761452, -10.151725002614519, -10.573237113614519, -10.763869113614518, -10.573237113614519, -10.573237113614519, -10.573237113614519, -10.573237113614519, -10.573237113614519, -10.573237113614519, -10.763869113614518, -10.573237113614519, -10.573237113614519, -10.763869113614518, -10.573237113614519, -10.763869113614518, -10.763869113614518, -10.763869113614518, -10.763869113614518, -10.763869113614518, -10.763869113614518, -10.763869113614518, -10.662659813614519, -10.573237113614519, -10.573237113614519, -10.573237113614519, -10.573237113614519]
								}, {
									"case":	184,
									"scores":	[-9.01863387571452, -9.65706196731452, -10.239882597614519, -9.58948472361452, -10.13060060861452, -11.069875223314519, -10.458219523314519, -9.24196464761452, -6.56106210761452, -10.251633202614519, -10.673145313614519, -10.86377731361452, -10.673145313614519, -10.673145313614519, -10.673145313614519, -10.673145313614519, -10.673145313614519, -10.673145313614519, -10.86377731361452, -10.673145313614519, -10.673145313614519, -10.86377731361452, -10.673145313614519, -10.86377731361452, -10.86377731361452, -10.86377731361452, -10.86377731361452, -10.86377731361452, -10.86377731361452, -10.86377731361452, -10.762568013614519, -10.673145313614519, -10.673145313614519, -10.673145313614519, -10.673145313614519]
								}, {
									"case":	185,
									"scores":	[-11.28141567571452, -11.91984376731452, -12.50266439761452, -11.852266523614519, -12.393382408614521, -13.332657023314519, -12.721001323314519, -11.504746447614519, -8.82384390761452, -12.51441500261452, -12.93592711361452, -13.126559113614519, -12.93592711361452, -12.93592711361452, -12.93592711361452, -12.93592711361452, -12.93592711361452, -12.93592711361452, -13.126559113614519, -12.93592711361452, -12.93592711361452, -13.126559113614519, -12.93592711361452, -13.126559113614519, -13.126559113614519, -13.126559113614519, -13.126559113614519, -13.126559113614519, -13.126559113614519, -13.126559113614519, -13.02534981361452, -12.93592711361452, -12.93592711361452, -12.93592711361452, -12.93592711361452]
								}]
						}, {
							"switch":	27,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	180,
							"begin_column":	3,
							"end_line":	192,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L180\", 35, &(j), sizeof (j), &(dc), sizeof (dc), &(dc->value), sizeof (dc->value), &(dc->value->used), sizeof (dc->value->used), &(dc->value->data), sizeof (dc->value->data), &(srv), sizeof (srv), &(con), sizeof (con), &(p), sizeof (p), &(s), sizeof (s), &(i), sizeof (i), &(dc->type), sizeof (dc->type), &(dc->key), sizeof (dc->key), &(dc->is_index_key), sizeof (dc->is_index_key), &(dc->copy), sizeof (dc->copy), &(dc->free), sizeof (dc->free), &(dc->reset), sizeof (dc->reset), &(dc->insert_dup), sizeof (dc->insert_dup), &(dc->print), sizeof (dc->print), &(dc->comp_key), sizeof (dc->comp_key), &(dc->comp), sizeof (dc->comp), &(dc->cond), sizeof (dc->cond), &(dc->op), sizeof (dc->op), &(dc->context_ndx), sizeof (dc->context_ndx), &(dc->childs), sizeof (dc->childs), &(dc->parent), sizeof (dc->parent), &(dc->prev), sizeof (dc->prev), &(dc->next), sizeof (dc->next), &(dc->string), sizeof (dc->string), &(dc->regex), sizeof (dc->regex), &(dc->regex_study), sizeof (dc->regex_study), &(dc->value->sorted), sizeof (dc->value->sorted), &(dc->value->size), sizeof (dc->value->size), &(dc->value->unique_ndx), sizeof (dc->value->unique_ndx), &(dc->value->next_power_of_2), sizeof (dc->value->next_power_of_2), &(dc->value->is_weakref), sizeof (dc->value->is_weakref)))\n    for (j = 0; j < dc->value->used; j++) {\n        data_unset *du = dc->value->data[j];\n        if (buffer_is_equal_string(du->key, \"secdownload.secret\", \"secdownload.secret\" ? sizeof (\"secdownload.secret\") - 1 : 0)) {\n            p->conf.secret = s->secret;\n        } else if (buffer_is_equal_string(du->key, \"secdownload.document-root\", \"secdownload.document-root\" ? sizeof (\"secdownload.document-root\") - 1 : 0)) {\n            p->conf.doc_root = s->doc_root;\n        } else if (buffer_is_equal_string(du->key, \"secdownload.uri-prefix\", \"secdownload.uri-prefix\" ? sizeof (\"secdownload.uri-prefix\") - 1 : 0)) {\n            p->conf.uri_prefix = s->uri_prefix;\n        } else if (buffer_is_equal_string(du->key, \"secdownload.timeout\", \"secdownload.timeout\" ? sizeof (\"secdownload.timeout\") - 1 : 0)) {\n            p->conf.timeout = s->timeout;\n        }\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.40311325761452, -10.572357871314519, -11.355264251614519, -9.34115025161452, -9.58049725161452, -10.704935002314519, -10.234982371314519, -10.079481955614519, -8.84681867161452, -9.89827685161452, -9.90920225161452, -10.753107251614519, -9.90920225161452, -9.90920225161452, -9.90920225161452, -9.90920225161452, -9.90920225161452, -9.90920225161452, -10.753107251614519, -9.90920225161452, -9.90920225161452, -10.753107251614519, -9.90920225161452, -10.753107251614519, -10.753107251614519, -10.753107251614519, -10.753107251614519, -10.753107251614519, -10.753107251614519, -10.753107251614519, -10.346167251614519, -9.90920225161452, -9.90920225161452, -9.90920225161452, -9.90920225161452]
								}]
						}]
				}, {
					"line":	211,
					"switches":	[{
							"switch":	28,
							"types":	[[], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], [], [], [], [], [], []],
							"begin_line":	212,
							"begin_column":	0,
							"end_line":	212,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 0;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 16;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 1;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 213;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 219;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 225;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 234;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 244;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 251;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 261;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 268;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 282;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 310;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 324;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 32;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 403;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 408;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 4;\n", "if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	2,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	3,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	4,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	5,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	6,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	7,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	8,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	9,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	10,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	11,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	12,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	13,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	14,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	15,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	16,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	17,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	18,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	19,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	20,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	21,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	22,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	23,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	24,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	25,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	26,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	27,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	28,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	29,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	30,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	31,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	32,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	33,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	34,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	35,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	36,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	37,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	38,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	39,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	40,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	41,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	42,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	43,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	44,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	45,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	46,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	47,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	48,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	49,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	50,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	51,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	52,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	53,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	54,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	55,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	56,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	57,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	58,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	59,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	60,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	61,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	62,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	63,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	64,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	65,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	66,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	67,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	68,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	69,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	70,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	71,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	72,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	73,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	74,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	75,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	76,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	77,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	78,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	79,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	80,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	81,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	82,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	83,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	84,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	85,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	86,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	87,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	88,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	89,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	90,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	91,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	92,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	93,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	94,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	95,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	96,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	97,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	98,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	99,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	100,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	101,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	102,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	103,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	104,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	105,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	106,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	107,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	108,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	109,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	110,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	111,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	112,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	113,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	114,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	115,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	116,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	117,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	118,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	119,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	120,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	121,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	122,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	123,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	124,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	125,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	126,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	127,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	128,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	129,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	130,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	131,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	132,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	133,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	134,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	135,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	136,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	137,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	138,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	139,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	140,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	141,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	142,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	143,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	144,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	145,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	146,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	147,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	148,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	149,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	150,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	151,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	152,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	153,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	154,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	155,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	156,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	157,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	158,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	159,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	160,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	161,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	162,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	163,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	164,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	165,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	166,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	167,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	168,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	169,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	170,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	171,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	172,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	173,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	174,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	175,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	176,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	177,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	178,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	179,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	180,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	181,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	182,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	183,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	184,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	185,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	186,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	187,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	188,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	189,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	190,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	191,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	192,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	193,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	194,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	195,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	196,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	197,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	198,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	199,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	200,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	201,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	202,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	203,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	204,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	205,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	206,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	207,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	208,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	209,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	210,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	211,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	212,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	213,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	214,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	215,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	216,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	217,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	218,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	219,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	220,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	221,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	222,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	223,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	224,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	225,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	226,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	227,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	228,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	229,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	230,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	231,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	232,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	233,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	234,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	235,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	236,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	237,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	238,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	239,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	240,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	241,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	242,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	243,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	244,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	245,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	246,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	247,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	248,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	249,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	250,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	251,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	252,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	253,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	254,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	255,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	256,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	257,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	258,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	259,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	260,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	261,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	262,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	263,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	264,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	265,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	266,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	267,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	268,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	269,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	270,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	271,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	272,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	273,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	274,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	275,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	276,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	277,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	278,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	279,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	280,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	281,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	282,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	283,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	284,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	285,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	286,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	287,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	288,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	289,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	290,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	291,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	292,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	293,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	294,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	295,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	296,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	297,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	298,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	299,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	300,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	301,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	302,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	303,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	304,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	305,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	306,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	307,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	308,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	309,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	310,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	311,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	312,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	313,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	314,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	315,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	316,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	317,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	318,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	319,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	320,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	321,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	322,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	323,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	324,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	325,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	326,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	327,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	328,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	329,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	330,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	331,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	332,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	333,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	334,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	335,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	336,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	337,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	338,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	339,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	340,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	341,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	342,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	343,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	344,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	345,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	346,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	347,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	348,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	349,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	350,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	351,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	352,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	353,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	354,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	355,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	356,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	357,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	358,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	359,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	360,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	361,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	362,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	363,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	364,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	365,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	366,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	367,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	368,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	369,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	370,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	371,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	372,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	373,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	374,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	375,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	376,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	377,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	378,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	379,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	380,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	381,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	382,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	383,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	384,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	385,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	386,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	387,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	388,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	389,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	390,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	391,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	392,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	393,
									"scores":	[-8.63366527374861, -7.5189126200486145, -9.3763176737486127, -8.60431562974861, -9.8837366137486136, -8.6665604200486133, -7.8206593600486132, -7.6433965200486131, -7.6433965200486131, -8.0458578200486137, -7.5539738200486131, -8.3273574200486138, -7.6433965200486131, -8.5179894200486146, -8.3273574200486138, -8.4167801200486139]
								}, {
									"case":	394,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	395,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	396,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	397,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	398,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	399,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	400,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	401,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	402,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	403,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	404,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	405,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	406,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	407,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	408,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	409,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	410,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}, {
									"case":	411,
									"scores":	[-10.896447073748615, -9.7816944200486144, -11.639099473748612, -10.867097429748615, -12.146518413748613, -10.929342220048614, -10.083441160048615, -9.906178320048614, -9.906178320048614, -10.308639620048613, -9.8167556200486139, -10.590139220048613, -9.906178320048614, -10.780771220048614, -10.590139220048613, -10.679561920048613]
								}]
						}, {
							"switch":	29,
							"types":	[[14], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], []],
							"begin_line":	212,
							"begin_column":	2,
							"end_line":	216,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage))) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if ((buffer_is_empty(p->conf.secret)) || __is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage))) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_free(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_init_buffer(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_isalnum(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_isalpha(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_isdigit(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_isxdigit(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_reset(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_to_lower(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_to_upper(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_urldecode_path(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_urldecode_query(p->conf.secret)) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n", "if ((buffer_is_empty(p->conf.secret)) && !__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage))) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9208457841281454, -5.0612568684281456, -6.5177228531281468, -5.7491685881281462, -7.0229162841281454, -5.1515550684281459, -4.8130082684281454, -4.5482267684281457, -4.5482267684281457, -4.6525547684281463, -4.1112617684281458, -4.8820954684281457, -4.5482267684281457, -5.726000468428146, -4.8820954684281457, -5.3190604684281464]
								}, {
									"case":	2,
									"scores":	[-5.3371376191281463, -4.4775487034281456, -5.934014688128145, -5.1654604231281454, -6.4392081191281463, -4.5678469034281459, -4.2293001034281454, -3.9645186034281457, -3.9645186034281457, -4.0688466034281454, -3.5275536034281454, -4.2983873034281457, -3.9645186034281457, -5.1422923034281451, -4.2983873034281457, -4.7353523034281455]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-5.3371376191281463, -4.4775487034281456, -5.934014688128145, -5.1654604231281454, -6.4392081191281463, -4.5678469034281459, -4.2293001034281454, -3.9645186034281457, -3.9645186034281457, -4.0688466034281454, -3.5275536034281454, -4.2983873034281457, -3.9645186034281457, -5.1422923034281451, -4.2983873034281457, -4.7353523034281455]
								}]
						}, {
							"switch":	30,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	212,
							"begin_column":	2,
							"end_line":	216,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    if (buffer_is_empty(p->conf.secret)) {\n        log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n        return HANDLER_ERROR;\n    }\n", "if (!__is_neg(\"\", \"L212\", 16, &(p), sizeof (p), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(con), sizeof (con), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)) && (buffer_is_empty(p->conf.secret))) {\n    log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\");\n    return HANDLER_ERROR;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3213301157486139, -6.4617412000486141, -7.9182071847486135, -7.1496529197486129, -8.42340061574861, -6.5520394000486135, -6.2134926000486139, -5.9487111000486133, -5.9487111000486133, -6.053039100048613, -5.5117461000486134, -6.2825798000486133, -5.9487111000486133, -7.1264848000486136, -6.2825798000486133, -6.7195448000486131]
								}, {
									"case":	2,
									"scores":	[-6.5601856777486134, -5.7005967620486135, -7.157062746748613, -6.3885084817486133, -7.6622561777486133, -5.790894962048613, -5.4523481620486134, -5.1875666620486136, -5.1875666620486136, -5.2918946620486134, -4.7506016620486129, -5.5214353620486136, -5.1875666620486136, -6.3653403620486131, -5.5214353620486136, -5.9584003620486126]
								}]
						}]
				}, {
					"line":	217,
					"switches":	[{
							"switch":	31,
							"types":	[[], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], [], [], [], [], [], []],
							"begin_line":	218,
							"begin_column":	0,
							"end_line":	218,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 0;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 16;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 1;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 213;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 219;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 225;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 234;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 244;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 251;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 261;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 268;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 282;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 310;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 324;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 32;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 403;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 408;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 4;\n", "if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.376685273731094]
								}, {
									"case":	2,
									"scores":	[-4.376685273731094]
								}, {
									"case":	3,
									"scores":	[-4.376685273731094]
								}, {
									"case":	4,
									"scores":	[-4.376685273731094]
								}, {
									"case":	5,
									"scores":	[-4.376685273731094]
								}, {
									"case":	6,
									"scores":	[-4.376685273731094]
								}, {
									"case":	7,
									"scores":	[-4.376685273731094]
								}, {
									"case":	8,
									"scores":	[-4.376685273731094]
								}, {
									"case":	9,
									"scores":	[-4.376685273731094]
								}, {
									"case":	10,
									"scores":	[-4.376685273731094]
								}, {
									"case":	11,
									"scores":	[-4.376685273731094]
								}, {
									"case":	12,
									"scores":	[-4.376685273731094]
								}, {
									"case":	13,
									"scores":	[-4.376685273731094]
								}, {
									"case":	14,
									"scores":	[-4.376685273731094]
								}, {
									"case":	15,
									"scores":	[-4.376685273731094]
								}, {
									"case":	16,
									"scores":	[-4.376685273731094]
								}, {
									"case":	17,
									"scores":	[-4.376685273731094]
								}, {
									"case":	18,
									"scores":	[-4.376685273731094]
								}, {
									"case":	19,
									"scores":	[-4.376685273731094]
								}, {
									"case":	20,
									"scores":	[-4.376685273731094]
								}, {
									"case":	21,
									"scores":	[-4.376685273731094]
								}, {
									"case":	22,
									"scores":	[-4.376685273731094]
								}, {
									"case":	23,
									"scores":	[-4.376685273731094]
								}, {
									"case":	24,
									"scores":	[-4.376685273731094]
								}, {
									"case":	25,
									"scores":	[-4.376685273731094]
								}, {
									"case":	26,
									"scores":	[-4.376685273731094]
								}, {
									"case":	27,
									"scores":	[-4.376685273731094]
								}, {
									"case":	28,
									"scores":	[-4.376685273731094]
								}, {
									"case":	29,
									"scores":	[-4.376685273731094]
								}, {
									"case":	30,
									"scores":	[-4.376685273731094]
								}, {
									"case":	31,
									"scores":	[-4.376685273731094]
								}, {
									"case":	32,
									"scores":	[-4.376685273731094]
								}, {
									"case":	33,
									"scores":	[-4.376685273731094]
								}, {
									"case":	34,
									"scores":	[-4.376685273731094]
								}, {
									"case":	35,
									"scores":	[-4.376685273731094]
								}, {
									"case":	36,
									"scores":	[-4.376685273731094]
								}, {
									"case":	37,
									"scores":	[-4.376685273731094]
								}, {
									"case":	38,
									"scores":	[-4.376685273731094]
								}, {
									"case":	39,
									"scores":	[-4.376685273731094]
								}, {
									"case":	40,
									"scores":	[-4.376685273731094]
								}, {
									"case":	41,
									"scores":	[-4.376685273731094]
								}, {
									"case":	42,
									"scores":	[-4.376685273731094]
								}, {
									"case":	43,
									"scores":	[-4.376685273731094]
								}, {
									"case":	44,
									"scores":	[-4.376685273731094]
								}, {
									"case":	45,
									"scores":	[-4.376685273731094]
								}, {
									"case":	46,
									"scores":	[-4.376685273731094]
								}, {
									"case":	47,
									"scores":	[-4.376685273731094]
								}, {
									"case":	48,
									"scores":	[-4.376685273731094]
								}, {
									"case":	49,
									"scores":	[-4.376685273731094]
								}, {
									"case":	50,
									"scores":	[-4.376685273731094]
								}, {
									"case":	51,
									"scores":	[-4.376685273731094]
								}, {
									"case":	52,
									"scores":	[-4.376685273731094]
								}, {
									"case":	53,
									"scores":	[-4.376685273731094]
								}, {
									"case":	54,
									"scores":	[-4.376685273731094]
								}, {
									"case":	55,
									"scores":	[-4.376685273731094]
								}, {
									"case":	56,
									"scores":	[-4.376685273731094]
								}, {
									"case":	57,
									"scores":	[-4.376685273731094]
								}, {
									"case":	58,
									"scores":	[-4.376685273731094]
								}, {
									"case":	59,
									"scores":	[-4.376685273731094]
								}, {
									"case":	60,
									"scores":	[-4.376685273731094]
								}, {
									"case":	61,
									"scores":	[-4.376685273731094]
								}, {
									"case":	62,
									"scores":	[-4.376685273731094]
								}, {
									"case":	63,
									"scores":	[-4.376685273731094]
								}, {
									"case":	64,
									"scores":	[-4.376685273731094]
								}, {
									"case":	65,
									"scores":	[-4.376685273731094]
								}, {
									"case":	66,
									"scores":	[-4.376685273731094]
								}, {
									"case":	67,
									"scores":	[-4.376685273731094]
								}, {
									"case":	68,
									"scores":	[-4.376685273731094]
								}, {
									"case":	69,
									"scores":	[-4.376685273731094]
								}, {
									"case":	70,
									"scores":	[-4.376685273731094]
								}, {
									"case":	71,
									"scores":	[-4.376685273731094]
								}, {
									"case":	72,
									"scores":	[-4.376685273731094]
								}, {
									"case":	73,
									"scores":	[-4.376685273731094]
								}, {
									"case":	74,
									"scores":	[-4.376685273731094]
								}, {
									"case":	75,
									"scores":	[-4.376685273731094]
								}, {
									"case":	76,
									"scores":	[-4.376685273731094]
								}, {
									"case":	77,
									"scores":	[-4.376685273731094]
								}, {
									"case":	78,
									"scores":	[-4.376685273731094]
								}, {
									"case":	79,
									"scores":	[-4.376685273731094]
								}, {
									"case":	80,
									"scores":	[-4.376685273731094]
								}, {
									"case":	81,
									"scores":	[-4.376685273731094]
								}, {
									"case":	82,
									"scores":	[-4.376685273731094]
								}, {
									"case":	83,
									"scores":	[-4.376685273731094]
								}, {
									"case":	84,
									"scores":	[-4.376685273731094]
								}, {
									"case":	85,
									"scores":	[-4.376685273731094]
								}, {
									"case":	86,
									"scores":	[-4.376685273731094]
								}, {
									"case":	87,
									"scores":	[-4.376685273731094]
								}, {
									"case":	88,
									"scores":	[-4.376685273731094]
								}, {
									"case":	89,
									"scores":	[-4.376685273731094]
								}, {
									"case":	90,
									"scores":	[-4.376685273731094]
								}, {
									"case":	91,
									"scores":	[-4.376685273731094]
								}, {
									"case":	92,
									"scores":	[-4.376685273731094]
								}, {
									"case":	93,
									"scores":	[-4.376685273731094]
								}, {
									"case":	94,
									"scores":	[-4.376685273731094]
								}, {
									"case":	95,
									"scores":	[-4.376685273731094]
								}, {
									"case":	96,
									"scores":	[-4.376685273731094]
								}, {
									"case":	97,
									"scores":	[-4.376685273731094]
								}, {
									"case":	98,
									"scores":	[-4.376685273731094]
								}, {
									"case":	99,
									"scores":	[-4.376685273731094]
								}, {
									"case":	100,
									"scores":	[-4.376685273731094]
								}, {
									"case":	101,
									"scores":	[-4.376685273731094]
								}, {
									"case":	102,
									"scores":	[-4.376685273731094]
								}, {
									"case":	103,
									"scores":	[-4.376685273731094]
								}, {
									"case":	104,
									"scores":	[-4.376685273731094]
								}, {
									"case":	105,
									"scores":	[-4.376685273731094]
								}, {
									"case":	106,
									"scores":	[-4.376685273731094]
								}, {
									"case":	107,
									"scores":	[-4.376685273731094]
								}, {
									"case":	108,
									"scores":	[-4.376685273731094]
								}, {
									"case":	109,
									"scores":	[-4.376685273731094]
								}, {
									"case":	110,
									"scores":	[-4.376685273731094]
								}, {
									"case":	111,
									"scores":	[-4.376685273731094]
								}, {
									"case":	112,
									"scores":	[-4.376685273731094]
								}, {
									"case":	113,
									"scores":	[-4.376685273731094]
								}, {
									"case":	114,
									"scores":	[-4.376685273731094]
								}, {
									"case":	115,
									"scores":	[-4.376685273731094]
								}, {
									"case":	116,
									"scores":	[-4.376685273731094]
								}, {
									"case":	117,
									"scores":	[-4.376685273731094]
								}, {
									"case":	118,
									"scores":	[-4.376685273731094]
								}, {
									"case":	119,
									"scores":	[-4.376685273731094]
								}, {
									"case":	120,
									"scores":	[-4.376685273731094]
								}, {
									"case":	121,
									"scores":	[-4.376685273731094]
								}, {
									"case":	122,
									"scores":	[-4.376685273731094]
								}, {
									"case":	123,
									"scores":	[-4.376685273731094]
								}, {
									"case":	124,
									"scores":	[-4.376685273731094]
								}, {
									"case":	125,
									"scores":	[-4.376685273731094]
								}, {
									"case":	126,
									"scores":	[-4.376685273731094]
								}, {
									"case":	127,
									"scores":	[-4.376685273731094]
								}, {
									"case":	128,
									"scores":	[-4.376685273731094]
								}, {
									"case":	129,
									"scores":	[-4.376685273731094]
								}, {
									"case":	130,
									"scores":	[-4.376685273731094]
								}, {
									"case":	131,
									"scores":	[-4.376685273731094]
								}, {
									"case":	132,
									"scores":	[-4.376685273731094]
								}, {
									"case":	133,
									"scores":	[-4.376685273731094]
								}, {
									"case":	134,
									"scores":	[-4.376685273731094]
								}, {
									"case":	135,
									"scores":	[-4.376685273731094]
								}, {
									"case":	136,
									"scores":	[-4.376685273731094]
								}, {
									"case":	137,
									"scores":	[-4.376685273731094]
								}, {
									"case":	138,
									"scores":	[-4.376685273731094]
								}, {
									"case":	139,
									"scores":	[-4.376685273731094]
								}, {
									"case":	140,
									"scores":	[-4.376685273731094]
								}, {
									"case":	141,
									"scores":	[-4.376685273731094]
								}, {
									"case":	142,
									"scores":	[-4.376685273731094]
								}, {
									"case":	143,
									"scores":	[-4.376685273731094]
								}, {
									"case":	144,
									"scores":	[-4.376685273731094]
								}, {
									"case":	145,
									"scores":	[-4.376685273731094]
								}, {
									"case":	146,
									"scores":	[-4.376685273731094]
								}, {
									"case":	147,
									"scores":	[-4.376685273731094]
								}, {
									"case":	148,
									"scores":	[-4.376685273731094]
								}, {
									"case":	149,
									"scores":	[-4.376685273731094]
								}, {
									"case":	150,
									"scores":	[-4.376685273731094]
								}, {
									"case":	151,
									"scores":	[-4.376685273731094]
								}, {
									"case":	152,
									"scores":	[-4.376685273731094]
								}, {
									"case":	153,
									"scores":	[-4.376685273731094]
								}, {
									"case":	154,
									"scores":	[-4.376685273731094]
								}, {
									"case":	155,
									"scores":	[-4.376685273731094]
								}, {
									"case":	156,
									"scores":	[-4.376685273731094]
								}, {
									"case":	157,
									"scores":	[-4.376685273731094]
								}, {
									"case":	158,
									"scores":	[-4.376685273731094]
								}, {
									"case":	159,
									"scores":	[-4.376685273731094]
								}, {
									"case":	160,
									"scores":	[-4.376685273731094]
								}, {
									"case":	161,
									"scores":	[-4.376685273731094]
								}, {
									"case":	162,
									"scores":	[-4.376685273731094]
								}, {
									"case":	163,
									"scores":	[-4.376685273731094]
								}, {
									"case":	164,
									"scores":	[-4.376685273731094]
								}, {
									"case":	165,
									"scores":	[-4.376685273731094]
								}, {
									"case":	166,
									"scores":	[-4.376685273731094]
								}, {
									"case":	167,
									"scores":	[-4.376685273731094]
								}, {
									"case":	168,
									"scores":	[-4.376685273731094]
								}, {
									"case":	169,
									"scores":	[-4.376685273731094]
								}, {
									"case":	170,
									"scores":	[-4.376685273731094]
								}, {
									"case":	171,
									"scores":	[-4.376685273731094]
								}, {
									"case":	172,
									"scores":	[-4.376685273731094]
								}, {
									"case":	173,
									"scores":	[-4.376685273731094]
								}, {
									"case":	174,
									"scores":	[-4.376685273731094]
								}, {
									"case":	175,
									"scores":	[-4.376685273731094]
								}, {
									"case":	176,
									"scores":	[-4.376685273731094]
								}, {
									"case":	177,
									"scores":	[-4.376685273731094]
								}, {
									"case":	178,
									"scores":	[-4.376685273731094]
								}, {
									"case":	179,
									"scores":	[-4.376685273731094]
								}, {
									"case":	180,
									"scores":	[-4.376685273731094]
								}, {
									"case":	181,
									"scores":	[-4.376685273731094]
								}, {
									"case":	182,
									"scores":	[-4.376685273731094]
								}, {
									"case":	183,
									"scores":	[-4.376685273731094]
								}, {
									"case":	184,
									"scores":	[-4.376685273731094]
								}, {
									"case":	185,
									"scores":	[-4.376685273731094]
								}, {
									"case":	186,
									"scores":	[-4.376685273731094]
								}, {
									"case":	187,
									"scores":	[-4.376685273731094]
								}, {
									"case":	188,
									"scores":	[-4.376685273731094]
								}, {
									"case":	189,
									"scores":	[-4.376685273731094]
								}, {
									"case":	190,
									"scores":	[-4.376685273731094]
								}, {
									"case":	191,
									"scores":	[-4.376685273731094]
								}, {
									"case":	192,
									"scores":	[-4.376685273731094]
								}, {
									"case":	193,
									"scores":	[-4.376685273731094]
								}, {
									"case":	194,
									"scores":	[-4.376685273731094]
								}, {
									"case":	195,
									"scores":	[-4.376685273731094]
								}, {
									"case":	196,
									"scores":	[-4.376685273731094]
								}, {
									"case":	197,
									"scores":	[-4.376685273731094]
								}, {
									"case":	198,
									"scores":	[-4.376685273731094]
								}, {
									"case":	199,
									"scores":	[-4.376685273731094]
								}, {
									"case":	200,
									"scores":	[-4.376685273731094]
								}, {
									"case":	201,
									"scores":	[-4.376685273731094]
								}, {
									"case":	202,
									"scores":	[-4.376685273731094]
								}, {
									"case":	203,
									"scores":	[-4.376685273731094]
								}, {
									"case":	204,
									"scores":	[-4.376685273731094]
								}, {
									"case":	205,
									"scores":	[-4.376685273731094]
								}, {
									"case":	206,
									"scores":	[-4.376685273731094]
								}, {
									"case":	207,
									"scores":	[-4.376685273731094]
								}, {
									"case":	208,
									"scores":	[-4.376685273731094]
								}, {
									"case":	209,
									"scores":	[-4.376685273731094]
								}, {
									"case":	210,
									"scores":	[-4.376685273731094]
								}, {
									"case":	211,
									"scores":	[-4.376685273731094]
								}, {
									"case":	212,
									"scores":	[-4.376685273731094]
								}, {
									"case":	213,
									"scores":	[-4.376685273731094]
								}, {
									"case":	214,
									"scores":	[-4.376685273731094]
								}, {
									"case":	215,
									"scores":	[-4.376685273731094]
								}, {
									"case":	216,
									"scores":	[-4.376685273731094]
								}, {
									"case":	217,
									"scores":	[-4.376685273731094]
								}, {
									"case":	218,
									"scores":	[-4.376685273731094]
								}, {
									"case":	219,
									"scores":	[-4.376685273731094]
								}, {
									"case":	220,
									"scores":	[-4.376685273731094]
								}, {
									"case":	221,
									"scores":	[-4.376685273731094]
								}, {
									"case":	222,
									"scores":	[-4.376685273731094]
								}, {
									"case":	223,
									"scores":	[-4.376685273731094]
								}, {
									"case":	224,
									"scores":	[-4.376685273731094]
								}, {
									"case":	225,
									"scores":	[-4.376685273731094]
								}, {
									"case":	226,
									"scores":	[-4.376685273731094]
								}, {
									"case":	227,
									"scores":	[-4.376685273731094]
								}, {
									"case":	228,
									"scores":	[-4.376685273731094]
								}, {
									"case":	229,
									"scores":	[-4.376685273731094]
								}, {
									"case":	230,
									"scores":	[-4.376685273731094]
								}, {
									"case":	231,
									"scores":	[-4.376685273731094]
								}, {
									"case":	232,
									"scores":	[-4.376685273731094]
								}, {
									"case":	233,
									"scores":	[-4.376685273731094]
								}, {
									"case":	234,
									"scores":	[-4.376685273731094]
								}, {
									"case":	235,
									"scores":	[-4.376685273731094]
								}, {
									"case":	236,
									"scores":	[-4.376685273731094]
								}, {
									"case":	237,
									"scores":	[-4.376685273731094]
								}, {
									"case":	238,
									"scores":	[-4.376685273731094]
								}, {
									"case":	239,
									"scores":	[-4.376685273731094]
								}, {
									"case":	240,
									"scores":	[-4.376685273731094]
								}, {
									"case":	241,
									"scores":	[-4.376685273731094]
								}, {
									"case":	242,
									"scores":	[-4.376685273731094]
								}, {
									"case":	243,
									"scores":	[-4.376685273731094]
								}, {
									"case":	244,
									"scores":	[-4.376685273731094]
								}, {
									"case":	245,
									"scores":	[-4.376685273731094]
								}, {
									"case":	246,
									"scores":	[-4.376685273731094]
								}, {
									"case":	247,
									"scores":	[-4.376685273731094]
								}, {
									"case":	248,
									"scores":	[-4.376685273731094]
								}, {
									"case":	249,
									"scores":	[-4.376685273731094]
								}, {
									"case":	250,
									"scores":	[-4.376685273731094]
								}, {
									"case":	251,
									"scores":	[-4.376685273731094]
								}, {
									"case":	252,
									"scores":	[-4.376685273731094]
								}, {
									"case":	253,
									"scores":	[-4.376685273731094]
								}, {
									"case":	254,
									"scores":	[-4.376685273731094]
								}, {
									"case":	255,
									"scores":	[-4.376685273731094]
								}, {
									"case":	256,
									"scores":	[-4.376685273731094]
								}, {
									"case":	257,
									"scores":	[-4.376685273731094]
								}, {
									"case":	258,
									"scores":	[-4.376685273731094]
								}, {
									"case":	259,
									"scores":	[-4.376685273731094]
								}, {
									"case":	260,
									"scores":	[-4.376685273731094]
								}, {
									"case":	261,
									"scores":	[-4.376685273731094]
								}, {
									"case":	262,
									"scores":	[-4.376685273731094]
								}, {
									"case":	263,
									"scores":	[-4.376685273731094]
								}, {
									"case":	264,
									"scores":	[-4.376685273731094]
								}, {
									"case":	265,
									"scores":	[-4.376685273731094]
								}, {
									"case":	266,
									"scores":	[-4.376685273731094]
								}, {
									"case":	267,
									"scores":	[-4.376685273731094]
								}, {
									"case":	268,
									"scores":	[-4.376685273731094]
								}, {
									"case":	269,
									"scores":	[-4.376685273731094]
								}, {
									"case":	270,
									"scores":	[-4.376685273731094]
								}, {
									"case":	271,
									"scores":	[-4.376685273731094]
								}, {
									"case":	272,
									"scores":	[-4.376685273731094]
								}, {
									"case":	273,
									"scores":	[-4.376685273731094]
								}, {
									"case":	274,
									"scores":	[-4.376685273731094]
								}, {
									"case":	275,
									"scores":	[-4.376685273731094]
								}, {
									"case":	276,
									"scores":	[-4.376685273731094]
								}, {
									"case":	277,
									"scores":	[-4.376685273731094]
								}, {
									"case":	278,
									"scores":	[-4.376685273731094]
								}, {
									"case":	279,
									"scores":	[-4.376685273731094]
								}, {
									"case":	280,
									"scores":	[-4.376685273731094]
								}, {
									"case":	281,
									"scores":	[-4.376685273731094]
								}, {
									"case":	282,
									"scores":	[-4.376685273731094]
								}, {
									"case":	283,
									"scores":	[-4.376685273731094]
								}, {
									"case":	284,
									"scores":	[-4.376685273731094]
								}, {
									"case":	285,
									"scores":	[-4.376685273731094]
								}, {
									"case":	286,
									"scores":	[-4.376685273731094]
								}, {
									"case":	287,
									"scores":	[-4.376685273731094]
								}, {
									"case":	288,
									"scores":	[-4.376685273731094]
								}, {
									"case":	289,
									"scores":	[-4.376685273731094]
								}, {
									"case":	290,
									"scores":	[-4.376685273731094]
								}, {
									"case":	291,
									"scores":	[-4.376685273731094]
								}, {
									"case":	292,
									"scores":	[-4.376685273731094]
								}, {
									"case":	293,
									"scores":	[-4.376685273731094]
								}, {
									"case":	294,
									"scores":	[-4.376685273731094]
								}, {
									"case":	295,
									"scores":	[-4.376685273731094]
								}, {
									"case":	296,
									"scores":	[-4.376685273731094]
								}, {
									"case":	297,
									"scores":	[-4.376685273731094]
								}, {
									"case":	298,
									"scores":	[-4.376685273731094]
								}, {
									"case":	299,
									"scores":	[-4.376685273731094]
								}, {
									"case":	300,
									"scores":	[-4.376685273731094]
								}, {
									"case":	301,
									"scores":	[-4.376685273731094]
								}, {
									"case":	302,
									"scores":	[-4.376685273731094]
								}, {
									"case":	303,
									"scores":	[-4.376685273731094]
								}, {
									"case":	304,
									"scores":	[-4.376685273731094]
								}, {
									"case":	305,
									"scores":	[-4.376685273731094]
								}, {
									"case":	306,
									"scores":	[-4.376685273731094]
								}, {
									"case":	307,
									"scores":	[-4.376685273731094]
								}, {
									"case":	308,
									"scores":	[-4.376685273731094]
								}, {
									"case":	309,
									"scores":	[-4.376685273731094]
								}, {
									"case":	310,
									"scores":	[-4.376685273731094]
								}, {
									"case":	311,
									"scores":	[-4.376685273731094]
								}, {
									"case":	312,
									"scores":	[-4.376685273731094]
								}, {
									"case":	313,
									"scores":	[-4.376685273731094]
								}, {
									"case":	314,
									"scores":	[-4.376685273731094]
								}, {
									"case":	315,
									"scores":	[-4.376685273731094]
								}, {
									"case":	316,
									"scores":	[-4.376685273731094]
								}, {
									"case":	317,
									"scores":	[-4.376685273731094]
								}, {
									"case":	318,
									"scores":	[-4.376685273731094]
								}, {
									"case":	319,
									"scores":	[-4.376685273731094]
								}, {
									"case":	320,
									"scores":	[-4.376685273731094]
								}, {
									"case":	321,
									"scores":	[-4.376685273731094]
								}, {
									"case":	322,
									"scores":	[-4.376685273731094]
								}, {
									"case":	323,
									"scores":	[-4.376685273731094]
								}, {
									"case":	324,
									"scores":	[-4.376685273731094]
								}, {
									"case":	325,
									"scores":	[-4.376685273731094]
								}, {
									"case":	326,
									"scores":	[-4.376685273731094]
								}, {
									"case":	327,
									"scores":	[-4.376685273731094]
								}, {
									"case":	328,
									"scores":	[-4.376685273731094]
								}, {
									"case":	329,
									"scores":	[-4.376685273731094]
								}, {
									"case":	330,
									"scores":	[-4.376685273731094]
								}, {
									"case":	331,
									"scores":	[-4.376685273731094]
								}, {
									"case":	332,
									"scores":	[-4.376685273731094]
								}, {
									"case":	333,
									"scores":	[-4.376685273731094]
								}, {
									"case":	334,
									"scores":	[-4.376685273731094]
								}, {
									"case":	335,
									"scores":	[-4.376685273731094]
								}, {
									"case":	336,
									"scores":	[-4.376685273731094]
								}, {
									"case":	337,
									"scores":	[-4.376685273731094]
								}, {
									"case":	338,
									"scores":	[-4.376685273731094]
								}, {
									"case":	339,
									"scores":	[-4.376685273731094]
								}, {
									"case":	340,
									"scores":	[-4.376685273731094]
								}, {
									"case":	341,
									"scores":	[-4.376685273731094]
								}, {
									"case":	342,
									"scores":	[-4.376685273731094]
								}, {
									"case":	343,
									"scores":	[-4.376685273731094]
								}, {
									"case":	344,
									"scores":	[-4.376685273731094]
								}, {
									"case":	345,
									"scores":	[-4.376685273731094]
								}, {
									"case":	346,
									"scores":	[-4.376685273731094]
								}, {
									"case":	347,
									"scores":	[-4.376685273731094]
								}, {
									"case":	348,
									"scores":	[-4.376685273731094]
								}, {
									"case":	349,
									"scores":	[-4.376685273731094]
								}, {
									"case":	350,
									"scores":	[-4.376685273731094]
								}, {
									"case":	351,
									"scores":	[-4.376685273731094]
								}, {
									"case":	352,
									"scores":	[-4.376685273731094]
								}, {
									"case":	353,
									"scores":	[-4.376685273731094]
								}, {
									"case":	354,
									"scores":	[-4.376685273731094]
								}, {
									"case":	355,
									"scores":	[-4.376685273731094]
								}, {
									"case":	356,
									"scores":	[-4.376685273731094]
								}, {
									"case":	357,
									"scores":	[-4.376685273731094]
								}, {
									"case":	358,
									"scores":	[-4.376685273731094]
								}, {
									"case":	359,
									"scores":	[-4.376685273731094]
								}, {
									"case":	360,
									"scores":	[-4.376685273731094]
								}, {
									"case":	361,
									"scores":	[-4.376685273731094]
								}, {
									"case":	362,
									"scores":	[-4.376685273731094]
								}, {
									"case":	363,
									"scores":	[-4.376685273731094]
								}, {
									"case":	364,
									"scores":	[-4.376685273731094]
								}, {
									"case":	365,
									"scores":	[-4.376685273731094]
								}, {
									"case":	366,
									"scores":	[-4.376685273731094]
								}, {
									"case":	367,
									"scores":	[-4.376685273731094]
								}, {
									"case":	368,
									"scores":	[-4.376685273731094]
								}, {
									"case":	369,
									"scores":	[-4.376685273731094]
								}, {
									"case":	370,
									"scores":	[-4.376685273731094]
								}, {
									"case":	371,
									"scores":	[-4.376685273731094]
								}, {
									"case":	372,
									"scores":	[-4.376685273731094]
								}, {
									"case":	373,
									"scores":	[-4.376685273731094]
								}, {
									"case":	374,
									"scores":	[-4.376685273731094]
								}, {
									"case":	375,
									"scores":	[-4.376685273731094]
								}, {
									"case":	376,
									"scores":	[-4.376685273731094]
								}, {
									"case":	377,
									"scores":	[-4.376685273731094]
								}, {
									"case":	378,
									"scores":	[-4.376685273731094]
								}, {
									"case":	379,
									"scores":	[-4.376685273731094]
								}, {
									"case":	380,
									"scores":	[-4.376685273731094]
								}, {
									"case":	381,
									"scores":	[-4.376685273731094]
								}, {
									"case":	382,
									"scores":	[-4.376685273731094]
								}, {
									"case":	383,
									"scores":	[-4.376685273731094]
								}, {
									"case":	384,
									"scores":	[-4.376685273731094]
								}, {
									"case":	385,
									"scores":	[-4.376685273731094]
								}, {
									"case":	386,
									"scores":	[-4.376685273731094]
								}, {
									"case":	387,
									"scores":	[-4.376685273731094]
								}, {
									"case":	388,
									"scores":	[-4.376685273731094]
								}, {
									"case":	389,
									"scores":	[-4.376685273731094]
								}, {
									"case":	390,
									"scores":	[-4.376685273731094]
								}, {
									"case":	391,
									"scores":	[-4.376685273731094]
								}, {
									"case":	392,
									"scores":	[-4.376685273731094]
								}, {
									"case":	393,
									"scores":	[-9.03171397643109, -8.0044749127310943, -9.6701296164310939, -9.1941146824310938, -9.7743663764310931, -9.0898779224310928, -8.3062216527310948, -8.4230738327310952, -8.1289588127310957, -8.5314201127310945, -8.0395361127310956, -8.8129197127310945, -8.1289588127310957, -9.0035517127310953, -8.8129197127310945, -8.9023424127310946]
								}, {
									"case":	394,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	395,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	396,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	397,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	398,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	399,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	400,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	401,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	402,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	403,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	404,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	405,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	406,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	407,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	408,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	409,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	410,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}, {
									"case":	411,
									"scores":	[-11.294495776431095, -10.267256712731095, -11.932911416431093, -11.456896482431095, -12.037148176431096, -11.352659722431095, -10.569003452731096, -10.685855632731094, -10.391740612731095, -10.794201912731094, -10.302317912731095, -11.075701512731094, -10.391740612731095, -11.266333512731094, -11.075701512731094, -11.165124212731094]
								}]
						}, {
							"switch":	32,
							"types":	[[14], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], []],
							"begin_line":	218,
							"begin_column":	2,
							"end_line":	222,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage))) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if ((buffer_is_empty(p->conf.doc_root)) || __is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage))) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_free(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_init_buffer(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_isalnum(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_isalpha(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_isdigit(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_isxdigit(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_reset(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_to_lower(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_to_upper(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_urldecode_path(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if (buffer_urldecode_query(p->conf.doc_root)) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n", "if ((buffer_is_empty(p->conf.doc_root)) && !__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage))) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1057022841281468, -4.3994381684281461, -4.9005311531281466, -5.0521090881281463, -5.7025793531281463, -5.0873498881281458, -4.1511895684281459, -3.852959786428146, -3.8864080684281461, -3.9907360684281463, -3.4494430684281463, -4.2202767684281461, -3.8864080684281461, -5.0641817684281465, -4.2202767684281461, -4.657241768428146]
								}, {
									"case":	2,
									"scores":	[-4.8544576751281463, -4.1481935594281465, -4.649286544128147, -4.8008644791281458, -5.4513347441281459, -4.8361052791281463, -3.8999449594281459, -3.6017151774281464, -3.6351634594281461, -3.7394914594281459, -3.1981984594281458, -3.9690321594281461, -3.6351634594281461, -4.812937159428146, -3.9690321594281461, -4.4059971594281464]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-4.8544576751281463, -4.1481935594281465, -4.649286544128147, -4.8008644791281458, -5.4513347441281459, -4.8361052791281463, -3.8999449594281459, -3.6017151774281464, -3.6351634594281461, -3.7394914594281459, -3.1981984594281458, -3.9690321594281461, -3.6351634594281461, -4.812937159428146, -3.9690321594281461, -4.4059971594281464]
								}]
						}, {
							"switch":	33,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	218,
							"begin_column":	2,
							"end_line":	222,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    if (buffer_is_empty(p->conf.doc_root)) {\n        log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n        return HANDLER_ERROR;\n    }\n", "if (!__is_neg(\"\", \"L218\", 16, &(p), sizeof (p), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(con), sizeof (con), &(p->conf.secret), sizeof (p->conf.secret), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(md5_str), sizeof (md5_str), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)) && (buffer_is_empty(p->conf.doc_root))) {\n    log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\");\n    return HANDLER_ERROR;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.1322825084310937, -6.4260183927310939, -6.9271113774310944, -7.0786893124310932, -7.7291595774310942, -7.1139301124310936, -6.1777697927310937, -5.8795400107310929, -5.9129882927310931, -6.0173162927310937, -5.4760232927310941, -6.246856992731094, -5.9129882927310931, -7.0907619927310934, -6.246856992731094, -6.6838219927310938]
								}, {
									"case":	2,
									"scores":	[-5.8611860264310938, -5.154921910731094, -5.6560148954310945, -5.8075928304310942, -6.4580630954310942, -5.8428336304310937, -4.9066733107310938, -4.6084435287310939, -4.641891810731094, -4.7462198107310938, -4.2049268107310933, -4.975760510731094, -4.641891810731094, -5.8196655107310935, -4.975760510731094, -5.4127255107310939]
								}]
						}]
				}, {
					"line":	224,
					"switches":	[{
							"switch":	36,
							"types":	[[], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], [], [], [], [], [], []],
							"begin_line":	225,
							"begin_column":	1,
							"end_line":	225,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 0;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 16;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 1;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 213;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 219;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 225;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 234;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 244;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 251;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 261;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 268;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 282;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 310;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 324;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 32;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 403;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 408;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 4;\n", "if (__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2,
									"scores":	[-4.336279859096055]
								}, {
									"case":	3,
									"scores":	[-4.336279859096055]
								}, {
									"case":	4,
									"scores":	[-4.336279859096055]
								}, {
									"case":	5,
									"scores":	[-4.336279859096055]
								}, {
									"case":	6,
									"scores":	[-4.336279859096055]
								}, {
									"case":	7,
									"scores":	[-4.336279859096055]
								}, {
									"case":	8,
									"scores":	[-4.336279859096055]
								}, {
									"case":	9,
									"scores":	[-4.336279859096055]
								}, {
									"case":	10,
									"scores":	[-4.336279859096055]
								}, {
									"case":	11,
									"scores":	[-4.336279859096055]
								}, {
									"case":	12,
									"scores":	[-4.336279859096055]
								}, {
									"case":	13,
									"scores":	[-4.336279859096055]
								}, {
									"case":	14,
									"scores":	[-4.336279859096055]
								}, {
									"case":	15,
									"scores":	[-4.336279859096055]
								}, {
									"case":	16,
									"scores":	[-4.336279859096055]
								}, {
									"case":	17,
									"scores":	[-4.336279859096055]
								}, {
									"case":	18,
									"scores":	[-4.336279859096055]
								}, {
									"case":	19,
									"scores":	[-4.336279859096055]
								}, {
									"case":	20,
									"scores":	[-4.336279859096055]
								}, {
									"case":	21,
									"scores":	[-4.336279859096055]
								}, {
									"case":	22,
									"scores":	[-4.336279859096055]
								}, {
									"case":	23,
									"scores":	[-4.336279859096055]
								}, {
									"case":	24,
									"scores":	[-4.336279859096055]
								}, {
									"case":	25,
									"scores":	[-4.336279859096055]
								}, {
									"case":	26,
									"scores":	[-4.336279859096055]
								}, {
									"case":	27,
									"scores":	[-4.336279859096055]
								}, {
									"case":	28,
									"scores":	[-4.336279859096055]
								}, {
									"case":	29,
									"scores":	[-4.336279859096055]
								}, {
									"case":	30,
									"scores":	[-4.336279859096055]
								}, {
									"case":	31,
									"scores":	[-4.336279859096055]
								}, {
									"case":	32,
									"scores":	[-4.336279859096055]
								}, {
									"case":	33,
									"scores":	[-4.336279859096055]
								}, {
									"case":	34,
									"scores":	[-4.336279859096055]
								}, {
									"case":	35,
									"scores":	[-4.336279859096055]
								}, {
									"case":	36,
									"scores":	[-4.336279859096055]
								}, {
									"case":	37,
									"scores":	[-4.336279859096055]
								}, {
									"case":	38,
									"scores":	[-4.336279859096055]
								}, {
									"case":	39,
									"scores":	[-4.336279859096055]
								}, {
									"case":	40,
									"scores":	[-4.336279859096055]
								}, {
									"case":	41,
									"scores":	[-4.336279859096055]
								}, {
									"case":	42,
									"scores":	[-4.336279859096055]
								}, {
									"case":	43,
									"scores":	[-4.336279859096055]
								}, {
									"case":	44,
									"scores":	[-4.336279859096055]
								}, {
									"case":	45,
									"scores":	[-4.336279859096055]
								}, {
									"case":	46,
									"scores":	[-4.336279859096055]
								}, {
									"case":	47,
									"scores":	[-4.336279859096055]
								}, {
									"case":	48,
									"scores":	[-4.336279859096055]
								}, {
									"case":	49,
									"scores":	[-4.336279859096055]
								}, {
									"case":	50,
									"scores":	[-4.336279859096055]
								}, {
									"case":	51,
									"scores":	[-4.336279859096055]
								}, {
									"case":	52,
									"scores":	[-4.336279859096055]
								}, {
									"case":	53,
									"scores":	[-4.336279859096055]
								}, {
									"case":	54,
									"scores":	[-4.336279859096055]
								}, {
									"case":	55,
									"scores":	[-4.336279859096055]
								}, {
									"case":	56,
									"scores":	[-4.336279859096055]
								}, {
									"case":	57,
									"scores":	[-4.336279859096055]
								}, {
									"case":	58,
									"scores":	[-4.336279859096055]
								}, {
									"case":	59,
									"scores":	[-4.336279859096055]
								}, {
									"case":	60,
									"scores":	[-4.336279859096055]
								}, {
									"case":	61,
									"scores":	[-4.336279859096055]
								}, {
									"case":	62,
									"scores":	[-4.336279859096055]
								}, {
									"case":	63,
									"scores":	[-4.336279859096055]
								}, {
									"case":	64,
									"scores":	[-4.336279859096055]
								}, {
									"case":	65,
									"scores":	[-4.336279859096055]
								}, {
									"case":	66,
									"scores":	[-4.336279859096055]
								}, {
									"case":	67,
									"scores":	[-4.336279859096055]
								}, {
									"case":	68,
									"scores":	[-4.336279859096055]
								}, {
									"case":	69,
									"scores":	[-4.336279859096055]
								}, {
									"case":	70,
									"scores":	[-4.336279859096055]
								}, {
									"case":	71,
									"scores":	[-4.336279859096055]
								}, {
									"case":	72,
									"scores":	[-4.336279859096055]
								}, {
									"case":	73,
									"scores":	[-4.336279859096055]
								}, {
									"case":	74,
									"scores":	[-4.336279859096055]
								}, {
									"case":	75,
									"scores":	[-4.336279859096055]
								}, {
									"case":	76,
									"scores":	[-4.336279859096055]
								}, {
									"case":	77,
									"scores":	[-4.336279859096055]
								}, {
									"case":	78,
									"scores":	[-4.336279859096055]
								}, {
									"case":	79,
									"scores":	[-4.336279859096055]
								}, {
									"case":	80,
									"scores":	[-4.336279859096055]
								}, {
									"case":	81,
									"scores":	[-4.336279859096055]
								}, {
									"case":	82,
									"scores":	[-4.336279859096055]
								}, {
									"case":	83,
									"scores":	[-4.336279859096055]
								}, {
									"case":	84,
									"scores":	[-4.336279859096055]
								}, {
									"case":	85,
									"scores":	[-4.336279859096055]
								}, {
									"case":	86,
									"scores":	[-4.336279859096055]
								}, {
									"case":	87,
									"scores":	[-4.336279859096055]
								}, {
									"case":	88,
									"scores":	[-4.336279859096055]
								}, {
									"case":	89,
									"scores":	[-4.336279859096055]
								}, {
									"case":	90,
									"scores":	[-4.336279859096055]
								}, {
									"case":	91,
									"scores":	[-4.336279859096055]
								}, {
									"case":	92,
									"scores":	[-4.336279859096055]
								}, {
									"case":	93,
									"scores":	[-4.336279859096055]
								}, {
									"case":	94,
									"scores":	[-4.336279859096055]
								}, {
									"case":	95,
									"scores":	[-4.336279859096055]
								}, {
									"case":	96,
									"scores":	[-4.336279859096055]
								}, {
									"case":	97,
									"scores":	[-4.336279859096055]
								}, {
									"case":	98,
									"scores":	[-4.336279859096055]
								}, {
									"case":	99,
									"scores":	[-4.336279859096055]
								}, {
									"case":	100,
									"scores":	[-4.336279859096055]
								}, {
									"case":	101,
									"scores":	[-4.336279859096055]
								}, {
									"case":	102,
									"scores":	[-4.336279859096055]
								}, {
									"case":	103,
									"scores":	[-4.336279859096055]
								}, {
									"case":	104,
									"scores":	[-4.336279859096055]
								}, {
									"case":	105,
									"scores":	[-4.336279859096055]
								}, {
									"case":	106,
									"scores":	[-4.336279859096055]
								}, {
									"case":	107,
									"scores":	[-4.336279859096055]
								}, {
									"case":	108,
									"scores":	[-4.336279859096055]
								}, {
									"case":	109,
									"scores":	[-4.336279859096055]
								}, {
									"case":	110,
									"scores":	[-4.336279859096055]
								}, {
									"case":	111,
									"scores":	[-4.336279859096055]
								}, {
									"case":	112,
									"scores":	[-4.336279859096055]
								}, {
									"case":	113,
									"scores":	[-4.336279859096055]
								}, {
									"case":	114,
									"scores":	[-4.336279859096055]
								}, {
									"case":	115,
									"scores":	[-4.336279859096055]
								}, {
									"case":	116,
									"scores":	[-4.336279859096055]
								}, {
									"case":	117,
									"scores":	[-4.336279859096055]
								}, {
									"case":	118,
									"scores":	[-4.336279859096055]
								}, {
									"case":	119,
									"scores":	[-4.336279859096055]
								}, {
									"case":	120,
									"scores":	[-4.336279859096055]
								}, {
									"case":	121,
									"scores":	[-4.336279859096055]
								}, {
									"case":	122,
									"scores":	[-4.336279859096055]
								}, {
									"case":	123,
									"scores":	[-4.336279859096055]
								}, {
									"case":	124,
									"scores":	[-4.336279859096055]
								}, {
									"case":	125,
									"scores":	[-4.336279859096055]
								}, {
									"case":	126,
									"scores":	[-4.336279859096055]
								}, {
									"case":	127,
									"scores":	[-4.336279859096055]
								}, {
									"case":	128,
									"scores":	[-4.336279859096055]
								}, {
									"case":	129,
									"scores":	[-4.336279859096055]
								}, {
									"case":	130,
									"scores":	[-4.336279859096055]
								}, {
									"case":	131,
									"scores":	[-4.336279859096055]
								}, {
									"case":	132,
									"scores":	[-4.336279859096055]
								}, {
									"case":	133,
									"scores":	[-4.336279859096055]
								}, {
									"case":	134,
									"scores":	[-4.336279859096055]
								}, {
									"case":	135,
									"scores":	[-4.336279859096055]
								}, {
									"case":	136,
									"scores":	[-4.336279859096055]
								}, {
									"case":	137,
									"scores":	[-4.336279859096055]
								}, {
									"case":	138,
									"scores":	[-4.336279859096055]
								}, {
									"case":	139,
									"scores":	[-4.336279859096055]
								}, {
									"case":	140,
									"scores":	[-4.336279859096055]
								}, {
									"case":	141,
									"scores":	[-4.336279859096055]
								}, {
									"case":	142,
									"scores":	[-4.336279859096055]
								}, {
									"case":	143,
									"scores":	[-4.336279859096055]
								}, {
									"case":	144,
									"scores":	[-4.336279859096055]
								}, {
									"case":	145,
									"scores":	[-4.336279859096055]
								}, {
									"case":	146,
									"scores":	[-4.336279859096055]
								}, {
									"case":	147,
									"scores":	[-4.336279859096055]
								}, {
									"case":	148,
									"scores":	[-4.336279859096055]
								}, {
									"case":	149,
									"scores":	[-4.336279859096055]
								}, {
									"case":	150,
									"scores":	[-4.336279859096055]
								}, {
									"case":	151,
									"scores":	[-4.336279859096055]
								}, {
									"case":	152,
									"scores":	[-4.336279859096055]
								}, {
									"case":	153,
									"scores":	[-4.336279859096055]
								}, {
									"case":	154,
									"scores":	[-4.336279859096055]
								}, {
									"case":	155,
									"scores":	[-4.336279859096055]
								}, {
									"case":	156,
									"scores":	[-4.336279859096055]
								}, {
									"case":	157,
									"scores":	[-4.336279859096055]
								}, {
									"case":	158,
									"scores":	[-4.336279859096055]
								}, {
									"case":	159,
									"scores":	[-4.336279859096055]
								}, {
									"case":	160,
									"scores":	[-4.336279859096055]
								}, {
									"case":	161,
									"scores":	[-4.336279859096055]
								}, {
									"case":	162,
									"scores":	[-4.336279859096055]
								}, {
									"case":	163,
									"scores":	[-4.336279859096055]
								}, {
									"case":	164,
									"scores":	[-4.336279859096055]
								}, {
									"case":	165,
									"scores":	[-4.336279859096055]
								}, {
									"case":	166,
									"scores":	[-4.336279859096055]
								}, {
									"case":	167,
									"scores":	[-4.336279859096055]
								}, {
									"case":	168,
									"scores":	[-4.336279859096055]
								}, {
									"case":	169,
									"scores":	[-4.336279859096055]
								}, {
									"case":	170,
									"scores":	[-4.336279859096055]
								}, {
									"case":	171,
									"scores":	[-4.336279859096055]
								}, {
									"case":	172,
									"scores":	[-4.336279859096055]
								}, {
									"case":	173,
									"scores":	[-4.336279859096055]
								}, {
									"case":	174,
									"scores":	[-4.336279859096055]
								}, {
									"case":	175,
									"scores":	[-4.336279859096055]
								}, {
									"case":	176,
									"scores":	[-4.336279859096055]
								}, {
									"case":	177,
									"scores":	[-4.336279859096055]
								}, {
									"case":	178,
									"scores":	[-4.336279859096055]
								}, {
									"case":	179,
									"scores":	[-4.336279859096055]
								}, {
									"case":	180,
									"scores":	[-4.336279859096055]
								}, {
									"case":	181,
									"scores":	[-4.336279859096055]
								}, {
									"case":	182,
									"scores":	[-4.336279859096055]
								}, {
									"case":	183,
									"scores":	[-4.336279859096055]
								}, {
									"case":	184,
									"scores":	[-4.336279859096055]
								}, {
									"case":	185,
									"scores":	[-4.336279859096055]
								}, {
									"case":	186,
									"scores":	[-4.336279859096055]
								}, {
									"case":	187,
									"scores":	[-4.336279859096055]
								}, {
									"case":	188,
									"scores":	[-4.336279859096055]
								}, {
									"case":	189,
									"scores":	[-4.336279859096055]
								}, {
									"case":	190,
									"scores":	[-4.336279859096055]
								}, {
									"case":	191,
									"scores":	[-4.336279859096055]
								}, {
									"case":	192,
									"scores":	[-4.336279859096055]
								}, {
									"case":	193,
									"scores":	[-4.336279859096055]
								}, {
									"case":	194,
									"scores":	[-4.336279859096055]
								}, {
									"case":	195,
									"scores":	[-4.336279859096055]
								}, {
									"case":	196,
									"scores":	[-4.336279859096055]
								}, {
									"case":	197,
									"scores":	[-4.336279859096055]
								}, {
									"case":	198,
									"scores":	[-4.336279859096055]
								}, {
									"case":	199,
									"scores":	[-4.336279859096055]
								}, {
									"case":	200,
									"scores":	[-4.336279859096055]
								}, {
									"case":	201,
									"scores":	[-4.336279859096055]
								}, {
									"case":	202,
									"scores":	[-4.336279859096055]
								}, {
									"case":	203,
									"scores":	[-4.336279859096055]
								}, {
									"case":	204,
									"scores":	[-4.336279859096055]
								}, {
									"case":	205,
									"scores":	[-4.336279859096055]
								}, {
									"case":	206,
									"scores":	[-4.336279859096055]
								}, {
									"case":	207,
									"scores":	[-4.336279859096055]
								}, {
									"case":	208,
									"scores":	[-4.336279859096055]
								}, {
									"case":	209,
									"scores":	[-4.336279859096055]
								}, {
									"case":	210,
									"scores":	[-4.336279859096055]
								}, {
									"case":	211,
									"scores":	[-4.336279859096055]
								}, {
									"case":	212,
									"scores":	[-4.336279859096055]
								}, {
									"case":	213,
									"scores":	[-4.336279859096055]
								}, {
									"case":	214,
									"scores":	[-4.336279859096055]
								}, {
									"case":	215,
									"scores":	[-4.336279859096055]
								}, {
									"case":	216,
									"scores":	[-4.336279859096055]
								}, {
									"case":	217,
									"scores":	[-4.336279859096055]
								}, {
									"case":	218,
									"scores":	[-4.336279859096055]
								}, {
									"case":	219,
									"scores":	[-4.336279859096055]
								}, {
									"case":	220,
									"scores":	[-4.336279859096055]
								}, {
									"case":	221,
									"scores":	[-4.336279859096055]
								}, {
									"case":	222,
									"scores":	[-4.336279859096055]
								}, {
									"case":	223,
									"scores":	[-4.336279859096055]
								}, {
									"case":	224,
									"scores":	[-4.336279859096055]
								}, {
									"case":	225,
									"scores":	[-4.336279859096055]
								}, {
									"case":	226,
									"scores":	[-4.336279859096055]
								}, {
									"case":	227,
									"scores":	[-4.336279859096055]
								}, {
									"case":	228,
									"scores":	[-4.336279859096055]
								}, {
									"case":	229,
									"scores":	[-4.336279859096055]
								}, {
									"case":	230,
									"scores":	[-4.336279859096055]
								}, {
									"case":	231,
									"scores":	[-4.336279859096055]
								}, {
									"case":	232,
									"scores":	[-4.336279859096055]
								}, {
									"case":	233,
									"scores":	[-4.336279859096055]
								}, {
									"case":	234,
									"scores":	[-4.336279859096055]
								}, {
									"case":	235,
									"scores":	[-4.336279859096055]
								}, {
									"case":	236,
									"scores":	[-4.336279859096055]
								}, {
									"case":	237,
									"scores":	[-4.336279859096055]
								}, {
									"case":	238,
									"scores":	[-4.336279859096055]
								}, {
									"case":	239,
									"scores":	[-4.336279859096055]
								}, {
									"case":	240,
									"scores":	[-4.336279859096055]
								}, {
									"case":	241,
									"scores":	[-4.336279859096055]
								}, {
									"case":	242,
									"scores":	[-4.336279859096055]
								}, {
									"case":	243,
									"scores":	[-4.336279859096055]
								}, {
									"case":	244,
									"scores":	[-4.336279859096055]
								}, {
									"case":	245,
									"scores":	[-4.336279859096055]
								}, {
									"case":	246,
									"scores":	[-4.336279859096055]
								}, {
									"case":	247,
									"scores":	[-4.336279859096055]
								}, {
									"case":	248,
									"scores":	[-4.336279859096055]
								}, {
									"case":	249,
									"scores":	[-4.336279859096055]
								}, {
									"case":	250,
									"scores":	[-4.336279859096055]
								}, {
									"case":	251,
									"scores":	[-4.336279859096055]
								}, {
									"case":	252,
									"scores":	[-4.336279859096055]
								}, {
									"case":	253,
									"scores":	[-4.336279859096055]
								}, {
									"case":	254,
									"scores":	[-4.336279859096055]
								}, {
									"case":	255,
									"scores":	[-4.336279859096055]
								}, {
									"case":	256,
									"scores":	[-4.336279859096055]
								}, {
									"case":	257,
									"scores":	[-4.336279859096055]
								}, {
									"case":	258,
									"scores":	[-4.336279859096055]
								}, {
									"case":	259,
									"scores":	[-4.336279859096055]
								}, {
									"case":	260,
									"scores":	[-4.336279859096055]
								}, {
									"case":	261,
									"scores":	[-4.336279859096055]
								}, {
									"case":	262,
									"scores":	[-4.336279859096055]
								}, {
									"case":	263,
									"scores":	[-4.336279859096055]
								}, {
									"case":	264,
									"scores":	[-4.336279859096055]
								}, {
									"case":	265,
									"scores":	[-4.336279859096055]
								}, {
									"case":	266,
									"scores":	[-4.336279859096055]
								}, {
									"case":	267,
									"scores":	[-4.336279859096055]
								}, {
									"case":	268,
									"scores":	[-4.336279859096055]
								}, {
									"case":	269,
									"scores":	[-4.336279859096055]
								}, {
									"case":	270,
									"scores":	[-4.336279859096055]
								}, {
									"case":	271,
									"scores":	[-4.336279859096055]
								}, {
									"case":	272,
									"scores":	[-4.336279859096055]
								}, {
									"case":	273,
									"scores":	[-4.336279859096055]
								}, {
									"case":	274,
									"scores":	[-4.336279859096055]
								}, {
									"case":	275,
									"scores":	[-4.336279859096055]
								}, {
									"case":	276,
									"scores":	[-4.336279859096055]
								}, {
									"case":	277,
									"scores":	[-4.336279859096055]
								}, {
									"case":	278,
									"scores":	[-4.336279859096055]
								}, {
									"case":	279,
									"scores":	[-4.336279859096055]
								}, {
									"case":	280,
									"scores":	[-4.336279859096055]
								}, {
									"case":	281,
									"scores":	[-4.336279859096055]
								}, {
									"case":	282,
									"scores":	[-4.336279859096055]
								}, {
									"case":	283,
									"scores":	[-4.336279859096055]
								}, {
									"case":	284,
									"scores":	[-4.336279859096055]
								}, {
									"case":	285,
									"scores":	[-4.336279859096055]
								}, {
									"case":	286,
									"scores":	[-4.336279859096055]
								}, {
									"case":	287,
									"scores":	[-4.336279859096055]
								}, {
									"case":	288,
									"scores":	[-4.336279859096055]
								}, {
									"case":	289,
									"scores":	[-4.336279859096055]
								}, {
									"case":	290,
									"scores":	[-4.336279859096055]
								}, {
									"case":	291,
									"scores":	[-4.336279859096055]
								}, {
									"case":	292,
									"scores":	[-4.336279859096055]
								}, {
									"case":	293,
									"scores":	[-4.336279859096055]
								}, {
									"case":	294,
									"scores":	[-4.336279859096055]
								}, {
									"case":	295,
									"scores":	[-4.336279859096055]
								}, {
									"case":	296,
									"scores":	[-4.336279859096055]
								}, {
									"case":	297,
									"scores":	[-4.336279859096055]
								}, {
									"case":	298,
									"scores":	[-4.336279859096055]
								}, {
									"case":	299,
									"scores":	[-4.336279859096055]
								}, {
									"case":	300,
									"scores":	[-4.336279859096055]
								}, {
									"case":	301,
									"scores":	[-4.336279859096055]
								}, {
									"case":	302,
									"scores":	[-4.336279859096055]
								}, {
									"case":	303,
									"scores":	[-4.336279859096055]
								}, {
									"case":	304,
									"scores":	[-4.336279859096055]
								}, {
									"case":	305,
									"scores":	[-4.336279859096055]
								}, {
									"case":	306,
									"scores":	[-4.336279859096055]
								}, {
									"case":	307,
									"scores":	[-4.336279859096055]
								}, {
									"case":	308,
									"scores":	[-4.336279859096055]
								}, {
									"case":	309,
									"scores":	[-4.336279859096055]
								}, {
									"case":	310,
									"scores":	[-4.336279859096055]
								}, {
									"case":	311,
									"scores":	[-4.336279859096055]
								}, {
									"case":	312,
									"scores":	[-4.336279859096055]
								}, {
									"case":	313,
									"scores":	[-4.336279859096055]
								}, {
									"case":	314,
									"scores":	[-4.336279859096055]
								}, {
									"case":	315,
									"scores":	[-4.336279859096055]
								}, {
									"case":	316,
									"scores":	[-4.336279859096055]
								}, {
									"case":	317,
									"scores":	[-4.336279859096055]
								}, {
									"case":	318,
									"scores":	[-4.336279859096055]
								}, {
									"case":	319,
									"scores":	[-4.336279859096055]
								}, {
									"case":	320,
									"scores":	[-4.336279859096055]
								}, {
									"case":	321,
									"scores":	[-4.336279859096055]
								}, {
									"case":	322,
									"scores":	[-4.336279859096055]
								}, {
									"case":	323,
									"scores":	[-4.336279859096055]
								}, {
									"case":	324,
									"scores":	[-4.336279859096055]
								}, {
									"case":	325,
									"scores":	[-4.336279859096055]
								}, {
									"case":	326,
									"scores":	[-4.336279859096055]
								}, {
									"case":	327,
									"scores":	[-4.336279859096055]
								}, {
									"case":	328,
									"scores":	[-4.336279859096055]
								}, {
									"case":	329,
									"scores":	[-4.336279859096055]
								}, {
									"case":	330,
									"scores":	[-4.336279859096055]
								}, {
									"case":	331,
									"scores":	[-4.336279859096055]
								}, {
									"case":	332,
									"scores":	[-4.336279859096055]
								}, {
									"case":	333,
									"scores":	[-4.336279859096055]
								}, {
									"case":	334,
									"scores":	[-4.336279859096055]
								}, {
									"case":	335,
									"scores":	[-4.336279859096055]
								}, {
									"case":	336,
									"scores":	[-4.336279859096055]
								}, {
									"case":	337,
									"scores":	[-4.336279859096055]
								}, {
									"case":	338,
									"scores":	[-4.336279859096055]
								}, {
									"case":	339,
									"scores":	[-4.336279859096055]
								}, {
									"case":	340,
									"scores":	[-4.336279859096055]
								}, {
									"case":	341,
									"scores":	[-4.336279859096055]
								}, {
									"case":	342,
									"scores":	[-4.336279859096055]
								}, {
									"case":	343,
									"scores":	[-4.336279859096055]
								}, {
									"case":	344,
									"scores":	[-4.336279859096055]
								}, {
									"case":	345,
									"scores":	[-4.336279859096055]
								}, {
									"case":	346,
									"scores":	[-4.336279859096055]
								}, {
									"case":	347,
									"scores":	[-4.336279859096055]
								}, {
									"case":	348,
									"scores":	[-4.336279859096055]
								}, {
									"case":	349,
									"scores":	[-4.336279859096055]
								}, {
									"case":	350,
									"scores":	[-4.336279859096055]
								}, {
									"case":	351,
									"scores":	[-4.336279859096055]
								}, {
									"case":	352,
									"scores":	[-4.336279859096055]
								}, {
									"case":	353,
									"scores":	[-4.336279859096055]
								}, {
									"case":	354,
									"scores":	[-4.336279859096055]
								}, {
									"case":	355,
									"scores":	[-4.336279859096055]
								}, {
									"case":	356,
									"scores":	[-4.336279859096055]
								}, {
									"case":	357,
									"scores":	[-4.336279859096055]
								}, {
									"case":	358,
									"scores":	[-4.336279859096055]
								}, {
									"case":	359,
									"scores":	[-4.336279859096055]
								}, {
									"case":	360,
									"scores":	[-4.336279859096055]
								}, {
									"case":	361,
									"scores":	[-4.336279859096055]
								}, {
									"case":	362,
									"scores":	[-4.336279859096055]
								}, {
									"case":	363,
									"scores":	[-4.336279859096055]
								}, {
									"case":	364,
									"scores":	[-4.336279859096055]
								}, {
									"case":	365,
									"scores":	[-4.336279859096055]
								}, {
									"case":	366,
									"scores":	[-4.336279859096055]
								}, {
									"case":	367,
									"scores":	[-4.336279859096055]
								}, {
									"case":	368,
									"scores":	[-4.336279859096055]
								}, {
									"case":	369,
									"scores":	[-4.336279859096055]
								}, {
									"case":	370,
									"scores":	[-4.336279859096055]
								}, {
									"case":	371,
									"scores":	[-4.336279859096055]
								}, {
									"case":	372,
									"scores":	[-4.336279859096055]
								}, {
									"case":	373,
									"scores":	[-4.336279859096055]
								}, {
									"case":	374,
									"scores":	[-4.336279859096055]
								}, {
									"case":	375,
									"scores":	[-4.336279859096055]
								}, {
									"case":	376,
									"scores":	[-4.336279859096055]
								}, {
									"case":	377,
									"scores":	[-4.336279859096055]
								}, {
									"case":	378,
									"scores":	[-4.336279859096055]
								}, {
									"case":	379,
									"scores":	[-4.336279859096055]
								}, {
									"case":	380,
									"scores":	[-4.336279859096055]
								}, {
									"case":	381,
									"scores":	[-4.336279859096055]
								}, {
									"case":	382,
									"scores":	[-4.336279859096055]
								}, {
									"case":	383,
									"scores":	[-4.336279859096055]
								}, {
									"case":	384,
									"scores":	[-4.336279859096055]
								}, {
									"case":	385,
									"scores":	[-4.336279859096055]
								}, {
									"case":	386,
									"scores":	[-4.336279859096055]
								}, {
									"case":	387,
									"scores":	[-4.336279859096055]
								}, {
									"case":	388,
									"scores":	[-4.336279859096055]
								}, {
									"case":	389,
									"scores":	[-4.336279859096055]
								}, {
									"case":	390,
									"scores":	[-4.336279859096055]
								}, {
									"case":	391,
									"scores":	[-4.336279859096055]
								}, {
									"case":	392,
									"scores":	[-4.336279859096055]
								}, {
									"case":	393,
									"scores":	[-6.3712115930960547, -6.4754483530960547, -6.7633550690960549, -6.6898595690960549, -6.5989919690960548, -6.0058986690960552, -6.7762548090960548, -6.6898595690960549, -6.1831615090960552, -6.0058986690960552, -6.4083599690960549, -5.9164759690960551, -6.6898595690960549, -6.0058986690960552, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.8804915690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.233748569096055, -6.8804915690960549, -6.8804915690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.779282269096055, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.6898595690960549, -6.6898595690960549, -6.779282269096055, -6.6898595690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.8804915690960549, -6.8804915690960549, -6.8804915690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.233748569096055, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.6898595690960549, -6.779282269096055, -6.8804915690960549]
								}, {
									"case":	394,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	395,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	396,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	397,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	398,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	399,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	400,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	401,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	402,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	403,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	404,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	405,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	406,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	407,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	408,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	409,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	410,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}, {
									"case":	411,
									"scores":	[-8.6339933930960555, -8.7382301530960547, -9.0261368690960566, -8.9526413690960567, -8.8617737690960539, -8.2686804690960543, -9.0390366090960548, -8.9526413690960567, -8.4459433090960552, -8.2686804690960543, -8.6711417690960566, -8.1792577690960542, -8.9526413690960567, -8.2686804690960543, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.496530369096055, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.1432733690960539, -9.1432733690960539, -9.1432733690960539, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.496530369096055, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -8.9526413690960567, -9.0420640690960568, -9.1432733690960539]
								}]
						}, {
							"switch":	37,
							"types":	[[], [], [1], [], [], [], [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], [], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [45]],
							"begin_line":	225,
							"begin_column":	3,
							"end_line":	225,
							"end_column":	73,
							"patch_codes":	["if (!__is_neg(\"\", \"L225\", 97, &(con), sizeof (con), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(srv), sizeof (srv), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n", "OBJ_NAME_get(\"src/mod_secure_download.c\", 0)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 1)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 16)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 213)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 219)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 225)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 234)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 244)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 251)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 261)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 268)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 282)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 310)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 32)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 324)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 4)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 403)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 408)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 8)", "g_assert_warning(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", 0)", "g_assert_warning(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", md5_str)", "g_assert_warning(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", rel_uri)", "g_assert_warning(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", ts_str)", "g_assertion_message(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", 0)", "g_assertion_message(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", md5_str)", "g_assertion_message(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", rel_uri)", "g_assertion_message(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", ts_str)", "g_assertion_message_expr(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", 0)", "g_assertion_message_expr(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", md5_str)", "g_assertion_message_expr(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", rel_uri)", "g_assertion_message_expr(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", ts_str)", "g_dgettext(\"src/mod_secure_download.c\", 0)", "g_dgettext(\"src/mod_secure_download.c\", md5_str)", "g_dgettext(\"src/mod_secure_download.c\", rel_uri)", "g_dgettext(\"src/mod_secure_download.c\", ts_str)", "g_strip_context(\"src/mod_secure_download.c\", 0)", "g_strip_context(\"src/mod_secure_download.c\", md5_str)", "g_strip_context(\"src/mod_secure_download.c\", rel_uri)", "g_strip_context(\"src/mod_secure_download.c\", ts_str)", "g_warn_message(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", 0)", "g_warn_message(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", md5_str)", "g_warn_message(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", rel_uri)", "g_warn_message(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\", ts_str)", "{\n}\n", "BIO_printf(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "PEM_dek_info(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "VALGRIND_PRINTF(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "VALGRIND_PRINTF_BACKTRACE(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "__builtin_va_start(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "fprintf(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_build_filename(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_build_path(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_markup_printf_escaped(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_prefix_error(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_print(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_printerr(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_relation_exists(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_relation_insert(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_scanner_error(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_scanner_warn(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_strconcat(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_strdup_printf(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_string_append_printf(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_string_printf(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_strjoin(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_test_assert_expected_messages_internal(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_test_message(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_variant_builder_add(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_variant_builder_add_parsed(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_variant_get(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_variant_iter_loop(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_variant_iter_next(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_variant_new(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_variant_new_parsed(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "g_variant_new_printf(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", OPENSSL_cipher_name(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", g_basename(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", g_getenv(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", g_intern_static_string(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", g_intern_string(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", g_path_skip_root(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "printf(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "sprintf(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload or the directory does not exist\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (0 * i), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (0 * ts), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (HA1 != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (HA1 == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (Md5Ctx != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (Md5Ctx == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (con != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (con == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (i != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (i * ts), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (i + 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (i - 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (i == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (md5_str != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (md5_str == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (p != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (p == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (p_d != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (p_d == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (rel_uri != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (rel_uri != md5_str), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (rel_uri != ts_str), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (rel_uri == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (rel_uri == md5_str), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (rel_uri == ts_str), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (srv != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (srv == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts != i), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts * i), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts + 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts + i), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts - 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts - i), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts == i), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts_str != 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts_str != md5_str), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts_str == 0), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), (ts_str == md5_str), con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&HA1)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&Md5Ctx)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&i)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&md5_str)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&p)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&p_d)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&rel_uri)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&srv)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&ts)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (&ts_str)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&HA1)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&Md5Ctx)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&i)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&md5_str)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&p)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&p_d)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&rel_uri)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&srv)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&ts)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (&ts_str)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&HA1)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&Md5Ctx)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&i)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&md5_str)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&p)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&p_d)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&rel_uri)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&srv)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&ts)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (&ts_str)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&HA1))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&Md5Ctx))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&con))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&i))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&md5_str))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&p))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&p_d))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&rel_uri))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&srv))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&ts))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (&ts_str))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : (0))", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&HA1)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&Md5Ctx)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&con)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&i)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&md5_str)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&p)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&p_d)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&rel_uri)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&srv)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&ts)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((&ts_str)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path((0)), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&HA1), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&Md5Ctx), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&con), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&i), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&md5_str), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&p), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&p_d), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&rel_uri), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&srv), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&ts), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((&ts_str), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace((0), remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8563526490960554, -5.8211118490960549, -5.383129849096056, -5.8144958490960548, -6.4288601490960549, -5.4806271490960548, -6.6936416490960546, -5.8144958490960548, -5.7454086490960545, -5.4806271490960548, -5.5849551490960554, -5.0436621490960549, -5.8144958490960548, -5.4806271490960548, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -6.6584008490960551, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -5.5705689790960546, -6.6584008490960551, -6.6584008490960551, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -6.2514608490960555, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -5.8144958490960548, -5.8144958490960548, -6.2514608490960555, -5.8144958490960548, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -6.6584008490960551, -6.6584008490960551, -6.6584008490960551, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.5705689790960546, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -5.8144958490960548, -6.2514608490960555, -6.6584008490960551]
								}, {
									"case":	2,
									"scores":	[-4.336279859096055]
								}, {
									"case":	3,
									"scores":	[-4.336279859096055]
								}, {
									"case":	4,
									"scores":	[-4.336279859096055]
								}, {
									"case":	5,
									"scores":	[-4.336279859096055]
								}, {
									"case":	6,
									"scores":	[-4.336279859096055]
								}, {
									"case":	7,
									"scores":	[-4.336279859096055]
								}, {
									"case":	8,
									"scores":	[-4.336279859096055]
								}, {
									"case":	9,
									"scores":	[-4.336279859096055]
								}, {
									"case":	10,
									"scores":	[-4.336279859096055]
								}, {
									"case":	11,
									"scores":	[-4.336279859096055]
								}, {
									"case":	12,
									"scores":	[-4.336279859096055]
								}, {
									"case":	13,
									"scores":	[-4.336279859096055]
								}, {
									"case":	14,
									"scores":	[-4.336279859096055]
								}, {
									"case":	15,
									"scores":	[-4.336279859096055]
								}, {
									"case":	16,
									"scores":	[-4.336279859096055]
								}, {
									"case":	17,
									"scores":	[-4.336279859096055]
								}, {
									"case":	18,
									"scores":	[-4.336279859096055]
								}, {
									"case":	19,
									"scores":	[-4.336279859096055]
								}, {
									"case":	20,
									"scores":	[-4.336279859096055]
								}, {
									"case":	21,
									"scores":	[-4.336279859096055]
								}, {
									"case":	22,
									"scores":	[-4.336279859096055]
								}, {
									"case":	23,
									"scores":	[-4.336279859096055]
								}, {
									"case":	24,
									"scores":	[-4.336279859096055]
								}, {
									"case":	25,
									"scores":	[-4.336279859096055]
								}, {
									"case":	26,
									"scores":	[-4.336279859096055]
								}, {
									"case":	27,
									"scores":	[-4.336279859096055]
								}, {
									"case":	28,
									"scores":	[-4.336279859096055]
								}, {
									"case":	29,
									"scores":	[-4.336279859096055]
								}, {
									"case":	30,
									"scores":	[-4.336279859096055]
								}, {
									"case":	31,
									"scores":	[-4.336279859096055]
								}, {
									"case":	32,
									"scores":	[-4.336279859096055]
								}, {
									"case":	33,
									"scores":	[-4.336279859096055]
								}, {
									"case":	34,
									"scores":	[-4.336279859096055]
								}, {
									"case":	35,
									"scores":	[-4.336279859096055]
								}, {
									"case":	36,
									"scores":	[-4.336279859096055]
								}, {
									"case":	37,
									"scores":	[-4.336279859096055]
								}, {
									"case":	38,
									"scores":	[-4.336279859096055]
								}, {
									"case":	39,
									"scores":	[-4.336279859096055]
								}, {
									"case":	40,
									"scores":	[-4.336279859096055]
								}, {
									"case":	41,
									"scores":	[-4.336279859096055]
								}, {
									"case":	42,
									"scores":	[-4.336279859096055]
								}, {
									"case":	43,
									"scores":	[-4.336279859096055]
								}, {
									"case":	44,
									"scores":	[-4.336279859096055]
								}, {
									"case":	45,
									"scores":	[-4.336279859096055]
								}, {
									"case":	46,
									"scores":	[-4.336279859096055]
								}, {
									"case":	47,
									"scores":	[-4.336279859096055]
								}, {
									"case":	48,
									"scores":	[-4.336279859096055]
								}, {
									"case":	49,
									"scores":	[-4.336279859096055]
								}, {
									"case":	50,
									"scores":	[-4.336279859096055]
								}, {
									"case":	51,
									"scores":	[-4.336279859096055]
								}, {
									"case":	52,
									"scores":	[-4.336279859096055]
								}, {
									"case":	53,
									"scores":	[-4.336279859096055]
								}, {
									"case":	54,
									"scores":	[-4.336279859096055]
								}, {
									"case":	55,
									"scores":	[-4.336279859096055]
								}, {
									"case":	56,
									"scores":	[-4.336279859096055]
								}, {
									"case":	57,
									"scores":	[-4.336279859096055]
								}, {
									"case":	58,
									"scores":	[-4.336279859096055]
								}, {
									"case":	59,
									"scores":	[-4.336279859096055]
								}, {
									"case":	60,
									"scores":	[-4.336279859096055]
								}, {
									"case":	61,
									"scores":	[-4.336279859096055]
								}, {
									"case":	62,
									"scores":	[-4.336279859096055]
								}, {
									"case":	63,
									"scores":	[-4.336279859096055]
								}, {
									"case":	64,
									"scores":	[-4.336279859096055]
								}, {
									"case":	65,
									"scores":	[-4.336279859096055]
								}, {
									"case":	66,
									"scores":	[-4.336279859096055]
								}, {
									"case":	67,
									"scores":	[-4.336279859096055]
								}, {
									"case":	68,
									"scores":	[-4.336279859096055]
								}, {
									"case":	69,
									"scores":	[-4.336279859096055]
								}, {
									"case":	70,
									"scores":	[-4.336279859096055]
								}, {
									"case":	71,
									"scores":	[-4.336279859096055]
								}, {
									"case":	72,
									"scores":	[-4.336279859096055]
								}, {
									"case":	73,
									"scores":	[-4.336279859096055]
								}, {
									"case":	74,
									"scores":	[-4.336279859096055]
								}, {
									"case":	75,
									"scores":	[-4.336279859096055]
								}, {
									"case":	76,
									"scores":	[-4.336279859096055]
								}, {
									"case":	77,
									"scores":	[-4.336279859096055]
								}, {
									"case":	78,
									"scores":	[-4.336279859096055]
								}, {
									"case":	79,
									"scores":	[-4.336279859096055]
								}, {
									"case":	80,
									"scores":	[-4.336279859096055]
								}, {
									"case":	81,
									"scores":	[-4.336279859096055]
								}, {
									"case":	82,
									"scores":	[-4.336279859096055]
								}, {
									"case":	83,
									"scores":	[-4.336279859096055]
								}, {
									"case":	84,
									"scores":	[-4.336279859096055]
								}, {
									"case":	85,
									"scores":	[-4.336279859096055]
								}, {
									"case":	86,
									"scores":	[-4.336279859096055]
								}, {
									"case":	87,
									"scores":	[-4.336279859096055]
								}, {
									"case":	88,
									"scores":	[-4.336279859096055]
								}, {
									"case":	89,
									"scores":	[-4.336279859096055]
								}, {
									"case":	90,
									"scores":	[-4.336279859096055]
								}, {
									"case":	91,
									"scores":	[-4.336279859096055]
								}, {
									"case":	92,
									"scores":	[-4.336279859096055]
								}, {
									"case":	93,
									"scores":	[-4.336279859096055]
								}, {
									"case":	94,
									"scores":	[-4.336279859096055]
								}, {
									"case":	95,
									"scores":	[-4.336279859096055]
								}, {
									"case":	96,
									"scores":	[-4.336279859096055]
								}, {
									"case":	97,
									"scores":	[-4.336279859096055]
								}, {
									"case":	98,
									"scores":	[-4.336279859096055]
								}, {
									"case":	99,
									"scores":	[-4.336279859096055]
								}, {
									"case":	100,
									"scores":	[-4.336279859096055]
								}, {
									"case":	101,
									"scores":	[-4.336279859096055]
								}, {
									"case":	102,
									"scores":	[-4.336279859096055]
								}, {
									"case":	103,
									"scores":	[-4.336279859096055]
								}, {
									"case":	104,
									"scores":	[-4.336279859096055]
								}, {
									"case":	105,
									"scores":	[-4.336279859096055]
								}, {
									"case":	106,
									"scores":	[-4.336279859096055]
								}, {
									"case":	107,
									"scores":	[-4.336279859096055]
								}, {
									"case":	108,
									"scores":	[-4.336279859096055]
								}, {
									"case":	109,
									"scores":	[-4.336279859096055]
								}, {
									"case":	110,
									"scores":	[-4.336279859096055]
								}, {
									"case":	111,
									"scores":	[-4.336279859096055]
								}, {
									"case":	112,
									"scores":	[-4.336279859096055]
								}, {
									"case":	113,
									"scores":	[-4.336279859096055]
								}, {
									"case":	114,
									"scores":	[-4.336279859096055]
								}, {
									"case":	115,
									"scores":	[-4.336279859096055]
								}, {
									"case":	116,
									"scores":	[-4.336279859096055]
								}, {
									"case":	117,
									"scores":	[-4.336279859096055]
								}, {
									"case":	118,
									"scores":	[-4.336279859096055]
								}, {
									"case":	119,
									"scores":	[-4.336279859096055]
								}, {
									"case":	120,
									"scores":	[-4.336279859096055]
								}, {
									"case":	121,
									"scores":	[-4.336279859096055]
								}, {
									"case":	122,
									"scores":	[-4.336279859096055]
								}, {
									"case":	123,
									"scores":	[-4.336279859096055]
								}, {
									"case":	124,
									"scores":	[-4.336279859096055]
								}, {
									"case":	125,
									"scores":	[-4.336279859096055]
								}, {
									"case":	126,
									"scores":	[-4.336279859096055]
								}, {
									"case":	127,
									"scores":	[-4.336279859096055]
								}, {
									"case":	128,
									"scores":	[-4.336279859096055]
								}, {
									"case":	129,
									"scores":	[-4.336279859096055]
								}, {
									"case":	130,
									"scores":	[-4.336279859096055]
								}, {
									"case":	131,
									"scores":	[-4.336279859096055]
								}, {
									"case":	132,
									"scores":	[-4.336279859096055]
								}, {
									"case":	133,
									"scores":	[-4.336279859096055]
								}, {
									"case":	134,
									"scores":	[-4.336279859096055]
								}, {
									"case":	135,
									"scores":	[-4.336279859096055]
								}, {
									"case":	136,
									"scores":	[-4.336279859096055]
								}, {
									"case":	137,
									"scores":	[-4.336279859096055]
								}, {
									"case":	138,
									"scores":	[-4.336279859096055]
								}, {
									"case":	139,
									"scores":	[-4.336279859096055]
								}, {
									"case":	140,
									"scores":	[-4.336279859096055]
								}, {
									"case":	141,
									"scores":	[-4.336279859096055]
								}, {
									"case":	142,
									"scores":	[-4.336279859096055]
								}, {
									"case":	143,
									"scores":	[-4.336279859096055]
								}, {
									"case":	144,
									"scores":	[-4.336279859096055]
								}, {
									"case":	145,
									"scores":	[-4.336279859096055]
								}, {
									"case":	146,
									"scores":	[-4.336279859096055]
								}, {
									"case":	147,
									"scores":	[-4.336279859096055]
								}, {
									"case":	148,
									"scores":	[-4.336279859096055]
								}, {
									"case":	149,
									"scores":	[-4.336279859096055]
								}, {
									"case":	150,
									"scores":	[-4.336279859096055]
								}, {
									"case":	151,
									"scores":	[-4.336279859096055]
								}, {
									"case":	152,
									"scores":	[-4.336279859096055]
								}, {
									"case":	153,
									"scores":	[-4.336279859096055]
								}, {
									"case":	154,
									"scores":	[-4.336279859096055]
								}, {
									"case":	155,
									"scores":	[-4.336279859096055]
								}, {
									"case":	156,
									"scores":	[-4.336279859096055]
								}, {
									"case":	157,
									"scores":	[-4.336279859096055]
								}, {
									"case":	158,
									"scores":	[-4.336279859096055]
								}, {
									"case":	159,
									"scores":	[-4.336279859096055]
								}, {
									"case":	160,
									"scores":	[-4.336279859096055]
								}, {
									"case":	161,
									"scores":	[-4.336279859096055]
								}, {
									"case":	162,
									"scores":	[-4.336279859096055]
								}, {
									"case":	163,
									"scores":	[-4.336279859096055]
								}, {
									"case":	164,
									"scores":	[-4.336279859096055]
								}, {
									"case":	165,
									"scores":	[-4.336279859096055]
								}, {
									"case":	166,
									"scores":	[-4.336279859096055]
								}, {
									"case":	167,
									"scores":	[-4.336279859096055]
								}, {
									"case":	168,
									"scores":	[-4.336279859096055]
								}, {
									"case":	169,
									"scores":	[-4.336279859096055]
								}, {
									"case":	170,
									"scores":	[-4.336279859096055]
								}, {
									"case":	171,
									"scores":	[-4.336279859096055]
								}, {
									"case":	172,
									"scores":	[-4.336279859096055]
								}, {
									"case":	173,
									"scores":	[-4.336279859096055]
								}, {
									"case":	174,
									"scores":	[-4.336279859096055]
								}, {
									"case":	175,
									"scores":	[-4.336279859096055]
								}, {
									"case":	176,
									"scores":	[-4.336279859096055]
								}, {
									"case":	177,
									"scores":	[-4.336279859096055]
								}, {
									"case":	178,
									"scores":	[-4.336279859096055]
								}, {
									"case":	179,
									"scores":	[-4.336279859096055]
								}, {
									"case":	180,
									"scores":	[-4.336279859096055]
								}, {
									"case":	181,
									"scores":	[-4.336279859096055]
								}, {
									"case":	182,
									"scores":	[-4.336279859096055]
								}, {
									"case":	183,
									"scores":	[-4.336279859096055]
								}, {
									"case":	184,
									"scores":	[-4.336279859096055]
								}, {
									"case":	185,
									"scores":	[-4.336279859096055]
								}, {
									"case":	186,
									"scores":	[-4.336279859096055]
								}, {
									"case":	187,
									"scores":	[-4.336279859096055]
								}, {
									"case":	188,
									"scores":	[-4.336279859096055]
								}, {
									"case":	189,
									"scores":	[-4.336279859096055]
								}, {
									"case":	190,
									"scores":	[-4.336279859096055]
								}, {
									"case":	191,
									"scores":	[-4.336279859096055]
								}, {
									"case":	192,
									"scores":	[-4.336279859096055]
								}, {
									"case":	193,
									"scores":	[-4.336279859096055]
								}, {
									"case":	194,
									"scores":	[-4.336279859096055]
								}, {
									"case":	195,
									"scores":	[-4.336279859096055]
								}, {
									"case":	196,
									"scores":	[-4.336279859096055]
								}, {
									"case":	197,
									"scores":	[-4.336279859096055]
								}, {
									"case":	198,
									"scores":	[-4.336279859096055]
								}]
						}]
				}, {
					"line":	223,
					"switches":	[{
							"switch":	34,
							"types":	[[], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], [], [], [], [], [], []],
							"begin_line":	224,
							"begin_column":	0,
							"end_line":	224,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 0;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 16;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 1;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 213;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 219;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 225;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 234;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 244;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 251;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 261;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 268;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 282;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 310;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 324;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 32;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 403;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 408;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 4;\n", "if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	2,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	3,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	4,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	5,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	6,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	7,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	8,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	9,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	10,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	11,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	12,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	13,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	14,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	15,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	16,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	17,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	18,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	19,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	20,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	21,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	22,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	23,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	24,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	25,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	26,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	27,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	28,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	29,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	30,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	31,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	32,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	33,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	34,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	35,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	36,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	37,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	38,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	39,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	40,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	41,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	42,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	43,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	44,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	45,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	46,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	47,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	48,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	49,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	50,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	51,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	52,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	53,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	54,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	55,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	56,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	57,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	58,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	59,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	60,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	61,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	62,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	63,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	64,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	65,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	66,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	67,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	68,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	69,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	70,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	71,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	72,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	73,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	74,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	75,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	76,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	77,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	78,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	79,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	80,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	81,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	82,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	83,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	84,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	85,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	86,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	87,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	88,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	89,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	90,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	91,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	92,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	93,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	94,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	95,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	96,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	97,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	98,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	99,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	100,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	101,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	102,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	103,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	104,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	105,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	106,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	107,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	108,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	109,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	110,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	111,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	112,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	113,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	114,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	115,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	116,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	117,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	118,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	119,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	120,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	121,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	122,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	123,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	124,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	125,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	126,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	127,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	128,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	129,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	130,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	131,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	132,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	133,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	134,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	135,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	136,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	137,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	138,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	139,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	140,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	141,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	142,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	143,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	144,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	145,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	146,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	147,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	148,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	149,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	150,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	151,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	152,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	153,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	154,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	155,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	156,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	157,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	158,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	159,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	160,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	161,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	162,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	163,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	164,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	165,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	166,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	167,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	168,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	169,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	170,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	171,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	172,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	173,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	174,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	175,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	176,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	177,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	178,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	179,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	180,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	181,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	182,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	183,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	184,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	185,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	186,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	187,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	188,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	189,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	190,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	191,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	192,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	193,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	194,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	195,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	196,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	197,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	198,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	199,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	200,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	201,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	202,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	203,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	204,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	205,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	206,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	207,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	208,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	209,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	210,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	211,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	212,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	213,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	214,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	215,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	216,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	217,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	218,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	219,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	220,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	221,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	222,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	223,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	224,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	225,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	226,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	227,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	228,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	229,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	230,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	231,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	232,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	233,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	234,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	235,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	236,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	237,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	238,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	239,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	240,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	241,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	242,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	243,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	244,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	245,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	246,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	247,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	248,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	249,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	250,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	251,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	252,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	253,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	254,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	255,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	256,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	257,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	258,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	259,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	260,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	261,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	262,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	263,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	264,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	265,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	266,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	267,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	268,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	269,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	270,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	271,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	272,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	273,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	274,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	275,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	276,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	277,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	278,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	279,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	280,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	281,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	282,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	283,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	284,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	285,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	286,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	287,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	288,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	289,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	290,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	291,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	292,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	293,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	294,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	295,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	296,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	297,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	298,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	299,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	300,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	301,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	302,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	303,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	304,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	305,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	306,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	307,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	308,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	309,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	310,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	311,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	312,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	313,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	314,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	315,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	316,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	317,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	318,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	319,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	320,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	321,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	322,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	323,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	324,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	325,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	326,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	327,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	328,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	329,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	330,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	331,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	332,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	333,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	334,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	335,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	336,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	337,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	338,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	339,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	340,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	341,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	342,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	343,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	344,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	345,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	346,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	347,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	348,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	349,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	350,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	351,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	352,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	353,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	354,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	355,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	356,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	357,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	358,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	359,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	360,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	361,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	362,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	363,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	364,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	365,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	366,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	367,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	368,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	369,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	370,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	371,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	372,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	373,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	374,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	375,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	376,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	377,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	378,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	379,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	380,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	381,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	382,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	383,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	384,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	385,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	386,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	387,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	388,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	389,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	390,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	391,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	392,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	393,
									"scores":	[-8.6604465904135743, -9.0666081564135759, -8.7646833504135735, -8.4963758354135734, -10.322326750413573, -9.153003396413574, -8.8253332764135752, -9.0666081564135759, -8.5599100964135744, -8.3826472564135752, -8.7851085564135758, -8.2932245564135751, -9.0666081564135759, -8.3826472564135752, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.2572401564135749, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -8.6104971564135759, -9.2572401564135749, -9.2572401564135749, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.1560308564135759, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.0666081564135759, -9.0666081564135759, -9.1560308564135759, -9.0666081564135759, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.2572401564135749, -9.2572401564135749, -9.2572401564135749, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -8.6104971564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.0666081564135759, -9.1560308564135759, -9.2572401564135749]
								}, {
									"case":	394,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	395,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	396,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	397,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	398,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	399,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	400,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	401,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	402,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	403,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	404,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	405,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	406,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	407,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	408,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	409,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	410,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}, {
									"case":	411,
									"scores":	[-10.923228390413573, -11.329389956413575, -11.027465150413576, -10.759157635413576, -12.585108550413576, -11.415785196413577, -11.088115076413576, -11.329389956413575, -10.822691896413577, -10.645429056413576, -11.047890356413575, -10.556006356413576, -11.329389956413575, -10.645429056413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -10.873278956413575, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.520021956413576, -11.520021956413576, -11.520021956413576, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -10.873278956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.329389956413575, -11.418812656413575, -11.520021956413576]
								}]
						}, {
							"switch":	35,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	224,
							"begin_column":	2,
							"end_line":	226,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n}\n", "if ((con->conf.log_request_handling) || __is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n}\n", "if ((con->conf.log_request_handling) && !__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6121769434281479, -4.9198498784281455, -5.5769361434281475, -4.7877034474281475, -5.8801133244281463, -5.7989956784281471, -4.6428310964281465, -4.9198498784281455, -4.8507626784281461, -4.5859811784281463, -4.6903091784281461, -4.1490161784281465, -4.9198498784281455, -4.5859811784281463, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -5.7637548784281467, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -4.6759230084281462, -5.7637548784281467, -5.7637548784281467, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -5.3568148784281462, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -4.9198498784281455, -4.9198498784281455, -5.3568148784281462, -4.9198498784281455, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -5.7637548784281467, -5.7637548784281467, -5.7637548784281467, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.6759230084281462, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -4.9198498784281455, -5.3568148784281462, -5.7637548784281467]
								}, {
									"case":	2,
									"scores":	[-6.2742107304281465, -5.5818836654281458, -6.238969930428147, -5.4497372344281461, -6.5421471114281466, -6.4610294654281457, -5.304864883428146, -5.5818836654281458, -5.5127964654281456, -5.2480149654281458, -5.3523429654281465, -4.811049965428146, -5.5818836654281458, -5.2480149654281458, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.3379567954281457, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.0188486654281466, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -6.0188486654281466, -5.5818836654281458, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.3379567954281457, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.0188486654281466, -6.4257886654281462]
								}, {
									"case":	3,
									"scores":	[-6.2742107304281465, -5.5818836654281458, -6.238969930428147, -5.4497372344281461, -6.5421471114281466, -6.4610294654281457, -5.304864883428146, -5.5818836654281458, -5.5127964654281456, -5.2480149654281458, -5.3523429654281465, -4.811049965428146, -5.5818836654281458, -5.2480149654281458, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.3379567954281457, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.0188486654281466, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -6.0188486654281466, -5.5818836654281458, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.4257886654281462, -6.4257886654281462, -6.4257886654281462, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.3379567954281457, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -5.5818836654281458, -6.0188486654281466, -6.4257886654281462]
								}]
						}, {
							"switch":	38,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	224,
							"begin_column":	2,
							"end_line":	226,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n", "if (!__is_neg(\"\", \"L224\", 97, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p), sizeof (p), &(srv), sizeof (srv), &(md5_str), sizeof (md5_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)) && (con->conf.log_request_handling)) {\n    log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6977316014135742, -7.0054045364135735, -7.6624908014135737, -6.8732581054135746, -7.9656679824135743, -7.8845503364135734, -6.7283857544135746, -7.0054045364135735, -6.9363173364135733, -6.6715358364135735, -6.7758638364135741, -6.2345708364135737, -7.0054045364135735, -6.6715358364135735, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.8493095364135739, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -6.7614776664135743, -7.8493095364135739, -7.8493095364135739, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.4423695364135742, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.0054045364135735, -7.0054045364135735, -7.4423695364135742, -7.0054045364135735, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.8493095364135739, -7.8493095364135739, -7.8493095364135739, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -6.7614776664135743, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.0054045364135735, -7.4423695364135742, -7.8493095364135739]
								}, {
									"case":	2,
									"scores":	[-6.9801502064135743, -7.6724772714135741, -7.6372364714135745, -6.8480037754135745, -7.9404136524135751, -7.8592960064135742, -6.7031314244135745, -6.9801502064135743, -6.9110630064135741, -6.6462815064135743, -6.750609506413574, -6.2093165064135736, -6.9801502064135743, -6.6462815064135743, -7.8240552064135738, -7.8240552064135738, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.7362233364135733, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -7.4171152064135732, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -7.8240552064135738, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -6.7362233364135733, -7.8240552064135738, -7.8240552064135738, -6.9801502064135743, -6.9801502064135743, -6.9801502064135743, -7.4171152064135732, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -6.9801502064135743, -6.9801502064135743, -7.4171152064135732, -6.9801502064135743, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738, -7.8240552064135738]
								}]
						}]
				}, {
					"line":	231,
					"switches":	[{
							"switch":	39,
							"types":	[[], [], [], [], [394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [], [], [], [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], [], [], [], [], [], []],
							"begin_line":	232,
							"begin_column":	0,
							"end_line":	232,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 0;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 16;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 1;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 213;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 219;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 225;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 234;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 244;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 251;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 261;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 268;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 282;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 310;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 324;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 32;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 403;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 408;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 4;\n", "if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	2,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	3,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	4,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	5,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	6,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	7,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	8,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	9,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	10,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	11,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	12,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	13,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	14,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	15,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	16,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	17,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	18,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	19,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	20,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	21,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	22,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	23,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	24,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	25,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	26,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	27,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	28,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	29,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	30,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	31,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	32,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	33,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	34,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	35,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	36,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	37,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	38,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	39,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	40,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	41,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	42,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	43,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	44,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	45,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	46,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	47,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	48,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	49,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	50,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	51,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	52,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	53,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	54,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	55,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	56,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	57,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	58,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	59,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	60,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	61,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	62,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	63,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	64,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	65,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	66,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	67,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	68,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	69,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	70,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	71,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	72,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	73,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	74,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	75,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	76,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	77,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	78,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	79,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	80,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	81,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	82,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	83,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	84,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	85,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	86,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	87,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	88,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	89,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	90,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	91,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	92,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	93,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	94,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	95,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	96,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	97,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	98,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	99,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	100,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	101,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	102,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	103,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	104,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	105,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	106,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	107,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	108,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	109,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	110,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	111,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	112,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	113,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	114,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	115,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	116,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	117,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	118,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	119,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	120,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	121,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	122,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	123,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	124,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	125,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	126,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	127,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	128,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	129,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	130,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	131,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	132,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	133,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	134,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	135,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	136,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	137,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	138,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	139,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	140,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	141,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	142,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	143,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	144,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	145,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	146,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	147,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	148,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	149,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	150,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	151,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	152,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	153,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	154,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	155,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	156,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	157,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	158,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	159,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	160,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	161,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	162,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	163,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	164,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	165,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	166,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	167,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	168,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	169,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	170,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	171,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	172,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	173,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	174,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	175,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	176,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	177,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	178,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	179,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	180,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	181,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	182,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	183,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	184,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	185,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	186,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	187,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	188,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	189,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	190,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	191,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	192,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	193,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	194,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	195,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	196,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	197,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	198,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	199,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	200,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	201,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	202,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	203,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	204,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	205,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	206,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	207,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	208,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	209,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	210,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	211,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	212,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	213,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	214,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	215,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	216,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	217,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	218,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	219,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	220,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	221,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	222,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	223,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	224,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	225,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	226,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	227,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	228,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	229,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	230,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	231,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	232,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	233,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	234,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	235,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	236,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	237,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	238,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	239,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	240,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	241,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	242,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	243,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	244,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	245,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	246,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	247,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	248,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	249,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	250,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	251,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	252,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	253,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	254,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	255,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	256,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	257,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	258,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	259,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	260,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	261,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	262,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	263,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	264,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	265,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	266,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	267,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	268,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	269,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	270,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	271,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	272,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	273,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	274,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	275,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	276,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	277,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	278,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	279,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	280,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	281,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	282,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	283,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	284,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	285,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	286,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	287,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	288,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	289,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	290,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	291,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	292,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	293,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	294,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	295,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	296,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	297,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	298,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	299,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	300,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	301,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	302,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	303,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	304,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	305,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	306,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	307,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	308,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	309,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	310,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	311,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	312,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	313,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	314,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	315,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	316,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	317,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	318,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	319,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	320,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	321,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	322,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	323,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	324,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	325,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	326,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	327,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	328,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	329,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	330,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	331,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	332,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	333,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	334,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	335,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	336,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	337,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	338,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	339,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	340,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	341,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	342,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	343,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	344,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	345,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	346,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	347,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	348,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	349,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	350,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	351,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	352,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	353,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	354,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	355,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	356,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	357,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	358,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	359,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	360,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	361,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	362,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	363,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	364,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	365,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	366,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	367,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	368,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	369,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	370,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	371,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	372,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	373,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	374,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	375,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	376,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	377,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	378,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	379,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	380,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	381,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	382,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	383,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	384,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	385,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	386,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	387,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	388,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	389,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	390,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	391,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	392,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	393,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	394,
									"scores":	[-9.3863756757785346, -9.2091128357785355, -9.4906124357785355, -8.0300066207785363, -8.116548641778536, -8.365555796778537, -8.7242779357785345, -9.0262027417785369, -8.631220630778536, -9.4073977114785343, -9.4073977114785343, -9.112597981778535, -8.3422418417785362, -9.0262027417785369, -8.5195046817785354, -8.7447031417785368, -8.2528191417785361, -9.0262027417785369, -9.0262027417785369, -8.3422418417785362, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.115625441778537, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.2168347417785359, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -8.5700917417785369, -9.2168347417785359, -9.2168347417785359, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.115625441778537, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.0262027417785369, -9.0262027417785369, -9.115625441778537, -9.0262027417785369, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.2168347417785359, -9.2168347417785359, -9.2168347417785359, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -8.5700917417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.0262027417785369, -9.115625441778537, -9.2168347417785359]
								}, {
									"case":	395,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	396,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	397,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	398,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	399,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	400,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	401,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	402,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	403,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	404,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	405,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	406,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	407,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	408,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	409,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	410,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	411,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}, {
									"case":	412,
									"scores":	[-11.649157475778537, -11.471894635778536, -11.753394235778536, -10.292788420778535, -10.379330441778535, -10.628337596778536, -10.987059735778537, -11.288984541778536, -10.894002430778535, -11.670179511478537, -11.670179511478537, -11.375379781778538, -10.605023641778537, -11.288984541778536, -10.782286481778538, -11.007484941778536, -10.515600941778537, -11.288984541778536, -11.288984541778536, -10.605023641778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -10.832873541778536, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.479616541778537, -11.479616541778537, -11.479616541778537, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -10.832873541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.288984541778536, -11.378407241778536, -11.479616541778537]
								}]
						}, {
							"switch":	40,
							"types":	[[28], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], []],
							"begin_line":	232,
							"begin_column":	2,
							"end_line":	238,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if ((0 != strncmp(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) || __is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != BIO_printf(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != VALGRIND_PRINTF(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != VALGRIND_PRINTF_BACKTRACE(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != X509_VERIFY_PARAM_add1_host(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != X509_VERIFY_PARAM_set1_email(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != X509_VERIFY_PARAM_set1_host(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != buffer_append_memory(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != buffer_append_string_len(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != buffer_append_string_rfill(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != buffer_copy_memory(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != buffer_copy_string_hex(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != buffer_copy_string_len(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != buffer_is_equal_string(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != chunkqueue_append_mem(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != fprintf(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != g_ascii_strncasecmp(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != g_relation_exists(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != g_variant_iter_loop(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != g_variant_iter_next(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != log_trace(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != mbtowc(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != printf(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != sprintf(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != strncasecmp(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (0 != strncmp(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if ((0 != strncmp(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) && !__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4884220624281479, -4.7798840624281471, -5.4531812624281475, -3.7666792354281471, -4.4887365434281463, -2.4050623854281463, -4.4767068814281474, -4.716515143428146, -4.6690478034281462, -5.5483474631281453, -5.5483474631281453, -5.595660943428145, -4.382646443428146, -4.716515143428146, -4.6474279434281458, -4.4869744434281458, -3.9456814434281458, -4.716515143428146, -4.716515143428146, -4.382646443428146, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -4.716515143428146, -4.716515143428146, -4.716515143428146, -5.1534801434281459, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -5.5604201434281455, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -4.4725882734281459, -5.5604201434281455, -5.5604201434281455, -4.716515143428146, -4.716515143428146, -4.716515143428146, -5.1534801434281459, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -4.716515143428146, -4.716515143428146, -5.1534801434281459, -4.716515143428146, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -5.5604201434281455, -5.5604201434281455, -5.5604201434281455, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.4725882734281459, -4.716515143428146, -4.716515143428146, -4.716515143428146, -4.716515143428146, -5.1534801434281459, -5.5604201434281455]
								}, {
									"case":	2,
									"scores":	[-6.3401951434281472, -5.6316571434281473, -6.3049543434281476, -4.6184523164281464, -5.3405096244281465, -3.2568354664281465, -5.3284799624281467, -5.5682882244281462, -5.5208208844281454, -6.4001205441281472, -6.4001205441281472, -6.4474340244281469, -5.2344195244281462, -5.5682882244281462, -5.499201024428146, -5.3387475244281459, -4.7974545244281463, -5.5682882244281462, -5.5682882244281462, -5.2344195244281462, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.0052532244281469, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.3243613544281461, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.0052532244281469, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -6.0052532244281469, -5.5682882244281462, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.3243613544281461, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.0052532244281469, -6.4121932244281474]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-6.3401951434281472, -5.6316571434281473, -6.3049543434281476, -4.6184523164281464, -5.3405096244281465, -3.2568354664281465, -5.3284799624281467, -5.5682882244281462, -5.5208208844281454, -6.4001205441281472, -6.4001205441281472, -6.4474340244281469, -5.2344195244281462, -5.5682882244281462, -5.499201024428146, -5.3387475244281459, -4.7974545244281463, -5.5682882244281462, -5.5682882244281462, -5.2344195244281462, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.0052532244281469, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.3243613544281461, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.0052532244281469, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -6.0052532244281469, -5.5682882244281462, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.4121932244281474, -6.4121932244281474, -6.4121932244281474, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.3243613544281461, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -5.5682882244281462, -6.0052532244281469, -6.4121932244281474]
								}]
						}, {
							"switch":	41,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	232,
							"begin_column":	2,
							"end_line":	238,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    if (0 != strncmp(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1)) {\n        if (con->conf.log_request_handling) {\n            log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n        }\n        return HANDLER_GO_ON;\n    }\n", "if (!__is_neg(\"\", \"L232\", 107, &(con), sizeof (con), &(p), sizeof (p), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(ts_str), sizeof (ts_str), &(con->uri.path->used), sizeof (con->uri.path->used), &(p_d), sizeof (p_d), &(i), sizeof (i), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)) && (0 != strncmp(con->uri.path->ptr, p->conf.uri_prefix->ptr, p->conf.uri_prefix->used - 1))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6263670407785344, -6.9178290407785354, -7.5911262407785349, -5.9046242137785354, -6.6266815217785346, -4.5430073637785355, -6.6146518597785358, -6.8544601217785353, -6.8069927817785345, -7.6862924414785354, -7.6862924414785354, -7.7336059217785351, -6.5205914217785352, -6.8544601217785353, -6.785372921778535, -6.6249194217785359, -6.0836264217785354, -6.8544601217785353, -6.8544601217785353, -6.5205914217785352, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -7.2914251217785351, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -7.6983651217785347, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -6.6105332517785351, -7.6983651217785347, -7.6983651217785347, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -7.2914251217785351, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -6.8544601217785353, -6.8544601217785353, -7.2914251217785351, -6.8544601217785353, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -7.6983651217785347, -7.6983651217785347, -7.6983651217785347, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.6105332517785351, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -6.8544601217785353, -7.2914251217785351, -7.6983651217785347]
								}, {
									"case":	2,
									"scores":	[-7.8551038727785354, -7.1465658727785364, -7.819863072778535, -6.1333610457785355, -6.8554183537785356, -4.7717441957785365, -6.8433886917785358, -7.0831969537785362, -7.0357296137785355, -7.9150292734785364, -7.9150292734785364, -7.9623427537785361, -6.7493282537785362, -7.0831969537785362, -7.014109753778536, -6.853656253778535, -6.3123632537785346, -7.0831969537785362, -7.0831969537785362, -6.7493282537785362, -7.9271019537785357, -7.5201619537785351, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.0831969537785362, -7.0831969537785362, -7.5201619537785351, -7.0831969537785362, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -6.8392700837785352, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.5201619537785351, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.5201619537785351, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.9271019537785357, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362, -7.9271019537785357, -7.9271019537785357, -7.9271019537785357, -6.8392700837785352, -7.9271019537785357, -7.9271019537785357, -7.0831969537785362, -7.0831969537785362, -7.0831969537785362]
								}]
						}]
				}, {
					"line":	239,
					"switches":	[{
							"switch":	42,
							"types":	[[], [], [], [], [394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [], [], [], [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], [], [], [], [], [], []],
							"begin_line":	240,
							"begin_column":	0,
							"end_line":	240,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 0;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 16;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 1;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 213;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 219;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 225;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 234;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 244;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 251;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 261;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 268;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 282;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 310;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 324;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 32;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 403;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 408;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 4;\n", "if (__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.295874444461016]
								}, {
									"case":	2,
									"scores":	[-4.295874444461016]
								}, {
									"case":	3,
									"scores":	[-4.295874444461016]
								}, {
									"case":	4,
									"scores":	[-4.295874444461016]
								}, {
									"case":	5,
									"scores":	[-4.295874444461016]
								}, {
									"case":	6,
									"scores":	[-4.295874444461016]
								}, {
									"case":	7,
									"scores":	[-4.295874444461016]
								}, {
									"case":	8,
									"scores":	[-4.295874444461016]
								}, {
									"case":	9,
									"scores":	[-4.295874444461016]
								}, {
									"case":	10,
									"scores":	[-4.295874444461016]
								}, {
									"case":	11,
									"scores":	[-4.295874444461016]
								}, {
									"case":	12,
									"scores":	[-4.295874444461016]
								}, {
									"case":	13,
									"scores":	[-4.295874444461016]
								}, {
									"case":	14,
									"scores":	[-4.295874444461016]
								}, {
									"case":	15,
									"scores":	[-4.295874444461016]
								}, {
									"case":	16,
									"scores":	[-4.295874444461016]
								}, {
									"case":	17,
									"scores":	[-4.295874444461016]
								}, {
									"case":	18,
									"scores":	[-4.295874444461016]
								}, {
									"case":	19,
									"scores":	[-4.295874444461016]
								}, {
									"case":	20,
									"scores":	[-4.295874444461016]
								}, {
									"case":	21,
									"scores":	[-4.295874444461016]
								}, {
									"case":	22,
									"scores":	[-4.295874444461016]
								}, {
									"case":	23,
									"scores":	[-4.295874444461016]
								}, {
									"case":	24,
									"scores":	[-4.295874444461016]
								}, {
									"case":	25,
									"scores":	[-4.295874444461016]
								}, {
									"case":	26,
									"scores":	[-4.295874444461016]
								}, {
									"case":	27,
									"scores":	[-4.295874444461016]
								}, {
									"case":	28,
									"scores":	[-4.295874444461016]
								}, {
									"case":	29,
									"scores":	[-4.295874444461016]
								}, {
									"case":	30,
									"scores":	[-4.295874444461016]
								}, {
									"case":	31,
									"scores":	[-4.295874444461016]
								}, {
									"case":	32,
									"scores":	[-4.295874444461016]
								}, {
									"case":	33,
									"scores":	[-4.295874444461016]
								}, {
									"case":	34,
									"scores":	[-4.295874444461016]
								}, {
									"case":	35,
									"scores":	[-4.295874444461016]
								}, {
									"case":	36,
									"scores":	[-4.295874444461016]
								}, {
									"case":	37,
									"scores":	[-4.295874444461016]
								}, {
									"case":	38,
									"scores":	[-4.295874444461016]
								}, {
									"case":	39,
									"scores":	[-4.295874444461016]
								}, {
									"case":	40,
									"scores":	[-4.295874444461016]
								}, {
									"case":	41,
									"scores":	[-4.295874444461016]
								}, {
									"case":	42,
									"scores":	[-4.295874444461016]
								}, {
									"case":	43,
									"scores":	[-4.295874444461016]
								}, {
									"case":	44,
									"scores":	[-4.295874444461016]
								}, {
									"case":	45,
									"scores":	[-4.295874444461016]
								}, {
									"case":	46,
									"scores":	[-4.295874444461016]
								}, {
									"case":	47,
									"scores":	[-4.295874444461016]
								}, {
									"case":	48,
									"scores":	[-4.295874444461016]
								}, {
									"case":	49,
									"scores":	[-4.295874444461016]
								}, {
									"case":	50,
									"scores":	[-4.295874444461016]
								}, {
									"case":	51,
									"scores":	[-4.295874444461016]
								}, {
									"case":	52,
									"scores":	[-4.295874444461016]
								}, {
									"case":	53,
									"scores":	[-4.295874444461016]
								}, {
									"case":	54,
									"scores":	[-4.295874444461016]
								}, {
									"case":	55,
									"scores":	[-4.295874444461016]
								}, {
									"case":	56,
									"scores":	[-4.295874444461016]
								}, {
									"case":	57,
									"scores":	[-4.295874444461016]
								}, {
									"case":	58,
									"scores":	[-4.295874444461016]
								}, {
									"case":	59,
									"scores":	[-4.295874444461016]
								}, {
									"case":	60,
									"scores":	[-4.295874444461016]
								}, {
									"case":	61,
									"scores":	[-4.295874444461016]
								}, {
									"case":	62,
									"scores":	[-4.295874444461016]
								}, {
									"case":	63,
									"scores":	[-4.295874444461016]
								}, {
									"case":	64,
									"scores":	[-4.295874444461016]
								}, {
									"case":	65,
									"scores":	[-4.295874444461016]
								}, {
									"case":	66,
									"scores":	[-4.295874444461016]
								}, {
									"case":	67,
									"scores":	[-4.295874444461016]
								}, {
									"case":	68,
									"scores":	[-4.295874444461016]
								}, {
									"case":	69,
									"scores":	[-4.295874444461016]
								}, {
									"case":	70,
									"scores":	[-4.295874444461016]
								}, {
									"case":	71,
									"scores":	[-4.295874444461016]
								}, {
									"case":	72,
									"scores":	[-4.295874444461016]
								}, {
									"case":	73,
									"scores":	[-4.295874444461016]
								}, {
									"case":	74,
									"scores":	[-4.295874444461016]
								}, {
									"case":	75,
									"scores":	[-4.295874444461016]
								}, {
									"case":	76,
									"scores":	[-4.295874444461016]
								}, {
									"case":	77,
									"scores":	[-4.295874444461016]
								}, {
									"case":	78,
									"scores":	[-4.295874444461016]
								}, {
									"case":	79,
									"scores":	[-4.295874444461016]
								}, {
									"case":	80,
									"scores":	[-4.295874444461016]
								}, {
									"case":	81,
									"scores":	[-4.295874444461016]
								}, {
									"case":	82,
									"scores":	[-4.295874444461016]
								}, {
									"case":	83,
									"scores":	[-4.295874444461016]
								}, {
									"case":	84,
									"scores":	[-4.295874444461016]
								}, {
									"case":	85,
									"scores":	[-4.295874444461016]
								}, {
									"case":	86,
									"scores":	[-4.295874444461016]
								}, {
									"case":	87,
									"scores":	[-4.295874444461016]
								}, {
									"case":	88,
									"scores":	[-4.295874444461016]
								}, {
									"case":	89,
									"scores":	[-4.295874444461016]
								}, {
									"case":	90,
									"scores":	[-4.295874444461016]
								}, {
									"case":	91,
									"scores":	[-4.295874444461016]
								}, {
									"case":	92,
									"scores":	[-4.295874444461016]
								}, {
									"case":	93,
									"scores":	[-4.295874444461016]
								}, {
									"case":	94,
									"scores":	[-4.295874444461016]
								}, {
									"case":	95,
									"scores":	[-4.295874444461016]
								}, {
									"case":	96,
									"scores":	[-4.295874444461016]
								}, {
									"case":	97,
									"scores":	[-4.295874444461016]
								}, {
									"case":	98,
									"scores":	[-4.295874444461016]
								}, {
									"case":	99,
									"scores":	[-4.295874444461016]
								}, {
									"case":	100,
									"scores":	[-4.295874444461016]
								}, {
									"case":	101,
									"scores":	[-4.295874444461016]
								}, {
									"case":	102,
									"scores":	[-4.295874444461016]
								}, {
									"case":	103,
									"scores":	[-4.295874444461016]
								}, {
									"case":	104,
									"scores":	[-4.295874444461016]
								}, {
									"case":	105,
									"scores":	[-4.295874444461016]
								}, {
									"case":	106,
									"scores":	[-4.295874444461016]
								}, {
									"case":	107,
									"scores":	[-4.295874444461016]
								}, {
									"case":	108,
									"scores":	[-4.295874444461016]
								}, {
									"case":	109,
									"scores":	[-4.295874444461016]
								}, {
									"case":	110,
									"scores":	[-4.295874444461016]
								}, {
									"case":	111,
									"scores":	[-4.295874444461016]
								}, {
									"case":	112,
									"scores":	[-4.295874444461016]
								}, {
									"case":	113,
									"scores":	[-4.295874444461016]
								}, {
									"case":	114,
									"scores":	[-4.295874444461016]
								}, {
									"case":	115,
									"scores":	[-4.295874444461016]
								}, {
									"case":	116,
									"scores":	[-4.295874444461016]
								}, {
									"case":	117,
									"scores":	[-4.295874444461016]
								}, {
									"case":	118,
									"scores":	[-4.295874444461016]
								}, {
									"case":	119,
									"scores":	[-4.295874444461016]
								}, {
									"case":	120,
									"scores":	[-4.295874444461016]
								}, {
									"case":	121,
									"scores":	[-4.295874444461016]
								}, {
									"case":	122,
									"scores":	[-4.295874444461016]
								}, {
									"case":	123,
									"scores":	[-4.295874444461016]
								}, {
									"case":	124,
									"scores":	[-4.295874444461016]
								}, {
									"case":	125,
									"scores":	[-4.295874444461016]
								}, {
									"case":	126,
									"scores":	[-4.295874444461016]
								}, {
									"case":	127,
									"scores":	[-4.295874444461016]
								}, {
									"case":	128,
									"scores":	[-4.295874444461016]
								}, {
									"case":	129,
									"scores":	[-4.295874444461016]
								}, {
									"case":	130,
									"scores":	[-4.295874444461016]
								}, {
									"case":	131,
									"scores":	[-4.295874444461016]
								}, {
									"case":	132,
									"scores":	[-4.295874444461016]
								}, {
									"case":	133,
									"scores":	[-4.295874444461016]
								}, {
									"case":	134,
									"scores":	[-4.295874444461016]
								}, {
									"case":	135,
									"scores":	[-4.295874444461016]
								}, {
									"case":	136,
									"scores":	[-4.295874444461016]
								}, {
									"case":	137,
									"scores":	[-4.295874444461016]
								}, {
									"case":	138,
									"scores":	[-4.295874444461016]
								}, {
									"case":	139,
									"scores":	[-4.295874444461016]
								}, {
									"case":	140,
									"scores":	[-4.295874444461016]
								}, {
									"case":	141,
									"scores":	[-4.295874444461016]
								}, {
									"case":	142,
									"scores":	[-4.295874444461016]
								}, {
									"case":	143,
									"scores":	[-4.295874444461016]
								}, {
									"case":	144,
									"scores":	[-4.295874444461016]
								}, {
									"case":	145,
									"scores":	[-4.295874444461016]
								}, {
									"case":	146,
									"scores":	[-4.295874444461016]
								}, {
									"case":	147,
									"scores":	[-4.295874444461016]
								}, {
									"case":	148,
									"scores":	[-4.295874444461016]
								}, {
									"case":	149,
									"scores":	[-4.295874444461016]
								}, {
									"case":	150,
									"scores":	[-4.295874444461016]
								}, {
									"case":	151,
									"scores":	[-4.295874444461016]
								}, {
									"case":	152,
									"scores":	[-4.295874444461016]
								}, {
									"case":	153,
									"scores":	[-4.295874444461016]
								}, {
									"case":	154,
									"scores":	[-4.295874444461016]
								}, {
									"case":	155,
									"scores":	[-4.295874444461016]
								}, {
									"case":	156,
									"scores":	[-4.295874444461016]
								}, {
									"case":	157,
									"scores":	[-4.295874444461016]
								}, {
									"case":	158,
									"scores":	[-4.295874444461016]
								}, {
									"case":	159,
									"scores":	[-4.295874444461016]
								}, {
									"case":	160,
									"scores":	[-4.295874444461016]
								}, {
									"case":	161,
									"scores":	[-4.295874444461016]
								}, {
									"case":	162,
									"scores":	[-4.295874444461016]
								}, {
									"case":	163,
									"scores":	[-4.295874444461016]
								}, {
									"case":	164,
									"scores":	[-4.295874444461016]
								}, {
									"case":	165,
									"scores":	[-4.295874444461016]
								}, {
									"case":	166,
									"scores":	[-4.295874444461016]
								}, {
									"case":	167,
									"scores":	[-4.295874444461016]
								}, {
									"case":	168,
									"scores":	[-4.295874444461016]
								}, {
									"case":	169,
									"scores":	[-4.295874444461016]
								}, {
									"case":	170,
									"scores":	[-4.295874444461016]
								}, {
									"case":	171,
									"scores":	[-4.295874444461016]
								}, {
									"case":	172,
									"scores":	[-4.295874444461016]
								}, {
									"case":	173,
									"scores":	[-4.295874444461016]
								}, {
									"case":	174,
									"scores":	[-4.295874444461016]
								}, {
									"case":	175,
									"scores":	[-4.295874444461016]
								}, {
									"case":	176,
									"scores":	[-4.295874444461016]
								}, {
									"case":	177,
									"scores":	[-4.295874444461016]
								}, {
									"case":	178,
									"scores":	[-4.295874444461016]
								}, {
									"case":	179,
									"scores":	[-4.295874444461016]
								}, {
									"case":	180,
									"scores":	[-4.295874444461016]
								}, {
									"case":	181,
									"scores":	[-4.295874444461016]
								}, {
									"case":	182,
									"scores":	[-4.295874444461016]
								}, {
									"case":	183,
									"scores":	[-4.295874444461016]
								}, {
									"case":	184,
									"scores":	[-4.295874444461016]
								}, {
									"case":	185,
									"scores":	[-4.295874444461016]
								}, {
									"case":	186,
									"scores":	[-4.295874444461016]
								}, {
									"case":	187,
									"scores":	[-4.295874444461016]
								}, {
									"case":	188,
									"scores":	[-4.295874444461016]
								}, {
									"case":	189,
									"scores":	[-4.295874444461016]
								}, {
									"case":	190,
									"scores":	[-4.295874444461016]
								}, {
									"case":	191,
									"scores":	[-4.295874444461016]
								}, {
									"case":	192,
									"scores":	[-4.295874444461016]
								}, {
									"case":	193,
									"scores":	[-4.295874444461016]
								}, {
									"case":	194,
									"scores":	[-4.295874444461016]
								}, {
									"case":	195,
									"scores":	[-4.295874444461016]
								}, {
									"case":	196,
									"scores":	[-4.295874444461016]
								}, {
									"case":	197,
									"scores":	[-4.295874444461016]
								}, {
									"case":	198,
									"scores":	[-4.295874444461016]
								}, {
									"case":	199,
									"scores":	[-4.295874444461016]
								}, {
									"case":	200,
									"scores":	[-4.295874444461016]
								}, {
									"case":	201,
									"scores":	[-4.295874444461016]
								}, {
									"case":	202,
									"scores":	[-4.295874444461016]
								}, {
									"case":	203,
									"scores":	[-4.295874444461016]
								}, {
									"case":	204,
									"scores":	[-4.295874444461016]
								}, {
									"case":	205,
									"scores":	[-4.295874444461016]
								}, {
									"case":	206,
									"scores":	[-4.295874444461016]
								}, {
									"case":	207,
									"scores":	[-4.295874444461016]
								}, {
									"case":	208,
									"scores":	[-4.295874444461016]
								}, {
									"case":	209,
									"scores":	[-4.295874444461016]
								}, {
									"case":	210,
									"scores":	[-4.295874444461016]
								}, {
									"case":	211,
									"scores":	[-4.295874444461016]
								}, {
									"case":	212,
									"scores":	[-4.295874444461016]
								}, {
									"case":	213,
									"scores":	[-4.295874444461016]
								}, {
									"case":	214,
									"scores":	[-4.295874444461016]
								}, {
									"case":	215,
									"scores":	[-4.295874444461016]
								}, {
									"case":	216,
									"scores":	[-4.295874444461016]
								}, {
									"case":	217,
									"scores":	[-4.295874444461016]
								}, {
									"case":	218,
									"scores":	[-4.295874444461016]
								}, {
									"case":	219,
									"scores":	[-4.295874444461016]
								}, {
									"case":	220,
									"scores":	[-4.295874444461016]
								}, {
									"case":	221,
									"scores":	[-4.295874444461016]
								}, {
									"case":	222,
									"scores":	[-4.295874444461016]
								}, {
									"case":	223,
									"scores":	[-4.295874444461016]
								}, {
									"case":	224,
									"scores":	[-4.295874444461016]
								}, {
									"case":	225,
									"scores":	[-4.295874444461016]
								}, {
									"case":	226,
									"scores":	[-4.295874444461016]
								}, {
									"case":	227,
									"scores":	[-4.295874444461016]
								}, {
									"case":	228,
									"scores":	[-4.295874444461016]
								}, {
									"case":	229,
									"scores":	[-4.295874444461016]
								}, {
									"case":	230,
									"scores":	[-4.295874444461016]
								}, {
									"case":	231,
									"scores":	[-4.295874444461016]
								}, {
									"case":	232,
									"scores":	[-4.295874444461016]
								}, {
									"case":	233,
									"scores":	[-4.295874444461016]
								}, {
									"case":	234,
									"scores":	[-4.295874444461016]
								}, {
									"case":	235,
									"scores":	[-4.295874444461016]
								}, {
									"case":	236,
									"scores":	[-4.295874444461016]
								}, {
									"case":	237,
									"scores":	[-4.295874444461016]
								}, {
									"case":	238,
									"scores":	[-4.295874444461016]
								}, {
									"case":	239,
									"scores":	[-4.295874444461016]
								}, {
									"case":	240,
									"scores":	[-4.295874444461016]
								}, {
									"case":	241,
									"scores":	[-4.295874444461016]
								}, {
									"case":	242,
									"scores":	[-4.295874444461016]
								}, {
									"case":	243,
									"scores":	[-4.295874444461016]
								}, {
									"case":	244,
									"scores":	[-4.295874444461016]
								}, {
									"case":	245,
									"scores":	[-4.295874444461016]
								}, {
									"case":	246,
									"scores":	[-4.295874444461016]
								}, {
									"case":	247,
									"scores":	[-4.295874444461016]
								}, {
									"case":	248,
									"scores":	[-4.295874444461016]
								}, {
									"case":	249,
									"scores":	[-4.295874444461016]
								}, {
									"case":	250,
									"scores":	[-4.295874444461016]
								}, {
									"case":	251,
									"scores":	[-4.295874444461016]
								}, {
									"case":	252,
									"scores":	[-4.295874444461016]
								}, {
									"case":	253,
									"scores":	[-4.295874444461016]
								}, {
									"case":	254,
									"scores":	[-4.295874444461016]
								}, {
									"case":	255,
									"scores":	[-4.295874444461016]
								}, {
									"case":	256,
									"scores":	[-4.295874444461016]
								}, {
									"case":	257,
									"scores":	[-4.295874444461016]
								}, {
									"case":	258,
									"scores":	[-4.295874444461016]
								}, {
									"case":	259,
									"scores":	[-4.295874444461016]
								}, {
									"case":	260,
									"scores":	[-4.295874444461016]
								}, {
									"case":	261,
									"scores":	[-4.295874444461016]
								}, {
									"case":	262,
									"scores":	[-4.295874444461016]
								}, {
									"case":	263,
									"scores":	[-4.295874444461016]
								}, {
									"case":	264,
									"scores":	[-4.295874444461016]
								}, {
									"case":	265,
									"scores":	[-4.295874444461016]
								}, {
									"case":	266,
									"scores":	[-4.295874444461016]
								}, {
									"case":	267,
									"scores":	[-4.295874444461016]
								}, {
									"case":	268,
									"scores":	[-4.295874444461016]
								}, {
									"case":	269,
									"scores":	[-4.295874444461016]
								}, {
									"case":	270,
									"scores":	[-4.295874444461016]
								}, {
									"case":	271,
									"scores":	[-4.295874444461016]
								}, {
									"case":	272,
									"scores":	[-4.295874444461016]
								}, {
									"case":	273,
									"scores":	[-4.295874444461016]
								}, {
									"case":	274,
									"scores":	[-4.295874444461016]
								}, {
									"case":	275,
									"scores":	[-4.295874444461016]
								}, {
									"case":	276,
									"scores":	[-4.295874444461016]
								}, {
									"case":	277,
									"scores":	[-4.295874444461016]
								}, {
									"case":	278,
									"scores":	[-4.295874444461016]
								}, {
									"case":	279,
									"scores":	[-4.295874444461016]
								}, {
									"case":	280,
									"scores":	[-4.295874444461016]
								}, {
									"case":	281,
									"scores":	[-4.295874444461016]
								}, {
									"case":	282,
									"scores":	[-4.295874444461016]
								}, {
									"case":	283,
									"scores":	[-4.295874444461016]
								}, {
									"case":	284,
									"scores":	[-4.295874444461016]
								}, {
									"case":	285,
									"scores":	[-4.295874444461016]
								}, {
									"case":	286,
									"scores":	[-4.295874444461016]
								}, {
									"case":	287,
									"scores":	[-4.295874444461016]
								}, {
									"case":	288,
									"scores":	[-4.295874444461016]
								}, {
									"case":	289,
									"scores":	[-4.295874444461016]
								}, {
									"case":	290,
									"scores":	[-4.295874444461016]
								}, {
									"case":	291,
									"scores":	[-4.295874444461016]
								}, {
									"case":	292,
									"scores":	[-4.295874444461016]
								}, {
									"case":	293,
									"scores":	[-4.295874444461016]
								}, {
									"case":	294,
									"scores":	[-4.295874444461016]
								}, {
									"case":	295,
									"scores":	[-4.295874444461016]
								}, {
									"case":	296,
									"scores":	[-4.295874444461016]
								}, {
									"case":	297,
									"scores":	[-4.295874444461016]
								}, {
									"case":	298,
									"scores":	[-4.295874444461016]
								}, {
									"case":	299,
									"scores":	[-4.295874444461016]
								}, {
									"case":	300,
									"scores":	[-4.295874444461016]
								}, {
									"case":	301,
									"scores":	[-4.295874444461016]
								}, {
									"case":	302,
									"scores":	[-4.295874444461016]
								}, {
									"case":	303,
									"scores":	[-4.295874444461016]
								}, {
									"case":	304,
									"scores":	[-4.295874444461016]
								}, {
									"case":	305,
									"scores":	[-4.295874444461016]
								}, {
									"case":	306,
									"scores":	[-4.295874444461016]
								}, {
									"case":	307,
									"scores":	[-4.295874444461016]
								}, {
									"case":	308,
									"scores":	[-4.295874444461016]
								}, {
									"case":	309,
									"scores":	[-4.295874444461016]
								}, {
									"case":	310,
									"scores":	[-4.295874444461016]
								}, {
									"case":	311,
									"scores":	[-4.295874444461016]
								}, {
									"case":	312,
									"scores":	[-4.295874444461016]
								}, {
									"case":	313,
									"scores":	[-4.295874444461016]
								}, {
									"case":	314,
									"scores":	[-4.295874444461016]
								}, {
									"case":	315,
									"scores":	[-4.295874444461016]
								}, {
									"case":	316,
									"scores":	[-4.295874444461016]
								}, {
									"case":	317,
									"scores":	[-4.295874444461016]
								}, {
									"case":	318,
									"scores":	[-4.295874444461016]
								}, {
									"case":	319,
									"scores":	[-4.295874444461016]
								}, {
									"case":	320,
									"scores":	[-4.295874444461016]
								}, {
									"case":	321,
									"scores":	[-4.295874444461016]
								}, {
									"case":	322,
									"scores":	[-4.295874444461016]
								}, {
									"case":	323,
									"scores":	[-4.295874444461016]
								}, {
									"case":	324,
									"scores":	[-4.295874444461016]
								}, {
									"case":	325,
									"scores":	[-4.295874444461016]
								}, {
									"case":	326,
									"scores":	[-4.295874444461016]
								}, {
									"case":	327,
									"scores":	[-4.295874444461016]
								}, {
									"case":	328,
									"scores":	[-4.295874444461016]
								}, {
									"case":	329,
									"scores":	[-4.295874444461016]
								}, {
									"case":	330,
									"scores":	[-4.295874444461016]
								}, {
									"case":	331,
									"scores":	[-4.295874444461016]
								}, {
									"case":	332,
									"scores":	[-4.295874444461016]
								}, {
									"case":	333,
									"scores":	[-4.295874444461016]
								}, {
									"case":	334,
									"scores":	[-4.295874444461016]
								}, {
									"case":	335,
									"scores":	[-4.295874444461016]
								}, {
									"case":	336,
									"scores":	[-4.295874444461016]
								}, {
									"case":	337,
									"scores":	[-4.295874444461016]
								}, {
									"case":	338,
									"scores":	[-4.295874444461016]
								}, {
									"case":	339,
									"scores":	[-4.295874444461016]
								}, {
									"case":	340,
									"scores":	[-4.295874444461016]
								}, {
									"case":	341,
									"scores":	[-4.295874444461016]
								}, {
									"case":	342,
									"scores":	[-4.295874444461016]
								}, {
									"case":	343,
									"scores":	[-4.295874444461016]
								}, {
									"case":	344,
									"scores":	[-4.295874444461016]
								}, {
									"case":	345,
									"scores":	[-4.295874444461016]
								}, {
									"case":	346,
									"scores":	[-4.295874444461016]
								}, {
									"case":	347,
									"scores":	[-4.295874444461016]
								}, {
									"case":	348,
									"scores":	[-4.295874444461016]
								}, {
									"case":	349,
									"scores":	[-4.295874444461016]
								}, {
									"case":	350,
									"scores":	[-4.295874444461016]
								}, {
									"case":	351,
									"scores":	[-4.295874444461016]
								}, {
									"case":	352,
									"scores":	[-4.295874444461016]
								}, {
									"case":	353,
									"scores":	[-4.295874444461016]
								}, {
									"case":	354,
									"scores":	[-4.295874444461016]
								}, {
									"case":	355,
									"scores":	[-4.295874444461016]
								}, {
									"case":	356,
									"scores":	[-4.295874444461016]
								}, {
									"case":	357,
									"scores":	[-4.295874444461016]
								}, {
									"case":	358,
									"scores":	[-4.295874444461016]
								}, {
									"case":	359,
									"scores":	[-4.295874444461016]
								}, {
									"case":	360,
									"scores":	[-4.295874444461016]
								}, {
									"case":	361,
									"scores":	[-4.295874444461016]
								}, {
									"case":	362,
									"scores":	[-4.295874444461016]
								}, {
									"case":	363,
									"scores":	[-4.295874444461016]
								}, {
									"case":	364,
									"scores":	[-4.295874444461016]
								}, {
									"case":	365,
									"scores":	[-4.295874444461016]
								}, {
									"case":	366,
									"scores":	[-4.295874444461016]
								}, {
									"case":	367,
									"scores":	[-4.295874444461016]
								}, {
									"case":	368,
									"scores":	[-4.295874444461016]
								}, {
									"case":	369,
									"scores":	[-4.295874444461016]
								}, {
									"case":	370,
									"scores":	[-4.295874444461016]
								}, {
									"case":	371,
									"scores":	[-4.295874444461016]
								}, {
									"case":	372,
									"scores":	[-4.295874444461016]
								}, {
									"case":	373,
									"scores":	[-4.295874444461016]
								}, {
									"case":	374,
									"scores":	[-4.295874444461016]
								}, {
									"case":	375,
									"scores":	[-4.295874444461016]
								}, {
									"case":	376,
									"scores":	[-4.295874444461016]
								}, {
									"case":	377,
									"scores":	[-4.295874444461016]
								}, {
									"case":	378,
									"scores":	[-4.295874444461016]
								}, {
									"case":	379,
									"scores":	[-4.295874444461016]
								}, {
									"case":	380,
									"scores":	[-4.295874444461016]
								}, {
									"case":	381,
									"scores":	[-4.295874444461016]
								}, {
									"case":	382,
									"scores":	[-4.295874444461016]
								}, {
									"case":	383,
									"scores":	[-4.295874444461016]
								}, {
									"case":	384,
									"scores":	[-4.295874444461016]
								}, {
									"case":	385,
									"scores":	[-4.295874444461016]
								}, {
									"case":	386,
									"scores":	[-4.295874444461016]
								}, {
									"case":	387,
									"scores":	[-4.295874444461016]
								}, {
									"case":	388,
									"scores":	[-4.295874444461016]
								}, {
									"case":	389,
									"scores":	[-4.295874444461016]
								}, {
									"case":	390,
									"scores":	[-4.295874444461016]
								}, {
									"case":	391,
									"scores":	[-4.295874444461016]
								}, {
									"case":	392,
									"scores":	[-4.295874444461016]
								}, {
									"case":	393,
									"scores":	[-4.295874444461016]
								}, {
									"case":	394,
									"scores":	[-8.6314862684610159, -7.9031454284610163, -7.5147567306610163, -8.7357230284610168, -7.8630066411610162, -7.436251971461016, -8.1846450284610164, -8.762110804161015, -8.0922792544610154, -8.8633201041610157, -8.6727571344610155, -8.5685203744610163, -8.2006255344610164, -8.4821251344610147, -7.7087415344610157, -8.4821251344610147, -7.9754270744610158, -8.4821251344610147, -7.7981642344610158, -8.6727571344610155, -8.6727571344610155, -8.6727571344610155, -8.6727571344610155, -8.6727571344610155, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.5715478344610165, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.6727571344610155, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.6727571344610155, -8.6727571344610155, -8.6727571344610155, -8.6727571344610155, -8.6727571344610155, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.6727571344610155, -8.6727571344610155, -8.6727571344610155, -8.0260141344610165, -8.6727571344610155, -8.6727571344610155, -8.4821251344610147, -8.4821251344610147, -8.4821251344610147, -8.5715478344610165, -8.6727571344610155, -8.6727571344610155, -8.6727571344610155, -8.4821251344610147, -8.4821251344610147, -8.5715478344610165, -8.4821251344610147]
								}, {
									"case":	395,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	396,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	397,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	398,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	399,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	400,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	401,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	402,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	403,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	404,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	405,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	406,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	407,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	408,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	409,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	410,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	411,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}, {
									"case":	412,
									"scores":	[-10.894268068461017, -10.165927228461015, -9.7775385306610154, -10.998504828461016, -10.125788441161017, -9.699033771461016, -10.447426828461015, -11.024892604161018, -10.355061054461016, -11.126101904161015, -10.935538934461018, -10.831302174461015, -10.463407334461017, -10.744906934461017, -9.9715233344610148, -10.744906934461017, -10.238208874461016, -10.744906934461017, -10.060946034461015, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.288795934461017, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.935538934461018, -10.935538934461018, -10.935538934461018, -10.744906934461017, -10.744906934461017, -10.834329634461017, -10.744906934461017]
								}]
						}, {
							"switch":	43,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	240,
							"begin_column":	2,
							"end_line":	240,
							"end_column":	60,
							"patch_codes":	["if (!__is_neg(\"\", \"L240\", 69, &(con), sizeof (con), &(p), sizeof (p), &(md5_str), sizeof (md5_str), &(con->uri.path), sizeof (con->uri.path), &(con->uri.path->ptr), sizeof (con->uri.path->ptr), &(p->conf.uri_prefix->used), sizeof (p->conf.uri_prefix->used), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p->conf.uri_prefix->ptr), sizeof (p->conf.uri_prefix->ptr), &(ts_str), sizeof (ts_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.secret), sizeof (p->conf.secret), &(srv), sizeof (srv), &(i), sizeof (i), &(con->uri.path->used), sizeof (con->uri.path->used), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->uri.query), sizeof (con->uri.query), &(con->uri.path->size), sizeof (con->uri.path->size), &(p->conf.uri_prefix->size), sizeof (p->conf.uri_prefix->size), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1;\n", "{\n}\n", "md5_str = (&HA1)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (&Md5Ctx)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (&con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (&i)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (&md5_str)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (&p)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (&p_d)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (&rel_uri)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (&srv)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (&ts)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (&ts_str)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (&HA1)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (&Md5Ctx)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (&con)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (&i)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (&md5_str)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (&p)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (&p_d)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (&rel_uri)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (&srv)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (&ts)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (&ts_str)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (0 * i)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (0 * ts)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (HA1 != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (HA1 == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (Md5Ctx != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (Md5Ctx == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (con != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (con == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (i != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (i * ts)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (i + 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (i - 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (i == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (md5_str != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (md5_str == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (p != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (p == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (p_d != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (p_d == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (rel_uri != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (rel_uri != md5_str)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (rel_uri != ts_str)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (rel_uri == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (rel_uri == md5_str)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (rel_uri == ts_str)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (srv != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (srv == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts != i)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts * i)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts + 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts + i)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts - 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts - i)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts == i)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts_str != 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts_str != md5_str)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts_str == 0)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - (ts_str == md5_str)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.759489133461015, -7.5592435684610155, -6.0021699564610156, -7.7242483334610155, -5.6006622071610161, -5.9697723374610163, -7.7887842684610158, -7.2591497341610154, -6.4669404324610156, -7.6660897341610159, -7.6781624144610152, -7.7134032144610156, -6.6047167144610164, -6.8342574144610158, -6.0634237144610159, -6.8342574144610158, -6.7651702144610155, -6.8342574144610158, -6.5003887144610157, -7.6781624144610152, -7.6781624144610152, -7.6781624144610152, -7.6781624144610152, -7.6781624144610152, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -7.2712224144610156, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -7.6781624144610152, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -7.6781624144610152, -7.6781624144610152, -7.6781624144610152, -7.6781624144610152, -7.6781624144610152, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -7.6781624144610152, -7.6781624144610152, -7.6781624144610152, -6.5903305444610156, -7.6781624144610152, -7.6781624144610152, -6.8342574144610158, -6.8342574144610158, -6.8342574144610158, -7.2712224144610156, -7.6781624144610152, -7.6781624144610152, -7.6781624144610152, -6.8342574144610158, -6.8342574144610158, -7.2712224144610156, -6.8342574144610158]
								}, {
									"case":	2,
									"scores":	[-4.295874444461016]
								}, {
									"case":	3,
									"scores":	[-4.295874444461016]
								}, {
									"case":	4,
									"scores":	[-4.295874444461016]
								}, {
									"case":	5,
									"scores":	[-4.295874444461016]
								}, {
									"case":	6,
									"scores":	[-4.295874444461016]
								}, {
									"case":	7,
									"scores":	[-4.295874444461016]
								}, {
									"case":	8,
									"scores":	[-4.295874444461016]
								}, {
									"case":	9,
									"scores":	[-4.295874444461016]
								}, {
									"case":	10,
									"scores":	[-4.295874444461016]
								}, {
									"case":	11,
									"scores":	[-4.295874444461016]
								}, {
									"case":	12,
									"scores":	[-4.295874444461016]
								}, {
									"case":	13,
									"scores":	[-4.295874444461016]
								}, {
									"case":	14,
									"scores":	[-4.295874444461016]
								}, {
									"case":	15,
									"scores":	[-4.295874444461016]
								}, {
									"case":	16,
									"scores":	[-4.295874444461016]
								}, {
									"case":	17,
									"scores":	[-4.295874444461016]
								}, {
									"case":	18,
									"scores":	[-4.295874444461016]
								}, {
									"case":	19,
									"scores":	[-4.295874444461016]
								}, {
									"case":	20,
									"scores":	[-4.295874444461016]
								}, {
									"case":	21,
									"scores":	[-4.295874444461016]
								}, {
									"case":	22,
									"scores":	[-4.295874444461016]
								}, {
									"case":	23,
									"scores":	[-4.295874444461016]
								}, {
									"case":	24,
									"scores":	[-4.295874444461016]
								}, {
									"case":	25,
									"scores":	[-4.295874444461016]
								}, {
									"case":	26,
									"scores":	[-4.295874444461016]
								}, {
									"case":	27,
									"scores":	[-4.295874444461016]
								}, {
									"case":	28,
									"scores":	[-4.295874444461016]
								}, {
									"case":	29,
									"scores":	[-4.295874444461016]
								}, {
									"case":	30,
									"scores":	[-4.295874444461016]
								}, {
									"case":	31,
									"scores":	[-4.295874444461016]
								}, {
									"case":	32,
									"scores":	[-4.295874444461016]
								}, {
									"case":	33,
									"scores":	[-4.295874444461016]
								}, {
									"case":	34,
									"scores":	[-4.295874444461016]
								}, {
									"case":	35,
									"scores":	[-4.295874444461016]
								}, {
									"case":	36,
									"scores":	[-4.295874444461016]
								}, {
									"case":	37,
									"scores":	[-4.295874444461016]
								}, {
									"case":	38,
									"scores":	[-4.295874444461016]
								}, {
									"case":	39,
									"scores":	[-4.295874444461016]
								}, {
									"case":	40,
									"scores":	[-4.295874444461016]
								}, {
									"case":	41,
									"scores":	[-4.295874444461016]
								}, {
									"case":	42,
									"scores":	[-4.295874444461016]
								}, {
									"case":	43,
									"scores":	[-4.295874444461016]
								}, {
									"case":	44,
									"scores":	[-4.295874444461016]
								}, {
									"case":	45,
									"scores":	[-4.295874444461016]
								}, {
									"case":	46,
									"scores":	[-4.295874444461016]
								}, {
									"case":	47,
									"scores":	[-4.295874444461016]
								}, {
									"case":	48,
									"scores":	[-4.295874444461016]
								}, {
									"case":	49,
									"scores":	[-4.295874444461016]
								}, {
									"case":	50,
									"scores":	[-4.295874444461016]
								}, {
									"case":	51,
									"scores":	[-4.295874444461016]
								}, {
									"case":	52,
									"scores":	[-4.295874444461016]
								}, {
									"case":	53,
									"scores":	[-4.295874444461016]
								}, {
									"case":	54,
									"scores":	[-4.295874444461016]
								}, {
									"case":	55,
									"scores":	[-4.295874444461016]
								}, {
									"case":	56,
									"scores":	[-4.295874444461016]
								}, {
									"case":	57,
									"scores":	[-4.295874444461016]
								}, {
									"case":	58,
									"scores":	[-4.295874444461016]
								}, {
									"case":	59,
									"scores":	[-4.295874444461016]
								}, {
									"case":	60,
									"scores":	[-4.295874444461016]
								}, {
									"case":	61,
									"scores":	[-4.295874444461016]
								}, {
									"case":	62,
									"scores":	[-4.295874444461016]
								}, {
									"case":	63,
									"scores":	[-4.295874444461016]
								}, {
									"case":	64,
									"scores":	[-4.295874444461016]
								}, {
									"case":	65,
									"scores":	[-4.295874444461016]
								}, {
									"case":	66,
									"scores":	[-4.295874444461016]
								}, {
									"case":	67,
									"scores":	[-4.295874444461016]
								}, {
									"case":	68,
									"scores":	[-4.295874444461016]
								}, {
									"case":	69,
									"scores":	[-4.295874444461016]
								}, {
									"case":	70,
									"scores":	[-4.295874444461016]
								}]
						}]
				}, {
					"line":	241,
					"switches":	[{
							"switch":	44,
							"types":	[[], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], [], [], [], [], [], []],
							"begin_line":	242,
							"begin_column":	0,
							"end_line":	242,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 0;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 16;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 1;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 213;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 219;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 225;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 234;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 244;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 251;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 261;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 268;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 282;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 310;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 324;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 32;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 403;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 408;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 4;\n", "if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	2,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	3,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	4,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	5,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	6,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	7,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	8,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	9,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	10,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	11,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	12,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	13,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	14,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	15,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	16,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	17,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	18,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	19,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	20,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	21,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	22,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	23,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	24,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	25,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	26,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	27,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	28,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	29,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	30,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	31,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	32,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	33,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	34,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	35,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	36,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	37,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	38,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	39,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	40,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	41,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	42,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	43,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	44,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	45,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	46,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	47,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	48,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	49,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	50,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	51,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	52,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	53,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	54,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	55,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	56,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	57,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	58,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	59,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	60,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	61,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	62,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	63,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	64,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	65,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	66,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	67,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	68,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	69,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	70,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	71,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	72,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	73,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	74,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	75,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	76,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	77,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	78,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	79,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	80,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	81,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	82,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	83,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	84,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	85,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	86,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	87,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	88,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	89,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	90,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	91,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	92,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	93,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	94,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	95,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	96,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	97,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	98,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	99,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	100,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	101,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	102,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	103,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	104,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	105,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	106,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	107,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	108,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	109,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	110,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	111,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	112,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	113,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	114,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	115,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	116,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	117,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	118,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	119,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	120,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	121,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	122,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	123,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	124,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	125,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	126,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	127,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	128,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	129,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	130,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	131,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	132,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	133,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	134,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	135,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	136,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	137,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	138,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	139,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	140,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	141,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	142,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	143,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	144,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	145,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	146,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	147,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	148,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	149,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	150,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	151,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	152,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	153,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	154,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	155,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	156,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	157,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	158,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	159,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	160,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	161,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	162,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	163,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	164,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	165,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	166,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	167,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	168,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	169,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	170,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	171,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	172,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	173,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	174,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	175,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	176,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	177,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	178,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	179,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	180,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	181,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	182,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	183,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	184,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	185,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	186,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	187,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	188,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	189,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	190,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	191,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	192,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	193,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	194,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	195,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	196,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	197,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	198,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	199,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	200,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	201,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	202,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	203,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	204,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	205,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	206,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	207,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	208,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	209,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	210,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	211,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	212,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	213,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	214,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	215,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	216,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	217,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	218,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	219,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	220,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	221,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	222,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	223,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	224,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	225,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	226,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	227,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	228,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	229,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	230,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	231,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	232,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	233,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	234,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	235,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	236,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	237,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	238,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	239,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	240,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	241,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	242,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	243,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	244,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	245,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	246,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	247,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	248,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	249,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	250,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	251,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	252,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	253,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	254,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	255,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	256,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	257,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	258,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	259,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	260,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	261,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	262,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	263,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	264,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	265,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	266,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	267,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	268,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	269,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	270,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	271,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	272,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	273,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	274,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	275,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	276,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	277,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	278,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	279,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	280,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	281,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	282,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	283,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	284,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	285,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	286,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	287,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	288,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	289,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	290,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	291,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	292,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	293,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	294,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	295,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	296,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	297,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	298,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	299,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	300,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	301,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	302,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	303,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	304,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	305,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	306,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	307,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	308,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	309,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	310,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	311,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	312,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	313,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	314,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	315,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	316,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	317,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	318,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	319,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	320,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	321,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	322,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	323,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	324,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	325,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	326,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	327,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	328,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	329,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	330,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	331,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	332,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	333,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	334,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	335,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	336,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	337,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	338,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	339,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	340,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	341,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	342,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	343,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	344,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	345,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	346,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	347,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	348,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	349,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	350,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	351,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	352,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	353,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	354,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	355,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	356,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	357,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	358,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	359,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	360,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	361,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	362,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	363,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	364,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	365,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	366,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	367,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	368,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	369,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	370,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	371,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	372,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	373,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	374,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	375,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	376,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	377,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	378,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	379,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	380,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	381,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	382,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	383,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	384,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	385,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	386,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	387,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	388,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	389,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	390,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	391,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	392,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	393,
									"scores":	[-4.9275508061434969, -9.1914798511434963, -9.1266943271434968, -9.4192602271434964, -8.8854194471435, -8.8451947271434967, -8.3533107271435, -9.2130895671434967, -8.6199962671434971, -9.1266943271434968, -8.4427334271435, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.3173263271435, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.3173263271435, -9.3173263271435, -9.3173263271435, -9.3173263271435, -9.3173263271435, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.3173263271435, -9.3173263271435, -9.3173263271435, -8.6705833271434969, -9.3173263271435, -9.3173263271435, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.2161170271434969, -9.3173263271435, -9.3173263271435, -9.3173263271435, -9.1266943271434968, -9.1266943271434968, -9.2161170271434969, -9.1266943271434968, -9.3173263271435, -9.3173263271435, -9.3173263271435, -9.3173263271435, -9.3173263271435, -9.3173263271435, -9.3173263271435, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.3173263271435, -9.3173263271435, -9.3173263271435, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -8.6705833271434969, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.1266943271434968, -9.2161170271434969, -9.3173263271435]
								}, {
									"case":	394,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	395,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	396,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	397,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	398,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	399,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	400,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	401,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	402,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	403,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	404,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	405,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	406,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	407,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	408,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	409,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	410,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}, {
									"case":	411,
									"scores":	[-7.1903326061434978, -11.454261651143497, -11.389476127143496, -11.682042027143495, -11.148201247143497, -11.107976527143496, -10.616092527143497, -11.4758713671435, -10.8827780671435, -11.389476127143496, -10.705515227143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -10.933365127143496, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.580108127143497, -11.580108127143497, -11.580108127143497, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -10.933365127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.389476127143496, -11.478898827143496, -11.580108127143497]
								}]
						}, {
							"switch":	45,
							"types":	[[35], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], []],
							"begin_line":	242,
							"begin_column":	2,
							"end_line":	248,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if ((!is_hex_len(md5_str, 32)) || __is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!ASN1_INTEGER_set_uint64(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_abs_is_word(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_add_word(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_is_word(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_mul_word(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_set_word(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_sub_word(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!EVP_CIPHER_meth_set_flags(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!EVP_MD_meth_set_flags(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!SSL_CTX_set_block_padding(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!SSL_CTX_set_num_tickets(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!SSL_set_block_padding(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!SSL_set_num_tickets(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!VALGRIND_PRINTF(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!VALGRIND_PRINTF_BACKTRACE(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!X509_STORE_set_flags(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!X509_VERIFY_PARAM_clear_flags(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!X509_VERIFY_PARAM_set_flags(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!bitset_test_bit(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!buffer_append_long_hex(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!buffer_prepare_append(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!buffer_prepare_copy(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!g_hook_destroy(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!g_relation_exists(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!log_trace(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!mblen(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!mlock(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!munlock(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!munmap(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!printf(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!pthread_attr_setguardsize(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!pthread_attr_setstacksize(md5_str, 32)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if ((!is_hex_len(md5_str, 32)) && !__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.0789948662281454, -6.7293470962281461, -5.566407050228146, -6.4980595312281473, -5.2893882682281461, -5.3368663502281457, -4.7955733502281461, -6.4455528502281467, -5.4973198502281457, -5.566407050228146, -5.232538350228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -6.4103120502281463, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -5.3224801802281458, -6.4103120502281463, -6.4103120502281463, -5.566407050228146, -5.566407050228146, -5.566407050228146, -6.0033720502281476, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -5.566407050228146, -5.566407050228146, -6.0033720502281476, -5.566407050228146, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -6.4103120502281463, -6.4103120502281463, -6.4103120502281463, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.3224801802281458, -5.566407050228146, -5.566407050228146, -5.566407050228146, -5.566407050228146, -6.0033720502281476, -6.4103120502281463]
								}, {
									"case":	2,
									"scores":	[-1.9265724514281461, -5.5769246814281468, -4.4139846354281467, -5.3456371164281453, -4.1369658534281459, -4.1844439354281464, -3.6431509354281459, -5.2931304354281457, -4.3448974354281464, -4.4139846354281467, -4.0801159354281458, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -4.1700577654281457, -5.2578896354281461, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.8509496354281465, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.8509496354281465, -4.4139846354281467, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.1700577654281457, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.8509496354281465, -5.2578896354281461]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-1.9265724514281461, -5.5769246814281468, -4.4139846354281467, -5.3456371164281453, -4.1369658534281459, -4.1844439354281464, -3.6431509354281459, -5.2931304354281457, -4.3448974354281464, -4.4139846354281467, -4.0801159354281458, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -4.1700577654281457, -5.2578896354281461, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.8509496354281465, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.8509496354281465, -4.4139846354281467, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -5.2578896354281461, -5.2578896354281461, -5.2578896354281461, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.1700577654281457, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.4139846354281467, -4.8509496354281465, -5.2578896354281461]
								}]
						}, {
							"switch":	46,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	242,
							"begin_column":	2,
							"end_line":	248,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    if (!is_hex_len(md5_str, 32)) {\n        if (con->conf.log_request_handling) {\n            log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n        }\n        return HANDLER_GO_ON;\n    }\n", "if (!__is_neg(\"\", \"L242\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(p), sizeof (p), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p_d), sizeof (p_d), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)) && (!is_hex_len(md5_str, 32))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.285904523143496, -7.9362567531434962, -6.7733167071434961, -7.7049691881434956, -6.4962979251434962, -6.5437760071434958, -6.0024830071434963, -7.652462507143496, -6.7042295071434959, -6.7733167071434961, -6.439448007143497, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -7.6172217071434964, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -6.529389837143496, -7.6172217071434964, -7.6172217071434964, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -7.2102817071434959, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -6.7733167071434961, -6.7733167071434961, -7.2102817071434959, -6.7733167071434961, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -7.6172217071434964, -7.6172217071434964, -7.6172217071434964, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.529389837143496, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -6.7733167071434961, -7.2102817071434959, -7.6172217071434964]
								}, {
									"case":	2,
									"scores":	[-3.5442387661434962, -6.0316509501434963, -7.1945909961434964, -6.9633034311434967, -5.7546321681434955, -5.802110250143496, -5.2608172501434964, -6.9107967501434961, -6.0316509501434963, -5.962563750143496, -5.6977822501434954, -6.0316509501434963, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -5.7877240801434962, -6.8755559501434966, -6.8755559501434966, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.4686159501434961, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -6.0316509501434963, -6.0316509501434963, -6.4686159501434961, -6.0316509501434963, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.8755559501434966, -6.8755559501434966, -6.8755559501434966, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -5.7877240801434962, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.4686159501434961, -6.8755559501434966, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.8755559501434966, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963, -6.0316509501434963]
								}]
						}]
				}, {
					"line":	248,
					"switches":	[{
							"switch":	47,
							"types":	[[], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], [], [], [], [], [], []],
							"begin_line":	249,
							"begin_column":	0,
							"end_line":	249,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 0;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 16;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 1;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 213;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 219;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 225;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 234;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 244;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 251;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 261;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 268;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 282;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 310;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 324;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 32;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 403;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 408;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 4;\n", "if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.13425278592086]
								}, {
									"case":	2,
									"scores":	[-4.13425278592086]
								}, {
									"case":	3,
									"scores":	[-4.13425278592086]
								}, {
									"case":	4,
									"scores":	[-4.13425278592086]
								}, {
									"case":	5,
									"scores":	[-4.13425278592086]
								}, {
									"case":	6,
									"scores":	[-4.13425278592086]
								}, {
									"case":	7,
									"scores":	[-4.13425278592086]
								}, {
									"case":	8,
									"scores":	[-4.13425278592086]
								}, {
									"case":	9,
									"scores":	[-4.13425278592086]
								}, {
									"case":	10,
									"scores":	[-4.13425278592086]
								}, {
									"case":	11,
									"scores":	[-4.13425278592086]
								}, {
									"case":	12,
									"scores":	[-4.13425278592086]
								}, {
									"case":	13,
									"scores":	[-4.13425278592086]
								}, {
									"case":	14,
									"scores":	[-4.13425278592086]
								}, {
									"case":	15,
									"scores":	[-4.13425278592086]
								}, {
									"case":	16,
									"scores":	[-4.13425278592086]
								}, {
									"case":	17,
									"scores":	[-4.13425278592086]
								}, {
									"case":	18,
									"scores":	[-4.13425278592086]
								}, {
									"case":	19,
									"scores":	[-4.13425278592086]
								}, {
									"case":	20,
									"scores":	[-4.13425278592086]
								}, {
									"case":	21,
									"scores":	[-4.13425278592086]
								}, {
									"case":	22,
									"scores":	[-4.13425278592086]
								}, {
									"case":	23,
									"scores":	[-4.13425278592086]
								}, {
									"case":	24,
									"scores":	[-4.13425278592086]
								}, {
									"case":	25,
									"scores":	[-4.13425278592086]
								}, {
									"case":	26,
									"scores":	[-4.13425278592086]
								}, {
									"case":	27,
									"scores":	[-4.13425278592086]
								}, {
									"case":	28,
									"scores":	[-4.13425278592086]
								}, {
									"case":	29,
									"scores":	[-4.13425278592086]
								}, {
									"case":	30,
									"scores":	[-4.13425278592086]
								}, {
									"case":	31,
									"scores":	[-4.13425278592086]
								}, {
									"case":	32,
									"scores":	[-4.13425278592086]
								}, {
									"case":	33,
									"scores":	[-4.13425278592086]
								}, {
									"case":	34,
									"scores":	[-4.13425278592086]
								}, {
									"case":	35,
									"scores":	[-4.13425278592086]
								}, {
									"case":	36,
									"scores":	[-4.13425278592086]
								}, {
									"case":	37,
									"scores":	[-4.13425278592086]
								}, {
									"case":	38,
									"scores":	[-4.13425278592086]
								}, {
									"case":	39,
									"scores":	[-4.13425278592086]
								}, {
									"case":	40,
									"scores":	[-4.13425278592086]
								}, {
									"case":	41,
									"scores":	[-4.13425278592086]
								}, {
									"case":	42,
									"scores":	[-4.13425278592086]
								}, {
									"case":	43,
									"scores":	[-4.13425278592086]
								}, {
									"case":	44,
									"scores":	[-4.13425278592086]
								}, {
									"case":	45,
									"scores":	[-4.13425278592086]
								}, {
									"case":	46,
									"scores":	[-4.13425278592086]
								}, {
									"case":	47,
									"scores":	[-4.13425278592086]
								}, {
									"case":	48,
									"scores":	[-4.13425278592086]
								}, {
									"case":	49,
									"scores":	[-4.13425278592086]
								}, {
									"case":	50,
									"scores":	[-4.13425278592086]
								}, {
									"case":	51,
									"scores":	[-4.13425278592086]
								}, {
									"case":	52,
									"scores":	[-4.13425278592086]
								}, {
									"case":	53,
									"scores":	[-4.13425278592086]
								}, {
									"case":	54,
									"scores":	[-4.13425278592086]
								}, {
									"case":	55,
									"scores":	[-4.13425278592086]
								}, {
									"case":	56,
									"scores":	[-4.13425278592086]
								}, {
									"case":	57,
									"scores":	[-4.13425278592086]
								}, {
									"case":	58,
									"scores":	[-4.13425278592086]
								}, {
									"case":	59,
									"scores":	[-4.13425278592086]
								}, {
									"case":	60,
									"scores":	[-4.13425278592086]
								}, {
									"case":	61,
									"scores":	[-4.13425278592086]
								}, {
									"case":	62,
									"scores":	[-4.13425278592086]
								}, {
									"case":	63,
									"scores":	[-4.13425278592086]
								}, {
									"case":	64,
									"scores":	[-4.13425278592086]
								}, {
									"case":	65,
									"scores":	[-4.13425278592086]
								}, {
									"case":	66,
									"scores":	[-4.13425278592086]
								}, {
									"case":	67,
									"scores":	[-4.13425278592086]
								}, {
									"case":	68,
									"scores":	[-4.13425278592086]
								}, {
									"case":	69,
									"scores":	[-4.13425278592086]
								}, {
									"case":	70,
									"scores":	[-4.13425278592086]
								}, {
									"case":	71,
									"scores":	[-4.13425278592086]
								}, {
									"case":	72,
									"scores":	[-4.13425278592086]
								}, {
									"case":	73,
									"scores":	[-4.13425278592086]
								}, {
									"case":	74,
									"scores":	[-4.13425278592086]
								}, {
									"case":	75,
									"scores":	[-4.13425278592086]
								}, {
									"case":	76,
									"scores":	[-4.13425278592086]
								}, {
									"case":	77,
									"scores":	[-4.13425278592086]
								}, {
									"case":	78,
									"scores":	[-4.13425278592086]
								}, {
									"case":	79,
									"scores":	[-4.13425278592086]
								}, {
									"case":	80,
									"scores":	[-4.13425278592086]
								}, {
									"case":	81,
									"scores":	[-4.13425278592086]
								}, {
									"case":	82,
									"scores":	[-4.13425278592086]
								}, {
									"case":	83,
									"scores":	[-4.13425278592086]
								}, {
									"case":	84,
									"scores":	[-4.13425278592086]
								}, {
									"case":	85,
									"scores":	[-4.13425278592086]
								}, {
									"case":	86,
									"scores":	[-4.13425278592086]
								}, {
									"case":	87,
									"scores":	[-4.13425278592086]
								}, {
									"case":	88,
									"scores":	[-4.13425278592086]
								}, {
									"case":	89,
									"scores":	[-4.13425278592086]
								}, {
									"case":	90,
									"scores":	[-4.13425278592086]
								}, {
									"case":	91,
									"scores":	[-4.13425278592086]
								}, {
									"case":	92,
									"scores":	[-4.13425278592086]
								}, {
									"case":	93,
									"scores":	[-4.13425278592086]
								}, {
									"case":	94,
									"scores":	[-4.13425278592086]
								}, {
									"case":	95,
									"scores":	[-4.13425278592086]
								}, {
									"case":	96,
									"scores":	[-4.13425278592086]
								}, {
									"case":	97,
									"scores":	[-4.13425278592086]
								}, {
									"case":	98,
									"scores":	[-4.13425278592086]
								}, {
									"case":	99,
									"scores":	[-4.13425278592086]
								}, {
									"case":	100,
									"scores":	[-4.13425278592086]
								}, {
									"case":	101,
									"scores":	[-4.13425278592086]
								}, {
									"case":	102,
									"scores":	[-4.13425278592086]
								}, {
									"case":	103,
									"scores":	[-4.13425278592086]
								}, {
									"case":	104,
									"scores":	[-4.13425278592086]
								}, {
									"case":	105,
									"scores":	[-4.13425278592086]
								}, {
									"case":	106,
									"scores":	[-4.13425278592086]
								}, {
									"case":	107,
									"scores":	[-4.13425278592086]
								}, {
									"case":	108,
									"scores":	[-4.13425278592086]
								}, {
									"case":	109,
									"scores":	[-4.13425278592086]
								}, {
									"case":	110,
									"scores":	[-4.13425278592086]
								}, {
									"case":	111,
									"scores":	[-4.13425278592086]
								}, {
									"case":	112,
									"scores":	[-4.13425278592086]
								}, {
									"case":	113,
									"scores":	[-4.13425278592086]
								}, {
									"case":	114,
									"scores":	[-4.13425278592086]
								}, {
									"case":	115,
									"scores":	[-4.13425278592086]
								}, {
									"case":	116,
									"scores":	[-4.13425278592086]
								}, {
									"case":	117,
									"scores":	[-4.13425278592086]
								}, {
									"case":	118,
									"scores":	[-4.13425278592086]
								}, {
									"case":	119,
									"scores":	[-4.13425278592086]
								}, {
									"case":	120,
									"scores":	[-4.13425278592086]
								}, {
									"case":	121,
									"scores":	[-4.13425278592086]
								}, {
									"case":	122,
									"scores":	[-4.13425278592086]
								}, {
									"case":	123,
									"scores":	[-4.13425278592086]
								}, {
									"case":	124,
									"scores":	[-4.13425278592086]
								}, {
									"case":	125,
									"scores":	[-4.13425278592086]
								}, {
									"case":	126,
									"scores":	[-4.13425278592086]
								}, {
									"case":	127,
									"scores":	[-4.13425278592086]
								}, {
									"case":	128,
									"scores":	[-4.13425278592086]
								}, {
									"case":	129,
									"scores":	[-4.13425278592086]
								}, {
									"case":	130,
									"scores":	[-4.13425278592086]
								}, {
									"case":	131,
									"scores":	[-4.13425278592086]
								}, {
									"case":	132,
									"scores":	[-4.13425278592086]
								}, {
									"case":	133,
									"scores":	[-4.13425278592086]
								}, {
									"case":	134,
									"scores":	[-4.13425278592086]
								}, {
									"case":	135,
									"scores":	[-4.13425278592086]
								}, {
									"case":	136,
									"scores":	[-4.13425278592086]
								}, {
									"case":	137,
									"scores":	[-4.13425278592086]
								}, {
									"case":	138,
									"scores":	[-4.13425278592086]
								}, {
									"case":	139,
									"scores":	[-4.13425278592086]
								}, {
									"case":	140,
									"scores":	[-4.13425278592086]
								}, {
									"case":	141,
									"scores":	[-4.13425278592086]
								}, {
									"case":	142,
									"scores":	[-4.13425278592086]
								}, {
									"case":	143,
									"scores":	[-4.13425278592086]
								}, {
									"case":	144,
									"scores":	[-4.13425278592086]
								}, {
									"case":	145,
									"scores":	[-4.13425278592086]
								}, {
									"case":	146,
									"scores":	[-4.13425278592086]
								}, {
									"case":	147,
									"scores":	[-4.13425278592086]
								}, {
									"case":	148,
									"scores":	[-4.13425278592086]
								}, {
									"case":	149,
									"scores":	[-4.13425278592086]
								}, {
									"case":	150,
									"scores":	[-4.13425278592086]
								}, {
									"case":	151,
									"scores":	[-4.13425278592086]
								}, {
									"case":	152,
									"scores":	[-4.13425278592086]
								}, {
									"case":	153,
									"scores":	[-4.13425278592086]
								}, {
									"case":	154,
									"scores":	[-4.13425278592086]
								}, {
									"case":	155,
									"scores":	[-4.13425278592086]
								}, {
									"case":	156,
									"scores":	[-4.13425278592086]
								}, {
									"case":	157,
									"scores":	[-4.13425278592086]
								}, {
									"case":	158,
									"scores":	[-4.13425278592086]
								}, {
									"case":	159,
									"scores":	[-4.13425278592086]
								}, {
									"case":	160,
									"scores":	[-4.13425278592086]
								}, {
									"case":	161,
									"scores":	[-4.13425278592086]
								}, {
									"case":	162,
									"scores":	[-4.13425278592086]
								}, {
									"case":	163,
									"scores":	[-4.13425278592086]
								}, {
									"case":	164,
									"scores":	[-4.13425278592086]
								}, {
									"case":	165,
									"scores":	[-4.13425278592086]
								}, {
									"case":	166,
									"scores":	[-4.13425278592086]
								}, {
									"case":	167,
									"scores":	[-4.13425278592086]
								}, {
									"case":	168,
									"scores":	[-4.13425278592086]
								}, {
									"case":	169,
									"scores":	[-4.13425278592086]
								}, {
									"case":	170,
									"scores":	[-4.13425278592086]
								}, {
									"case":	171,
									"scores":	[-4.13425278592086]
								}, {
									"case":	172,
									"scores":	[-4.13425278592086]
								}, {
									"case":	173,
									"scores":	[-4.13425278592086]
								}, {
									"case":	174,
									"scores":	[-4.13425278592086]
								}, {
									"case":	175,
									"scores":	[-4.13425278592086]
								}, {
									"case":	176,
									"scores":	[-4.13425278592086]
								}, {
									"case":	177,
									"scores":	[-4.13425278592086]
								}, {
									"case":	178,
									"scores":	[-4.13425278592086]
								}, {
									"case":	179,
									"scores":	[-4.13425278592086]
								}, {
									"case":	180,
									"scores":	[-4.13425278592086]
								}, {
									"case":	181,
									"scores":	[-4.13425278592086]
								}, {
									"case":	182,
									"scores":	[-4.13425278592086]
								}, {
									"case":	183,
									"scores":	[-4.13425278592086]
								}, {
									"case":	184,
									"scores":	[-4.13425278592086]
								}, {
									"case":	185,
									"scores":	[-4.13425278592086]
								}, {
									"case":	186,
									"scores":	[-4.13425278592086]
								}, {
									"case":	187,
									"scores":	[-4.13425278592086]
								}, {
									"case":	188,
									"scores":	[-4.13425278592086]
								}, {
									"case":	189,
									"scores":	[-4.13425278592086]
								}, {
									"case":	190,
									"scores":	[-4.13425278592086]
								}, {
									"case":	191,
									"scores":	[-4.13425278592086]
								}, {
									"case":	192,
									"scores":	[-4.13425278592086]
								}, {
									"case":	193,
									"scores":	[-4.13425278592086]
								}, {
									"case":	194,
									"scores":	[-4.13425278592086]
								}, {
									"case":	195,
									"scores":	[-4.13425278592086]
								}, {
									"case":	196,
									"scores":	[-4.13425278592086]
								}, {
									"case":	197,
									"scores":	[-4.13425278592086]
								}, {
									"case":	198,
									"scores":	[-4.13425278592086]
								}, {
									"case":	199,
									"scores":	[-4.13425278592086]
								}, {
									"case":	200,
									"scores":	[-4.13425278592086]
								}, {
									"case":	201,
									"scores":	[-4.13425278592086]
								}, {
									"case":	202,
									"scores":	[-4.13425278592086]
								}, {
									"case":	203,
									"scores":	[-4.13425278592086]
								}, {
									"case":	204,
									"scores":	[-4.13425278592086]
								}, {
									"case":	205,
									"scores":	[-4.13425278592086]
								}, {
									"case":	206,
									"scores":	[-4.13425278592086]
								}, {
									"case":	207,
									"scores":	[-4.13425278592086]
								}, {
									"case":	208,
									"scores":	[-4.13425278592086]
								}, {
									"case":	209,
									"scores":	[-4.13425278592086]
								}, {
									"case":	210,
									"scores":	[-4.13425278592086]
								}, {
									"case":	211,
									"scores":	[-4.13425278592086]
								}, {
									"case":	212,
									"scores":	[-4.13425278592086]
								}, {
									"case":	213,
									"scores":	[-4.13425278592086]
								}, {
									"case":	214,
									"scores":	[-4.13425278592086]
								}, {
									"case":	215,
									"scores":	[-4.13425278592086]
								}, {
									"case":	216,
									"scores":	[-4.13425278592086]
								}, {
									"case":	217,
									"scores":	[-4.13425278592086]
								}, {
									"case":	218,
									"scores":	[-4.13425278592086]
								}, {
									"case":	219,
									"scores":	[-4.13425278592086]
								}, {
									"case":	220,
									"scores":	[-4.13425278592086]
								}, {
									"case":	221,
									"scores":	[-4.13425278592086]
								}, {
									"case":	222,
									"scores":	[-4.13425278592086]
								}, {
									"case":	223,
									"scores":	[-4.13425278592086]
								}, {
									"case":	224,
									"scores":	[-4.13425278592086]
								}, {
									"case":	225,
									"scores":	[-4.13425278592086]
								}, {
									"case":	226,
									"scores":	[-4.13425278592086]
								}, {
									"case":	227,
									"scores":	[-4.13425278592086]
								}, {
									"case":	228,
									"scores":	[-4.13425278592086]
								}, {
									"case":	229,
									"scores":	[-4.13425278592086]
								}, {
									"case":	230,
									"scores":	[-4.13425278592086]
								}, {
									"case":	231,
									"scores":	[-4.13425278592086]
								}, {
									"case":	232,
									"scores":	[-4.13425278592086]
								}, {
									"case":	233,
									"scores":	[-4.13425278592086]
								}, {
									"case":	234,
									"scores":	[-4.13425278592086]
								}, {
									"case":	235,
									"scores":	[-4.13425278592086]
								}, {
									"case":	236,
									"scores":	[-4.13425278592086]
								}, {
									"case":	237,
									"scores":	[-4.13425278592086]
								}, {
									"case":	238,
									"scores":	[-4.13425278592086]
								}, {
									"case":	239,
									"scores":	[-4.13425278592086]
								}, {
									"case":	240,
									"scores":	[-4.13425278592086]
								}, {
									"case":	241,
									"scores":	[-4.13425278592086]
								}, {
									"case":	242,
									"scores":	[-4.13425278592086]
								}, {
									"case":	243,
									"scores":	[-4.13425278592086]
								}, {
									"case":	244,
									"scores":	[-4.13425278592086]
								}, {
									"case":	245,
									"scores":	[-4.13425278592086]
								}, {
									"case":	246,
									"scores":	[-4.13425278592086]
								}, {
									"case":	247,
									"scores":	[-4.13425278592086]
								}, {
									"case":	248,
									"scores":	[-4.13425278592086]
								}, {
									"case":	249,
									"scores":	[-4.13425278592086]
								}, {
									"case":	250,
									"scores":	[-4.13425278592086]
								}, {
									"case":	251,
									"scores":	[-4.13425278592086]
								}, {
									"case":	252,
									"scores":	[-4.13425278592086]
								}, {
									"case":	253,
									"scores":	[-4.13425278592086]
								}, {
									"case":	254,
									"scores":	[-4.13425278592086]
								}, {
									"case":	255,
									"scores":	[-4.13425278592086]
								}, {
									"case":	256,
									"scores":	[-4.13425278592086]
								}, {
									"case":	257,
									"scores":	[-4.13425278592086]
								}, {
									"case":	258,
									"scores":	[-4.13425278592086]
								}, {
									"case":	259,
									"scores":	[-4.13425278592086]
								}, {
									"case":	260,
									"scores":	[-4.13425278592086]
								}, {
									"case":	261,
									"scores":	[-4.13425278592086]
								}, {
									"case":	262,
									"scores":	[-4.13425278592086]
								}, {
									"case":	263,
									"scores":	[-4.13425278592086]
								}, {
									"case":	264,
									"scores":	[-4.13425278592086]
								}, {
									"case":	265,
									"scores":	[-4.13425278592086]
								}, {
									"case":	266,
									"scores":	[-4.13425278592086]
								}, {
									"case":	267,
									"scores":	[-4.13425278592086]
								}, {
									"case":	268,
									"scores":	[-4.13425278592086]
								}, {
									"case":	269,
									"scores":	[-4.13425278592086]
								}, {
									"case":	270,
									"scores":	[-4.13425278592086]
								}, {
									"case":	271,
									"scores":	[-4.13425278592086]
								}, {
									"case":	272,
									"scores":	[-4.13425278592086]
								}, {
									"case":	273,
									"scores":	[-4.13425278592086]
								}, {
									"case":	274,
									"scores":	[-4.13425278592086]
								}, {
									"case":	275,
									"scores":	[-4.13425278592086]
								}, {
									"case":	276,
									"scores":	[-4.13425278592086]
								}, {
									"case":	277,
									"scores":	[-4.13425278592086]
								}, {
									"case":	278,
									"scores":	[-4.13425278592086]
								}, {
									"case":	279,
									"scores":	[-4.13425278592086]
								}, {
									"case":	280,
									"scores":	[-4.13425278592086]
								}, {
									"case":	281,
									"scores":	[-4.13425278592086]
								}, {
									"case":	282,
									"scores":	[-4.13425278592086]
								}, {
									"case":	283,
									"scores":	[-4.13425278592086]
								}, {
									"case":	284,
									"scores":	[-4.13425278592086]
								}, {
									"case":	285,
									"scores":	[-4.13425278592086]
								}, {
									"case":	286,
									"scores":	[-4.13425278592086]
								}, {
									"case":	287,
									"scores":	[-4.13425278592086]
								}, {
									"case":	288,
									"scores":	[-4.13425278592086]
								}, {
									"case":	289,
									"scores":	[-4.13425278592086]
								}, {
									"case":	290,
									"scores":	[-4.13425278592086]
								}, {
									"case":	291,
									"scores":	[-4.13425278592086]
								}, {
									"case":	292,
									"scores":	[-4.13425278592086]
								}, {
									"case":	293,
									"scores":	[-4.13425278592086]
								}, {
									"case":	294,
									"scores":	[-4.13425278592086]
								}, {
									"case":	295,
									"scores":	[-4.13425278592086]
								}, {
									"case":	296,
									"scores":	[-4.13425278592086]
								}, {
									"case":	297,
									"scores":	[-4.13425278592086]
								}, {
									"case":	298,
									"scores":	[-4.13425278592086]
								}, {
									"case":	299,
									"scores":	[-4.13425278592086]
								}, {
									"case":	300,
									"scores":	[-4.13425278592086]
								}, {
									"case":	301,
									"scores":	[-4.13425278592086]
								}, {
									"case":	302,
									"scores":	[-4.13425278592086]
								}, {
									"case":	303,
									"scores":	[-4.13425278592086]
								}, {
									"case":	304,
									"scores":	[-4.13425278592086]
								}, {
									"case":	305,
									"scores":	[-4.13425278592086]
								}, {
									"case":	306,
									"scores":	[-4.13425278592086]
								}, {
									"case":	307,
									"scores":	[-4.13425278592086]
								}, {
									"case":	308,
									"scores":	[-4.13425278592086]
								}, {
									"case":	309,
									"scores":	[-4.13425278592086]
								}, {
									"case":	310,
									"scores":	[-4.13425278592086]
								}, {
									"case":	311,
									"scores":	[-4.13425278592086]
								}, {
									"case":	312,
									"scores":	[-4.13425278592086]
								}, {
									"case":	313,
									"scores":	[-4.13425278592086]
								}, {
									"case":	314,
									"scores":	[-4.13425278592086]
								}, {
									"case":	315,
									"scores":	[-4.13425278592086]
								}, {
									"case":	316,
									"scores":	[-4.13425278592086]
								}, {
									"case":	317,
									"scores":	[-4.13425278592086]
								}, {
									"case":	318,
									"scores":	[-4.13425278592086]
								}, {
									"case":	319,
									"scores":	[-4.13425278592086]
								}, {
									"case":	320,
									"scores":	[-4.13425278592086]
								}, {
									"case":	321,
									"scores":	[-4.13425278592086]
								}, {
									"case":	322,
									"scores":	[-4.13425278592086]
								}, {
									"case":	323,
									"scores":	[-4.13425278592086]
								}, {
									"case":	324,
									"scores":	[-4.13425278592086]
								}, {
									"case":	325,
									"scores":	[-4.13425278592086]
								}, {
									"case":	326,
									"scores":	[-4.13425278592086]
								}, {
									"case":	327,
									"scores":	[-4.13425278592086]
								}, {
									"case":	328,
									"scores":	[-4.13425278592086]
								}, {
									"case":	329,
									"scores":	[-4.13425278592086]
								}, {
									"case":	330,
									"scores":	[-4.13425278592086]
								}, {
									"case":	331,
									"scores":	[-4.13425278592086]
								}, {
									"case":	332,
									"scores":	[-4.13425278592086]
								}, {
									"case":	333,
									"scores":	[-4.13425278592086]
								}, {
									"case":	334,
									"scores":	[-4.13425278592086]
								}, {
									"case":	335,
									"scores":	[-4.13425278592086]
								}, {
									"case":	336,
									"scores":	[-4.13425278592086]
								}, {
									"case":	337,
									"scores":	[-4.13425278592086]
								}, {
									"case":	338,
									"scores":	[-4.13425278592086]
								}, {
									"case":	339,
									"scores":	[-4.13425278592086]
								}, {
									"case":	340,
									"scores":	[-4.13425278592086]
								}, {
									"case":	341,
									"scores":	[-4.13425278592086]
								}, {
									"case":	342,
									"scores":	[-4.13425278592086]
								}, {
									"case":	343,
									"scores":	[-4.13425278592086]
								}, {
									"case":	344,
									"scores":	[-4.13425278592086]
								}, {
									"case":	345,
									"scores":	[-4.13425278592086]
								}, {
									"case":	346,
									"scores":	[-4.13425278592086]
								}, {
									"case":	347,
									"scores":	[-4.13425278592086]
								}, {
									"case":	348,
									"scores":	[-4.13425278592086]
								}, {
									"case":	349,
									"scores":	[-4.13425278592086]
								}, {
									"case":	350,
									"scores":	[-4.13425278592086]
								}, {
									"case":	351,
									"scores":	[-4.13425278592086]
								}, {
									"case":	352,
									"scores":	[-4.13425278592086]
								}, {
									"case":	353,
									"scores":	[-4.13425278592086]
								}, {
									"case":	354,
									"scores":	[-4.13425278592086]
								}, {
									"case":	355,
									"scores":	[-4.13425278592086]
								}, {
									"case":	356,
									"scores":	[-4.13425278592086]
								}, {
									"case":	357,
									"scores":	[-4.13425278592086]
								}, {
									"case":	358,
									"scores":	[-4.13425278592086]
								}, {
									"case":	359,
									"scores":	[-4.13425278592086]
								}, {
									"case":	360,
									"scores":	[-4.13425278592086]
								}, {
									"case":	361,
									"scores":	[-4.13425278592086]
								}, {
									"case":	362,
									"scores":	[-4.13425278592086]
								}, {
									"case":	363,
									"scores":	[-4.13425278592086]
								}, {
									"case":	364,
									"scores":	[-4.13425278592086]
								}, {
									"case":	365,
									"scores":	[-4.13425278592086]
								}, {
									"case":	366,
									"scores":	[-4.13425278592086]
								}, {
									"case":	367,
									"scores":	[-4.13425278592086]
								}, {
									"case":	368,
									"scores":	[-4.13425278592086]
								}, {
									"case":	369,
									"scores":	[-4.13425278592086]
								}, {
									"case":	370,
									"scores":	[-4.13425278592086]
								}, {
									"case":	371,
									"scores":	[-4.13425278592086]
								}, {
									"case":	372,
									"scores":	[-4.13425278592086]
								}, {
									"case":	373,
									"scores":	[-4.13425278592086]
								}, {
									"case":	374,
									"scores":	[-4.13425278592086]
								}, {
									"case":	375,
									"scores":	[-4.13425278592086]
								}, {
									"case":	376,
									"scores":	[-4.13425278592086]
								}, {
									"case":	377,
									"scores":	[-4.13425278592086]
								}, {
									"case":	378,
									"scores":	[-4.13425278592086]
								}, {
									"case":	379,
									"scores":	[-4.13425278592086]
								}, {
									"case":	380,
									"scores":	[-4.13425278592086]
								}, {
									"case":	381,
									"scores":	[-4.13425278592086]
								}, {
									"case":	382,
									"scores":	[-4.13425278592086]
								}, {
									"case":	383,
									"scores":	[-4.13425278592086]
								}, {
									"case":	384,
									"scores":	[-4.13425278592086]
								}, {
									"case":	385,
									"scores":	[-4.13425278592086]
								}, {
									"case":	386,
									"scores":	[-4.13425278592086]
								}, {
									"case":	387,
									"scores":	[-4.13425278592086]
								}, {
									"case":	388,
									"scores":	[-4.13425278592086]
								}, {
									"case":	389,
									"scores":	[-4.13425278592086]
								}, {
									"case":	390,
									"scores":	[-4.13425278592086]
								}, {
									"case":	391,
									"scores":	[-4.13425278592086]
								}, {
									"case":	392,
									"scores":	[-4.13425278592086]
								}, {
									"case":	393,
									"scores":	[-5.54462728262086, -9.05006089992086, -8.98527537592086, -8.59029326492086, -9.27784127592086, -8.70377577592086, -8.21189177592086, -9.07167061592086, -8.98527537592086, -8.30131447592086, -8.47857731592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -9.17590737592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -8.52916437592086, -9.17590737592086, -9.17590737592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -9.07469807592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -8.98527537592086, -8.98527537592086, -9.07469807592086, -8.98527537592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -9.17590737592086, -9.17590737592086, -9.17590737592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.52916437592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -8.98527537592086, -9.07469807592086, -9.17590737592086]
								}, {
									"case":	394,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	395,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	396,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	397,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	398,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	399,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	400,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	401,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	402,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	403,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	404,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	405,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	406,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	407,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	408,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	409,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	410,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}, {
									"case":	411,
									"scores":	[-7.80740908262086, -11.312842699920861, -11.248057175920859, -10.853075064920862, -11.540623075920859, -10.966557575920859, -10.47467357592086, -11.334452415920861, -11.248057175920859, -10.564096275920861, -10.741359115920861, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -10.791946175920859, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.43868917592086, -11.43868917592086, -11.43868917592086, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -10.791946175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.248057175920859, -11.337479875920859, -11.43868917592086]
								}]
						}, {
							"switch":	48,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	249,
							"begin_column":	2,
							"end_line":	255,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if ((*(md5_str + 32) != '/') || __is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if ((*(md5_str + 32) != '/') && !__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.4138317589281466, -6.8646510962281457, -5.7017110502281465, -5.6542437102281449, -6.6333635312281469, -5.4721703502281462, -4.9308773502281458, -6.5808568502281464, -5.7017110502281465, -5.3678423502281456, -5.6326238502281463, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -6.545616050228146, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -6.545616050228146, -6.545616050228146, -6.545616050228146, -6.545616050228146, -6.545616050228146, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -6.545616050228146, -6.545616050228146, -6.545616050228146, -5.4577841802281455, -6.545616050228146, -6.545616050228146, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -6.1386760502281472, -6.545616050228146, -6.545616050228146, -6.545616050228146, -5.7017110502281465, -5.7017110502281465, -6.1386760502281472, -5.7017110502281465, -6.545616050228146, -6.545616050228146, -6.545616050228146, -6.545616050228146, -6.545616050228146, -6.545616050228146, -6.545616050228146, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -6.545616050228146, -6.545616050228146, -6.545616050228146, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.4577841802281455, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -5.7017110502281465, -6.1386760502281472, -6.545616050228146]
								}, {
									"case":	2,
									"scores":	[-3.6265386201281458, -7.0773579574281467, -5.9144179114281457, -5.8669505714281458, -6.8460703924281461, -5.6848772114281463, -5.1435842114281467, -6.7935637114281455, -5.9144179114281457, -5.5805492114281456, -5.8453307114281463, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.758322911428146, -6.758322911428146, -6.758322911428146, -5.6704910414281464, -6.758322911428146, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.3513829114281464, -6.758322911428146, -6.758322911428146, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -6.3513829114281464, -5.9144179114281457, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.758322911428146, -6.758322911428146, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.6704910414281464, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.3513829114281464, -6.758322911428146]
								}, {
									"case":	3,
									"scores":	[-3.6265386201281458, -7.0773579574281467, -5.9144179114281457, -5.8669505714281458, -6.8460703924281461, -5.6848772114281463, -5.1435842114281467, -6.7935637114281455, -5.9144179114281457, -5.5805492114281456, -5.8453307114281463, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.758322911428146, -6.758322911428146, -6.758322911428146, -5.6704910414281464, -6.758322911428146, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.3513829114281464, -6.758322911428146, -6.758322911428146, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -6.3513829114281464, -5.9144179114281457, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.758322911428146, -6.758322911428146, -6.758322911428146, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.6704910414281464, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -5.9144179114281457, -6.3513829114281464, -6.758322911428146]
								}]
						}, {
							"switch":	49,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	249,
							"begin_column":	2,
							"end_line":	255,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    if (*(md5_str + 32) != '/') {\n        if (con->conf.log_request_handling) {\n            log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n        }\n        return HANDLER_GO_ON;\n    }\n", "if (!__is_neg(\"\", \"L249\", 89, &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)) && (*(md5_str + 32) != '/')) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.23347946462086, -7.68429880192086, -6.52135875592086, -6.47389141592086, -7.45301123692086, -6.29181805592086, -5.75052505592086, -7.40050455592086, -6.52135875592086, -6.18749005592086, -6.45227155592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -7.36526375592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -6.27743188592086, -7.36526375592086, -7.36526375592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.95832375592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -6.52135875592086, -6.52135875592086, -6.95832375592086, -6.52135875592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -7.36526375592086, -7.36526375592086, -7.36526375592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.27743188592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.52135875592086, -6.95832375592086, -7.36526375592086]
								}, {
									"case":	2,
									"scores":	[-4.85694298362086, -8.30776232092086, -7.14482227492086, -7.09735493492086, -8.07647475592086, -6.91528157492086, -6.37398857492086, -8.02396807492086, -7.14482227492086, -6.81095357492086, -7.07573507492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.98872727492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -6.90089540492086, -7.98872727492086, -7.98872727492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.58178727492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -7.14482227492086, -7.14482227492086, -7.58178727492086, -7.14482227492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.98872727492086, -7.98872727492086, -7.98872727492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -6.90089540492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.14482227492086, -7.58178727492086, -7.98872727492086]
								}]
						}]
				}, {
					"line":	256,
					"switches":	[{
							"switch":	50,
							"types":	[[], [], [], [], [392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], [], [], [], [], [], []],
							"begin_line":	257,
							"begin_column":	0,
							"end_line":	257,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 0;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 16;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 1;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 213;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 219;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 225;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 234;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 244;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 251;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 261;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 268;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 282;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 310;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 324;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 32;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 403;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 408;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 4;\n", "if (__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.11405007860334]
								}, {
									"case":	2,
									"scores":	[-4.11405007860334]
								}, {
									"case":	3,
									"scores":	[-4.11405007860334]
								}, {
									"case":	4,
									"scores":	[-4.11405007860334]
								}, {
									"case":	5,
									"scores":	[-4.11405007860334]
								}, {
									"case":	6,
									"scores":	[-4.11405007860334]
								}, {
									"case":	7,
									"scores":	[-4.11405007860334]
								}, {
									"case":	8,
									"scores":	[-4.11405007860334]
								}, {
									"case":	9,
									"scores":	[-4.11405007860334]
								}, {
									"case":	10,
									"scores":	[-4.11405007860334]
								}, {
									"case":	11,
									"scores":	[-4.11405007860334]
								}, {
									"case":	12,
									"scores":	[-4.11405007860334]
								}, {
									"case":	13,
									"scores":	[-4.11405007860334]
								}, {
									"case":	14,
									"scores":	[-4.11405007860334]
								}, {
									"case":	15,
									"scores":	[-4.11405007860334]
								}, {
									"case":	16,
									"scores":	[-4.11405007860334]
								}, {
									"case":	17,
									"scores":	[-4.11405007860334]
								}, {
									"case":	18,
									"scores":	[-4.11405007860334]
								}, {
									"case":	19,
									"scores":	[-4.11405007860334]
								}, {
									"case":	20,
									"scores":	[-4.11405007860334]
								}, {
									"case":	21,
									"scores":	[-4.11405007860334]
								}, {
									"case":	22,
									"scores":	[-4.11405007860334]
								}, {
									"case":	23,
									"scores":	[-4.11405007860334]
								}, {
									"case":	24,
									"scores":	[-4.11405007860334]
								}, {
									"case":	25,
									"scores":	[-4.11405007860334]
								}, {
									"case":	26,
									"scores":	[-4.11405007860334]
								}, {
									"case":	27,
									"scores":	[-4.11405007860334]
								}, {
									"case":	28,
									"scores":	[-4.11405007860334]
								}, {
									"case":	29,
									"scores":	[-4.11405007860334]
								}, {
									"case":	30,
									"scores":	[-4.11405007860334]
								}, {
									"case":	31,
									"scores":	[-4.11405007860334]
								}, {
									"case":	32,
									"scores":	[-4.11405007860334]
								}, {
									"case":	33,
									"scores":	[-4.11405007860334]
								}, {
									"case":	34,
									"scores":	[-4.11405007860334]
								}, {
									"case":	35,
									"scores":	[-4.11405007860334]
								}, {
									"case":	36,
									"scores":	[-4.11405007860334]
								}, {
									"case":	37,
									"scores":	[-4.11405007860334]
								}, {
									"case":	38,
									"scores":	[-4.11405007860334]
								}, {
									"case":	39,
									"scores":	[-4.11405007860334]
								}, {
									"case":	40,
									"scores":	[-4.11405007860334]
								}, {
									"case":	41,
									"scores":	[-4.11405007860334]
								}, {
									"case":	42,
									"scores":	[-4.11405007860334]
								}, {
									"case":	43,
									"scores":	[-4.11405007860334]
								}, {
									"case":	44,
									"scores":	[-4.11405007860334]
								}, {
									"case":	45,
									"scores":	[-4.11405007860334]
								}, {
									"case":	46,
									"scores":	[-4.11405007860334]
								}, {
									"case":	47,
									"scores":	[-4.11405007860334]
								}, {
									"case":	48,
									"scores":	[-4.11405007860334]
								}, {
									"case":	49,
									"scores":	[-4.11405007860334]
								}, {
									"case":	50,
									"scores":	[-4.11405007860334]
								}, {
									"case":	51,
									"scores":	[-4.11405007860334]
								}, {
									"case":	52,
									"scores":	[-4.11405007860334]
								}, {
									"case":	53,
									"scores":	[-4.11405007860334]
								}, {
									"case":	54,
									"scores":	[-4.11405007860334]
								}, {
									"case":	55,
									"scores":	[-4.11405007860334]
								}, {
									"case":	56,
									"scores":	[-4.11405007860334]
								}, {
									"case":	57,
									"scores":	[-4.11405007860334]
								}, {
									"case":	58,
									"scores":	[-4.11405007860334]
								}, {
									"case":	59,
									"scores":	[-4.11405007860334]
								}, {
									"case":	60,
									"scores":	[-4.11405007860334]
								}, {
									"case":	61,
									"scores":	[-4.11405007860334]
								}, {
									"case":	62,
									"scores":	[-4.11405007860334]
								}, {
									"case":	63,
									"scores":	[-4.11405007860334]
								}, {
									"case":	64,
									"scores":	[-4.11405007860334]
								}, {
									"case":	65,
									"scores":	[-4.11405007860334]
								}, {
									"case":	66,
									"scores":	[-4.11405007860334]
								}, {
									"case":	67,
									"scores":	[-4.11405007860334]
								}, {
									"case":	68,
									"scores":	[-4.11405007860334]
								}, {
									"case":	69,
									"scores":	[-4.11405007860334]
								}, {
									"case":	70,
									"scores":	[-4.11405007860334]
								}, {
									"case":	71,
									"scores":	[-4.11405007860334]
								}, {
									"case":	72,
									"scores":	[-4.11405007860334]
								}, {
									"case":	73,
									"scores":	[-4.11405007860334]
								}, {
									"case":	74,
									"scores":	[-4.11405007860334]
								}, {
									"case":	75,
									"scores":	[-4.11405007860334]
								}, {
									"case":	76,
									"scores":	[-4.11405007860334]
								}, {
									"case":	77,
									"scores":	[-4.11405007860334]
								}, {
									"case":	78,
									"scores":	[-4.11405007860334]
								}, {
									"case":	79,
									"scores":	[-4.11405007860334]
								}, {
									"case":	80,
									"scores":	[-4.11405007860334]
								}, {
									"case":	81,
									"scores":	[-4.11405007860334]
								}, {
									"case":	82,
									"scores":	[-4.11405007860334]
								}, {
									"case":	83,
									"scores":	[-4.11405007860334]
								}, {
									"case":	84,
									"scores":	[-4.11405007860334]
								}, {
									"case":	85,
									"scores":	[-4.11405007860334]
								}, {
									"case":	86,
									"scores":	[-4.11405007860334]
								}, {
									"case":	87,
									"scores":	[-4.11405007860334]
								}, {
									"case":	88,
									"scores":	[-4.11405007860334]
								}, {
									"case":	89,
									"scores":	[-4.11405007860334]
								}, {
									"case":	90,
									"scores":	[-4.11405007860334]
								}, {
									"case":	91,
									"scores":	[-4.11405007860334]
								}, {
									"case":	92,
									"scores":	[-4.11405007860334]
								}, {
									"case":	93,
									"scores":	[-4.11405007860334]
								}, {
									"case":	94,
									"scores":	[-4.11405007860334]
								}, {
									"case":	95,
									"scores":	[-4.11405007860334]
								}, {
									"case":	96,
									"scores":	[-4.11405007860334]
								}, {
									"case":	97,
									"scores":	[-4.11405007860334]
								}, {
									"case":	98,
									"scores":	[-4.11405007860334]
								}, {
									"case":	99,
									"scores":	[-4.11405007860334]
								}, {
									"case":	100,
									"scores":	[-4.11405007860334]
								}, {
									"case":	101,
									"scores":	[-4.11405007860334]
								}, {
									"case":	102,
									"scores":	[-4.11405007860334]
								}, {
									"case":	103,
									"scores":	[-4.11405007860334]
								}, {
									"case":	104,
									"scores":	[-4.11405007860334]
								}, {
									"case":	105,
									"scores":	[-4.11405007860334]
								}, {
									"case":	106,
									"scores":	[-4.11405007860334]
								}, {
									"case":	107,
									"scores":	[-4.11405007860334]
								}, {
									"case":	108,
									"scores":	[-4.11405007860334]
								}, {
									"case":	109,
									"scores":	[-4.11405007860334]
								}, {
									"case":	110,
									"scores":	[-4.11405007860334]
								}, {
									"case":	111,
									"scores":	[-4.11405007860334]
								}, {
									"case":	112,
									"scores":	[-4.11405007860334]
								}, {
									"case":	113,
									"scores":	[-4.11405007860334]
								}, {
									"case":	114,
									"scores":	[-4.11405007860334]
								}, {
									"case":	115,
									"scores":	[-4.11405007860334]
								}, {
									"case":	116,
									"scores":	[-4.11405007860334]
								}, {
									"case":	117,
									"scores":	[-4.11405007860334]
								}, {
									"case":	118,
									"scores":	[-4.11405007860334]
								}, {
									"case":	119,
									"scores":	[-4.11405007860334]
								}, {
									"case":	120,
									"scores":	[-4.11405007860334]
								}, {
									"case":	121,
									"scores":	[-4.11405007860334]
								}, {
									"case":	122,
									"scores":	[-4.11405007860334]
								}, {
									"case":	123,
									"scores":	[-4.11405007860334]
								}, {
									"case":	124,
									"scores":	[-4.11405007860334]
								}, {
									"case":	125,
									"scores":	[-4.11405007860334]
								}, {
									"case":	126,
									"scores":	[-4.11405007860334]
								}, {
									"case":	127,
									"scores":	[-4.11405007860334]
								}, {
									"case":	128,
									"scores":	[-4.11405007860334]
								}, {
									"case":	129,
									"scores":	[-4.11405007860334]
								}, {
									"case":	130,
									"scores":	[-4.11405007860334]
								}, {
									"case":	131,
									"scores":	[-4.11405007860334]
								}, {
									"case":	132,
									"scores":	[-4.11405007860334]
								}, {
									"case":	133,
									"scores":	[-4.11405007860334]
								}, {
									"case":	134,
									"scores":	[-4.11405007860334]
								}, {
									"case":	135,
									"scores":	[-4.11405007860334]
								}, {
									"case":	136,
									"scores":	[-4.11405007860334]
								}, {
									"case":	137,
									"scores":	[-4.11405007860334]
								}, {
									"case":	138,
									"scores":	[-4.11405007860334]
								}, {
									"case":	139,
									"scores":	[-4.11405007860334]
								}, {
									"case":	140,
									"scores":	[-4.11405007860334]
								}, {
									"case":	141,
									"scores":	[-4.11405007860334]
								}, {
									"case":	142,
									"scores":	[-4.11405007860334]
								}, {
									"case":	143,
									"scores":	[-4.11405007860334]
								}, {
									"case":	144,
									"scores":	[-4.11405007860334]
								}, {
									"case":	145,
									"scores":	[-4.11405007860334]
								}, {
									"case":	146,
									"scores":	[-4.11405007860334]
								}, {
									"case":	147,
									"scores":	[-4.11405007860334]
								}, {
									"case":	148,
									"scores":	[-4.11405007860334]
								}, {
									"case":	149,
									"scores":	[-4.11405007860334]
								}, {
									"case":	150,
									"scores":	[-4.11405007860334]
								}, {
									"case":	151,
									"scores":	[-4.11405007860334]
								}, {
									"case":	152,
									"scores":	[-4.11405007860334]
								}, {
									"case":	153,
									"scores":	[-4.11405007860334]
								}, {
									"case":	154,
									"scores":	[-4.11405007860334]
								}, {
									"case":	155,
									"scores":	[-4.11405007860334]
								}, {
									"case":	156,
									"scores":	[-4.11405007860334]
								}, {
									"case":	157,
									"scores":	[-4.11405007860334]
								}, {
									"case":	158,
									"scores":	[-4.11405007860334]
								}, {
									"case":	159,
									"scores":	[-4.11405007860334]
								}, {
									"case":	160,
									"scores":	[-4.11405007860334]
								}, {
									"case":	161,
									"scores":	[-4.11405007860334]
								}, {
									"case":	162,
									"scores":	[-4.11405007860334]
								}, {
									"case":	163,
									"scores":	[-4.11405007860334]
								}, {
									"case":	164,
									"scores":	[-4.11405007860334]
								}, {
									"case":	165,
									"scores":	[-4.11405007860334]
								}, {
									"case":	166,
									"scores":	[-4.11405007860334]
								}, {
									"case":	167,
									"scores":	[-4.11405007860334]
								}, {
									"case":	168,
									"scores":	[-4.11405007860334]
								}, {
									"case":	169,
									"scores":	[-4.11405007860334]
								}, {
									"case":	170,
									"scores":	[-4.11405007860334]
								}, {
									"case":	171,
									"scores":	[-4.11405007860334]
								}, {
									"case":	172,
									"scores":	[-4.11405007860334]
								}, {
									"case":	173,
									"scores":	[-4.11405007860334]
								}, {
									"case":	174,
									"scores":	[-4.11405007860334]
								}, {
									"case":	175,
									"scores":	[-4.11405007860334]
								}, {
									"case":	176,
									"scores":	[-4.11405007860334]
								}, {
									"case":	177,
									"scores":	[-4.11405007860334]
								}, {
									"case":	178,
									"scores":	[-4.11405007860334]
								}, {
									"case":	179,
									"scores":	[-4.11405007860334]
								}, {
									"case":	180,
									"scores":	[-4.11405007860334]
								}, {
									"case":	181,
									"scores":	[-4.11405007860334]
								}, {
									"case":	182,
									"scores":	[-4.11405007860334]
								}, {
									"case":	183,
									"scores":	[-4.11405007860334]
								}, {
									"case":	184,
									"scores":	[-4.11405007860334]
								}, {
									"case":	185,
									"scores":	[-4.11405007860334]
								}, {
									"case":	186,
									"scores":	[-4.11405007860334]
								}, {
									"case":	187,
									"scores":	[-4.11405007860334]
								}, {
									"case":	188,
									"scores":	[-4.11405007860334]
								}, {
									"case":	189,
									"scores":	[-4.11405007860334]
								}, {
									"case":	190,
									"scores":	[-4.11405007860334]
								}, {
									"case":	191,
									"scores":	[-4.11405007860334]
								}, {
									"case":	192,
									"scores":	[-4.11405007860334]
								}, {
									"case":	193,
									"scores":	[-4.11405007860334]
								}, {
									"case":	194,
									"scores":	[-4.11405007860334]
								}, {
									"case":	195,
									"scores":	[-4.11405007860334]
								}, {
									"case":	196,
									"scores":	[-4.11405007860334]
								}, {
									"case":	197,
									"scores":	[-4.11405007860334]
								}, {
									"case":	198,
									"scores":	[-4.11405007860334]
								}, {
									"case":	199,
									"scores":	[-4.11405007860334]
								}, {
									"case":	200,
									"scores":	[-4.11405007860334]
								}, {
									"case":	201,
									"scores":	[-4.11405007860334]
								}, {
									"case":	202,
									"scores":	[-4.11405007860334]
								}, {
									"case":	203,
									"scores":	[-4.11405007860334]
								}, {
									"case":	204,
									"scores":	[-4.11405007860334]
								}, {
									"case":	205,
									"scores":	[-4.11405007860334]
								}, {
									"case":	206,
									"scores":	[-4.11405007860334]
								}, {
									"case":	207,
									"scores":	[-4.11405007860334]
								}, {
									"case":	208,
									"scores":	[-4.11405007860334]
								}, {
									"case":	209,
									"scores":	[-4.11405007860334]
								}, {
									"case":	210,
									"scores":	[-4.11405007860334]
								}, {
									"case":	211,
									"scores":	[-4.11405007860334]
								}, {
									"case":	212,
									"scores":	[-4.11405007860334]
								}, {
									"case":	213,
									"scores":	[-4.11405007860334]
								}, {
									"case":	214,
									"scores":	[-4.11405007860334]
								}, {
									"case":	215,
									"scores":	[-4.11405007860334]
								}, {
									"case":	216,
									"scores":	[-4.11405007860334]
								}, {
									"case":	217,
									"scores":	[-4.11405007860334]
								}, {
									"case":	218,
									"scores":	[-4.11405007860334]
								}, {
									"case":	219,
									"scores":	[-4.11405007860334]
								}, {
									"case":	220,
									"scores":	[-4.11405007860334]
								}, {
									"case":	221,
									"scores":	[-4.11405007860334]
								}, {
									"case":	222,
									"scores":	[-4.11405007860334]
								}, {
									"case":	223,
									"scores":	[-4.11405007860334]
								}, {
									"case":	224,
									"scores":	[-4.11405007860334]
								}, {
									"case":	225,
									"scores":	[-4.11405007860334]
								}, {
									"case":	226,
									"scores":	[-4.11405007860334]
								}, {
									"case":	227,
									"scores":	[-4.11405007860334]
								}, {
									"case":	228,
									"scores":	[-4.11405007860334]
								}, {
									"case":	229,
									"scores":	[-4.11405007860334]
								}, {
									"case":	230,
									"scores":	[-4.11405007860334]
								}, {
									"case":	231,
									"scores":	[-4.11405007860334]
								}, {
									"case":	232,
									"scores":	[-4.11405007860334]
								}, {
									"case":	233,
									"scores":	[-4.11405007860334]
								}, {
									"case":	234,
									"scores":	[-4.11405007860334]
								}, {
									"case":	235,
									"scores":	[-4.11405007860334]
								}, {
									"case":	236,
									"scores":	[-4.11405007860334]
								}, {
									"case":	237,
									"scores":	[-4.11405007860334]
								}, {
									"case":	238,
									"scores":	[-4.11405007860334]
								}, {
									"case":	239,
									"scores":	[-4.11405007860334]
								}, {
									"case":	240,
									"scores":	[-4.11405007860334]
								}, {
									"case":	241,
									"scores":	[-4.11405007860334]
								}, {
									"case":	242,
									"scores":	[-4.11405007860334]
								}, {
									"case":	243,
									"scores":	[-4.11405007860334]
								}, {
									"case":	244,
									"scores":	[-4.11405007860334]
								}, {
									"case":	245,
									"scores":	[-4.11405007860334]
								}, {
									"case":	246,
									"scores":	[-4.11405007860334]
								}, {
									"case":	247,
									"scores":	[-4.11405007860334]
								}, {
									"case":	248,
									"scores":	[-4.11405007860334]
								}, {
									"case":	249,
									"scores":	[-4.11405007860334]
								}, {
									"case":	250,
									"scores":	[-4.11405007860334]
								}, {
									"case":	251,
									"scores":	[-4.11405007860334]
								}, {
									"case":	252,
									"scores":	[-4.11405007860334]
								}, {
									"case":	253,
									"scores":	[-4.11405007860334]
								}, {
									"case":	254,
									"scores":	[-4.11405007860334]
								}, {
									"case":	255,
									"scores":	[-4.11405007860334]
								}, {
									"case":	256,
									"scores":	[-4.11405007860334]
								}, {
									"case":	257,
									"scores":	[-4.11405007860334]
								}, {
									"case":	258,
									"scores":	[-4.11405007860334]
								}, {
									"case":	259,
									"scores":	[-4.11405007860334]
								}, {
									"case":	260,
									"scores":	[-4.11405007860334]
								}, {
									"case":	261,
									"scores":	[-4.11405007860334]
								}, {
									"case":	262,
									"scores":	[-4.11405007860334]
								}, {
									"case":	263,
									"scores":	[-4.11405007860334]
								}, {
									"case":	264,
									"scores":	[-4.11405007860334]
								}, {
									"case":	265,
									"scores":	[-4.11405007860334]
								}, {
									"case":	266,
									"scores":	[-4.11405007860334]
								}, {
									"case":	267,
									"scores":	[-4.11405007860334]
								}, {
									"case":	268,
									"scores":	[-4.11405007860334]
								}, {
									"case":	269,
									"scores":	[-4.11405007860334]
								}, {
									"case":	270,
									"scores":	[-4.11405007860334]
								}, {
									"case":	271,
									"scores":	[-4.11405007860334]
								}, {
									"case":	272,
									"scores":	[-4.11405007860334]
								}, {
									"case":	273,
									"scores":	[-4.11405007860334]
								}, {
									"case":	274,
									"scores":	[-4.11405007860334]
								}, {
									"case":	275,
									"scores":	[-4.11405007860334]
								}, {
									"case":	276,
									"scores":	[-4.11405007860334]
								}, {
									"case":	277,
									"scores":	[-4.11405007860334]
								}, {
									"case":	278,
									"scores":	[-4.11405007860334]
								}, {
									"case":	279,
									"scores":	[-4.11405007860334]
								}, {
									"case":	280,
									"scores":	[-4.11405007860334]
								}, {
									"case":	281,
									"scores":	[-4.11405007860334]
								}, {
									"case":	282,
									"scores":	[-4.11405007860334]
								}, {
									"case":	283,
									"scores":	[-4.11405007860334]
								}, {
									"case":	284,
									"scores":	[-4.11405007860334]
								}, {
									"case":	285,
									"scores":	[-4.11405007860334]
								}, {
									"case":	286,
									"scores":	[-4.11405007860334]
								}, {
									"case":	287,
									"scores":	[-4.11405007860334]
								}, {
									"case":	288,
									"scores":	[-4.11405007860334]
								}, {
									"case":	289,
									"scores":	[-4.11405007860334]
								}, {
									"case":	290,
									"scores":	[-4.11405007860334]
								}, {
									"case":	291,
									"scores":	[-4.11405007860334]
								}, {
									"case":	292,
									"scores":	[-4.11405007860334]
								}, {
									"case":	293,
									"scores":	[-4.11405007860334]
								}, {
									"case":	294,
									"scores":	[-4.11405007860334]
								}, {
									"case":	295,
									"scores":	[-4.11405007860334]
								}, {
									"case":	296,
									"scores":	[-4.11405007860334]
								}, {
									"case":	297,
									"scores":	[-4.11405007860334]
								}, {
									"case":	298,
									"scores":	[-4.11405007860334]
								}, {
									"case":	299,
									"scores":	[-4.11405007860334]
								}, {
									"case":	300,
									"scores":	[-4.11405007860334]
								}, {
									"case":	301,
									"scores":	[-4.11405007860334]
								}, {
									"case":	302,
									"scores":	[-4.11405007860334]
								}, {
									"case":	303,
									"scores":	[-4.11405007860334]
								}, {
									"case":	304,
									"scores":	[-4.11405007860334]
								}, {
									"case":	305,
									"scores":	[-4.11405007860334]
								}, {
									"case":	306,
									"scores":	[-4.11405007860334]
								}, {
									"case":	307,
									"scores":	[-4.11405007860334]
								}, {
									"case":	308,
									"scores":	[-4.11405007860334]
								}, {
									"case":	309,
									"scores":	[-4.11405007860334]
								}, {
									"case":	310,
									"scores":	[-4.11405007860334]
								}, {
									"case":	311,
									"scores":	[-4.11405007860334]
								}, {
									"case":	312,
									"scores":	[-4.11405007860334]
								}, {
									"case":	313,
									"scores":	[-4.11405007860334]
								}, {
									"case":	314,
									"scores":	[-4.11405007860334]
								}, {
									"case":	315,
									"scores":	[-4.11405007860334]
								}, {
									"case":	316,
									"scores":	[-4.11405007860334]
								}, {
									"case":	317,
									"scores":	[-4.11405007860334]
								}, {
									"case":	318,
									"scores":	[-4.11405007860334]
								}, {
									"case":	319,
									"scores":	[-4.11405007860334]
								}, {
									"case":	320,
									"scores":	[-4.11405007860334]
								}, {
									"case":	321,
									"scores":	[-4.11405007860334]
								}, {
									"case":	322,
									"scores":	[-4.11405007860334]
								}, {
									"case":	323,
									"scores":	[-4.11405007860334]
								}, {
									"case":	324,
									"scores":	[-4.11405007860334]
								}, {
									"case":	325,
									"scores":	[-4.11405007860334]
								}, {
									"case":	326,
									"scores":	[-4.11405007860334]
								}, {
									"case":	327,
									"scores":	[-4.11405007860334]
								}, {
									"case":	328,
									"scores":	[-4.11405007860334]
								}, {
									"case":	329,
									"scores":	[-4.11405007860334]
								}, {
									"case":	330,
									"scores":	[-4.11405007860334]
								}, {
									"case":	331,
									"scores":	[-4.11405007860334]
								}, {
									"case":	332,
									"scores":	[-4.11405007860334]
								}, {
									"case":	333,
									"scores":	[-4.11405007860334]
								}, {
									"case":	334,
									"scores":	[-4.11405007860334]
								}, {
									"case":	335,
									"scores":	[-4.11405007860334]
								}, {
									"case":	336,
									"scores":	[-4.11405007860334]
								}, {
									"case":	337,
									"scores":	[-4.11405007860334]
								}, {
									"case":	338,
									"scores":	[-4.11405007860334]
								}, {
									"case":	339,
									"scores":	[-4.11405007860334]
								}, {
									"case":	340,
									"scores":	[-4.11405007860334]
								}, {
									"case":	341,
									"scores":	[-4.11405007860334]
								}, {
									"case":	342,
									"scores":	[-4.11405007860334]
								}, {
									"case":	343,
									"scores":	[-4.11405007860334]
								}, {
									"case":	344,
									"scores":	[-4.11405007860334]
								}, {
									"case":	345,
									"scores":	[-4.11405007860334]
								}, {
									"case":	346,
									"scores":	[-4.11405007860334]
								}, {
									"case":	347,
									"scores":	[-4.11405007860334]
								}, {
									"case":	348,
									"scores":	[-4.11405007860334]
								}, {
									"case":	349,
									"scores":	[-4.11405007860334]
								}, {
									"case":	350,
									"scores":	[-4.11405007860334]
								}, {
									"case":	351,
									"scores":	[-4.11405007860334]
								}, {
									"case":	352,
									"scores":	[-4.11405007860334]
								}, {
									"case":	353,
									"scores":	[-4.11405007860334]
								}, {
									"case":	354,
									"scores":	[-4.11405007860334]
								}, {
									"case":	355,
									"scores":	[-4.11405007860334]
								}, {
									"case":	356,
									"scores":	[-4.11405007860334]
								}, {
									"case":	357,
									"scores":	[-4.11405007860334]
								}, {
									"case":	358,
									"scores":	[-4.11405007860334]
								}, {
									"case":	359,
									"scores":	[-4.11405007860334]
								}, {
									"case":	360,
									"scores":	[-4.11405007860334]
								}, {
									"case":	361,
									"scores":	[-4.11405007860334]
								}, {
									"case":	362,
									"scores":	[-4.11405007860334]
								}, {
									"case":	363,
									"scores":	[-4.11405007860334]
								}, {
									"case":	364,
									"scores":	[-4.11405007860334]
								}, {
									"case":	365,
									"scores":	[-4.11405007860334]
								}, {
									"case":	366,
									"scores":	[-4.11405007860334]
								}, {
									"case":	367,
									"scores":	[-4.11405007860334]
								}, {
									"case":	368,
									"scores":	[-4.11405007860334]
								}, {
									"case":	369,
									"scores":	[-4.11405007860334]
								}, {
									"case":	370,
									"scores":	[-4.11405007860334]
								}, {
									"case":	371,
									"scores":	[-4.11405007860334]
								}, {
									"case":	372,
									"scores":	[-4.11405007860334]
								}, {
									"case":	373,
									"scores":	[-4.11405007860334]
								}, {
									"case":	374,
									"scores":	[-4.11405007860334]
								}, {
									"case":	375,
									"scores":	[-4.11405007860334]
								}, {
									"case":	376,
									"scores":	[-4.11405007860334]
								}, {
									"case":	377,
									"scores":	[-4.11405007860334]
								}, {
									"case":	378,
									"scores":	[-4.11405007860334]
								}, {
									"case":	379,
									"scores":	[-4.11405007860334]
								}, {
									"case":	380,
									"scores":	[-4.11405007860334]
								}, {
									"case":	381,
									"scores":	[-4.11405007860334]
								}, {
									"case":	382,
									"scores":	[-4.11405007860334]
								}, {
									"case":	383,
									"scores":	[-4.11405007860334]
								}, {
									"case":	384,
									"scores":	[-4.11405007860334]
								}, {
									"case":	385,
									"scores":	[-4.11405007860334]
								}, {
									"case":	386,
									"scores":	[-4.11405007860334]
								}, {
									"case":	387,
									"scores":	[-4.11405007860334]
								}, {
									"case":	388,
									"scores":	[-4.11405007860334]
								}, {
									"case":	389,
									"scores":	[-4.11405007860334]
								}, {
									"case":	390,
									"scores":	[-4.11405007860334]
								}, {
									"case":	391,
									"scores":	[-4.11405007860334]
								}, {
									"case":	392,
									"scores":	[-7.08106705280334, -3.99073406330334, -9.18602948060334, -8.18632255660334, -8.18162362940334, -7.56916687660334, -8.13483069660334, -7.36447455660334, -7.54173739660334]
								}, {
									"case":	393,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	394,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	395,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	396,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	397,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	398,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	399,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	400,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	401,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	402,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	403,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	404,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	405,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	406,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	407,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	408,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	409,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}, {
									"case":	410,
									"scores":	[-9.34384885280334, -6.25351586330334, -11.448811280603341, -10.449104356603339, -10.444405429403339, -9.83194867660334, -10.39761249660334, -9.62725635660334, -9.80451919660334]
								}]
						}, {
							"switch":	51,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	257,
							"begin_column":	2,
							"end_line":	257,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L257\", 9, &(ts_str), sizeof (ts_str), &(md5_str), sizeof (md5_str), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d)))\n    ts_str = md5_str + 32 + 1;\n", "{\n}\n", "ts_str = (&HA1) + 32 + 1", "ts_str = (&Md5Ctx) + 32 + 1", "ts_str = (&con) + 32 + 1", "ts_str = (&i) + 32 + 1", "ts_str = (&md5_str) + 32 + 1", "ts_str = (&p) + 32 + 1", "ts_str = (&p_d) + 32 + 1", "ts_str = (&rel_uri) + 32 + 1", "ts_str = (&srv) + 32 + 1", "ts_str = (&ts) + 32 + 1", "ts_str = (&ts_str) + 32 + 1", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "ts_str = md5_str + (0 * i) + 1", "ts_str = md5_str + (0 * ts) + 1", "ts_str = md5_str + (0) + 1", "ts_str = md5_str + (HA1 != 0) + 1", "ts_str = md5_str + (HA1 == 0) + 1", "ts_str = md5_str + (Md5Ctx != 0) + 1", "ts_str = md5_str + (Md5Ctx == 0) + 1", "ts_str = md5_str + (con != 0) + 1", "ts_str = md5_str + (con == 0) + 1", "ts_str = md5_str + (i != 0) + 1", "ts_str = md5_str + (i * ts) + 1", "ts_str = md5_str + (i + 0) + 1", "ts_str = md5_str + (i - 0) + 1", "ts_str = md5_str + (i == 0) + 1", "ts_str = md5_str + (md5_str != 0) + 1", "ts_str = md5_str + (md5_str == 0) + 1", "ts_str = md5_str + (p != 0) + 1", "ts_str = md5_str + (p == 0) + 1", "ts_str = md5_str + (p_d != 0) + 1", "ts_str = md5_str + (p_d == 0) + 1", "ts_str = md5_str + (rel_uri != 0) + 1", "ts_str = md5_str + (rel_uri != md5_str) + 1", "ts_str = md5_str + (rel_uri != ts_str) + 1", "ts_str = md5_str + (rel_uri == 0) + 1", "ts_str = md5_str + (rel_uri == md5_str) + 1", "ts_str = md5_str + (rel_uri == ts_str) + 1", "ts_str = md5_str + (srv != 0) + 1", "ts_str = md5_str + (srv == 0) + 1", "ts_str = md5_str + (ts != 0) + 1", "ts_str = md5_str + (ts != i) + 1", "ts_str = md5_str + (ts * i) + 1", "ts_str = md5_str + (ts + 0) + 1", "ts_str = md5_str + (ts + i) + 1", "ts_str = md5_str + (ts - 0) + 1", "ts_str = md5_str + (ts - i) + 1", "ts_str = md5_str + (ts == 0) + 1", "ts_str = md5_str + (ts == i) + 1", "ts_str = md5_str + (ts_str != 0) + 1", "ts_str = md5_str + (ts_str != md5_str) + 1", "ts_str = md5_str + (ts_str == 0) + 1", "ts_str = md5_str + (ts_str == md5_str) + 1", "ts_str = md5_str + 32 + (0 * i)", "ts_str = md5_str + 32 + (0 * ts)", "ts_str = md5_str + 32 + (0)", "ts_str = md5_str + 32 + (HA1 != 0)", "ts_str = md5_str + 32 + (HA1 == 0)", "ts_str = md5_str + 32 + (Md5Ctx != 0)", "ts_str = md5_str + 32 + (Md5Ctx == 0)", "ts_str = md5_str + 32 + (con != 0)", "ts_str = md5_str + 32 + (con == 0)", "ts_str = md5_str + 32 + (i != 0)", "ts_str = md5_str + 32 + (i * ts)", "ts_str = md5_str + 32 + (i + 0)", "ts_str = md5_str + 32 + (i - 0)", "ts_str = md5_str + 32 + (i == 0)", "ts_str = md5_str + 32 + (md5_str != 0)", "ts_str = md5_str + 32 + (md5_str == 0)", "ts_str = md5_str + 32 + (p != 0)", "ts_str = md5_str + 32 + (p == 0)", "ts_str = md5_str + 32 + (p_d != 0)", "ts_str = md5_str + 32 + (p_d == 0)", "ts_str = md5_str + 32 + (rel_uri != 0)", "ts_str = md5_str + 32 + (rel_uri != md5_str)", "ts_str = md5_str + 32 + (rel_uri != ts_str)", "ts_str = md5_str + 32 + (rel_uri == 0)", "ts_str = md5_str + 32 + (rel_uri == md5_str)", "ts_str = md5_str + 32 + (rel_uri == ts_str)", "ts_str = md5_str + 32 + (srv != 0)", "ts_str = md5_str + 32 + (srv == 0)", "ts_str = md5_str + 32 + (ts != 0)", "ts_str = md5_str + 32 + (ts != i)", "ts_str = md5_str + 32 + (ts * i)", "ts_str = md5_str + 32 + (ts + 0)", "ts_str = md5_str + 32 + (ts + i)", "ts_str = md5_str + 32 + (ts - 0)", "ts_str = md5_str + 32 + (ts - i)", "ts_str = md5_str + 32 + (ts == 0)", "ts_str = md5_str + 32 + (ts == i)", "ts_str = md5_str + 32 + (ts_str != 0)", "ts_str = md5_str + 32 + (ts_str != md5_str)", "ts_str = md5_str + 32 + (ts_str == 0)", "ts_str = md5_str + 32 + (ts_str == md5_str)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.16495980060334, -3.75692460830334, -7.15998730460334, -6.86593448960334, -6.09536157460334, -5.19276527660334, -6.87619305860334, -5.66317855860334, -5.92796005860334]
								}, {
									"case":	2,
									"scores":	[-4.11405007860334]
								}, {
									"case":	3,
									"scores":	[-4.11405007860334]
								}, {
									"case":	4,
									"scores":	[-4.11405007860334]
								}, {
									"case":	5,
									"scores":	[-4.11405007860334]
								}, {
									"case":	6,
									"scores":	[-4.11405007860334]
								}, {
									"case":	7,
									"scores":	[-4.11405007860334]
								}, {
									"case":	8,
									"scores":	[-4.11405007860334]
								}, {
									"case":	9,
									"scores":	[-4.11405007860334]
								}, {
									"case":	10,
									"scores":	[-4.11405007860334]
								}, {
									"case":	11,
									"scores":	[-4.11405007860334]
								}, {
									"case":	12,
									"scores":	[-4.11405007860334]
								}, {
									"case":	13,
									"scores":	[-4.11405007860334]
								}, {
									"case":	14,
									"scores":	[-4.11405007860334]
								}, {
									"case":	15,
									"scores":	[-4.11405007860334]
								}, {
									"case":	16,
									"scores":	[-4.11405007860334]
								}, {
									"case":	17,
									"scores":	[-4.11405007860334]
								}, {
									"case":	18,
									"scores":	[-4.11405007860334]
								}, {
									"case":	19,
									"scores":	[-4.11405007860334]
								}, {
									"case":	20,
									"scores":	[-4.11405007860334]
								}, {
									"case":	21,
									"scores":	[-4.11405007860334]
								}, {
									"case":	22,
									"scores":	[-4.11405007860334]
								}, {
									"case":	23,
									"scores":	[-4.11405007860334]
								}, {
									"case":	24,
									"scores":	[-4.11405007860334]
								}, {
									"case":	25,
									"scores":	[-4.11405007860334]
								}, {
									"case":	26,
									"scores":	[-4.11405007860334]
								}, {
									"case":	27,
									"scores":	[-4.11405007860334]
								}, {
									"case":	28,
									"scores":	[-4.11405007860334]
								}, {
									"case":	29,
									"scores":	[-4.11405007860334]
								}, {
									"case":	30,
									"scores":	[-4.11405007860334]
								}, {
									"case":	31,
									"scores":	[-4.11405007860334]
								}, {
									"case":	32,
									"scores":	[-4.11405007860334]
								}, {
									"case":	33,
									"scores":	[-4.11405007860334]
								}, {
									"case":	34,
									"scores":	[-4.11405007860334]
								}, {
									"case":	35,
									"scores":	[-4.11405007860334]
								}, {
									"case":	36,
									"scores":	[-4.11405007860334]
								}, {
									"case":	37,
									"scores":	[-4.11405007860334]
								}, {
									"case":	38,
									"scores":	[-4.11405007860334]
								}, {
									"case":	39,
									"scores":	[-4.11405007860334]
								}, {
									"case":	40,
									"scores":	[-4.11405007860334]
								}, {
									"case":	41,
									"scores":	[-4.11405007860334]
								}, {
									"case":	42,
									"scores":	[-4.11405007860334]
								}, {
									"case":	43,
									"scores":	[-4.11405007860334]
								}, {
									"case":	44,
									"scores":	[-4.11405007860334]
								}, {
									"case":	45,
									"scores":	[-4.11405007860334]
								}, {
									"case":	46,
									"scores":	[-4.11405007860334]
								}, {
									"case":	47,
									"scores":	[-4.11405007860334]
								}, {
									"case":	48,
									"scores":	[-4.11405007860334]
								}, {
									"case":	49,
									"scores":	[-4.11405007860334]
								}, {
									"case":	50,
									"scores":	[-4.11405007860334]
								}, {
									"case":	51,
									"scores":	[-4.11405007860334]
								}, {
									"case":	52,
									"scores":	[-4.11405007860334]
								}, {
									"case":	53,
									"scores":	[-4.11405007860334]
								}, {
									"case":	54,
									"scores":	[-4.11405007860334]
								}, {
									"case":	55,
									"scores":	[-4.11405007860334]
								}, {
									"case":	56,
									"scores":	[-4.11405007860334]
								}, {
									"case":	57,
									"scores":	[-4.11405007860334]
								}, {
									"case":	58,
									"scores":	[-4.11405007860334]
								}, {
									"case":	59,
									"scores":	[-4.11405007860334]
								}, {
									"case":	60,
									"scores":	[-4.11405007860334]
								}, {
									"case":	61,
									"scores":	[-4.11405007860334]
								}, {
									"case":	62,
									"scores":	[-4.11405007860334]
								}, {
									"case":	63,
									"scores":	[-4.11405007860334]
								}, {
									"case":	64,
									"scores":	[-4.11405007860334]
								}, {
									"case":	65,
									"scores":	[-4.11405007860334]
								}, {
									"case":	66,
									"scores":	[-4.11405007860334]
								}, {
									"case":	67,
									"scores":	[-4.11405007860334]
								}, {
									"case":	68,
									"scores":	[-4.11405007860334]
								}, {
									"case":	69,
									"scores":	[-4.11405007860334]
								}, {
									"case":	70,
									"scores":	[-4.11405007860334]
								}, {
									"case":	71,
									"scores":	[-4.11405007860334]
								}, {
									"case":	72,
									"scores":	[-4.11405007860334]
								}, {
									"case":	73,
									"scores":	[-4.11405007860334]
								}, {
									"case":	74,
									"scores":	[-4.11405007860334]
								}, {
									"case":	75,
									"scores":	[-4.11405007860334]
								}, {
									"case":	76,
									"scores":	[-4.11405007860334]
								}, {
									"case":	77,
									"scores":	[-4.11405007860334]
								}, {
									"case":	78,
									"scores":	[-4.11405007860334]
								}, {
									"case":	79,
									"scores":	[-4.11405007860334]
								}, {
									"case":	80,
									"scores":	[-4.11405007860334]
								}, {
									"case":	81,
									"scores":	[-4.11405007860334]
								}, {
									"case":	82,
									"scores":	[-4.11405007860334]
								}, {
									"case":	83,
									"scores":	[-4.11405007860334]
								}, {
									"case":	84,
									"scores":	[-4.11405007860334]
								}, {
									"case":	85,
									"scores":	[-4.11405007860334]
								}, {
									"case":	86,
									"scores":	[-4.11405007860334]
								}, {
									"case":	87,
									"scores":	[-4.11405007860334]
								}, {
									"case":	88,
									"scores":	[-4.11405007860334]
								}, {
									"case":	89,
									"scores":	[-4.11405007860334]
								}, {
									"case":	90,
									"scores":	[-4.11405007860334]
								}, {
									"case":	91,
									"scores":	[-4.11405007860334]
								}, {
									"case":	92,
									"scores":	[-4.11405007860334]
								}, {
									"case":	93,
									"scores":	[-4.11405007860334]
								}, {
									"case":	94,
									"scores":	[-4.11405007860334]
								}, {
									"case":	95,
									"scores":	[-4.11405007860334]
								}, {
									"case":	96,
									"scores":	[-4.11405007860334]
								}, {
									"case":	97,
									"scores":	[-4.11405007860334]
								}, {
									"case":	98,
									"scores":	[-4.11405007860334]
								}, {
									"case":	99,
									"scores":	[-4.11405007860334]
								}, {
									"case":	100,
									"scores":	[-4.11405007860334]
								}, {
									"case":	101,
									"scores":	[-4.11405007860334]
								}]
						}]
				}, {
					"line":	258,
					"switches":	[{
							"switch":	52,
							"types":	[[], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], [], [], [], [], [], []],
							"begin_line":	259,
							"begin_column":	0,
							"end_line":	259,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 0;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 16;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 1;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 213;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 219;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 225;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 234;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 244;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 251;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 261;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 268;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 282;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 310;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 324;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 32;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 403;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 408;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 4;\n", "if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.09384737128582]
								}, {
									"case":	2,
									"scores":	[-4.09384737128582]
								}, {
									"case":	3,
									"scores":	[-4.09384737128582]
								}, {
									"case":	4,
									"scores":	[-4.09384737128582]
								}, {
									"case":	5,
									"scores":	[-4.09384737128582]
								}, {
									"case":	6,
									"scores":	[-4.09384737128582]
								}, {
									"case":	7,
									"scores":	[-4.09384737128582]
								}, {
									"case":	8,
									"scores":	[-4.09384737128582]
								}, {
									"case":	9,
									"scores":	[-4.09384737128582]
								}, {
									"case":	10,
									"scores":	[-4.09384737128582]
								}, {
									"case":	11,
									"scores":	[-4.09384737128582]
								}, {
									"case":	12,
									"scores":	[-4.09384737128582]
								}, {
									"case":	13,
									"scores":	[-4.09384737128582]
								}, {
									"case":	14,
									"scores":	[-4.09384737128582]
								}, {
									"case":	15,
									"scores":	[-4.09384737128582]
								}, {
									"case":	16,
									"scores":	[-4.09384737128582]
								}, {
									"case":	17,
									"scores":	[-4.09384737128582]
								}, {
									"case":	18,
									"scores":	[-4.09384737128582]
								}, {
									"case":	19,
									"scores":	[-4.09384737128582]
								}, {
									"case":	20,
									"scores":	[-4.09384737128582]
								}, {
									"case":	21,
									"scores":	[-4.09384737128582]
								}, {
									"case":	22,
									"scores":	[-4.09384737128582]
								}, {
									"case":	23,
									"scores":	[-4.09384737128582]
								}, {
									"case":	24,
									"scores":	[-4.09384737128582]
								}, {
									"case":	25,
									"scores":	[-4.09384737128582]
								}, {
									"case":	26,
									"scores":	[-4.09384737128582]
								}, {
									"case":	27,
									"scores":	[-4.09384737128582]
								}, {
									"case":	28,
									"scores":	[-4.09384737128582]
								}, {
									"case":	29,
									"scores":	[-4.09384737128582]
								}, {
									"case":	30,
									"scores":	[-4.09384737128582]
								}, {
									"case":	31,
									"scores":	[-4.09384737128582]
								}, {
									"case":	32,
									"scores":	[-4.09384737128582]
								}, {
									"case":	33,
									"scores":	[-4.09384737128582]
								}, {
									"case":	34,
									"scores":	[-4.09384737128582]
								}, {
									"case":	35,
									"scores":	[-4.09384737128582]
								}, {
									"case":	36,
									"scores":	[-4.09384737128582]
								}, {
									"case":	37,
									"scores":	[-4.09384737128582]
								}, {
									"case":	38,
									"scores":	[-4.09384737128582]
								}, {
									"case":	39,
									"scores":	[-4.09384737128582]
								}, {
									"case":	40,
									"scores":	[-4.09384737128582]
								}, {
									"case":	41,
									"scores":	[-4.09384737128582]
								}, {
									"case":	42,
									"scores":	[-4.09384737128582]
								}, {
									"case":	43,
									"scores":	[-4.09384737128582]
								}, {
									"case":	44,
									"scores":	[-4.09384737128582]
								}, {
									"case":	45,
									"scores":	[-4.09384737128582]
								}, {
									"case":	46,
									"scores":	[-4.09384737128582]
								}, {
									"case":	47,
									"scores":	[-4.09384737128582]
								}, {
									"case":	48,
									"scores":	[-4.09384737128582]
								}, {
									"case":	49,
									"scores":	[-4.09384737128582]
								}, {
									"case":	50,
									"scores":	[-4.09384737128582]
								}, {
									"case":	51,
									"scores":	[-4.09384737128582]
								}, {
									"case":	52,
									"scores":	[-4.09384737128582]
								}, {
									"case":	53,
									"scores":	[-4.09384737128582]
								}, {
									"case":	54,
									"scores":	[-4.09384737128582]
								}, {
									"case":	55,
									"scores":	[-4.09384737128582]
								}, {
									"case":	56,
									"scores":	[-4.09384737128582]
								}, {
									"case":	57,
									"scores":	[-4.09384737128582]
								}, {
									"case":	58,
									"scores":	[-4.09384737128582]
								}, {
									"case":	59,
									"scores":	[-4.09384737128582]
								}, {
									"case":	60,
									"scores":	[-4.09384737128582]
								}, {
									"case":	61,
									"scores":	[-4.09384737128582]
								}, {
									"case":	62,
									"scores":	[-4.09384737128582]
								}, {
									"case":	63,
									"scores":	[-4.09384737128582]
								}, {
									"case":	64,
									"scores":	[-4.09384737128582]
								}, {
									"case":	65,
									"scores":	[-4.09384737128582]
								}, {
									"case":	66,
									"scores":	[-4.09384737128582]
								}, {
									"case":	67,
									"scores":	[-4.09384737128582]
								}, {
									"case":	68,
									"scores":	[-4.09384737128582]
								}, {
									"case":	69,
									"scores":	[-4.09384737128582]
								}, {
									"case":	70,
									"scores":	[-4.09384737128582]
								}, {
									"case":	71,
									"scores":	[-4.09384737128582]
								}, {
									"case":	72,
									"scores":	[-4.09384737128582]
								}, {
									"case":	73,
									"scores":	[-4.09384737128582]
								}, {
									"case":	74,
									"scores":	[-4.09384737128582]
								}, {
									"case":	75,
									"scores":	[-4.09384737128582]
								}, {
									"case":	76,
									"scores":	[-4.09384737128582]
								}, {
									"case":	77,
									"scores":	[-4.09384737128582]
								}, {
									"case":	78,
									"scores":	[-4.09384737128582]
								}, {
									"case":	79,
									"scores":	[-4.09384737128582]
								}, {
									"case":	80,
									"scores":	[-4.09384737128582]
								}, {
									"case":	81,
									"scores":	[-4.09384737128582]
								}, {
									"case":	82,
									"scores":	[-4.09384737128582]
								}, {
									"case":	83,
									"scores":	[-4.09384737128582]
								}, {
									"case":	84,
									"scores":	[-4.09384737128582]
								}, {
									"case":	85,
									"scores":	[-4.09384737128582]
								}, {
									"case":	86,
									"scores":	[-4.09384737128582]
								}, {
									"case":	87,
									"scores":	[-4.09384737128582]
								}, {
									"case":	88,
									"scores":	[-4.09384737128582]
								}, {
									"case":	89,
									"scores":	[-4.09384737128582]
								}, {
									"case":	90,
									"scores":	[-4.09384737128582]
								}, {
									"case":	91,
									"scores":	[-4.09384737128582]
								}, {
									"case":	92,
									"scores":	[-4.09384737128582]
								}, {
									"case":	93,
									"scores":	[-4.09384737128582]
								}, {
									"case":	94,
									"scores":	[-4.09384737128582]
								}, {
									"case":	95,
									"scores":	[-4.09384737128582]
								}, {
									"case":	96,
									"scores":	[-4.09384737128582]
								}, {
									"case":	97,
									"scores":	[-4.09384737128582]
								}, {
									"case":	98,
									"scores":	[-4.09384737128582]
								}, {
									"case":	99,
									"scores":	[-4.09384737128582]
								}, {
									"case":	100,
									"scores":	[-4.09384737128582]
								}, {
									"case":	101,
									"scores":	[-4.09384737128582]
								}, {
									"case":	102,
									"scores":	[-4.09384737128582]
								}, {
									"case":	103,
									"scores":	[-4.09384737128582]
								}, {
									"case":	104,
									"scores":	[-4.09384737128582]
								}, {
									"case":	105,
									"scores":	[-4.09384737128582]
								}, {
									"case":	106,
									"scores":	[-4.09384737128582]
								}, {
									"case":	107,
									"scores":	[-4.09384737128582]
								}, {
									"case":	108,
									"scores":	[-4.09384737128582]
								}, {
									"case":	109,
									"scores":	[-4.09384737128582]
								}, {
									"case":	110,
									"scores":	[-4.09384737128582]
								}, {
									"case":	111,
									"scores":	[-4.09384737128582]
								}, {
									"case":	112,
									"scores":	[-4.09384737128582]
								}, {
									"case":	113,
									"scores":	[-4.09384737128582]
								}, {
									"case":	114,
									"scores":	[-4.09384737128582]
								}, {
									"case":	115,
									"scores":	[-4.09384737128582]
								}, {
									"case":	116,
									"scores":	[-4.09384737128582]
								}, {
									"case":	117,
									"scores":	[-4.09384737128582]
								}, {
									"case":	118,
									"scores":	[-4.09384737128582]
								}, {
									"case":	119,
									"scores":	[-4.09384737128582]
								}, {
									"case":	120,
									"scores":	[-4.09384737128582]
								}, {
									"case":	121,
									"scores":	[-4.09384737128582]
								}, {
									"case":	122,
									"scores":	[-4.09384737128582]
								}, {
									"case":	123,
									"scores":	[-4.09384737128582]
								}, {
									"case":	124,
									"scores":	[-4.09384737128582]
								}, {
									"case":	125,
									"scores":	[-4.09384737128582]
								}, {
									"case":	126,
									"scores":	[-4.09384737128582]
								}, {
									"case":	127,
									"scores":	[-4.09384737128582]
								}, {
									"case":	128,
									"scores":	[-4.09384737128582]
								}, {
									"case":	129,
									"scores":	[-4.09384737128582]
								}, {
									"case":	130,
									"scores":	[-4.09384737128582]
								}, {
									"case":	131,
									"scores":	[-4.09384737128582]
								}, {
									"case":	132,
									"scores":	[-4.09384737128582]
								}, {
									"case":	133,
									"scores":	[-4.09384737128582]
								}, {
									"case":	134,
									"scores":	[-4.09384737128582]
								}, {
									"case":	135,
									"scores":	[-4.09384737128582]
								}, {
									"case":	136,
									"scores":	[-4.09384737128582]
								}, {
									"case":	137,
									"scores":	[-4.09384737128582]
								}, {
									"case":	138,
									"scores":	[-4.09384737128582]
								}, {
									"case":	139,
									"scores":	[-4.09384737128582]
								}, {
									"case":	140,
									"scores":	[-4.09384737128582]
								}, {
									"case":	141,
									"scores":	[-4.09384737128582]
								}, {
									"case":	142,
									"scores":	[-4.09384737128582]
								}, {
									"case":	143,
									"scores":	[-4.09384737128582]
								}, {
									"case":	144,
									"scores":	[-4.09384737128582]
								}, {
									"case":	145,
									"scores":	[-4.09384737128582]
								}, {
									"case":	146,
									"scores":	[-4.09384737128582]
								}, {
									"case":	147,
									"scores":	[-4.09384737128582]
								}, {
									"case":	148,
									"scores":	[-4.09384737128582]
								}, {
									"case":	149,
									"scores":	[-4.09384737128582]
								}, {
									"case":	150,
									"scores":	[-4.09384737128582]
								}, {
									"case":	151,
									"scores":	[-4.09384737128582]
								}, {
									"case":	152,
									"scores":	[-4.09384737128582]
								}, {
									"case":	153,
									"scores":	[-4.09384737128582]
								}, {
									"case":	154,
									"scores":	[-4.09384737128582]
								}, {
									"case":	155,
									"scores":	[-4.09384737128582]
								}, {
									"case":	156,
									"scores":	[-4.09384737128582]
								}, {
									"case":	157,
									"scores":	[-4.09384737128582]
								}, {
									"case":	158,
									"scores":	[-4.09384737128582]
								}, {
									"case":	159,
									"scores":	[-4.09384737128582]
								}, {
									"case":	160,
									"scores":	[-4.09384737128582]
								}, {
									"case":	161,
									"scores":	[-4.09384737128582]
								}, {
									"case":	162,
									"scores":	[-4.09384737128582]
								}, {
									"case":	163,
									"scores":	[-4.09384737128582]
								}, {
									"case":	164,
									"scores":	[-4.09384737128582]
								}, {
									"case":	165,
									"scores":	[-4.09384737128582]
								}, {
									"case":	166,
									"scores":	[-4.09384737128582]
								}, {
									"case":	167,
									"scores":	[-4.09384737128582]
								}, {
									"case":	168,
									"scores":	[-4.09384737128582]
								}, {
									"case":	169,
									"scores":	[-4.09384737128582]
								}, {
									"case":	170,
									"scores":	[-4.09384737128582]
								}, {
									"case":	171,
									"scores":	[-4.09384737128582]
								}, {
									"case":	172,
									"scores":	[-4.09384737128582]
								}, {
									"case":	173,
									"scores":	[-4.09384737128582]
								}, {
									"case":	174,
									"scores":	[-4.09384737128582]
								}, {
									"case":	175,
									"scores":	[-4.09384737128582]
								}, {
									"case":	176,
									"scores":	[-4.09384737128582]
								}, {
									"case":	177,
									"scores":	[-4.09384737128582]
								}, {
									"case":	178,
									"scores":	[-4.09384737128582]
								}, {
									"case":	179,
									"scores":	[-4.09384737128582]
								}, {
									"case":	180,
									"scores":	[-4.09384737128582]
								}, {
									"case":	181,
									"scores":	[-4.09384737128582]
								}, {
									"case":	182,
									"scores":	[-4.09384737128582]
								}, {
									"case":	183,
									"scores":	[-4.09384737128582]
								}, {
									"case":	184,
									"scores":	[-4.09384737128582]
								}, {
									"case":	185,
									"scores":	[-4.09384737128582]
								}, {
									"case":	186,
									"scores":	[-4.09384737128582]
								}, {
									"case":	187,
									"scores":	[-4.09384737128582]
								}, {
									"case":	188,
									"scores":	[-4.09384737128582]
								}, {
									"case":	189,
									"scores":	[-4.09384737128582]
								}, {
									"case":	190,
									"scores":	[-4.09384737128582]
								}, {
									"case":	191,
									"scores":	[-4.09384737128582]
								}, {
									"case":	192,
									"scores":	[-4.09384737128582]
								}, {
									"case":	193,
									"scores":	[-4.09384737128582]
								}, {
									"case":	194,
									"scores":	[-4.09384737128582]
								}, {
									"case":	195,
									"scores":	[-4.09384737128582]
								}, {
									"case":	196,
									"scores":	[-4.09384737128582]
								}, {
									"case":	197,
									"scores":	[-4.09384737128582]
								}, {
									"case":	198,
									"scores":	[-4.09384737128582]
								}, {
									"case":	199,
									"scores":	[-4.09384737128582]
								}, {
									"case":	200,
									"scores":	[-4.09384737128582]
								}, {
									"case":	201,
									"scores":	[-4.09384737128582]
								}, {
									"case":	202,
									"scores":	[-4.09384737128582]
								}, {
									"case":	203,
									"scores":	[-4.09384737128582]
								}, {
									"case":	204,
									"scores":	[-4.09384737128582]
								}, {
									"case":	205,
									"scores":	[-4.09384737128582]
								}, {
									"case":	206,
									"scores":	[-4.09384737128582]
								}, {
									"case":	207,
									"scores":	[-4.09384737128582]
								}, {
									"case":	208,
									"scores":	[-4.09384737128582]
								}, {
									"case":	209,
									"scores":	[-4.09384737128582]
								}, {
									"case":	210,
									"scores":	[-4.09384737128582]
								}, {
									"case":	211,
									"scores":	[-4.09384737128582]
								}, {
									"case":	212,
									"scores":	[-4.09384737128582]
								}, {
									"case":	213,
									"scores":	[-4.09384737128582]
								}, {
									"case":	214,
									"scores":	[-4.09384737128582]
								}, {
									"case":	215,
									"scores":	[-4.09384737128582]
								}, {
									"case":	216,
									"scores":	[-4.09384737128582]
								}, {
									"case":	217,
									"scores":	[-4.09384737128582]
								}, {
									"case":	218,
									"scores":	[-4.09384737128582]
								}, {
									"case":	219,
									"scores":	[-4.09384737128582]
								}, {
									"case":	220,
									"scores":	[-4.09384737128582]
								}, {
									"case":	221,
									"scores":	[-4.09384737128582]
								}, {
									"case":	222,
									"scores":	[-4.09384737128582]
								}, {
									"case":	223,
									"scores":	[-4.09384737128582]
								}, {
									"case":	224,
									"scores":	[-4.09384737128582]
								}, {
									"case":	225,
									"scores":	[-4.09384737128582]
								}, {
									"case":	226,
									"scores":	[-4.09384737128582]
								}, {
									"case":	227,
									"scores":	[-4.09384737128582]
								}, {
									"case":	228,
									"scores":	[-4.09384737128582]
								}, {
									"case":	229,
									"scores":	[-4.09384737128582]
								}, {
									"case":	230,
									"scores":	[-4.09384737128582]
								}, {
									"case":	231,
									"scores":	[-4.09384737128582]
								}, {
									"case":	232,
									"scores":	[-4.09384737128582]
								}, {
									"case":	233,
									"scores":	[-4.09384737128582]
								}, {
									"case":	234,
									"scores":	[-4.09384737128582]
								}, {
									"case":	235,
									"scores":	[-4.09384737128582]
								}, {
									"case":	236,
									"scores":	[-4.09384737128582]
								}, {
									"case":	237,
									"scores":	[-4.09384737128582]
								}, {
									"case":	238,
									"scores":	[-4.09384737128582]
								}, {
									"case":	239,
									"scores":	[-4.09384737128582]
								}, {
									"case":	240,
									"scores":	[-4.09384737128582]
								}, {
									"case":	241,
									"scores":	[-4.09384737128582]
								}, {
									"case":	242,
									"scores":	[-4.09384737128582]
								}, {
									"case":	243,
									"scores":	[-4.09384737128582]
								}, {
									"case":	244,
									"scores":	[-4.09384737128582]
								}, {
									"case":	245,
									"scores":	[-4.09384737128582]
								}, {
									"case":	246,
									"scores":	[-4.09384737128582]
								}, {
									"case":	247,
									"scores":	[-4.09384737128582]
								}, {
									"case":	248,
									"scores":	[-4.09384737128582]
								}, {
									"case":	249,
									"scores":	[-4.09384737128582]
								}, {
									"case":	250,
									"scores":	[-4.09384737128582]
								}, {
									"case":	251,
									"scores":	[-4.09384737128582]
								}, {
									"case":	252,
									"scores":	[-4.09384737128582]
								}, {
									"case":	253,
									"scores":	[-4.09384737128582]
								}, {
									"case":	254,
									"scores":	[-4.09384737128582]
								}, {
									"case":	255,
									"scores":	[-4.09384737128582]
								}, {
									"case":	256,
									"scores":	[-4.09384737128582]
								}, {
									"case":	257,
									"scores":	[-4.09384737128582]
								}, {
									"case":	258,
									"scores":	[-4.09384737128582]
								}, {
									"case":	259,
									"scores":	[-4.09384737128582]
								}, {
									"case":	260,
									"scores":	[-4.09384737128582]
								}, {
									"case":	261,
									"scores":	[-4.09384737128582]
								}, {
									"case":	262,
									"scores":	[-4.09384737128582]
								}, {
									"case":	263,
									"scores":	[-4.09384737128582]
								}, {
									"case":	264,
									"scores":	[-4.09384737128582]
								}, {
									"case":	265,
									"scores":	[-4.09384737128582]
								}, {
									"case":	266,
									"scores":	[-4.09384737128582]
								}, {
									"case":	267,
									"scores":	[-4.09384737128582]
								}, {
									"case":	268,
									"scores":	[-4.09384737128582]
								}, {
									"case":	269,
									"scores":	[-4.09384737128582]
								}, {
									"case":	270,
									"scores":	[-4.09384737128582]
								}, {
									"case":	271,
									"scores":	[-4.09384737128582]
								}, {
									"case":	272,
									"scores":	[-4.09384737128582]
								}, {
									"case":	273,
									"scores":	[-4.09384737128582]
								}, {
									"case":	274,
									"scores":	[-4.09384737128582]
								}, {
									"case":	275,
									"scores":	[-4.09384737128582]
								}, {
									"case":	276,
									"scores":	[-4.09384737128582]
								}, {
									"case":	277,
									"scores":	[-4.09384737128582]
								}, {
									"case":	278,
									"scores":	[-4.09384737128582]
								}, {
									"case":	279,
									"scores":	[-4.09384737128582]
								}, {
									"case":	280,
									"scores":	[-4.09384737128582]
								}, {
									"case":	281,
									"scores":	[-4.09384737128582]
								}, {
									"case":	282,
									"scores":	[-4.09384737128582]
								}, {
									"case":	283,
									"scores":	[-4.09384737128582]
								}, {
									"case":	284,
									"scores":	[-4.09384737128582]
								}, {
									"case":	285,
									"scores":	[-4.09384737128582]
								}, {
									"case":	286,
									"scores":	[-4.09384737128582]
								}, {
									"case":	287,
									"scores":	[-4.09384737128582]
								}, {
									"case":	288,
									"scores":	[-4.09384737128582]
								}, {
									"case":	289,
									"scores":	[-4.09384737128582]
								}, {
									"case":	290,
									"scores":	[-4.09384737128582]
								}, {
									"case":	291,
									"scores":	[-4.09384737128582]
								}, {
									"case":	292,
									"scores":	[-4.09384737128582]
								}, {
									"case":	293,
									"scores":	[-4.09384737128582]
								}, {
									"case":	294,
									"scores":	[-4.09384737128582]
								}, {
									"case":	295,
									"scores":	[-4.09384737128582]
								}, {
									"case":	296,
									"scores":	[-4.09384737128582]
								}, {
									"case":	297,
									"scores":	[-4.09384737128582]
								}, {
									"case":	298,
									"scores":	[-4.09384737128582]
								}, {
									"case":	299,
									"scores":	[-4.09384737128582]
								}, {
									"case":	300,
									"scores":	[-4.09384737128582]
								}, {
									"case":	301,
									"scores":	[-4.09384737128582]
								}, {
									"case":	302,
									"scores":	[-4.09384737128582]
								}, {
									"case":	303,
									"scores":	[-4.09384737128582]
								}, {
									"case":	304,
									"scores":	[-4.09384737128582]
								}, {
									"case":	305,
									"scores":	[-4.09384737128582]
								}, {
									"case":	306,
									"scores":	[-4.09384737128582]
								}, {
									"case":	307,
									"scores":	[-4.09384737128582]
								}, {
									"case":	308,
									"scores":	[-4.09384737128582]
								}, {
									"case":	309,
									"scores":	[-4.09384737128582]
								}, {
									"case":	310,
									"scores":	[-4.09384737128582]
								}, {
									"case":	311,
									"scores":	[-4.09384737128582]
								}, {
									"case":	312,
									"scores":	[-4.09384737128582]
								}, {
									"case":	313,
									"scores":	[-4.09384737128582]
								}, {
									"case":	314,
									"scores":	[-4.09384737128582]
								}, {
									"case":	315,
									"scores":	[-4.09384737128582]
								}, {
									"case":	316,
									"scores":	[-4.09384737128582]
								}, {
									"case":	317,
									"scores":	[-4.09384737128582]
								}, {
									"case":	318,
									"scores":	[-4.09384737128582]
								}, {
									"case":	319,
									"scores":	[-4.09384737128582]
								}, {
									"case":	320,
									"scores":	[-4.09384737128582]
								}, {
									"case":	321,
									"scores":	[-4.09384737128582]
								}, {
									"case":	322,
									"scores":	[-4.09384737128582]
								}, {
									"case":	323,
									"scores":	[-4.09384737128582]
								}, {
									"case":	324,
									"scores":	[-4.09384737128582]
								}, {
									"case":	325,
									"scores":	[-4.09384737128582]
								}, {
									"case":	326,
									"scores":	[-4.09384737128582]
								}, {
									"case":	327,
									"scores":	[-4.09384737128582]
								}, {
									"case":	328,
									"scores":	[-4.09384737128582]
								}, {
									"case":	329,
									"scores":	[-4.09384737128582]
								}, {
									"case":	330,
									"scores":	[-4.09384737128582]
								}, {
									"case":	331,
									"scores":	[-4.09384737128582]
								}, {
									"case":	332,
									"scores":	[-4.09384737128582]
								}, {
									"case":	333,
									"scores":	[-4.09384737128582]
								}, {
									"case":	334,
									"scores":	[-4.09384737128582]
								}, {
									"case":	335,
									"scores":	[-4.09384737128582]
								}, {
									"case":	336,
									"scores":	[-4.09384737128582]
								}, {
									"case":	337,
									"scores":	[-4.09384737128582]
								}, {
									"case":	338,
									"scores":	[-4.09384737128582]
								}, {
									"case":	339,
									"scores":	[-4.09384737128582]
								}, {
									"case":	340,
									"scores":	[-4.09384737128582]
								}, {
									"case":	341,
									"scores":	[-4.09384737128582]
								}, {
									"case":	342,
									"scores":	[-4.09384737128582]
								}, {
									"case":	343,
									"scores":	[-4.09384737128582]
								}, {
									"case":	344,
									"scores":	[-4.09384737128582]
								}, {
									"case":	345,
									"scores":	[-4.09384737128582]
								}, {
									"case":	346,
									"scores":	[-4.09384737128582]
								}, {
									"case":	347,
									"scores":	[-4.09384737128582]
								}, {
									"case":	348,
									"scores":	[-4.09384737128582]
								}, {
									"case":	349,
									"scores":	[-4.09384737128582]
								}, {
									"case":	350,
									"scores":	[-4.09384737128582]
								}, {
									"case":	351,
									"scores":	[-4.09384737128582]
								}, {
									"case":	352,
									"scores":	[-4.09384737128582]
								}, {
									"case":	353,
									"scores":	[-4.09384737128582]
								}, {
									"case":	354,
									"scores":	[-4.09384737128582]
								}, {
									"case":	355,
									"scores":	[-4.09384737128582]
								}, {
									"case":	356,
									"scores":	[-4.09384737128582]
								}, {
									"case":	357,
									"scores":	[-4.09384737128582]
								}, {
									"case":	358,
									"scores":	[-4.09384737128582]
								}, {
									"case":	359,
									"scores":	[-4.09384737128582]
								}, {
									"case":	360,
									"scores":	[-4.09384737128582]
								}, {
									"case":	361,
									"scores":	[-4.09384737128582]
								}, {
									"case":	362,
									"scores":	[-4.09384737128582]
								}, {
									"case":	363,
									"scores":	[-4.09384737128582]
								}, {
									"case":	364,
									"scores":	[-4.09384737128582]
								}, {
									"case":	365,
									"scores":	[-4.09384737128582]
								}, {
									"case":	366,
									"scores":	[-4.09384737128582]
								}, {
									"case":	367,
									"scores":	[-4.09384737128582]
								}, {
									"case":	368,
									"scores":	[-4.09384737128582]
								}, {
									"case":	369,
									"scores":	[-4.09384737128582]
								}, {
									"case":	370,
									"scores":	[-4.09384737128582]
								}, {
									"case":	371,
									"scores":	[-4.09384737128582]
								}, {
									"case":	372,
									"scores":	[-4.09384737128582]
								}, {
									"case":	373,
									"scores":	[-4.09384737128582]
								}, {
									"case":	374,
									"scores":	[-4.09384737128582]
								}, {
									"case":	375,
									"scores":	[-4.09384737128582]
								}, {
									"case":	376,
									"scores":	[-4.09384737128582]
								}, {
									"case":	377,
									"scores":	[-4.09384737128582]
								}, {
									"case":	378,
									"scores":	[-4.09384737128582]
								}, {
									"case":	379,
									"scores":	[-4.09384737128582]
								}, {
									"case":	380,
									"scores":	[-4.09384737128582]
								}, {
									"case":	381,
									"scores":	[-4.09384737128582]
								}, {
									"case":	382,
									"scores":	[-4.09384737128582]
								}, {
									"case":	383,
									"scores":	[-4.09384737128582]
								}, {
									"case":	384,
									"scores":	[-4.09384737128582]
								}, {
									"case":	385,
									"scores":	[-4.09384737128582]
								}, {
									"case":	386,
									"scores":	[-4.09384737128582]
								}, {
									"case":	387,
									"scores":	[-4.09384737128582]
								}, {
									"case":	388,
									"scores":	[-4.09384737128582]
								}, {
									"case":	389,
									"scores":	[-4.09384737128582]
								}, {
									"case":	390,
									"scores":	[-4.09384737128582]
								}, {
									"case":	391,
									"scores":	[-4.09384737128582]
								}, {
									"case":	392,
									"scores":	[-4.09384737128582]
								}, {
									"case":	393,
									"scores":	[-4.5943789182858215, -9.15369537328582, -8.79352243928582, -8.07798720898582, -8.92671061208582, -8.15601105928582, -9.37042012328582, -8.99660496328582, -9.15853945308582, -8.10956153928582, -8.28682437928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.98415443928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.33741143928582, -8.98415443928582, -8.98415443928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.88294513928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.79352243928582, -8.79352243928582, -8.88294513928582, -8.79352243928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.98415443928582, -8.98415443928582, -8.98415443928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.33741143928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.79352243928582, -8.88294513928582, -8.98415443928582]
								}, {
									"case":	394,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	395,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	396,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	397,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	398,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	399,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	400,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	401,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	402,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	403,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	404,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	405,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	406,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	407,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	408,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	409,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	410,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}, {
									"case":	411,
									"scores":	[-6.8571607182858223, -11.41647717328582, -11.056304239285822, -10.34076900898582, -11.189492412085823, -10.418792859285823, -11.633201923285821, -11.259386763285821, -11.421321253085821, -10.372343339285823, -10.549606179285821, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -10.600193239285822, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.246936239285823, -11.246936239285823, -11.246936239285823, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -10.600193239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.056304239285822, -11.145726939285822, -11.246936239285823]
								}]
						}, {
							"switch":	53,
							"types":	[[35], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], []],
							"begin_line":	259,
							"begin_column":	2,
							"end_line":	265,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if ((!is_hex_len(ts_str, 8)) || __is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!ASN1_INTEGER_set_uint64(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_abs_is_word(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_add_word(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_is_word(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_mul_word(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_set_word(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!BN_sub_word(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!EVP_CIPHER_meth_set_flags(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!EVP_MD_meth_set_flags(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!SSL_CTX_set_block_padding(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!SSL_CTX_set_num_tickets(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!SSL_set_block_padding(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!SSL_set_num_tickets(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!VALGRIND_PRINTF(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!VALGRIND_PRINTF_BACKTRACE(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!X509_STORE_set_flags(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!X509_VERIFY_PARAM_clear_flags(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!X509_VERIFY_PARAM_set_flags(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!bitset_test_bit(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!buffer_append_long_hex(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!buffer_prepare_append(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!buffer_prepare_copy(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!g_hook_destroy(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!g_relation_exists(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!log_trace(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!mblen(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!mlock(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!munlock(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!munmap(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!printf(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!pthread_attr_setguardsize(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if (!pthread_attr_setstacksize(ts_str, 8)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if ((!is_hex_len(ts_str, 8)) && !__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.8040873794281462, -6.0727880094281463, -4.8477430634281449, -4.3394625931281441, -4.9460573794281446, -4.1231826814281458, -6.2659024284281468, -6.0869274284281456, -4.8848411674281449, -4.5138743634281449, -4.7786558634281446, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -5.6916480634281452, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -4.6038161934281447, -5.6916480634281452, -5.6916480634281452, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -5.2847080634281447, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -4.8477430634281449, -4.8477430634281449, -5.2847080634281447, -4.8477430634281449, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -5.6916480634281452, -5.6916480634281452, -5.6916480634281452, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.6038161934281447, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -4.8477430634281449, -5.2847080634281447, -5.6916480634281452]
								}, {
									"case":	2,
									"scores":	[-2.181644447428146, -5.4503450774281461, -4.2253001314281464, -3.7170196611281456, -4.3236144474281462, -3.500739749428146, -5.6434594964281457, -5.4644844964281454, -4.2623982354281464, -3.891431431428146, -4.1562129314281462, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -3.9813732614281463, -5.0692051314281459, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.6622651314281462, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.6622651314281462, -4.2253001314281464, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -3.9813732614281463, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.6622651314281462, -5.0692051314281459]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-2.181644447428146, -5.4503450774281461, -4.2253001314281464, -3.7170196611281456, -4.3236144474281462, -3.500739749428146, -5.6434594964281457, -5.4644844964281454, -4.2623982354281464, -3.891431431428146, -4.1562129314281462, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -3.9813732614281463, -5.0692051314281459, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.6622651314281462, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.6622651314281462, -4.2253001314281464, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -5.0692051314281459, -5.0692051314281459, -5.0692051314281459, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -3.9813732614281463, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.2253001314281464, -4.6622651314281462, -5.0692051314281459]
								}]
						}, {
							"switch":	54,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	259,
							"begin_column":	2,
							"end_line":	265,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    if (!is_hex_len(ts_str, 8)) {\n        if (con->conf.log_request_handling) {\n            log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n        }\n        return HANDLER_GO_ON;\n    }\n", "if (!__is_neg(\"\", \"L259\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(md5_str), sizeof (md5_str), &(i), sizeof (i), &(ts), sizeof (ts), &(p), sizeof (p), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)) && (!is_hex_len(ts_str, 8))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.43583665728582, -7.70453728728582, -6.47949234128582, -5.97121187098582, -6.57780665728582, -5.75493195928582, -7.89765170628582, -7.71867670628582, -6.51659044528582, -6.14562364128582, -6.41040514128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -7.32339734128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -6.23556547128582, -7.32339734128582, -7.32339734128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.91645734128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -6.47949234128582, -6.47949234128582, -6.91645734128582, -6.47949234128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -7.32339734128582, -7.32339734128582, -7.32339734128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.23556547128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.47949234128582, -6.91645734128582, -7.32339734128582]
								}, {
									"case":	2,
									"scores":	[-3.1815213962858211, -6.4502220262858216, -5.22517708028582, -4.71689660998582, -5.32349139628582, -4.50061669828582, -6.64333644528582, -6.46436144528582, -5.26227518428582, -4.89130838028582, -5.15608988028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -6.06908208028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -4.98125021028582, -6.06908208028582, -6.06908208028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.66214208028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -5.22517708028582, -5.22517708028582, -5.66214208028582, -5.22517708028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -6.06908208028582, -6.06908208028582, -6.06908208028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -4.98125021028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.22517708028582, -5.66214208028582, -6.06908208028582]
								}]
						}]
				}, {
					"line":	265,
					"switches":	[{
							"switch":	55,
							"types":	[[], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], [], [], [], [], [], []],
							"begin_line":	266,
							"begin_column":	0,
							"end_line":	266,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 0;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 16;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 1;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 213;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 219;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 225;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 234;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 244;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 251;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 261;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 268;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 282;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 310;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 324;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 32;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 403;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 408;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 4;\n", "if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.053441956650782]
								}, {
									"case":	2,
									"scores":	[-4.053441956650782]
								}, {
									"case":	3,
									"scores":	[-4.053441956650782]
								}, {
									"case":	4,
									"scores":	[-4.053441956650782]
								}, {
									"case":	5,
									"scores":	[-4.053441956650782]
								}, {
									"case":	6,
									"scores":	[-4.053441956650782]
								}, {
									"case":	7,
									"scores":	[-4.053441956650782]
								}, {
									"case":	8,
									"scores":	[-4.053441956650782]
								}, {
									"case":	9,
									"scores":	[-4.053441956650782]
								}, {
									"case":	10,
									"scores":	[-4.053441956650782]
								}, {
									"case":	11,
									"scores":	[-4.053441956650782]
								}, {
									"case":	12,
									"scores":	[-4.053441956650782]
								}, {
									"case":	13,
									"scores":	[-4.053441956650782]
								}, {
									"case":	14,
									"scores":	[-4.053441956650782]
								}, {
									"case":	15,
									"scores":	[-4.053441956650782]
								}, {
									"case":	16,
									"scores":	[-4.053441956650782]
								}, {
									"case":	17,
									"scores":	[-4.053441956650782]
								}, {
									"case":	18,
									"scores":	[-4.053441956650782]
								}, {
									"case":	19,
									"scores":	[-4.053441956650782]
								}, {
									"case":	20,
									"scores":	[-4.053441956650782]
								}, {
									"case":	21,
									"scores":	[-4.053441956650782]
								}, {
									"case":	22,
									"scores":	[-4.053441956650782]
								}, {
									"case":	23,
									"scores":	[-4.053441956650782]
								}, {
									"case":	24,
									"scores":	[-4.053441956650782]
								}, {
									"case":	25,
									"scores":	[-4.053441956650782]
								}, {
									"case":	26,
									"scores":	[-4.053441956650782]
								}, {
									"case":	27,
									"scores":	[-4.053441956650782]
								}, {
									"case":	28,
									"scores":	[-4.053441956650782]
								}, {
									"case":	29,
									"scores":	[-4.053441956650782]
								}, {
									"case":	30,
									"scores":	[-4.053441956650782]
								}, {
									"case":	31,
									"scores":	[-4.053441956650782]
								}, {
									"case":	32,
									"scores":	[-4.053441956650782]
								}, {
									"case":	33,
									"scores":	[-4.053441956650782]
								}, {
									"case":	34,
									"scores":	[-4.053441956650782]
								}, {
									"case":	35,
									"scores":	[-4.053441956650782]
								}, {
									"case":	36,
									"scores":	[-4.053441956650782]
								}, {
									"case":	37,
									"scores":	[-4.053441956650782]
								}, {
									"case":	38,
									"scores":	[-4.053441956650782]
								}, {
									"case":	39,
									"scores":	[-4.053441956650782]
								}, {
									"case":	40,
									"scores":	[-4.053441956650782]
								}, {
									"case":	41,
									"scores":	[-4.053441956650782]
								}, {
									"case":	42,
									"scores":	[-4.053441956650782]
								}, {
									"case":	43,
									"scores":	[-4.053441956650782]
								}, {
									"case":	44,
									"scores":	[-4.053441956650782]
								}, {
									"case":	45,
									"scores":	[-4.053441956650782]
								}, {
									"case":	46,
									"scores":	[-4.053441956650782]
								}, {
									"case":	47,
									"scores":	[-4.053441956650782]
								}, {
									"case":	48,
									"scores":	[-4.053441956650782]
								}, {
									"case":	49,
									"scores":	[-4.053441956650782]
								}, {
									"case":	50,
									"scores":	[-4.053441956650782]
								}, {
									"case":	51,
									"scores":	[-4.053441956650782]
								}, {
									"case":	52,
									"scores":	[-4.053441956650782]
								}, {
									"case":	53,
									"scores":	[-4.053441956650782]
								}, {
									"case":	54,
									"scores":	[-4.053441956650782]
								}, {
									"case":	55,
									"scores":	[-4.053441956650782]
								}, {
									"case":	56,
									"scores":	[-4.053441956650782]
								}, {
									"case":	57,
									"scores":	[-4.053441956650782]
								}, {
									"case":	58,
									"scores":	[-4.053441956650782]
								}, {
									"case":	59,
									"scores":	[-4.053441956650782]
								}, {
									"case":	60,
									"scores":	[-4.053441956650782]
								}, {
									"case":	61,
									"scores":	[-4.053441956650782]
								}, {
									"case":	62,
									"scores":	[-4.053441956650782]
								}, {
									"case":	63,
									"scores":	[-4.053441956650782]
								}, {
									"case":	64,
									"scores":	[-4.053441956650782]
								}, {
									"case":	65,
									"scores":	[-4.053441956650782]
								}, {
									"case":	66,
									"scores":	[-4.053441956650782]
								}, {
									"case":	67,
									"scores":	[-4.053441956650782]
								}, {
									"case":	68,
									"scores":	[-4.053441956650782]
								}, {
									"case":	69,
									"scores":	[-4.053441956650782]
								}, {
									"case":	70,
									"scores":	[-4.053441956650782]
								}, {
									"case":	71,
									"scores":	[-4.053441956650782]
								}, {
									"case":	72,
									"scores":	[-4.053441956650782]
								}, {
									"case":	73,
									"scores":	[-4.053441956650782]
								}, {
									"case":	74,
									"scores":	[-4.053441956650782]
								}, {
									"case":	75,
									"scores":	[-4.053441956650782]
								}, {
									"case":	76,
									"scores":	[-4.053441956650782]
								}, {
									"case":	77,
									"scores":	[-4.053441956650782]
								}, {
									"case":	78,
									"scores":	[-4.053441956650782]
								}, {
									"case":	79,
									"scores":	[-4.053441956650782]
								}, {
									"case":	80,
									"scores":	[-4.053441956650782]
								}, {
									"case":	81,
									"scores":	[-4.053441956650782]
								}, {
									"case":	82,
									"scores":	[-4.053441956650782]
								}, {
									"case":	83,
									"scores":	[-4.053441956650782]
								}, {
									"case":	84,
									"scores":	[-4.053441956650782]
								}, {
									"case":	85,
									"scores":	[-4.053441956650782]
								}, {
									"case":	86,
									"scores":	[-4.053441956650782]
								}, {
									"case":	87,
									"scores":	[-4.053441956650782]
								}, {
									"case":	88,
									"scores":	[-4.053441956650782]
								}, {
									"case":	89,
									"scores":	[-4.053441956650782]
								}, {
									"case":	90,
									"scores":	[-4.053441956650782]
								}, {
									"case":	91,
									"scores":	[-4.053441956650782]
								}, {
									"case":	92,
									"scores":	[-4.053441956650782]
								}, {
									"case":	93,
									"scores":	[-4.053441956650782]
								}, {
									"case":	94,
									"scores":	[-4.053441956650782]
								}, {
									"case":	95,
									"scores":	[-4.053441956650782]
								}, {
									"case":	96,
									"scores":	[-4.053441956650782]
								}, {
									"case":	97,
									"scores":	[-4.053441956650782]
								}, {
									"case":	98,
									"scores":	[-4.053441956650782]
								}, {
									"case":	99,
									"scores":	[-4.053441956650782]
								}, {
									"case":	100,
									"scores":	[-4.053441956650782]
								}, {
									"case":	101,
									"scores":	[-4.053441956650782]
								}, {
									"case":	102,
									"scores":	[-4.053441956650782]
								}, {
									"case":	103,
									"scores":	[-4.053441956650782]
								}, {
									"case":	104,
									"scores":	[-4.053441956650782]
								}, {
									"case":	105,
									"scores":	[-4.053441956650782]
								}, {
									"case":	106,
									"scores":	[-4.053441956650782]
								}, {
									"case":	107,
									"scores":	[-4.053441956650782]
								}, {
									"case":	108,
									"scores":	[-4.053441956650782]
								}, {
									"case":	109,
									"scores":	[-4.053441956650782]
								}, {
									"case":	110,
									"scores":	[-4.053441956650782]
								}, {
									"case":	111,
									"scores":	[-4.053441956650782]
								}, {
									"case":	112,
									"scores":	[-4.053441956650782]
								}, {
									"case":	113,
									"scores":	[-4.053441956650782]
								}, {
									"case":	114,
									"scores":	[-4.053441956650782]
								}, {
									"case":	115,
									"scores":	[-4.053441956650782]
								}, {
									"case":	116,
									"scores":	[-4.053441956650782]
								}, {
									"case":	117,
									"scores":	[-4.053441956650782]
								}, {
									"case":	118,
									"scores":	[-4.053441956650782]
								}, {
									"case":	119,
									"scores":	[-4.053441956650782]
								}, {
									"case":	120,
									"scores":	[-4.053441956650782]
								}, {
									"case":	121,
									"scores":	[-4.053441956650782]
								}, {
									"case":	122,
									"scores":	[-4.053441956650782]
								}, {
									"case":	123,
									"scores":	[-4.053441956650782]
								}, {
									"case":	124,
									"scores":	[-4.053441956650782]
								}, {
									"case":	125,
									"scores":	[-4.053441956650782]
								}, {
									"case":	126,
									"scores":	[-4.053441956650782]
								}, {
									"case":	127,
									"scores":	[-4.053441956650782]
								}, {
									"case":	128,
									"scores":	[-4.053441956650782]
								}, {
									"case":	129,
									"scores":	[-4.053441956650782]
								}, {
									"case":	130,
									"scores":	[-4.053441956650782]
								}, {
									"case":	131,
									"scores":	[-4.053441956650782]
								}, {
									"case":	132,
									"scores":	[-4.053441956650782]
								}, {
									"case":	133,
									"scores":	[-4.053441956650782]
								}, {
									"case":	134,
									"scores":	[-4.053441956650782]
								}, {
									"case":	135,
									"scores":	[-4.053441956650782]
								}, {
									"case":	136,
									"scores":	[-4.053441956650782]
								}, {
									"case":	137,
									"scores":	[-4.053441956650782]
								}, {
									"case":	138,
									"scores":	[-4.053441956650782]
								}, {
									"case":	139,
									"scores":	[-4.053441956650782]
								}, {
									"case":	140,
									"scores":	[-4.053441956650782]
								}, {
									"case":	141,
									"scores":	[-4.053441956650782]
								}, {
									"case":	142,
									"scores":	[-4.053441956650782]
								}, {
									"case":	143,
									"scores":	[-4.053441956650782]
								}, {
									"case":	144,
									"scores":	[-4.053441956650782]
								}, {
									"case":	145,
									"scores":	[-4.053441956650782]
								}, {
									"case":	146,
									"scores":	[-4.053441956650782]
								}, {
									"case":	147,
									"scores":	[-4.053441956650782]
								}, {
									"case":	148,
									"scores":	[-4.053441956650782]
								}, {
									"case":	149,
									"scores":	[-4.053441956650782]
								}, {
									"case":	150,
									"scores":	[-4.053441956650782]
								}, {
									"case":	151,
									"scores":	[-4.053441956650782]
								}, {
									"case":	152,
									"scores":	[-4.053441956650782]
								}, {
									"case":	153,
									"scores":	[-4.053441956650782]
								}, {
									"case":	154,
									"scores":	[-4.053441956650782]
								}, {
									"case":	155,
									"scores":	[-4.053441956650782]
								}, {
									"case":	156,
									"scores":	[-4.053441956650782]
								}, {
									"case":	157,
									"scores":	[-4.053441956650782]
								}, {
									"case":	158,
									"scores":	[-4.053441956650782]
								}, {
									"case":	159,
									"scores":	[-4.053441956650782]
								}, {
									"case":	160,
									"scores":	[-4.053441956650782]
								}, {
									"case":	161,
									"scores":	[-4.053441956650782]
								}, {
									"case":	162,
									"scores":	[-4.053441956650782]
								}, {
									"case":	163,
									"scores":	[-4.053441956650782]
								}, {
									"case":	164,
									"scores":	[-4.053441956650782]
								}, {
									"case":	165,
									"scores":	[-4.053441956650782]
								}, {
									"case":	166,
									"scores":	[-4.053441956650782]
								}, {
									"case":	167,
									"scores":	[-4.053441956650782]
								}, {
									"case":	168,
									"scores":	[-4.053441956650782]
								}, {
									"case":	169,
									"scores":	[-4.053441956650782]
								}, {
									"case":	170,
									"scores":	[-4.053441956650782]
								}, {
									"case":	171,
									"scores":	[-4.053441956650782]
								}, {
									"case":	172,
									"scores":	[-4.053441956650782]
								}, {
									"case":	173,
									"scores":	[-4.053441956650782]
								}, {
									"case":	174,
									"scores":	[-4.053441956650782]
								}, {
									"case":	175,
									"scores":	[-4.053441956650782]
								}, {
									"case":	176,
									"scores":	[-4.053441956650782]
								}, {
									"case":	177,
									"scores":	[-4.053441956650782]
								}, {
									"case":	178,
									"scores":	[-4.053441956650782]
								}, {
									"case":	179,
									"scores":	[-4.053441956650782]
								}, {
									"case":	180,
									"scores":	[-4.053441956650782]
								}, {
									"case":	181,
									"scores":	[-4.053441956650782]
								}, {
									"case":	182,
									"scores":	[-4.053441956650782]
								}, {
									"case":	183,
									"scores":	[-4.053441956650782]
								}, {
									"case":	184,
									"scores":	[-4.053441956650782]
								}, {
									"case":	185,
									"scores":	[-4.053441956650782]
								}, {
									"case":	186,
									"scores":	[-4.053441956650782]
								}, {
									"case":	187,
									"scores":	[-4.053441956650782]
								}, {
									"case":	188,
									"scores":	[-4.053441956650782]
								}, {
									"case":	189,
									"scores":	[-4.053441956650782]
								}, {
									"case":	190,
									"scores":	[-4.053441956650782]
								}, {
									"case":	191,
									"scores":	[-4.053441956650782]
								}, {
									"case":	192,
									"scores":	[-4.053441956650782]
								}, {
									"case":	193,
									"scores":	[-4.053441956650782]
								}, {
									"case":	194,
									"scores":	[-4.053441956650782]
								}, {
									"case":	195,
									"scores":	[-4.053441956650782]
								}, {
									"case":	196,
									"scores":	[-4.053441956650782]
								}, {
									"case":	197,
									"scores":	[-4.053441956650782]
								}, {
									"case":	198,
									"scores":	[-4.053441956650782]
								}, {
									"case":	199,
									"scores":	[-4.053441956650782]
								}, {
									"case":	200,
									"scores":	[-4.053441956650782]
								}, {
									"case":	201,
									"scores":	[-4.053441956650782]
								}, {
									"case":	202,
									"scores":	[-4.053441956650782]
								}, {
									"case":	203,
									"scores":	[-4.053441956650782]
								}, {
									"case":	204,
									"scores":	[-4.053441956650782]
								}, {
									"case":	205,
									"scores":	[-4.053441956650782]
								}, {
									"case":	206,
									"scores":	[-4.053441956650782]
								}, {
									"case":	207,
									"scores":	[-4.053441956650782]
								}, {
									"case":	208,
									"scores":	[-4.053441956650782]
								}, {
									"case":	209,
									"scores":	[-4.053441956650782]
								}, {
									"case":	210,
									"scores":	[-4.053441956650782]
								}, {
									"case":	211,
									"scores":	[-4.053441956650782]
								}, {
									"case":	212,
									"scores":	[-4.053441956650782]
								}, {
									"case":	213,
									"scores":	[-4.053441956650782]
								}, {
									"case":	214,
									"scores":	[-4.053441956650782]
								}, {
									"case":	215,
									"scores":	[-4.053441956650782]
								}, {
									"case":	216,
									"scores":	[-4.053441956650782]
								}, {
									"case":	217,
									"scores":	[-4.053441956650782]
								}, {
									"case":	218,
									"scores":	[-4.053441956650782]
								}, {
									"case":	219,
									"scores":	[-4.053441956650782]
								}, {
									"case":	220,
									"scores":	[-4.053441956650782]
								}, {
									"case":	221,
									"scores":	[-4.053441956650782]
								}, {
									"case":	222,
									"scores":	[-4.053441956650782]
								}, {
									"case":	223,
									"scores":	[-4.053441956650782]
								}, {
									"case":	224,
									"scores":	[-4.053441956650782]
								}, {
									"case":	225,
									"scores":	[-4.053441956650782]
								}, {
									"case":	226,
									"scores":	[-4.053441956650782]
								}, {
									"case":	227,
									"scores":	[-4.053441956650782]
								}, {
									"case":	228,
									"scores":	[-4.053441956650782]
								}, {
									"case":	229,
									"scores":	[-4.053441956650782]
								}, {
									"case":	230,
									"scores":	[-4.053441956650782]
								}, {
									"case":	231,
									"scores":	[-4.053441956650782]
								}, {
									"case":	232,
									"scores":	[-4.053441956650782]
								}, {
									"case":	233,
									"scores":	[-4.053441956650782]
								}, {
									"case":	234,
									"scores":	[-4.053441956650782]
								}, {
									"case":	235,
									"scores":	[-4.053441956650782]
								}, {
									"case":	236,
									"scores":	[-4.053441956650782]
								}, {
									"case":	237,
									"scores":	[-4.053441956650782]
								}, {
									"case":	238,
									"scores":	[-4.053441956650782]
								}, {
									"case":	239,
									"scores":	[-4.053441956650782]
								}, {
									"case":	240,
									"scores":	[-4.053441956650782]
								}, {
									"case":	241,
									"scores":	[-4.053441956650782]
								}, {
									"case":	242,
									"scores":	[-4.053441956650782]
								}, {
									"case":	243,
									"scores":	[-4.053441956650782]
								}, {
									"case":	244,
									"scores":	[-4.053441956650782]
								}, {
									"case":	245,
									"scores":	[-4.053441956650782]
								}, {
									"case":	246,
									"scores":	[-4.053441956650782]
								}, {
									"case":	247,
									"scores":	[-4.053441956650782]
								}, {
									"case":	248,
									"scores":	[-4.053441956650782]
								}, {
									"case":	249,
									"scores":	[-4.053441956650782]
								}, {
									"case":	250,
									"scores":	[-4.053441956650782]
								}, {
									"case":	251,
									"scores":	[-4.053441956650782]
								}, {
									"case":	252,
									"scores":	[-4.053441956650782]
								}, {
									"case":	253,
									"scores":	[-4.053441956650782]
								}, {
									"case":	254,
									"scores":	[-4.053441956650782]
								}, {
									"case":	255,
									"scores":	[-4.053441956650782]
								}, {
									"case":	256,
									"scores":	[-4.053441956650782]
								}, {
									"case":	257,
									"scores":	[-4.053441956650782]
								}, {
									"case":	258,
									"scores":	[-4.053441956650782]
								}, {
									"case":	259,
									"scores":	[-4.053441956650782]
								}, {
									"case":	260,
									"scores":	[-4.053441956650782]
								}, {
									"case":	261,
									"scores":	[-4.053441956650782]
								}, {
									"case":	262,
									"scores":	[-4.053441956650782]
								}, {
									"case":	263,
									"scores":	[-4.053441956650782]
								}, {
									"case":	264,
									"scores":	[-4.053441956650782]
								}, {
									"case":	265,
									"scores":	[-4.053441956650782]
								}, {
									"case":	266,
									"scores":	[-4.053441956650782]
								}, {
									"case":	267,
									"scores":	[-4.053441956650782]
								}, {
									"case":	268,
									"scores":	[-4.053441956650782]
								}, {
									"case":	269,
									"scores":	[-4.053441956650782]
								}, {
									"case":	270,
									"scores":	[-4.053441956650782]
								}, {
									"case":	271,
									"scores":	[-4.053441956650782]
								}, {
									"case":	272,
									"scores":	[-4.053441956650782]
								}, {
									"case":	273,
									"scores":	[-4.053441956650782]
								}, {
									"case":	274,
									"scores":	[-4.053441956650782]
								}, {
									"case":	275,
									"scores":	[-4.053441956650782]
								}, {
									"case":	276,
									"scores":	[-4.053441956650782]
								}, {
									"case":	277,
									"scores":	[-4.053441956650782]
								}, {
									"case":	278,
									"scores":	[-4.053441956650782]
								}, {
									"case":	279,
									"scores":	[-4.053441956650782]
								}, {
									"case":	280,
									"scores":	[-4.053441956650782]
								}, {
									"case":	281,
									"scores":	[-4.053441956650782]
								}, {
									"case":	282,
									"scores":	[-4.053441956650782]
								}, {
									"case":	283,
									"scores":	[-4.053441956650782]
								}, {
									"case":	284,
									"scores":	[-4.053441956650782]
								}, {
									"case":	285,
									"scores":	[-4.053441956650782]
								}, {
									"case":	286,
									"scores":	[-4.053441956650782]
								}, {
									"case":	287,
									"scores":	[-4.053441956650782]
								}, {
									"case":	288,
									"scores":	[-4.053441956650782]
								}, {
									"case":	289,
									"scores":	[-4.053441956650782]
								}, {
									"case":	290,
									"scores":	[-4.053441956650782]
								}, {
									"case":	291,
									"scores":	[-4.053441956650782]
								}, {
									"case":	292,
									"scores":	[-4.053441956650782]
								}, {
									"case":	293,
									"scores":	[-4.053441956650782]
								}, {
									"case":	294,
									"scores":	[-4.053441956650782]
								}, {
									"case":	295,
									"scores":	[-4.053441956650782]
								}, {
									"case":	296,
									"scores":	[-4.053441956650782]
								}, {
									"case":	297,
									"scores":	[-4.053441956650782]
								}, {
									"case":	298,
									"scores":	[-4.053441956650782]
								}, {
									"case":	299,
									"scores":	[-4.053441956650782]
								}, {
									"case":	300,
									"scores":	[-4.053441956650782]
								}, {
									"case":	301,
									"scores":	[-4.053441956650782]
								}, {
									"case":	302,
									"scores":	[-4.053441956650782]
								}, {
									"case":	303,
									"scores":	[-4.053441956650782]
								}, {
									"case":	304,
									"scores":	[-4.053441956650782]
								}, {
									"case":	305,
									"scores":	[-4.053441956650782]
								}, {
									"case":	306,
									"scores":	[-4.053441956650782]
								}, {
									"case":	307,
									"scores":	[-4.053441956650782]
								}, {
									"case":	308,
									"scores":	[-4.053441956650782]
								}, {
									"case":	309,
									"scores":	[-4.053441956650782]
								}, {
									"case":	310,
									"scores":	[-4.053441956650782]
								}, {
									"case":	311,
									"scores":	[-4.053441956650782]
								}, {
									"case":	312,
									"scores":	[-4.053441956650782]
								}, {
									"case":	313,
									"scores":	[-4.053441956650782]
								}, {
									"case":	314,
									"scores":	[-4.053441956650782]
								}, {
									"case":	315,
									"scores":	[-4.053441956650782]
								}, {
									"case":	316,
									"scores":	[-4.053441956650782]
								}, {
									"case":	317,
									"scores":	[-4.053441956650782]
								}, {
									"case":	318,
									"scores":	[-4.053441956650782]
								}, {
									"case":	319,
									"scores":	[-4.053441956650782]
								}, {
									"case":	320,
									"scores":	[-4.053441956650782]
								}, {
									"case":	321,
									"scores":	[-4.053441956650782]
								}, {
									"case":	322,
									"scores":	[-4.053441956650782]
								}, {
									"case":	323,
									"scores":	[-4.053441956650782]
								}, {
									"case":	324,
									"scores":	[-4.053441956650782]
								}, {
									"case":	325,
									"scores":	[-4.053441956650782]
								}, {
									"case":	326,
									"scores":	[-4.053441956650782]
								}, {
									"case":	327,
									"scores":	[-4.053441956650782]
								}, {
									"case":	328,
									"scores":	[-4.053441956650782]
								}, {
									"case":	329,
									"scores":	[-4.053441956650782]
								}, {
									"case":	330,
									"scores":	[-4.053441956650782]
								}, {
									"case":	331,
									"scores":	[-4.053441956650782]
								}, {
									"case":	332,
									"scores":	[-4.053441956650782]
								}, {
									"case":	333,
									"scores":	[-4.053441956650782]
								}, {
									"case":	334,
									"scores":	[-4.053441956650782]
								}, {
									"case":	335,
									"scores":	[-4.053441956650782]
								}, {
									"case":	336,
									"scores":	[-4.053441956650782]
								}, {
									"case":	337,
									"scores":	[-4.053441956650782]
								}, {
									"case":	338,
									"scores":	[-4.053441956650782]
								}, {
									"case":	339,
									"scores":	[-4.053441956650782]
								}, {
									"case":	340,
									"scores":	[-4.053441956650782]
								}, {
									"case":	341,
									"scores":	[-4.053441956650782]
								}, {
									"case":	342,
									"scores":	[-4.053441956650782]
								}, {
									"case":	343,
									"scores":	[-4.053441956650782]
								}, {
									"case":	344,
									"scores":	[-4.053441956650782]
								}, {
									"case":	345,
									"scores":	[-4.053441956650782]
								}, {
									"case":	346,
									"scores":	[-4.053441956650782]
								}, {
									"case":	347,
									"scores":	[-4.053441956650782]
								}, {
									"case":	348,
									"scores":	[-4.053441956650782]
								}, {
									"case":	349,
									"scores":	[-4.053441956650782]
								}, {
									"case":	350,
									"scores":	[-4.053441956650782]
								}, {
									"case":	351,
									"scores":	[-4.053441956650782]
								}, {
									"case":	352,
									"scores":	[-4.053441956650782]
								}, {
									"case":	353,
									"scores":	[-4.053441956650782]
								}, {
									"case":	354,
									"scores":	[-4.053441956650782]
								}, {
									"case":	355,
									"scores":	[-4.053441956650782]
								}, {
									"case":	356,
									"scores":	[-4.053441956650782]
								}, {
									"case":	357,
									"scores":	[-4.053441956650782]
								}, {
									"case":	358,
									"scores":	[-4.053441956650782]
								}, {
									"case":	359,
									"scores":	[-4.053441956650782]
								}, {
									"case":	360,
									"scores":	[-4.053441956650782]
								}, {
									"case":	361,
									"scores":	[-4.053441956650782]
								}, {
									"case":	362,
									"scores":	[-4.053441956650782]
								}, {
									"case":	363,
									"scores":	[-4.053441956650782]
								}, {
									"case":	364,
									"scores":	[-4.053441956650782]
								}, {
									"case":	365,
									"scores":	[-4.053441956650782]
								}, {
									"case":	366,
									"scores":	[-4.053441956650782]
								}, {
									"case":	367,
									"scores":	[-4.053441956650782]
								}, {
									"case":	368,
									"scores":	[-4.053441956650782]
								}, {
									"case":	369,
									"scores":	[-4.053441956650782]
								}, {
									"case":	370,
									"scores":	[-4.053441956650782]
								}, {
									"case":	371,
									"scores":	[-4.053441956650782]
								}, {
									"case":	372,
									"scores":	[-4.053441956650782]
								}, {
									"case":	373,
									"scores":	[-4.053441956650782]
								}, {
									"case":	374,
									"scores":	[-4.053441956650782]
								}, {
									"case":	375,
									"scores":	[-4.053441956650782]
								}, {
									"case":	376,
									"scores":	[-4.053441956650782]
								}, {
									"case":	377,
									"scores":	[-4.053441956650782]
								}, {
									"case":	378,
									"scores":	[-4.053441956650782]
								}, {
									"case":	379,
									"scores":	[-4.053441956650782]
								}, {
									"case":	380,
									"scores":	[-4.053441956650782]
								}, {
									"case":	381,
									"scores":	[-4.053441956650782]
								}, {
									"case":	382,
									"scores":	[-4.053441956650782]
								}, {
									"case":	383,
									"scores":	[-4.053441956650782]
								}, {
									"case":	384,
									"scores":	[-4.053441956650782]
								}, {
									"case":	385,
									"scores":	[-4.053441956650782]
								}, {
									"case":	386,
									"scores":	[-4.053441956650782]
								}, {
									"case":	387,
									"scores":	[-4.053441956650782]
								}, {
									"case":	388,
									"scores":	[-4.053441956650782]
								}, {
									"case":	389,
									"scores":	[-4.053441956650782]
								}, {
									"case":	390,
									"scores":	[-4.053441956650782]
								}, {
									"case":	391,
									"scores":	[-4.053441956650782]
								}, {
									"case":	392,
									"scores":	[-4.053441956650782]
								}, {
									"case":	393,
									"scores":	[-6.0142409313507823, -9.2639839586507833, -8.90381102465078, -9.03699919745078, -7.9977128246507823, -8.26629964465078, -9.10689354865078, -9.48070870865078, -9.26882803845078, -8.5139651446507827, -8.39711296465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -9.0944430246507828, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -8.44770002465078, -9.0944430246507828, -9.0944430246507828, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.99323372465078, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -8.90381102465078, -8.90381102465078, -8.99323372465078, -8.90381102465078, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -9.0944430246507828, -9.0944430246507828, -9.0944430246507828, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.44770002465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.90381102465078, -8.99323372465078, -9.0944430246507828]
								}, {
									"case":	394,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	395,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	396,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	397,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	398,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	399,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	400,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	401,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	402,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	403,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	404,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	405,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	406,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	407,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	408,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	409,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	410,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}, {
									"case":	411,
									"scores":	[-8.2770227313507831, -11.526765758650782, -11.166592824650781, -11.299780997450782, -10.260494624650782, -10.529081444650782, -11.369675348650784, -11.743490508650783, -11.531609838450784, -10.776746944650782, -10.659894764650783, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -10.710481824650781, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.357224824650782, -11.357224824650782, -11.357224824650782, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -10.710481824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.166592824650781, -11.256015524650781, -11.357224824650782]
								}]
						}, {
							"switch":	56,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	266,
							"begin_column":	2,
							"end_line":	272,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if ((*(ts_str + 8) != '/') || __is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n", "if ((*(ts_str + 8) != '/') && !__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.1628639721281475, -5.656606209428146, -4.8753177634281455, -3.7265324854281472, -4.3791099734281449, -4.2216500544281468, -6.1145021284281462, -6.2934771284281474, -4.9124158674281464, -4.5080007814281453, -4.8062305634281453, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -5.7192227634281458, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -4.6313908934281454, -5.7192227634281458, -5.7192227634281458, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -5.3122827634281453, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -4.8753177634281455, -4.8753177634281455, -5.3122827634281453, -4.8753177634281455, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -5.7192227634281458, -5.7192227634281458, -5.7192227634281458, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.6313908934281454, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -4.8753177634281455, -5.3122827634281453, -5.7192227634281458]
								}, {
									"case":	2,
									"scores":	[-3.6732118441281454, -7.1669540814281456, -6.3856656354281451, -5.2368803574281459, -5.8894578454281454, -5.7319979264281455, -7.624850000428145, -7.8038250004281462, -6.4227637394281452, -6.018348653428145, -6.3165784354281449, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -6.1417387654281459, -7.2295706354281455, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.8226306354281459, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.8226306354281459, -6.3856656354281451, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.1417387654281459, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.8226306354281459, -7.2295706354281455]
								}, {
									"case":	3,
									"scores":	[-3.6732118441281454, -7.1669540814281456, -6.3856656354281451, -5.2368803574281459, -5.8894578454281454, -5.7319979264281455, -7.624850000428145, -7.8038250004281462, -6.4227637394281452, -6.018348653428145, -6.3165784354281449, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -6.1417387654281459, -7.2295706354281455, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.8226306354281459, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.8226306354281459, -6.3856656354281451, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -7.2295706354281455, -7.2295706354281455, -7.2295706354281455, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.1417387654281459, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.3856656354281451, -6.8226306354281459, -7.2295706354281455]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	266,
							"begin_column":	2,
							"end_line":	272,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    if (*(ts_str + 8) != '/') {\n        if (con->conf.log_request_handling) {\n            log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n        }\n        return HANDLER_GO_ON;\n    }\n", "if (!__is_neg(\"\", \"L266\", 89, &(ts_str), sizeof (ts_str), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)) && (*(ts_str + 8) != '/')) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\");\n    }\n    return HANDLER_GO_ON;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.649285135350782, -7.1430273726507814, -6.3617389266507818, -5.2129536486507817, -5.8655311366507821, -5.70807121765078, -7.6009232916507816, -7.7798982916507819, -6.3988370306507818, -5.9944219446507816, -6.2926517266507815, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -7.20564392665078, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -7.20564392665078, -7.20564392665078, -7.20564392665078, -7.20564392665078, -7.20564392665078, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -7.20564392665078, -7.20564392665078, -7.20564392665078, -6.1178120566507816, -7.20564392665078, -7.20564392665078, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.7987039266507816, -7.20564392665078, -7.20564392665078, -7.20564392665078, -6.3617389266507818, -6.3617389266507818, -6.7987039266507816, -6.3617389266507818, -7.20564392665078, -7.20564392665078, -7.20564392665078, -7.20564392665078, -7.20564392665078, -7.20564392665078, -7.20564392665078, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -7.20564392665078, -7.20564392665078, -7.20564392665078, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.1178120566507816, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.3617389266507818, -6.7987039266507816, -7.20564392665078]
								}, {
									"case":	2,
									"scores":	[-4.3820573783507824, -7.8757996156507826, -7.09451116965078, -5.9457258916507829, -6.5983033796507815, -6.4408434606507825, -8.3336955346507828, -8.51267053465078, -7.13160927365078, -6.7271941876507819, -7.02542396965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.9384161696507816, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -6.850584299650782, -7.9384161696507816, -7.9384161696507816, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.5314761696507819, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -7.09451116965078, -7.09451116965078, -7.5314761696507819, -7.09451116965078, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.9384161696507816, -7.9384161696507816, -7.9384161696507816, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -6.850584299650782, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.09451116965078, -7.5314761696507819, -7.9384161696507816]
								}]
						}]
				}, {
					"line":	274,
					"switches":	[{
							"switch":	59,
							"types":	[[], [], [], [], [392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], [], [], [], [], [], []],
							"begin_line":	275,
							"begin_column":	1,
							"end_line":	275,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    break;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 0;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 16;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 1;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 213;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 219;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 225;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 234;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 244;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 251;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 261;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 268;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 282;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 310;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 324;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 32;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 403;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 408;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 4;\n", "if (__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.013036542015743]
								}, {
									"case":	2,
									"scores":	[-4.013036542015743]
								}, {
									"case":	3,
									"scores":	[-4.013036542015743]
								}, {
									"case":	4,
									"scores":	[-4.013036542015743]
								}, {
									"case":	5,
									"scores":	[-4.013036542015743]
								}, {
									"case":	6,
									"scores":	[-4.013036542015743]
								}, {
									"case":	7,
									"scores":	[-4.013036542015743]
								}, {
									"case":	8,
									"scores":	[-4.013036542015743]
								}, {
									"case":	9,
									"scores":	[-4.013036542015743]
								}, {
									"case":	10,
									"scores":	[-4.013036542015743]
								}, {
									"case":	11,
									"scores":	[-4.013036542015743]
								}, {
									"case":	12,
									"scores":	[-4.013036542015743]
								}, {
									"case":	13,
									"scores":	[-4.013036542015743]
								}, {
									"case":	14,
									"scores":	[-4.013036542015743]
								}, {
									"case":	15,
									"scores":	[-4.013036542015743]
								}, {
									"case":	16,
									"scores":	[-4.013036542015743]
								}, {
									"case":	17,
									"scores":	[-4.013036542015743]
								}, {
									"case":	18,
									"scores":	[-4.013036542015743]
								}, {
									"case":	19,
									"scores":	[-4.013036542015743]
								}, {
									"case":	20,
									"scores":	[-4.013036542015743]
								}, {
									"case":	21,
									"scores":	[-4.013036542015743]
								}, {
									"case":	22,
									"scores":	[-4.013036542015743]
								}, {
									"case":	23,
									"scores":	[-4.013036542015743]
								}, {
									"case":	24,
									"scores":	[-4.013036542015743]
								}, {
									"case":	25,
									"scores":	[-4.013036542015743]
								}, {
									"case":	26,
									"scores":	[-4.013036542015743]
								}, {
									"case":	27,
									"scores":	[-4.013036542015743]
								}, {
									"case":	28,
									"scores":	[-4.013036542015743]
								}, {
									"case":	29,
									"scores":	[-4.013036542015743]
								}, {
									"case":	30,
									"scores":	[-4.013036542015743]
								}, {
									"case":	31,
									"scores":	[-4.013036542015743]
								}, {
									"case":	32,
									"scores":	[-4.013036542015743]
								}, {
									"case":	33,
									"scores":	[-4.013036542015743]
								}, {
									"case":	34,
									"scores":	[-4.013036542015743]
								}, {
									"case":	35,
									"scores":	[-4.013036542015743]
								}, {
									"case":	36,
									"scores":	[-4.013036542015743]
								}, {
									"case":	37,
									"scores":	[-4.013036542015743]
								}, {
									"case":	38,
									"scores":	[-4.013036542015743]
								}, {
									"case":	39,
									"scores":	[-4.013036542015743]
								}, {
									"case":	40,
									"scores":	[-4.013036542015743]
								}, {
									"case":	41,
									"scores":	[-4.013036542015743]
								}, {
									"case":	42,
									"scores":	[-4.013036542015743]
								}, {
									"case":	43,
									"scores":	[-4.013036542015743]
								}, {
									"case":	44,
									"scores":	[-4.013036542015743]
								}, {
									"case":	45,
									"scores":	[-4.013036542015743]
								}, {
									"case":	46,
									"scores":	[-4.013036542015743]
								}, {
									"case":	47,
									"scores":	[-4.013036542015743]
								}, {
									"case":	48,
									"scores":	[-4.013036542015743]
								}, {
									"case":	49,
									"scores":	[-4.013036542015743]
								}, {
									"case":	50,
									"scores":	[-4.013036542015743]
								}, {
									"case":	51,
									"scores":	[-4.013036542015743]
								}, {
									"case":	52,
									"scores":	[-4.013036542015743]
								}, {
									"case":	53,
									"scores":	[-4.013036542015743]
								}, {
									"case":	54,
									"scores":	[-4.013036542015743]
								}, {
									"case":	55,
									"scores":	[-4.013036542015743]
								}, {
									"case":	56,
									"scores":	[-4.013036542015743]
								}, {
									"case":	57,
									"scores":	[-4.013036542015743]
								}, {
									"case":	58,
									"scores":	[-4.013036542015743]
								}, {
									"case":	59,
									"scores":	[-4.013036542015743]
								}, {
									"case":	60,
									"scores":	[-4.013036542015743]
								}, {
									"case":	61,
									"scores":	[-4.013036542015743]
								}, {
									"case":	62,
									"scores":	[-4.013036542015743]
								}, {
									"case":	63,
									"scores":	[-4.013036542015743]
								}, {
									"case":	64,
									"scores":	[-4.013036542015743]
								}, {
									"case":	65,
									"scores":	[-4.013036542015743]
								}, {
									"case":	66,
									"scores":	[-4.013036542015743]
								}, {
									"case":	67,
									"scores":	[-4.013036542015743]
								}, {
									"case":	68,
									"scores":	[-4.013036542015743]
								}, {
									"case":	69,
									"scores":	[-4.013036542015743]
								}, {
									"case":	70,
									"scores":	[-4.013036542015743]
								}, {
									"case":	71,
									"scores":	[-4.013036542015743]
								}, {
									"case":	72,
									"scores":	[-4.013036542015743]
								}, {
									"case":	73,
									"scores":	[-4.013036542015743]
								}, {
									"case":	74,
									"scores":	[-4.013036542015743]
								}, {
									"case":	75,
									"scores":	[-4.013036542015743]
								}, {
									"case":	76,
									"scores":	[-4.013036542015743]
								}, {
									"case":	77,
									"scores":	[-4.013036542015743]
								}, {
									"case":	78,
									"scores":	[-4.013036542015743]
								}, {
									"case":	79,
									"scores":	[-4.013036542015743]
								}, {
									"case":	80,
									"scores":	[-4.013036542015743]
								}, {
									"case":	81,
									"scores":	[-4.013036542015743]
								}, {
									"case":	82,
									"scores":	[-4.013036542015743]
								}, {
									"case":	83,
									"scores":	[-4.013036542015743]
								}, {
									"case":	84,
									"scores":	[-4.013036542015743]
								}, {
									"case":	85,
									"scores":	[-4.013036542015743]
								}, {
									"case":	86,
									"scores":	[-4.013036542015743]
								}, {
									"case":	87,
									"scores":	[-4.013036542015743]
								}, {
									"case":	88,
									"scores":	[-4.013036542015743]
								}, {
									"case":	89,
									"scores":	[-4.013036542015743]
								}, {
									"case":	90,
									"scores":	[-4.013036542015743]
								}, {
									"case":	91,
									"scores":	[-4.013036542015743]
								}, {
									"case":	92,
									"scores":	[-4.013036542015743]
								}, {
									"case":	93,
									"scores":	[-4.013036542015743]
								}, {
									"case":	94,
									"scores":	[-4.013036542015743]
								}, {
									"case":	95,
									"scores":	[-4.013036542015743]
								}, {
									"case":	96,
									"scores":	[-4.013036542015743]
								}, {
									"case":	97,
									"scores":	[-4.013036542015743]
								}, {
									"case":	98,
									"scores":	[-4.013036542015743]
								}, {
									"case":	99,
									"scores":	[-4.013036542015743]
								}, {
									"case":	100,
									"scores":	[-4.013036542015743]
								}, {
									"case":	101,
									"scores":	[-4.013036542015743]
								}, {
									"case":	102,
									"scores":	[-4.013036542015743]
								}, {
									"case":	103,
									"scores":	[-4.013036542015743]
								}, {
									"case":	104,
									"scores":	[-4.013036542015743]
								}, {
									"case":	105,
									"scores":	[-4.013036542015743]
								}, {
									"case":	106,
									"scores":	[-4.013036542015743]
								}, {
									"case":	107,
									"scores":	[-4.013036542015743]
								}, {
									"case":	108,
									"scores":	[-4.013036542015743]
								}, {
									"case":	109,
									"scores":	[-4.013036542015743]
								}, {
									"case":	110,
									"scores":	[-4.013036542015743]
								}, {
									"case":	111,
									"scores":	[-4.013036542015743]
								}, {
									"case":	112,
									"scores":	[-4.013036542015743]
								}, {
									"case":	113,
									"scores":	[-4.013036542015743]
								}, {
									"case":	114,
									"scores":	[-4.013036542015743]
								}, {
									"case":	115,
									"scores":	[-4.013036542015743]
								}, {
									"case":	116,
									"scores":	[-4.013036542015743]
								}, {
									"case":	117,
									"scores":	[-4.013036542015743]
								}, {
									"case":	118,
									"scores":	[-4.013036542015743]
								}, {
									"case":	119,
									"scores":	[-4.013036542015743]
								}, {
									"case":	120,
									"scores":	[-4.013036542015743]
								}, {
									"case":	121,
									"scores":	[-4.013036542015743]
								}, {
									"case":	122,
									"scores":	[-4.013036542015743]
								}, {
									"case":	123,
									"scores":	[-4.013036542015743]
								}, {
									"case":	124,
									"scores":	[-4.013036542015743]
								}, {
									"case":	125,
									"scores":	[-4.013036542015743]
								}, {
									"case":	126,
									"scores":	[-4.013036542015743]
								}, {
									"case":	127,
									"scores":	[-4.013036542015743]
								}, {
									"case":	128,
									"scores":	[-4.013036542015743]
								}, {
									"case":	129,
									"scores":	[-4.013036542015743]
								}, {
									"case":	130,
									"scores":	[-4.013036542015743]
								}, {
									"case":	131,
									"scores":	[-4.013036542015743]
								}, {
									"case":	132,
									"scores":	[-4.013036542015743]
								}, {
									"case":	133,
									"scores":	[-4.013036542015743]
								}, {
									"case":	134,
									"scores":	[-4.013036542015743]
								}, {
									"case":	135,
									"scores":	[-4.013036542015743]
								}, {
									"case":	136,
									"scores":	[-4.013036542015743]
								}, {
									"case":	137,
									"scores":	[-4.013036542015743]
								}, {
									"case":	138,
									"scores":	[-4.013036542015743]
								}, {
									"case":	139,
									"scores":	[-4.013036542015743]
								}, {
									"case":	140,
									"scores":	[-4.013036542015743]
								}, {
									"case":	141,
									"scores":	[-4.013036542015743]
								}, {
									"case":	142,
									"scores":	[-4.013036542015743]
								}, {
									"case":	143,
									"scores":	[-4.013036542015743]
								}, {
									"case":	144,
									"scores":	[-4.013036542015743]
								}, {
									"case":	145,
									"scores":	[-4.013036542015743]
								}, {
									"case":	146,
									"scores":	[-4.013036542015743]
								}, {
									"case":	147,
									"scores":	[-4.013036542015743]
								}, {
									"case":	148,
									"scores":	[-4.013036542015743]
								}, {
									"case":	149,
									"scores":	[-4.013036542015743]
								}, {
									"case":	150,
									"scores":	[-4.013036542015743]
								}, {
									"case":	151,
									"scores":	[-4.013036542015743]
								}, {
									"case":	152,
									"scores":	[-4.013036542015743]
								}, {
									"case":	153,
									"scores":	[-4.013036542015743]
								}, {
									"case":	154,
									"scores":	[-4.013036542015743]
								}, {
									"case":	155,
									"scores":	[-4.013036542015743]
								}, {
									"case":	156,
									"scores":	[-4.013036542015743]
								}, {
									"case":	157,
									"scores":	[-4.013036542015743]
								}, {
									"case":	158,
									"scores":	[-4.013036542015743]
								}, {
									"case":	159,
									"scores":	[-4.013036542015743]
								}, {
									"case":	160,
									"scores":	[-4.013036542015743]
								}, {
									"case":	161,
									"scores":	[-4.013036542015743]
								}, {
									"case":	162,
									"scores":	[-4.013036542015743]
								}, {
									"case":	163,
									"scores":	[-4.013036542015743]
								}, {
									"case":	164,
									"scores":	[-4.013036542015743]
								}, {
									"case":	165,
									"scores":	[-4.013036542015743]
								}, {
									"case":	166,
									"scores":	[-4.013036542015743]
								}, {
									"case":	167,
									"scores":	[-4.013036542015743]
								}, {
									"case":	168,
									"scores":	[-4.013036542015743]
								}, {
									"case":	169,
									"scores":	[-4.013036542015743]
								}, {
									"case":	170,
									"scores":	[-4.013036542015743]
								}, {
									"case":	171,
									"scores":	[-4.013036542015743]
								}, {
									"case":	172,
									"scores":	[-4.013036542015743]
								}, {
									"case":	173,
									"scores":	[-4.013036542015743]
								}, {
									"case":	174,
									"scores":	[-4.013036542015743]
								}, {
									"case":	175,
									"scores":	[-4.013036542015743]
								}, {
									"case":	176,
									"scores":	[-4.013036542015743]
								}, {
									"case":	177,
									"scores":	[-4.013036542015743]
								}, {
									"case":	178,
									"scores":	[-4.013036542015743]
								}, {
									"case":	179,
									"scores":	[-4.013036542015743]
								}, {
									"case":	180,
									"scores":	[-4.013036542015743]
								}, {
									"case":	181,
									"scores":	[-4.013036542015743]
								}, {
									"case":	182,
									"scores":	[-4.013036542015743]
								}, {
									"case":	183,
									"scores":	[-4.013036542015743]
								}, {
									"case":	184,
									"scores":	[-4.013036542015743]
								}, {
									"case":	185,
									"scores":	[-4.013036542015743]
								}, {
									"case":	186,
									"scores":	[-4.013036542015743]
								}, {
									"case":	187,
									"scores":	[-4.013036542015743]
								}, {
									"case":	188,
									"scores":	[-4.013036542015743]
								}, {
									"case":	189,
									"scores":	[-4.013036542015743]
								}, {
									"case":	190,
									"scores":	[-4.013036542015743]
								}, {
									"case":	191,
									"scores":	[-4.013036542015743]
								}, {
									"case":	192,
									"scores":	[-4.013036542015743]
								}, {
									"case":	193,
									"scores":	[-4.013036542015743]
								}, {
									"case":	194,
									"scores":	[-4.013036542015743]
								}, {
									"case":	195,
									"scores":	[-4.013036542015743]
								}, {
									"case":	196,
									"scores":	[-4.013036542015743]
								}, {
									"case":	197,
									"scores":	[-4.013036542015743]
								}, {
									"case":	198,
									"scores":	[-4.013036542015743]
								}, {
									"case":	199,
									"scores":	[-4.013036542015743]
								}, {
									"case":	200,
									"scores":	[-4.013036542015743]
								}, {
									"case":	201,
									"scores":	[-4.013036542015743]
								}, {
									"case":	202,
									"scores":	[-4.013036542015743]
								}, {
									"case":	203,
									"scores":	[-4.013036542015743]
								}, {
									"case":	204,
									"scores":	[-4.013036542015743]
								}, {
									"case":	205,
									"scores":	[-4.013036542015743]
								}, {
									"case":	206,
									"scores":	[-4.013036542015743]
								}, {
									"case":	207,
									"scores":	[-4.013036542015743]
								}, {
									"case":	208,
									"scores":	[-4.013036542015743]
								}, {
									"case":	209,
									"scores":	[-4.013036542015743]
								}, {
									"case":	210,
									"scores":	[-4.013036542015743]
								}, {
									"case":	211,
									"scores":	[-4.013036542015743]
								}, {
									"case":	212,
									"scores":	[-4.013036542015743]
								}, {
									"case":	213,
									"scores":	[-4.013036542015743]
								}, {
									"case":	214,
									"scores":	[-4.013036542015743]
								}, {
									"case":	215,
									"scores":	[-4.013036542015743]
								}, {
									"case":	216,
									"scores":	[-4.013036542015743]
								}, {
									"case":	217,
									"scores":	[-4.013036542015743]
								}, {
									"case":	218,
									"scores":	[-4.013036542015743]
								}, {
									"case":	219,
									"scores":	[-4.013036542015743]
								}, {
									"case":	220,
									"scores":	[-4.013036542015743]
								}, {
									"case":	221,
									"scores":	[-4.013036542015743]
								}, {
									"case":	222,
									"scores":	[-4.013036542015743]
								}, {
									"case":	223,
									"scores":	[-4.013036542015743]
								}, {
									"case":	224,
									"scores":	[-4.013036542015743]
								}, {
									"case":	225,
									"scores":	[-4.013036542015743]
								}, {
									"case":	226,
									"scores":	[-4.013036542015743]
								}, {
									"case":	227,
									"scores":	[-4.013036542015743]
								}, {
									"case":	228,
									"scores":	[-4.013036542015743]
								}, {
									"case":	229,
									"scores":	[-4.013036542015743]
								}, {
									"case":	230,
									"scores":	[-4.013036542015743]
								}, {
									"case":	231,
									"scores":	[-4.013036542015743]
								}, {
									"case":	232,
									"scores":	[-4.013036542015743]
								}, {
									"case":	233,
									"scores":	[-4.013036542015743]
								}, {
									"case":	234,
									"scores":	[-4.013036542015743]
								}, {
									"case":	235,
									"scores":	[-4.013036542015743]
								}, {
									"case":	236,
									"scores":	[-4.013036542015743]
								}, {
									"case":	237,
									"scores":	[-4.013036542015743]
								}, {
									"case":	238,
									"scores":	[-4.013036542015743]
								}, {
									"case":	239,
									"scores":	[-4.013036542015743]
								}, {
									"case":	240,
									"scores":	[-4.013036542015743]
								}, {
									"case":	241,
									"scores":	[-4.013036542015743]
								}, {
									"case":	242,
									"scores":	[-4.013036542015743]
								}, {
									"case":	243,
									"scores":	[-4.013036542015743]
								}, {
									"case":	244,
									"scores":	[-4.013036542015743]
								}, {
									"case":	245,
									"scores":	[-4.013036542015743]
								}, {
									"case":	246,
									"scores":	[-4.013036542015743]
								}, {
									"case":	247,
									"scores":	[-4.013036542015743]
								}, {
									"case":	248,
									"scores":	[-4.013036542015743]
								}, {
									"case":	249,
									"scores":	[-4.013036542015743]
								}, {
									"case":	250,
									"scores":	[-4.013036542015743]
								}, {
									"case":	251,
									"scores":	[-4.013036542015743]
								}, {
									"case":	252,
									"scores":	[-4.013036542015743]
								}, {
									"case":	253,
									"scores":	[-4.013036542015743]
								}, {
									"case":	254,
									"scores":	[-4.013036542015743]
								}, {
									"case":	255,
									"scores":	[-4.013036542015743]
								}, {
									"case":	256,
									"scores":	[-4.013036542015743]
								}, {
									"case":	257,
									"scores":	[-4.013036542015743]
								}, {
									"case":	258,
									"scores":	[-4.013036542015743]
								}, {
									"case":	259,
									"scores":	[-4.013036542015743]
								}, {
									"case":	260,
									"scores":	[-4.013036542015743]
								}, {
									"case":	261,
									"scores":	[-4.013036542015743]
								}, {
									"case":	262,
									"scores":	[-4.013036542015743]
								}, {
									"case":	263,
									"scores":	[-4.013036542015743]
								}, {
									"case":	264,
									"scores":	[-4.013036542015743]
								}, {
									"case":	265,
									"scores":	[-4.013036542015743]
								}, {
									"case":	266,
									"scores":	[-4.013036542015743]
								}, {
									"case":	267,
									"scores":	[-4.013036542015743]
								}, {
									"case":	268,
									"scores":	[-4.013036542015743]
								}, {
									"case":	269,
									"scores":	[-4.013036542015743]
								}, {
									"case":	270,
									"scores":	[-4.013036542015743]
								}, {
									"case":	271,
									"scores":	[-4.013036542015743]
								}, {
									"case":	272,
									"scores":	[-4.013036542015743]
								}, {
									"case":	273,
									"scores":	[-4.013036542015743]
								}, {
									"case":	274,
									"scores":	[-4.013036542015743]
								}, {
									"case":	275,
									"scores":	[-4.013036542015743]
								}, {
									"case":	276,
									"scores":	[-4.013036542015743]
								}, {
									"case":	277,
									"scores":	[-4.013036542015743]
								}, {
									"case":	278,
									"scores":	[-4.013036542015743]
								}, {
									"case":	279,
									"scores":	[-4.013036542015743]
								}, {
									"case":	280,
									"scores":	[-4.013036542015743]
								}, {
									"case":	281,
									"scores":	[-4.013036542015743]
								}, {
									"case":	282,
									"scores":	[-4.013036542015743]
								}, {
									"case":	283,
									"scores":	[-4.013036542015743]
								}, {
									"case":	284,
									"scores":	[-4.013036542015743]
								}, {
									"case":	285,
									"scores":	[-4.013036542015743]
								}, {
									"case":	286,
									"scores":	[-4.013036542015743]
								}, {
									"case":	287,
									"scores":	[-4.013036542015743]
								}, {
									"case":	288,
									"scores":	[-4.013036542015743]
								}, {
									"case":	289,
									"scores":	[-4.013036542015743]
								}, {
									"case":	290,
									"scores":	[-4.013036542015743]
								}, {
									"case":	291,
									"scores":	[-4.013036542015743]
								}, {
									"case":	292,
									"scores":	[-4.013036542015743]
								}, {
									"case":	293,
									"scores":	[-4.013036542015743]
								}, {
									"case":	294,
									"scores":	[-4.013036542015743]
								}, {
									"case":	295,
									"scores":	[-4.013036542015743]
								}, {
									"case":	296,
									"scores":	[-4.013036542015743]
								}, {
									"case":	297,
									"scores":	[-4.013036542015743]
								}, {
									"case":	298,
									"scores":	[-4.013036542015743]
								}, {
									"case":	299,
									"scores":	[-4.013036542015743]
								}, {
									"case":	300,
									"scores":	[-4.013036542015743]
								}, {
									"case":	301,
									"scores":	[-4.013036542015743]
								}, {
									"case":	302,
									"scores":	[-4.013036542015743]
								}, {
									"case":	303,
									"scores":	[-4.013036542015743]
								}, {
									"case":	304,
									"scores":	[-4.013036542015743]
								}, {
									"case":	305,
									"scores":	[-4.013036542015743]
								}, {
									"case":	306,
									"scores":	[-4.013036542015743]
								}, {
									"case":	307,
									"scores":	[-4.013036542015743]
								}, {
									"case":	308,
									"scores":	[-4.013036542015743]
								}, {
									"case":	309,
									"scores":	[-4.013036542015743]
								}, {
									"case":	310,
									"scores":	[-4.013036542015743]
								}, {
									"case":	311,
									"scores":	[-4.013036542015743]
								}, {
									"case":	312,
									"scores":	[-4.013036542015743]
								}, {
									"case":	313,
									"scores":	[-4.013036542015743]
								}, {
									"case":	314,
									"scores":	[-4.013036542015743]
								}, {
									"case":	315,
									"scores":	[-4.013036542015743]
								}, {
									"case":	316,
									"scores":	[-4.013036542015743]
								}, {
									"case":	317,
									"scores":	[-4.013036542015743]
								}, {
									"case":	318,
									"scores":	[-4.013036542015743]
								}, {
									"case":	319,
									"scores":	[-4.013036542015743]
								}, {
									"case":	320,
									"scores":	[-4.013036542015743]
								}, {
									"case":	321,
									"scores":	[-4.013036542015743]
								}, {
									"case":	322,
									"scores":	[-4.013036542015743]
								}, {
									"case":	323,
									"scores":	[-4.013036542015743]
								}, {
									"case":	324,
									"scores":	[-4.013036542015743]
								}, {
									"case":	325,
									"scores":	[-4.013036542015743]
								}, {
									"case":	326,
									"scores":	[-4.013036542015743]
								}, {
									"case":	327,
									"scores":	[-4.013036542015743]
								}, {
									"case":	328,
									"scores":	[-4.013036542015743]
								}, {
									"case":	329,
									"scores":	[-4.013036542015743]
								}, {
									"case":	330,
									"scores":	[-4.013036542015743]
								}, {
									"case":	331,
									"scores":	[-4.013036542015743]
								}, {
									"case":	332,
									"scores":	[-4.013036542015743]
								}, {
									"case":	333,
									"scores":	[-4.013036542015743]
								}, {
									"case":	334,
									"scores":	[-4.013036542015743]
								}, {
									"case":	335,
									"scores":	[-4.013036542015743]
								}, {
									"case":	336,
									"scores":	[-4.013036542015743]
								}, {
									"case":	337,
									"scores":	[-4.013036542015743]
								}, {
									"case":	338,
									"scores":	[-4.013036542015743]
								}, {
									"case":	339,
									"scores":	[-4.013036542015743]
								}, {
									"case":	340,
									"scores":	[-4.013036542015743]
								}, {
									"case":	341,
									"scores":	[-4.013036542015743]
								}, {
									"case":	342,
									"scores":	[-4.013036542015743]
								}, {
									"case":	343,
									"scores":	[-4.013036542015743]
								}, {
									"case":	344,
									"scores":	[-4.013036542015743]
								}, {
									"case":	345,
									"scores":	[-4.013036542015743]
								}, {
									"case":	346,
									"scores":	[-4.013036542015743]
								}, {
									"case":	347,
									"scores":	[-4.013036542015743]
								}, {
									"case":	348,
									"scores":	[-4.013036542015743]
								}, {
									"case":	349,
									"scores":	[-4.013036542015743]
								}, {
									"case":	350,
									"scores":	[-4.013036542015743]
								}, {
									"case":	351,
									"scores":	[-4.013036542015743]
								}, {
									"case":	352,
									"scores":	[-4.013036542015743]
								}, {
									"case":	353,
									"scores":	[-4.013036542015743]
								}, {
									"case":	354,
									"scores":	[-4.013036542015743]
								}, {
									"case":	355,
									"scores":	[-4.013036542015743]
								}, {
									"case":	356,
									"scores":	[-4.013036542015743]
								}, {
									"case":	357,
									"scores":	[-4.013036542015743]
								}, {
									"case":	358,
									"scores":	[-4.013036542015743]
								}, {
									"case":	359,
									"scores":	[-4.013036542015743]
								}, {
									"case":	360,
									"scores":	[-4.013036542015743]
								}, {
									"case":	361,
									"scores":	[-4.013036542015743]
								}, {
									"case":	362,
									"scores":	[-4.013036542015743]
								}, {
									"case":	363,
									"scores":	[-4.013036542015743]
								}, {
									"case":	364,
									"scores":	[-4.013036542015743]
								}, {
									"case":	365,
									"scores":	[-4.013036542015743]
								}, {
									"case":	366,
									"scores":	[-4.013036542015743]
								}, {
									"case":	367,
									"scores":	[-4.013036542015743]
								}, {
									"case":	368,
									"scores":	[-4.013036542015743]
								}, {
									"case":	369,
									"scores":	[-4.013036542015743]
								}, {
									"case":	370,
									"scores":	[-4.013036542015743]
								}, {
									"case":	371,
									"scores":	[-4.013036542015743]
								}, {
									"case":	372,
									"scores":	[-4.013036542015743]
								}, {
									"case":	373,
									"scores":	[-4.013036542015743]
								}, {
									"case":	374,
									"scores":	[-4.013036542015743]
								}, {
									"case":	375,
									"scores":	[-4.013036542015743]
								}, {
									"case":	376,
									"scores":	[-4.013036542015743]
								}, {
									"case":	377,
									"scores":	[-4.013036542015743]
								}, {
									"case":	378,
									"scores":	[-4.013036542015743]
								}, {
									"case":	379,
									"scores":	[-4.013036542015743]
								}, {
									"case":	380,
									"scores":	[-4.013036542015743]
								}, {
									"case":	381,
									"scores":	[-4.013036542015743]
								}, {
									"case":	382,
									"scores":	[-4.013036542015743]
								}, {
									"case":	383,
									"scores":	[-4.013036542015743]
								}, {
									"case":	384,
									"scores":	[-4.013036542015743]
								}, {
									"case":	385,
									"scores":	[-4.013036542015743]
								}, {
									"case":	386,
									"scores":	[-4.013036542015743]
								}, {
									"case":	387,
									"scores":	[-4.013036542015743]
								}, {
									"case":	388,
									"scores":	[-4.013036542015743]
								}, {
									"case":	389,
									"scores":	[-4.013036542015743]
								}, {
									"case":	390,
									"scores":	[-4.013036542015743]
								}, {
									"case":	391,
									"scores":	[-4.013036542015743]
								}, {
									"case":	392,
									"scores":	[-3.4036539790157425, -4.502069369215743, -3.8061152790157426, -5.6401194820157432, -5.4628566420157432, -5.6401194820157432, -4.8697633420157427, -4.8697633420157427, -5.0470261820157427]
								}, {
									"case":	393,
									"scores":	[-3.5035621790157427, -4.6019775692157427, -3.9060234790157429, -5.740027682015743, -5.5627648420157429, -5.740027682015743, -4.9696715420157433, -4.9696715420157433, -5.1469343820157434]
								}, {
									"case":	394,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	395,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	396,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	397,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	398,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	399,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	400,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	401,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	402,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	403,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	404,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	405,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	406,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	407,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	408,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	409,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	410,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}, {
									"case":	411,
									"scores":	[-5.7663439790157431, -6.8647593692157436, -6.1688052790157428, -8.00280948201574, -7.8255466420157429, -8.00280948201574, -7.2324533420157433, -7.2324533420157433, -7.4097161820157433]
								}]
						}, {
							"switch":	60,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	275,
							"begin_column":	3,
							"end_line":	275,
							"end_column":	41,
							"patch_codes":	["if (!__is_neg(\"\", \"L275\", 9, &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(i), sizeof (i), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    ts = (ts << 4) + hex2int(*(ts_str + i));\n", "{\n}\n", "ts = ((0 * i) << 4) + hex2int(*(ts_str + i))", "ts = ((0 * ts) << 4) + hex2int(*(ts_str + i))", "ts = ((HA1 != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((HA1 == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((Md5Ctx != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((Md5Ctx == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((con != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((con == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((i != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((i * ts) << 4) + hex2int(*(ts_str + i))", "ts = ((i + 0) << 4) + hex2int(*(ts_str + i))", "ts = ((i - 0) << 4) + hex2int(*(ts_str + i))", "ts = ((i == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((md5_str != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((md5_str == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((p != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((p == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((p_d != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((p_d == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((rel_uri != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((rel_uri != md5_str) << 4) + hex2int(*(ts_str + i))", "ts = ((rel_uri != ts_str) << 4) + hex2int(*(ts_str + i))", "ts = ((rel_uri == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((rel_uri == md5_str) << 4) + hex2int(*(ts_str + i))", "ts = ((rel_uri == ts_str) << 4) + hex2int(*(ts_str + i))", "ts = ((srv != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((srv == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((ts != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((ts != i) << 4) + hex2int(*(ts_str + i))", "ts = ((ts * i) << 4) + hex2int(*(ts_str + i))", "ts = ((ts + 0) << 4) + hex2int(*(ts_str + i))", "ts = ((ts + i) << 4) + hex2int(*(ts_str + i))", "ts = ((ts - 0) << 4) + hex2int(*(ts_str + i))", "ts = ((ts - i) << 4) + hex2int(*(ts_str + i))", "ts = ((ts == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((ts == i) << 4) + hex2int(*(ts_str + i))", "ts = ((ts) << 4) + hex2int(*(ts_str + i))", "ts = ((ts_str != 0) << 4) + hex2int(*(ts_str + i))", "ts = ((ts_str != md5_str) << 4) + hex2int(*(ts_str + i))", "ts = ((ts_str == 0) << 4) + hex2int(*(ts_str + i))", "ts = ((ts_str == md5_str) << 4) + hex2int(*(ts_str + i))", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << (0 * i)) + hex2int(*(ts_str + i))", "ts = (ts << (0 * ts)) + hex2int(*(ts_str + i))", "ts = (ts << (0)) + hex2int(*(ts_str + i))", "ts = (ts << (HA1 != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (HA1 == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (Md5Ctx != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (Md5Ctx == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (con != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (con == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (i != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (i * ts)) + hex2int(*(ts_str + i))", "ts = (ts << (i + 0)) + hex2int(*(ts_str + i))", "ts = (ts << (i - 0)) + hex2int(*(ts_str + i))", "ts = (ts << (i == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (md5_str != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (md5_str == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (p != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (p == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (p_d != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (p_d == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (rel_uri != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (rel_uri != md5_str)) + hex2int(*(ts_str + i))", "ts = (ts << (rel_uri != ts_str)) + hex2int(*(ts_str + i))", "ts = (ts << (rel_uri == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (rel_uri == md5_str)) + hex2int(*(ts_str + i))", "ts = (ts << (rel_uri == ts_str)) + hex2int(*(ts_str + i))", "ts = (ts << (srv != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (srv == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (ts != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (ts != i)) + hex2int(*(ts_str + i))", "ts = (ts << (ts * i)) + hex2int(*(ts_str + i))", "ts = (ts << (ts + 0)) + hex2int(*(ts_str + i))", "ts = (ts << (ts + i)) + hex2int(*(ts_str + i))", "ts = (ts << (ts - 0)) + hex2int(*(ts_str + i))", "ts = (ts << (ts - i)) + hex2int(*(ts_str + i))", "ts = (ts << (ts == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (ts == i)) + hex2int(*(ts_str + i))", "ts = (ts << (ts_str != 0)) + hex2int(*(ts_str + i))", "ts = (ts << (ts_str != md5_str)) + hex2int(*(ts_str + i))", "ts = (ts << (ts_str == 0)) + hex2int(*(ts_str + i))", "ts = (ts << (ts_str == md5_str)) + hex2int(*(ts_str + i))", "ts = (ts << 4) + hex2int(*((&HA1) + i))", "ts = (ts << 4) + hex2int(*((&Md5Ctx) + i))", "ts = (ts << 4) + hex2int(*((&con) + i))", "ts = (ts << 4) + hex2int(*((&i) + i))", "ts = (ts << 4) + hex2int(*((&md5_str) + i))", "ts = (ts << 4) + hex2int(*((&p) + i))", "ts = (ts << 4) + hex2int(*((&p_d) + i))", "ts = (ts << 4) + hex2int(*((&rel_uri) + i))", "ts = (ts << 4) + hex2int(*((&srv) + i))", "ts = (ts << 4) + hex2int(*((&ts) + i))", "ts = (ts << 4) + hex2int(*((&ts_str) + i))", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts << 4) + hex2int(*(ts_str + (0 * i)))", "ts = (ts << 4) + hex2int(*(ts_str + (0 * ts)))", "ts = (ts << 4) + hex2int(*(ts_str + (HA1 != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (HA1 == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (Md5Ctx != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (Md5Ctx == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (con != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (con == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (i != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (i * ts)))", "ts = (ts << 4) + hex2int(*(ts_str + (i + 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (i - 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (i == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (i)))", "ts = (ts << 4) + hex2int(*(ts_str + (md5_str != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (md5_str == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (p != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (p == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (p_d != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (p_d == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (rel_uri != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (rel_uri != md5_str)))", "ts = (ts << 4) + hex2int(*(ts_str + (rel_uri != ts_str)))", "ts = (ts << 4) + hex2int(*(ts_str + (rel_uri == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (rel_uri == md5_str)))", "ts = (ts << 4) + hex2int(*(ts_str + (rel_uri == ts_str)))", "ts = (ts << 4) + hex2int(*(ts_str + (srv != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (srv == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts != i)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts * i)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts + 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts + i)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts - 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts - i)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts == i)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts_str != 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts_str != md5_str)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts_str == 0)))", "ts = (ts << 4) + hex2int(*(ts_str + (ts_str == md5_str)))", "ts = (ts)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.6321765150157423, -4.3683482150157431, -2.7365045150157425, -5.9474350420157434, -5.6826535420157427, -5.9474350420157434, -4.7344205420157426, -4.7344205420157426, -4.9992020420157433]
								}, {
									"case":	2,
									"scores":	[-4.013036542015743]
								}, {
									"case":	3,
									"scores":	[-4.013036542015743]
								}, {
									"case":	4,
									"scores":	[-4.013036542015743]
								}, {
									"case":	5,
									"scores":	[-4.013036542015743]
								}, {
									"case":	6,
									"scores":	[-4.013036542015743]
								}, {
									"case":	7,
									"scores":	[-4.013036542015743]
								}, {
									"case":	8,
									"scores":	[-4.013036542015743]
								}, {
									"case":	9,
									"scores":	[-4.013036542015743]
								}, {
									"case":	10,
									"scores":	[-4.013036542015743]
								}, {
									"case":	11,
									"scores":	[-4.013036542015743]
								}, {
									"case":	12,
									"scores":	[-4.013036542015743]
								}, {
									"case":	13,
									"scores":	[-4.013036542015743]
								}, {
									"case":	14,
									"scores":	[-4.013036542015743]
								}, {
									"case":	15,
									"scores":	[-4.013036542015743]
								}, {
									"case":	16,
									"scores":	[-4.013036542015743]
								}, {
									"case":	17,
									"scores":	[-4.013036542015743]
								}, {
									"case":	18,
									"scores":	[-4.013036542015743]
								}, {
									"case":	19,
									"scores":	[-4.013036542015743]
								}, {
									"case":	20,
									"scores":	[-4.013036542015743]
								}, {
									"case":	21,
									"scores":	[-4.013036542015743]
								}, {
									"case":	22,
									"scores":	[-4.013036542015743]
								}, {
									"case":	23,
									"scores":	[-4.013036542015743]
								}, {
									"case":	24,
									"scores":	[-4.013036542015743]
								}, {
									"case":	25,
									"scores":	[-4.013036542015743]
								}, {
									"case":	26,
									"scores":	[-4.013036542015743]
								}, {
									"case":	27,
									"scores":	[-4.013036542015743]
								}, {
									"case":	28,
									"scores":	[-4.013036542015743]
								}, {
									"case":	29,
									"scores":	[-4.013036542015743]
								}, {
									"case":	30,
									"scores":	[-4.013036542015743]
								}, {
									"case":	31,
									"scores":	[-4.013036542015743]
								}, {
									"case":	32,
									"scores":	[-4.013036542015743]
								}, {
									"case":	33,
									"scores":	[-4.013036542015743]
								}, {
									"case":	34,
									"scores":	[-4.013036542015743]
								}, {
									"case":	35,
									"scores":	[-4.013036542015743]
								}, {
									"case":	36,
									"scores":	[-4.013036542015743]
								}, {
									"case":	37,
									"scores":	[-4.013036542015743]
								}, {
									"case":	38,
									"scores":	[-4.013036542015743]
								}, {
									"case":	39,
									"scores":	[-4.013036542015743]
								}, {
									"case":	40,
									"scores":	[-4.013036542015743]
								}, {
									"case":	41,
									"scores":	[-4.013036542015743]
								}, {
									"case":	42,
									"scores":	[-4.013036542015743]
								}, {
									"case":	43,
									"scores":	[-4.013036542015743]
								}, {
									"case":	44,
									"scores":	[-4.013036542015743]
								}, {
									"case":	45,
									"scores":	[-4.013036542015743]
								}, {
									"case":	46,
									"scores":	[-4.013036542015743]
								}, {
									"case":	47,
									"scores":	[-4.013036542015743]
								}, {
									"case":	48,
									"scores":	[-4.013036542015743]
								}, {
									"case":	49,
									"scores":	[-4.013036542015743]
								}, {
									"case":	50,
									"scores":	[-4.013036542015743]
								}, {
									"case":	51,
									"scores":	[-4.013036542015743]
								}, {
									"case":	52,
									"scores":	[-4.013036542015743]
								}, {
									"case":	53,
									"scores":	[-4.013036542015743]
								}, {
									"case":	54,
									"scores":	[-4.013036542015743]
								}, {
									"case":	55,
									"scores":	[-4.013036542015743]
								}, {
									"case":	56,
									"scores":	[-4.013036542015743]
								}, {
									"case":	57,
									"scores":	[-4.013036542015743]
								}, {
									"case":	58,
									"scores":	[-4.013036542015743]
								}, {
									"case":	59,
									"scores":	[-4.013036542015743]
								}, {
									"case":	60,
									"scores":	[-4.013036542015743]
								}, {
									"case":	61,
									"scores":	[-4.013036542015743]
								}, {
									"case":	62,
									"scores":	[-4.013036542015743]
								}, {
									"case":	63,
									"scores":	[-4.013036542015743]
								}, {
									"case":	64,
									"scores":	[-4.013036542015743]
								}, {
									"case":	65,
									"scores":	[-4.013036542015743]
								}, {
									"case":	66,
									"scores":	[-4.013036542015743]
								}, {
									"case":	67,
									"scores":	[-4.013036542015743]
								}, {
									"case":	68,
									"scores":	[-4.013036542015743]
								}, {
									"case":	69,
									"scores":	[-4.013036542015743]
								}, {
									"case":	70,
									"scores":	[-4.013036542015743]
								}, {
									"case":	71,
									"scores":	[-4.013036542015743]
								}, {
									"case":	72,
									"scores":	[-4.013036542015743]
								}, {
									"case":	73,
									"scores":	[-4.013036542015743]
								}, {
									"case":	74,
									"scores":	[-4.013036542015743]
								}, {
									"case":	75,
									"scores":	[-4.013036542015743]
								}, {
									"case":	76,
									"scores":	[-4.013036542015743]
								}, {
									"case":	77,
									"scores":	[-4.013036542015743]
								}, {
									"case":	78,
									"scores":	[-4.013036542015743]
								}, {
									"case":	79,
									"scores":	[-4.013036542015743]
								}, {
									"case":	80,
									"scores":	[-4.013036542015743]
								}, {
									"case":	81,
									"scores":	[-4.013036542015743]
								}, {
									"case":	82,
									"scores":	[-4.013036542015743]
								}, {
									"case":	83,
									"scores":	[-4.013036542015743]
								}, {
									"case":	84,
									"scores":	[-4.013036542015743]
								}, {
									"case":	85,
									"scores":	[-4.013036542015743]
								}, {
									"case":	86,
									"scores":	[-4.013036542015743]
								}, {
									"case":	87,
									"scores":	[-4.013036542015743]
								}, {
									"case":	88,
									"scores":	[-4.013036542015743]
								}, {
									"case":	89,
									"scores":	[-4.013036542015743]
								}, {
									"case":	90,
									"scores":	[-4.013036542015743]
								}, {
									"case":	91,
									"scores":	[-4.013036542015743]
								}, {
									"case":	92,
									"scores":	[-4.013036542015743]
								}, {
									"case":	93,
									"scores":	[-4.013036542015743]
								}, {
									"case":	94,
									"scores":	[-4.013036542015743]
								}, {
									"case":	95,
									"scores":	[-4.013036542015743]
								}, {
									"case":	96,
									"scores":	[-4.013036542015743]
								}, {
									"case":	97,
									"scores":	[-4.013036542015743]
								}, {
									"case":	98,
									"scores":	[-4.013036542015743]
								}, {
									"case":	99,
									"scores":	[-4.013036542015743]
								}, {
									"case":	100,
									"scores":	[-4.013036542015743]
								}, {
									"case":	101,
									"scores":	[-4.013036542015743]
								}, {
									"case":	102,
									"scores":	[-4.013036542015743]
								}, {
									"case":	103,
									"scores":	[-4.013036542015743]
								}, {
									"case":	104,
									"scores":	[-4.013036542015743]
								}, {
									"case":	105,
									"scores":	[-4.013036542015743]
								}, {
									"case":	106,
									"scores":	[-4.013036542015743]
								}, {
									"case":	107,
									"scores":	[-4.013036542015743]
								}, {
									"case":	108,
									"scores":	[-4.013036542015743]
								}, {
									"case":	109,
									"scores":	[-4.013036542015743]
								}, {
									"case":	110,
									"scores":	[-4.013036542015743]
								}, {
									"case":	111,
									"scores":	[-4.013036542015743]
								}, {
									"case":	112,
									"scores":	[-4.013036542015743]
								}, {
									"case":	113,
									"scores":	[-4.013036542015743]
								}, {
									"case":	114,
									"scores":	[-4.013036542015743]
								}, {
									"case":	115,
									"scores":	[-4.013036542015743]
								}, {
									"case":	116,
									"scores":	[-4.013036542015743]
								}, {
									"case":	117,
									"scores":	[-4.013036542015743]
								}, {
									"case":	118,
									"scores":	[-4.013036542015743]
								}, {
									"case":	119,
									"scores":	[-4.013036542015743]
								}, {
									"case":	120,
									"scores":	[-4.013036542015743]
								}, {
									"case":	121,
									"scores":	[-4.013036542015743]
								}, {
									"case":	122,
									"scores":	[-4.013036542015743]
								}, {
									"case":	123,
									"scores":	[-4.013036542015743]
								}, {
									"case":	124,
									"scores":	[-4.013036542015743]
								}, {
									"case":	125,
									"scores":	[-4.013036542015743]
								}, {
									"case":	126,
									"scores":	[-4.013036542015743]
								}, {
									"case":	127,
									"scores":	[-4.013036542015743]
								}, {
									"case":	128,
									"scores":	[-4.013036542015743]
								}, {
									"case":	129,
									"scores":	[-4.013036542015743]
								}, {
									"case":	130,
									"scores":	[-4.013036542015743]
								}, {
									"case":	131,
									"scores":	[-4.013036542015743]
								}, {
									"case":	132,
									"scores":	[-4.013036542015743]
								}, {
									"case":	133,
									"scores":	[-4.013036542015743]
								}, {
									"case":	134,
									"scores":	[-4.013036542015743]
								}, {
									"case":	135,
									"scores":	[-4.013036542015743]
								}, {
									"case":	136,
									"scores":	[-4.013036542015743]
								}, {
									"case":	137,
									"scores":	[-4.013036542015743]
								}, {
									"case":	138,
									"scores":	[-4.013036542015743]
								}, {
									"case":	139,
									"scores":	[-4.013036542015743]
								}, {
									"case":	140,
									"scores":	[-4.013036542015743]
								}, {
									"case":	141,
									"scores":	[-4.013036542015743]
								}, {
									"case":	142,
									"scores":	[-4.013036542015743]
								}, {
									"case":	143,
									"scores":	[-4.013036542015743]
								}, {
									"case":	144,
									"scores":	[-4.013036542015743]
								}, {
									"case":	145,
									"scores":	[-4.013036542015743]
								}, {
									"case":	146,
									"scores":	[-4.013036542015743]
								}, {
									"case":	147,
									"scores":	[-4.013036542015743]
								}, {
									"case":	148,
									"scores":	[-4.013036542015743]
								}, {
									"case":	149,
									"scores":	[-4.013036542015743]
								}, {
									"case":	150,
									"scores":	[-4.013036542015743]
								}, {
									"case":	151,
									"scores":	[-4.013036542015743]
								}, {
									"case":	152,
									"scores":	[-4.013036542015743]
								}, {
									"case":	153,
									"scores":	[-4.013036542015743]
								}, {
									"case":	154,
									"scores":	[-4.013036542015743]
								}, {
									"case":	155,
									"scores":	[-4.013036542015743]
								}, {
									"case":	156,
									"scores":	[-4.013036542015743]
								}, {
									"case":	157,
									"scores":	[-4.013036542015743]
								}, {
									"case":	158,
									"scores":	[-4.013036542015743]
								}, {
									"case":	159,
									"scores":	[-4.013036542015743]
								}]
						}]
				}, {
					"line":	273,
					"switches":	[{
							"switch":	58,
							"types":	[[], [], [], [], [392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], [], [], [], [], [], []],
							"begin_line":	274,
							"begin_column":	0,
							"end_line":	274,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 0;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 16;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 1;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 213;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 219;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 225;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 234;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 244;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 251;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 261;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 268;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 282;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 310;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 324;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 32;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 403;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 408;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 4;\n", "if (__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	2,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	3,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	4,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	5,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	6,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	7,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	8,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	9,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	10,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	11,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	12,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	13,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	14,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	15,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	16,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	17,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	18,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	19,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	20,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	21,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	22,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	23,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	24,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	25,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	26,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	27,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	28,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	29,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	30,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	31,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	32,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	33,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	34,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	35,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	36,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	37,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	38,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	39,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	40,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	41,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	42,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	43,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	44,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	45,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	46,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	47,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	48,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	49,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	50,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	51,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	52,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	53,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	54,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	55,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	56,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	57,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	58,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	59,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	60,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	61,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	62,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	63,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	64,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	65,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	66,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	67,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	68,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	69,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	70,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	71,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	72,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	73,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	74,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	75,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	76,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	77,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	78,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	79,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	80,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	81,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	82,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	83,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	84,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	85,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	86,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	87,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	88,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	89,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	90,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	91,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	92,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	93,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	94,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	95,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	96,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	97,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	98,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	99,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	100,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	101,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	102,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	103,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	104,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	105,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	106,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	107,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	108,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	109,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	110,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	111,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	112,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	113,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	114,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	115,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	116,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	117,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	118,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	119,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	120,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	121,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	122,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	123,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	124,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	125,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	126,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	127,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	128,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	129,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	130,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	131,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	132,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	133,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	134,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	135,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	136,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	137,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	138,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	139,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	140,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	141,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	142,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	143,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	144,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	145,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	146,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	147,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	148,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	149,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	150,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	151,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	152,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	153,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	154,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	155,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	156,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	157,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	158,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	159,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	160,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	161,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	162,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	163,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	164,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	165,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	166,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	167,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	168,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	169,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	170,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	171,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	172,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	173,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	174,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	175,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	176,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	177,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	178,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	179,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	180,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	181,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	182,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	183,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	184,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	185,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	186,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	187,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	188,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	189,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	190,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	191,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	192,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	193,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	194,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	195,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	196,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	197,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	198,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	199,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	200,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	201,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	202,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	203,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	204,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	205,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	206,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	207,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	208,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	209,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	210,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	211,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	212,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	213,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	214,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	215,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	216,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	217,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	218,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	219,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	220,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	221,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	222,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	223,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	224,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	225,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	226,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	227,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	228,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	229,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	230,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	231,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	232,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	233,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	234,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	235,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	236,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	237,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	238,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	239,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	240,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	241,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	242,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	243,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	244,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	245,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	246,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	247,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	248,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	249,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	250,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	251,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	252,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	253,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	254,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	255,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	256,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	257,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	258,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	259,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	260,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	261,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	262,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	263,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	264,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	265,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	266,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	267,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	268,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	269,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	270,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	271,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	272,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	273,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	274,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	275,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	276,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	277,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	278,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	279,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	280,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	281,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	282,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	283,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	284,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	285,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	286,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	287,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	288,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	289,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	290,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	291,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	292,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	293,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	294,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	295,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	296,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	297,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	298,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	299,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	300,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	301,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	302,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	303,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	304,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	305,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	306,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	307,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	308,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	309,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	310,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	311,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	312,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	313,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	314,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	315,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	316,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	317,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	318,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	319,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	320,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	321,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	322,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	323,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	324,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	325,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	326,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	327,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	328,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	329,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	330,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	331,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	332,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	333,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	334,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	335,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	336,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	337,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	338,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	339,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	340,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	341,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	342,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	343,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	344,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	345,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	346,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	347,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	348,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	349,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	350,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	351,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	352,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	353,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	354,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	355,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	356,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	357,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	358,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	359,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	360,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	361,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	362,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	363,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	364,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	365,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	366,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	367,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	368,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	369,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	370,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	371,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	372,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	373,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	374,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	375,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	376,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	377,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	378,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	379,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	380,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	381,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	382,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	383,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	384,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	385,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	386,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	387,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	388,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	389,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	390,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	391,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	392,
									"scores":	[-6.7086609430332622, -4.3648714180332622, -7.2286023385332623, -8.64158253533326, -9.0153976953332631, -9.32040344533326, -8.04865413133326, -7.532401811333262, -7.9318019513332629]
								}, {
									"case":	393,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	394,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	395,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	396,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	397,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	398,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	399,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	400,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	401,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	402,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	403,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	404,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	405,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	406,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	407,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	408,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	409,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}, {
									"case":	410,
									"scores":	[-8.97144274303326, -6.6276532180332621, -9.4913841385332631, -10.904364335333263, -11.278179495333262, -11.583185245333262, -10.311435931333264, -9.79518361133326, -10.194583751333262]
								}]
						}, {
							"switch":	61,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	274,
							"begin_column":	2,
							"end_line":	276,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L274\", 9, &(i), sizeof (i), &(ts_str), sizeof (ts_str), &(ts), sizeof (ts), &(srv), sizeof (srv), &(p), sizeof (p), &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    for (i = 0; i < 8; i++) {\n        ts = (ts << 4) + hex2int(*(ts_str + i));\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8990284353332623, -3.2725490480332624, -4.8761630023332625, -7.6458950943332624, -6.9565390943332623, -7.5721501483332627, -6.0083517473332622, -5.8794609393332617, -6.306581529333263]
								}]
						}]
				}, {
					"line":	281,
					"switches":	[{
							"switch":	66,
							"types":	[[], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], [], [], [], [], [], []],
							"begin_line":	282,
							"begin_column":	2,
							"end_line":	282,
							"end_column":	2,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 0;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 16;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 1;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 213;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 219;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 225;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 234;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 244;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 251;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 261;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 268;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 282;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 310;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 324;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 32;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 403;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 408;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 4;\n", "if (__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.952428420063185]
								}, {
									"case":	2,
									"scores":	[-3.952428420063185]
								}, {
									"case":	3,
									"scores":	[-3.952428420063185]
								}, {
									"case":	4,
									"scores":	[-3.952428420063185]
								}, {
									"case":	5,
									"scores":	[-3.952428420063185]
								}, {
									"case":	6,
									"scores":	[-3.952428420063185]
								}, {
									"case":	7,
									"scores":	[-3.952428420063185]
								}, {
									"case":	8,
									"scores":	[-3.952428420063185]
								}, {
									"case":	9,
									"scores":	[-3.952428420063185]
								}, {
									"case":	10,
									"scores":	[-3.952428420063185]
								}, {
									"case":	11,
									"scores":	[-3.952428420063185]
								}, {
									"case":	12,
									"scores":	[-3.952428420063185]
								}, {
									"case":	13,
									"scores":	[-3.952428420063185]
								}, {
									"case":	14,
									"scores":	[-3.952428420063185]
								}, {
									"case":	15,
									"scores":	[-3.952428420063185]
								}, {
									"case":	16,
									"scores":	[-3.952428420063185]
								}, {
									"case":	17,
									"scores":	[-3.952428420063185]
								}, {
									"case":	18,
									"scores":	[-3.952428420063185]
								}, {
									"case":	19,
									"scores":	[-3.952428420063185]
								}, {
									"case":	20,
									"scores":	[-3.952428420063185]
								}, {
									"case":	21,
									"scores":	[-3.952428420063185]
								}, {
									"case":	22,
									"scores":	[-3.952428420063185]
								}, {
									"case":	23,
									"scores":	[-3.952428420063185]
								}, {
									"case":	24,
									"scores":	[-3.952428420063185]
								}, {
									"case":	25,
									"scores":	[-3.952428420063185]
								}, {
									"case":	26,
									"scores":	[-3.952428420063185]
								}, {
									"case":	27,
									"scores":	[-3.952428420063185]
								}, {
									"case":	28,
									"scores":	[-3.952428420063185]
								}, {
									"case":	29,
									"scores":	[-3.952428420063185]
								}, {
									"case":	30,
									"scores":	[-3.952428420063185]
								}, {
									"case":	31,
									"scores":	[-3.952428420063185]
								}, {
									"case":	32,
									"scores":	[-3.952428420063185]
								}, {
									"case":	33,
									"scores":	[-3.952428420063185]
								}, {
									"case":	34,
									"scores":	[-3.952428420063185]
								}, {
									"case":	35,
									"scores":	[-3.952428420063185]
								}, {
									"case":	36,
									"scores":	[-3.952428420063185]
								}, {
									"case":	37,
									"scores":	[-3.952428420063185]
								}, {
									"case":	38,
									"scores":	[-3.952428420063185]
								}, {
									"case":	39,
									"scores":	[-3.952428420063185]
								}, {
									"case":	40,
									"scores":	[-3.952428420063185]
								}, {
									"case":	41,
									"scores":	[-3.952428420063185]
								}, {
									"case":	42,
									"scores":	[-3.952428420063185]
								}, {
									"case":	43,
									"scores":	[-3.952428420063185]
								}, {
									"case":	44,
									"scores":	[-3.952428420063185]
								}, {
									"case":	45,
									"scores":	[-3.952428420063185]
								}, {
									"case":	46,
									"scores":	[-3.952428420063185]
								}, {
									"case":	47,
									"scores":	[-3.952428420063185]
								}, {
									"case":	48,
									"scores":	[-3.952428420063185]
								}, {
									"case":	49,
									"scores":	[-3.952428420063185]
								}, {
									"case":	50,
									"scores":	[-3.952428420063185]
								}, {
									"case":	51,
									"scores":	[-3.952428420063185]
								}, {
									"case":	52,
									"scores":	[-3.952428420063185]
								}, {
									"case":	53,
									"scores":	[-3.952428420063185]
								}, {
									"case":	54,
									"scores":	[-3.952428420063185]
								}, {
									"case":	55,
									"scores":	[-3.952428420063185]
								}, {
									"case":	56,
									"scores":	[-3.952428420063185]
								}, {
									"case":	57,
									"scores":	[-3.952428420063185]
								}, {
									"case":	58,
									"scores":	[-3.952428420063185]
								}, {
									"case":	59,
									"scores":	[-3.952428420063185]
								}, {
									"case":	60,
									"scores":	[-3.952428420063185]
								}, {
									"case":	61,
									"scores":	[-3.952428420063185]
								}, {
									"case":	62,
									"scores":	[-3.952428420063185]
								}, {
									"case":	63,
									"scores":	[-3.952428420063185]
								}, {
									"case":	64,
									"scores":	[-3.952428420063185]
								}, {
									"case":	65,
									"scores":	[-3.952428420063185]
								}, {
									"case":	66,
									"scores":	[-3.952428420063185]
								}, {
									"case":	67,
									"scores":	[-3.952428420063185]
								}, {
									"case":	68,
									"scores":	[-3.952428420063185]
								}, {
									"case":	69,
									"scores":	[-3.952428420063185]
								}, {
									"case":	70,
									"scores":	[-3.952428420063185]
								}, {
									"case":	71,
									"scores":	[-3.952428420063185]
								}, {
									"case":	72,
									"scores":	[-3.952428420063185]
								}, {
									"case":	73,
									"scores":	[-3.952428420063185]
								}, {
									"case":	74,
									"scores":	[-3.952428420063185]
								}, {
									"case":	75,
									"scores":	[-3.952428420063185]
								}, {
									"case":	76,
									"scores":	[-3.952428420063185]
								}, {
									"case":	77,
									"scores":	[-3.952428420063185]
								}, {
									"case":	78,
									"scores":	[-3.952428420063185]
								}, {
									"case":	79,
									"scores":	[-3.952428420063185]
								}, {
									"case":	80,
									"scores":	[-3.952428420063185]
								}, {
									"case":	81,
									"scores":	[-3.952428420063185]
								}, {
									"case":	82,
									"scores":	[-3.952428420063185]
								}, {
									"case":	83,
									"scores":	[-3.952428420063185]
								}, {
									"case":	84,
									"scores":	[-3.952428420063185]
								}, {
									"case":	85,
									"scores":	[-3.952428420063185]
								}, {
									"case":	86,
									"scores":	[-3.952428420063185]
								}, {
									"case":	87,
									"scores":	[-3.952428420063185]
								}, {
									"case":	88,
									"scores":	[-3.952428420063185]
								}, {
									"case":	89,
									"scores":	[-3.952428420063185]
								}, {
									"case":	90,
									"scores":	[-3.952428420063185]
								}, {
									"case":	91,
									"scores":	[-3.952428420063185]
								}, {
									"case":	92,
									"scores":	[-3.952428420063185]
								}, {
									"case":	93,
									"scores":	[-3.952428420063185]
								}, {
									"case":	94,
									"scores":	[-3.952428420063185]
								}, {
									"case":	95,
									"scores":	[-3.952428420063185]
								}, {
									"case":	96,
									"scores":	[-3.952428420063185]
								}, {
									"case":	97,
									"scores":	[-3.952428420063185]
								}, {
									"case":	98,
									"scores":	[-3.952428420063185]
								}, {
									"case":	99,
									"scores":	[-3.952428420063185]
								}, {
									"case":	100,
									"scores":	[-3.952428420063185]
								}, {
									"case":	101,
									"scores":	[-3.952428420063185]
								}, {
									"case":	102,
									"scores":	[-3.952428420063185]
								}, {
									"case":	103,
									"scores":	[-3.952428420063185]
								}, {
									"case":	104,
									"scores":	[-3.952428420063185]
								}, {
									"case":	105,
									"scores":	[-3.952428420063185]
								}, {
									"case":	106,
									"scores":	[-3.952428420063185]
								}, {
									"case":	107,
									"scores":	[-3.952428420063185]
								}, {
									"case":	108,
									"scores":	[-3.952428420063185]
								}, {
									"case":	109,
									"scores":	[-3.952428420063185]
								}, {
									"case":	110,
									"scores":	[-3.952428420063185]
								}, {
									"case":	111,
									"scores":	[-3.952428420063185]
								}, {
									"case":	112,
									"scores":	[-3.952428420063185]
								}, {
									"case":	113,
									"scores":	[-3.952428420063185]
								}, {
									"case":	114,
									"scores":	[-3.952428420063185]
								}, {
									"case":	115,
									"scores":	[-3.952428420063185]
								}, {
									"case":	116,
									"scores":	[-3.952428420063185]
								}, {
									"case":	117,
									"scores":	[-3.952428420063185]
								}, {
									"case":	118,
									"scores":	[-3.952428420063185]
								}, {
									"case":	119,
									"scores":	[-3.952428420063185]
								}, {
									"case":	120,
									"scores":	[-3.952428420063185]
								}, {
									"case":	121,
									"scores":	[-3.952428420063185]
								}, {
									"case":	122,
									"scores":	[-3.952428420063185]
								}, {
									"case":	123,
									"scores":	[-3.952428420063185]
								}, {
									"case":	124,
									"scores":	[-3.952428420063185]
								}, {
									"case":	125,
									"scores":	[-3.952428420063185]
								}, {
									"case":	126,
									"scores":	[-3.952428420063185]
								}, {
									"case":	127,
									"scores":	[-3.952428420063185]
								}, {
									"case":	128,
									"scores":	[-3.952428420063185]
								}, {
									"case":	129,
									"scores":	[-3.952428420063185]
								}, {
									"case":	130,
									"scores":	[-3.952428420063185]
								}, {
									"case":	131,
									"scores":	[-3.952428420063185]
								}, {
									"case":	132,
									"scores":	[-3.952428420063185]
								}, {
									"case":	133,
									"scores":	[-3.952428420063185]
								}, {
									"case":	134,
									"scores":	[-3.952428420063185]
								}, {
									"case":	135,
									"scores":	[-3.952428420063185]
								}, {
									"case":	136,
									"scores":	[-3.952428420063185]
								}, {
									"case":	137,
									"scores":	[-3.952428420063185]
								}, {
									"case":	138,
									"scores":	[-3.952428420063185]
								}, {
									"case":	139,
									"scores":	[-3.952428420063185]
								}, {
									"case":	140,
									"scores":	[-3.952428420063185]
								}, {
									"case":	141,
									"scores":	[-3.952428420063185]
								}, {
									"case":	142,
									"scores":	[-3.952428420063185]
								}, {
									"case":	143,
									"scores":	[-3.952428420063185]
								}, {
									"case":	144,
									"scores":	[-3.952428420063185]
								}, {
									"case":	145,
									"scores":	[-3.952428420063185]
								}, {
									"case":	146,
									"scores":	[-3.952428420063185]
								}, {
									"case":	147,
									"scores":	[-3.952428420063185]
								}, {
									"case":	148,
									"scores":	[-3.952428420063185]
								}, {
									"case":	149,
									"scores":	[-3.952428420063185]
								}, {
									"case":	150,
									"scores":	[-3.952428420063185]
								}, {
									"case":	151,
									"scores":	[-3.952428420063185]
								}, {
									"case":	152,
									"scores":	[-3.952428420063185]
								}, {
									"case":	153,
									"scores":	[-3.952428420063185]
								}, {
									"case":	154,
									"scores":	[-3.952428420063185]
								}, {
									"case":	155,
									"scores":	[-3.952428420063185]
								}, {
									"case":	156,
									"scores":	[-3.952428420063185]
								}, {
									"case":	157,
									"scores":	[-3.952428420063185]
								}, {
									"case":	158,
									"scores":	[-3.952428420063185]
								}, {
									"case":	159,
									"scores":	[-3.952428420063185]
								}, {
									"case":	160,
									"scores":	[-3.952428420063185]
								}, {
									"case":	161,
									"scores":	[-3.952428420063185]
								}, {
									"case":	162,
									"scores":	[-3.952428420063185]
								}, {
									"case":	163,
									"scores":	[-3.952428420063185]
								}, {
									"case":	164,
									"scores":	[-3.952428420063185]
								}, {
									"case":	165,
									"scores":	[-3.952428420063185]
								}, {
									"case":	166,
									"scores":	[-3.952428420063185]
								}, {
									"case":	167,
									"scores":	[-3.952428420063185]
								}, {
									"case":	168,
									"scores":	[-3.952428420063185]
								}, {
									"case":	169,
									"scores":	[-3.952428420063185]
								}, {
									"case":	170,
									"scores":	[-3.952428420063185]
								}, {
									"case":	171,
									"scores":	[-3.952428420063185]
								}, {
									"case":	172,
									"scores":	[-3.952428420063185]
								}, {
									"case":	173,
									"scores":	[-3.952428420063185]
								}, {
									"case":	174,
									"scores":	[-3.952428420063185]
								}, {
									"case":	175,
									"scores":	[-3.952428420063185]
								}, {
									"case":	176,
									"scores":	[-3.952428420063185]
								}, {
									"case":	177,
									"scores":	[-3.952428420063185]
								}, {
									"case":	178,
									"scores":	[-3.952428420063185]
								}, {
									"case":	179,
									"scores":	[-3.952428420063185]
								}, {
									"case":	180,
									"scores":	[-3.952428420063185]
								}, {
									"case":	181,
									"scores":	[-3.952428420063185]
								}, {
									"case":	182,
									"scores":	[-3.952428420063185]
								}, {
									"case":	183,
									"scores":	[-3.952428420063185]
								}, {
									"case":	184,
									"scores":	[-3.952428420063185]
								}, {
									"case":	185,
									"scores":	[-3.952428420063185]
								}, {
									"case":	186,
									"scores":	[-3.952428420063185]
								}, {
									"case":	187,
									"scores":	[-3.952428420063185]
								}, {
									"case":	188,
									"scores":	[-3.952428420063185]
								}, {
									"case":	189,
									"scores":	[-3.952428420063185]
								}, {
									"case":	190,
									"scores":	[-3.952428420063185]
								}, {
									"case":	191,
									"scores":	[-3.952428420063185]
								}, {
									"case":	192,
									"scores":	[-3.952428420063185]
								}, {
									"case":	193,
									"scores":	[-3.952428420063185]
								}, {
									"case":	194,
									"scores":	[-3.952428420063185]
								}, {
									"case":	195,
									"scores":	[-3.952428420063185]
								}, {
									"case":	196,
									"scores":	[-3.952428420063185]
								}, {
									"case":	197,
									"scores":	[-3.952428420063185]
								}, {
									"case":	198,
									"scores":	[-3.952428420063185]
								}, {
									"case":	199,
									"scores":	[-3.952428420063185]
								}, {
									"case":	200,
									"scores":	[-3.952428420063185]
								}, {
									"case":	201,
									"scores":	[-3.952428420063185]
								}, {
									"case":	202,
									"scores":	[-3.952428420063185]
								}, {
									"case":	203,
									"scores":	[-3.952428420063185]
								}, {
									"case":	204,
									"scores":	[-3.952428420063185]
								}, {
									"case":	205,
									"scores":	[-3.952428420063185]
								}, {
									"case":	206,
									"scores":	[-3.952428420063185]
								}, {
									"case":	207,
									"scores":	[-3.952428420063185]
								}, {
									"case":	208,
									"scores":	[-3.952428420063185]
								}, {
									"case":	209,
									"scores":	[-3.952428420063185]
								}, {
									"case":	210,
									"scores":	[-3.952428420063185]
								}, {
									"case":	211,
									"scores":	[-3.952428420063185]
								}, {
									"case":	212,
									"scores":	[-3.952428420063185]
								}, {
									"case":	213,
									"scores":	[-3.952428420063185]
								}, {
									"case":	214,
									"scores":	[-3.952428420063185]
								}, {
									"case":	215,
									"scores":	[-3.952428420063185]
								}, {
									"case":	216,
									"scores":	[-3.952428420063185]
								}, {
									"case":	217,
									"scores":	[-3.952428420063185]
								}, {
									"case":	218,
									"scores":	[-3.952428420063185]
								}, {
									"case":	219,
									"scores":	[-3.952428420063185]
								}, {
									"case":	220,
									"scores":	[-3.952428420063185]
								}, {
									"case":	221,
									"scores":	[-3.952428420063185]
								}, {
									"case":	222,
									"scores":	[-3.952428420063185]
								}, {
									"case":	223,
									"scores":	[-3.952428420063185]
								}, {
									"case":	224,
									"scores":	[-3.952428420063185]
								}, {
									"case":	225,
									"scores":	[-3.952428420063185]
								}, {
									"case":	226,
									"scores":	[-3.952428420063185]
								}, {
									"case":	227,
									"scores":	[-3.952428420063185]
								}, {
									"case":	228,
									"scores":	[-3.952428420063185]
								}, {
									"case":	229,
									"scores":	[-3.952428420063185]
								}, {
									"case":	230,
									"scores":	[-3.952428420063185]
								}, {
									"case":	231,
									"scores":	[-3.952428420063185]
								}, {
									"case":	232,
									"scores":	[-3.952428420063185]
								}, {
									"case":	233,
									"scores":	[-3.952428420063185]
								}, {
									"case":	234,
									"scores":	[-3.952428420063185]
								}, {
									"case":	235,
									"scores":	[-3.952428420063185]
								}, {
									"case":	236,
									"scores":	[-3.952428420063185]
								}, {
									"case":	237,
									"scores":	[-3.952428420063185]
								}, {
									"case":	238,
									"scores":	[-3.952428420063185]
								}, {
									"case":	239,
									"scores":	[-3.952428420063185]
								}, {
									"case":	240,
									"scores":	[-3.952428420063185]
								}, {
									"case":	241,
									"scores":	[-3.952428420063185]
								}, {
									"case":	242,
									"scores":	[-3.952428420063185]
								}, {
									"case":	243,
									"scores":	[-3.952428420063185]
								}, {
									"case":	244,
									"scores":	[-3.952428420063185]
								}, {
									"case":	245,
									"scores":	[-3.952428420063185]
								}, {
									"case":	246,
									"scores":	[-3.952428420063185]
								}, {
									"case":	247,
									"scores":	[-3.952428420063185]
								}, {
									"case":	248,
									"scores":	[-3.952428420063185]
								}, {
									"case":	249,
									"scores":	[-3.952428420063185]
								}, {
									"case":	250,
									"scores":	[-3.952428420063185]
								}, {
									"case":	251,
									"scores":	[-3.952428420063185]
								}, {
									"case":	252,
									"scores":	[-3.952428420063185]
								}, {
									"case":	253,
									"scores":	[-3.952428420063185]
								}, {
									"case":	254,
									"scores":	[-3.952428420063185]
								}, {
									"case":	255,
									"scores":	[-3.952428420063185]
								}, {
									"case":	256,
									"scores":	[-3.952428420063185]
								}, {
									"case":	257,
									"scores":	[-3.952428420063185]
								}, {
									"case":	258,
									"scores":	[-3.952428420063185]
								}, {
									"case":	259,
									"scores":	[-3.952428420063185]
								}, {
									"case":	260,
									"scores":	[-3.952428420063185]
								}, {
									"case":	261,
									"scores":	[-3.952428420063185]
								}, {
									"case":	262,
									"scores":	[-3.952428420063185]
								}, {
									"case":	263,
									"scores":	[-3.952428420063185]
								}, {
									"case":	264,
									"scores":	[-3.952428420063185]
								}, {
									"case":	265,
									"scores":	[-3.952428420063185]
								}, {
									"case":	266,
									"scores":	[-3.952428420063185]
								}, {
									"case":	267,
									"scores":	[-3.952428420063185]
								}, {
									"case":	268,
									"scores":	[-3.952428420063185]
								}, {
									"case":	269,
									"scores":	[-3.952428420063185]
								}, {
									"case":	270,
									"scores":	[-3.952428420063185]
								}, {
									"case":	271,
									"scores":	[-3.952428420063185]
								}, {
									"case":	272,
									"scores":	[-3.952428420063185]
								}, {
									"case":	273,
									"scores":	[-3.952428420063185]
								}, {
									"case":	274,
									"scores":	[-3.952428420063185]
								}, {
									"case":	275,
									"scores":	[-3.952428420063185]
								}, {
									"case":	276,
									"scores":	[-3.952428420063185]
								}, {
									"case":	277,
									"scores":	[-3.952428420063185]
								}, {
									"case":	278,
									"scores":	[-3.952428420063185]
								}, {
									"case":	279,
									"scores":	[-3.952428420063185]
								}, {
									"case":	280,
									"scores":	[-3.952428420063185]
								}, {
									"case":	281,
									"scores":	[-3.952428420063185]
								}, {
									"case":	282,
									"scores":	[-3.952428420063185]
								}, {
									"case":	283,
									"scores":	[-3.952428420063185]
								}, {
									"case":	284,
									"scores":	[-3.952428420063185]
								}, {
									"case":	285,
									"scores":	[-3.952428420063185]
								}, {
									"case":	286,
									"scores":	[-3.952428420063185]
								}, {
									"case":	287,
									"scores":	[-3.952428420063185]
								}, {
									"case":	288,
									"scores":	[-3.952428420063185]
								}, {
									"case":	289,
									"scores":	[-3.952428420063185]
								}, {
									"case":	290,
									"scores":	[-3.952428420063185]
								}, {
									"case":	291,
									"scores":	[-3.952428420063185]
								}, {
									"case":	292,
									"scores":	[-3.952428420063185]
								}, {
									"case":	293,
									"scores":	[-3.952428420063185]
								}, {
									"case":	294,
									"scores":	[-3.952428420063185]
								}, {
									"case":	295,
									"scores":	[-3.952428420063185]
								}, {
									"case":	296,
									"scores":	[-3.952428420063185]
								}, {
									"case":	297,
									"scores":	[-3.952428420063185]
								}, {
									"case":	298,
									"scores":	[-3.952428420063185]
								}, {
									"case":	299,
									"scores":	[-3.952428420063185]
								}, {
									"case":	300,
									"scores":	[-3.952428420063185]
								}, {
									"case":	301,
									"scores":	[-3.952428420063185]
								}, {
									"case":	302,
									"scores":	[-3.952428420063185]
								}, {
									"case":	303,
									"scores":	[-3.952428420063185]
								}, {
									"case":	304,
									"scores":	[-3.952428420063185]
								}, {
									"case":	305,
									"scores":	[-3.952428420063185]
								}, {
									"case":	306,
									"scores":	[-3.952428420063185]
								}, {
									"case":	307,
									"scores":	[-3.952428420063185]
								}, {
									"case":	308,
									"scores":	[-3.952428420063185]
								}, {
									"case":	309,
									"scores":	[-3.952428420063185]
								}, {
									"case":	310,
									"scores":	[-3.952428420063185]
								}, {
									"case":	311,
									"scores":	[-3.952428420063185]
								}, {
									"case":	312,
									"scores":	[-3.952428420063185]
								}, {
									"case":	313,
									"scores":	[-3.952428420063185]
								}, {
									"case":	314,
									"scores":	[-3.952428420063185]
								}, {
									"case":	315,
									"scores":	[-3.952428420063185]
								}, {
									"case":	316,
									"scores":	[-3.952428420063185]
								}, {
									"case":	317,
									"scores":	[-3.952428420063185]
								}, {
									"case":	318,
									"scores":	[-3.952428420063185]
								}, {
									"case":	319,
									"scores":	[-3.952428420063185]
								}, {
									"case":	320,
									"scores":	[-3.952428420063185]
								}, {
									"case":	321,
									"scores":	[-3.952428420063185]
								}, {
									"case":	322,
									"scores":	[-3.952428420063185]
								}, {
									"case":	323,
									"scores":	[-3.952428420063185]
								}, {
									"case":	324,
									"scores":	[-3.952428420063185]
								}, {
									"case":	325,
									"scores":	[-3.952428420063185]
								}, {
									"case":	326,
									"scores":	[-3.952428420063185]
								}, {
									"case":	327,
									"scores":	[-3.952428420063185]
								}, {
									"case":	328,
									"scores":	[-3.952428420063185]
								}, {
									"case":	329,
									"scores":	[-3.952428420063185]
								}, {
									"case":	330,
									"scores":	[-3.952428420063185]
								}, {
									"case":	331,
									"scores":	[-3.952428420063185]
								}, {
									"case":	332,
									"scores":	[-3.952428420063185]
								}, {
									"case":	333,
									"scores":	[-3.952428420063185]
								}, {
									"case":	334,
									"scores":	[-3.952428420063185]
								}, {
									"case":	335,
									"scores":	[-3.952428420063185]
								}, {
									"case":	336,
									"scores":	[-3.952428420063185]
								}, {
									"case":	337,
									"scores":	[-3.952428420063185]
								}, {
									"case":	338,
									"scores":	[-3.952428420063185]
								}, {
									"case":	339,
									"scores":	[-3.952428420063185]
								}, {
									"case":	340,
									"scores":	[-3.952428420063185]
								}, {
									"case":	341,
									"scores":	[-3.952428420063185]
								}, {
									"case":	342,
									"scores":	[-3.952428420063185]
								}, {
									"case":	343,
									"scores":	[-3.952428420063185]
								}, {
									"case":	344,
									"scores":	[-3.952428420063185]
								}, {
									"case":	345,
									"scores":	[-3.952428420063185]
								}, {
									"case":	346,
									"scores":	[-3.952428420063185]
								}, {
									"case":	347,
									"scores":	[-3.952428420063185]
								}, {
									"case":	348,
									"scores":	[-3.952428420063185]
								}, {
									"case":	349,
									"scores":	[-3.952428420063185]
								}, {
									"case":	350,
									"scores":	[-3.952428420063185]
								}, {
									"case":	351,
									"scores":	[-3.952428420063185]
								}, {
									"case":	352,
									"scores":	[-3.952428420063185]
								}, {
									"case":	353,
									"scores":	[-3.952428420063185]
								}, {
									"case":	354,
									"scores":	[-3.952428420063185]
								}, {
									"case":	355,
									"scores":	[-3.952428420063185]
								}, {
									"case":	356,
									"scores":	[-3.952428420063185]
								}, {
									"case":	357,
									"scores":	[-3.952428420063185]
								}, {
									"case":	358,
									"scores":	[-3.952428420063185]
								}, {
									"case":	359,
									"scores":	[-3.952428420063185]
								}, {
									"case":	360,
									"scores":	[-3.952428420063185]
								}, {
									"case":	361,
									"scores":	[-3.952428420063185]
								}, {
									"case":	362,
									"scores":	[-3.952428420063185]
								}, {
									"case":	363,
									"scores":	[-3.952428420063185]
								}, {
									"case":	364,
									"scores":	[-3.952428420063185]
								}, {
									"case":	365,
									"scores":	[-3.952428420063185]
								}, {
									"case":	366,
									"scores":	[-3.952428420063185]
								}, {
									"case":	367,
									"scores":	[-3.952428420063185]
								}, {
									"case":	368,
									"scores":	[-3.952428420063185]
								}, {
									"case":	369,
									"scores":	[-3.952428420063185]
								}, {
									"case":	370,
									"scores":	[-3.952428420063185]
								}, {
									"case":	371,
									"scores":	[-3.952428420063185]
								}, {
									"case":	372,
									"scores":	[-3.952428420063185]
								}, {
									"case":	373,
									"scores":	[-3.952428420063185]
								}, {
									"case":	374,
									"scores":	[-3.952428420063185]
								}, {
									"case":	375,
									"scores":	[-3.952428420063185]
								}, {
									"case":	376,
									"scores":	[-3.952428420063185]
								}, {
									"case":	377,
									"scores":	[-3.952428420063185]
								}, {
									"case":	378,
									"scores":	[-3.952428420063185]
								}, {
									"case":	379,
									"scores":	[-3.952428420063185]
								}, {
									"case":	380,
									"scores":	[-3.952428420063185]
								}, {
									"case":	381,
									"scores":	[-3.952428420063185]
								}, {
									"case":	382,
									"scores":	[-3.952428420063185]
								}, {
									"case":	383,
									"scores":	[-3.952428420063185]
								}, {
									"case":	384,
									"scores":	[-3.952428420063185]
								}, {
									"case":	385,
									"scores":	[-3.952428420063185]
								}, {
									"case":	386,
									"scores":	[-3.952428420063185]
								}, {
									"case":	387,
									"scores":	[-3.952428420063185]
								}, {
									"case":	388,
									"scores":	[-3.952428420063185]
								}, {
									"case":	389,
									"scores":	[-3.952428420063185]
								}, {
									"case":	390,
									"scores":	[-3.952428420063185]
								}, {
									"case":	391,
									"scores":	[-3.952428420063185]
								}, {
									"case":	392,
									"scores":	[-3.952428420063185]
								}, {
									"case":	393,
									"scores":	[-5.8100973140631851, -4.5335477300631855, -5.3069313300631853, -6.3924033700631853, -6.3060081300631854, -6.3924033700631853, -6.3060081300631854, -5.6220472300631847, -6.0245085300631853, -5.6220472300631847, -6.4966401300631844, -6.4966401300631844, -5.6220472300631847, -6.4966401300631844, -6.4966401300631844, -5.7993100700631848, -6.3060081300631854, -6.3954308300631855, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.4966401300631844, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -5.8498971300631855, -6.4966401300631844, -6.4966401300631844, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3954308300631855, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -6.3060081300631854, -6.3060081300631854, -6.3954308300631855, -6.3060081300631854, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.4966401300631844, -6.4966401300631844, -6.4966401300631844, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -5.8498971300631855, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3060081300631854, -6.3954308300631855, -6.4966401300631844]
								}, {
									"case":	394,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	395,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	396,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	397,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	398,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	399,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	400,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	401,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	402,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	403,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	404,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	405,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	406,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	407,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	408,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	409,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	410,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}, {
									"case":	411,
									"scores":	[-8.0728791140631841, -6.7963295300631845, -7.5697131300631852, -8.6551851700631861, -8.5687899300631862, -8.6551851700631861, -8.5687899300631862, -7.8848290300631856, -8.2872903300631862, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -7.8848290300631856, -8.7594219300631853, -8.7594219300631853, -8.0620918700631847, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.1126789300631845, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.7594219300631853, -8.7594219300631853, -8.7594219300631853, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.1126789300631845, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.5687899300631862, -8.6582126300631863, -8.7594219300631853]
								}]
						}, {
							"switch":	67,
							"types":	[[], [], [1], [], [], [], [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185], [], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [], [], [29]],
							"begin_line":	282,
							"begin_column":	4,
							"end_line":	282,
							"end_column":	71,
							"patch_codes":	["if (!__is_neg(\"\", \"L282\", 96, &(p), sizeof (p), &(ts), sizeof (ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n", "OBJ_NAME_get(\"src/mod_secure_download.c\", 0)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 1)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 16)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 213)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 219)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 225)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 234)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 244)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 251)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 261)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 268)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 282)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 310)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 32)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 324)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 4)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 403)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 408)", "OBJ_NAME_get(\"src/mod_secure_download.c\", 8)", "g_dgettext(\"src/mod_secure_download.c\", 0)", "g_dgettext(\"src/mod_secure_download.c\", md5_str)", "g_dgettext(\"src/mod_secure_download.c\", rel_uri)", "g_dgettext(\"src/mod_secure_download.c\", ts_str)", "g_strip_context(\"src/mod_secure_download.c\", 0)", "g_strip_context(\"src/mod_secure_download.c\", md5_str)", "g_strip_context(\"src/mod_secure_download.c\", rel_uri)", "g_strip_context(\"src/mod_secure_download.c\", ts_str)", "{\n}\n", "BIO_printf(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "VALGRIND_PRINTF(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "VALGRIND_PRINTF_BACKTRACE(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "__builtin_va_start(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "fprintf(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_build_filename(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_build_path(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_markup_printf_escaped(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_prefix_error(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_print(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_printerr(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_relation_exists(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_relation_insert(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_scanner_error(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_scanner_warn(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_strconcat(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_strdup_printf(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_string_append_printf(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_string_printf(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_strjoin(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_test_message(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_variant_builder_add(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_variant_builder_add_parsed(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_variant_get(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_variant_iter_loop(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_variant_iter_next(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_variant_new(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_variant_new_parsed(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "g_variant_new_printf(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", OPENSSL_cipher_name(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", g_basename(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", g_getenv(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", g_intern_static_string(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", g_intern_string(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", g_path_skip_root(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "printf(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "sprintf(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d or the directory does not exist\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (0 * i), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (0 * ts), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (HA1 != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (HA1 == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (Md5Ctx != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (Md5Ctx == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (con != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (con == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (i != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (i * ts), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (i + 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (i - 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (i == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (md5_str != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (md5_str == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (p != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (p == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (p_d != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (p_d == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (rel_uri != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (rel_uri != md5_str), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (rel_uri != ts_str), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (rel_uri == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (rel_uri == md5_str), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (rel_uri == ts_str), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (srv != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (srv == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts != i), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts * i), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts + 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts + i), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts - 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts - i), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts == i), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts_str != 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts_str != md5_str), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts_str == 0), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), (ts_str == md5_str), ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (0 * i), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (0 * ts), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (HA1 != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (HA1 == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (Md5Ctx != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (Md5Ctx == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (con != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (con == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (i != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (i * ts), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (i + 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (i - 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (i == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (md5_str != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (md5_str == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (p != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (p == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (p_d != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (p_d == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (rel_uri != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (rel_uri != md5_str), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (rel_uri != ts_str), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (rel_uri == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (rel_uri == md5_str), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (rel_uri == ts_str), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (srv != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (srv == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts != i), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts * i), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts + 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts + i), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts - 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts - i), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts == i), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts_str != 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts_str != md5_str), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts_str == 0), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, (ts_str == md5_str), p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&HA1)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&Md5Ctx)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&con)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&i)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&md5_str)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&p)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&p_d)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&rel_uri)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&srv)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&ts)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (&ts_str)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&HA1)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&Md5Ctx)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&con)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&i)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&md5_str)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&p)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&p_d)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&rel_uri)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&srv)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&ts)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((&ts_str)), 282, ts, p->conf.timeout)", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path((0)), 282, ts, p->conf.timeout)", "log_trace((&HA1), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((&Md5Ctx), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((&con), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((&i), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((&md5_str), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((&p), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((&p_d), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((&rel_uri), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((&srv), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((&ts), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((&ts_str), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "log_trace((0), remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2077197100631851, -3.9950671100631849, -4.7659008100631848, -6.3097902100631851, -5.4306444100631852, -6.3097902100631851, -5.4306444100631852, -5.0967757100631843, -5.2011037100631849, -5.0967757100631843, -6.2745494100631856, -6.2745494100631856, -5.0967757100631843, -6.2745494100631856, -6.2745494100631856, -5.361557210063185, -5.4306444100631852, -5.867609410063185, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -6.2745494100631856, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -5.1867175400631851, -6.2745494100631856, -6.2745494100631856, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.867609410063185, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -5.4306444100631852, -5.4306444100631852, -5.867609410063185, -5.4306444100631852, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -6.2745494100631856, -6.2745494100631856, -6.2745494100631856, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.1867175400631851, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.4306444100631852, -5.867609410063185, -6.2745494100631856]
								}, {
									"case":	2,
									"scores":	[-3.952428420063185]
								}, {
									"case":	3,
									"scores":	[-3.952428420063185]
								}, {
									"case":	4,
									"scores":	[-3.952428420063185]
								}, {
									"case":	5,
									"scores":	[-3.952428420063185]
								}, {
									"case":	6,
									"scores":	[-3.952428420063185]
								}, {
									"case":	7,
									"scores":	[-3.952428420063185]
								}, {
									"case":	8,
									"scores":	[-3.952428420063185]
								}, {
									"case":	9,
									"scores":	[-3.952428420063185]
								}, {
									"case":	10,
									"scores":	[-3.952428420063185]
								}, {
									"case":	11,
									"scores":	[-3.952428420063185]
								}, {
									"case":	12,
									"scores":	[-3.952428420063185]
								}, {
									"case":	13,
									"scores":	[-3.952428420063185]
								}, {
									"case":	14,
									"scores":	[-3.952428420063185]
								}, {
									"case":	15,
									"scores":	[-3.952428420063185]
								}, {
									"case":	16,
									"scores":	[-3.952428420063185]
								}, {
									"case":	17,
									"scores":	[-3.952428420063185]
								}, {
									"case":	18,
									"scores":	[-3.952428420063185]
								}, {
									"case":	19,
									"scores":	[-3.952428420063185]
								}, {
									"case":	20,
									"scores":	[-3.952428420063185]
								}, {
									"case":	21,
									"scores":	[-3.952428420063185]
								}, {
									"case":	22,
									"scores":	[-3.952428420063185]
								}, {
									"case":	23,
									"scores":	[-3.952428420063185]
								}, {
									"case":	24,
									"scores":	[-3.952428420063185]
								}, {
									"case":	25,
									"scores":	[-3.952428420063185]
								}, {
									"case":	26,
									"scores":	[-3.952428420063185]
								}, {
									"case":	27,
									"scores":	[-3.952428420063185]
								}, {
									"case":	28,
									"scores":	[-3.952428420063185]
								}, {
									"case":	29,
									"scores":	[-3.952428420063185]
								}, {
									"case":	30,
									"scores":	[-3.952428420063185]
								}, {
									"case":	31,
									"scores":	[-3.952428420063185]
								}, {
									"case":	32,
									"scores":	[-3.952428420063185]
								}, {
									"case":	33,
									"scores":	[-3.952428420063185]
								}, {
									"case":	34,
									"scores":	[-3.952428420063185]
								}, {
									"case":	35,
									"scores":	[-3.952428420063185]
								}, {
									"case":	36,
									"scores":	[-3.952428420063185]
								}, {
									"case":	37,
									"scores":	[-3.952428420063185]
								}, {
									"case":	38,
									"scores":	[-3.952428420063185]
								}, {
									"case":	39,
									"scores":	[-3.952428420063185]
								}, {
									"case":	40,
									"scores":	[-3.952428420063185]
								}, {
									"case":	41,
									"scores":	[-3.952428420063185]
								}, {
									"case":	42,
									"scores":	[-3.952428420063185]
								}, {
									"case":	43,
									"scores":	[-3.952428420063185]
								}, {
									"case":	44,
									"scores":	[-3.952428420063185]
								}, {
									"case":	45,
									"scores":	[-3.952428420063185]
								}, {
									"case":	46,
									"scores":	[-3.952428420063185]
								}, {
									"case":	47,
									"scores":	[-3.952428420063185]
								}, {
									"case":	48,
									"scores":	[-3.952428420063185]
								}, {
									"case":	49,
									"scores":	[-3.952428420063185]
								}, {
									"case":	50,
									"scores":	[-3.952428420063185]
								}, {
									"case":	51,
									"scores":	[-3.952428420063185]
								}, {
									"case":	52,
									"scores":	[-3.952428420063185]
								}, {
									"case":	53,
									"scores":	[-3.952428420063185]
								}, {
									"case":	54,
									"scores":	[-3.952428420063185]
								}, {
									"case":	55,
									"scores":	[-3.952428420063185]
								}, {
									"case":	56,
									"scores":	[-3.952428420063185]
								}, {
									"case":	57,
									"scores":	[-3.952428420063185]
								}, {
									"case":	58,
									"scores":	[-3.952428420063185]
								}, {
									"case":	59,
									"scores":	[-3.952428420063185]
								}, {
									"case":	60,
									"scores":	[-3.952428420063185]
								}, {
									"case":	61,
									"scores":	[-3.952428420063185]
								}, {
									"case":	62,
									"scores":	[-3.952428420063185]
								}, {
									"case":	63,
									"scores":	[-3.952428420063185]
								}, {
									"case":	64,
									"scores":	[-3.952428420063185]
								}, {
									"case":	65,
									"scores":	[-3.952428420063185]
								}, {
									"case":	66,
									"scores":	[-3.952428420063185]
								}, {
									"case":	67,
									"scores":	[-3.952428420063185]
								}, {
									"case":	68,
									"scores":	[-3.952428420063185]
								}, {
									"case":	69,
									"scores":	[-3.952428420063185]
								}, {
									"case":	70,
									"scores":	[-3.952428420063185]
								}, {
									"case":	71,
									"scores":	[-3.952428420063185]
								}, {
									"case":	72,
									"scores":	[-3.952428420063185]
								}, {
									"case":	73,
									"scores":	[-3.952428420063185]
								}, {
									"case":	74,
									"scores":	[-3.952428420063185]
								}, {
									"case":	75,
									"scores":	[-3.952428420063185]
								}, {
									"case":	76,
									"scores":	[-3.952428420063185]
								}, {
									"case":	77,
									"scores":	[-3.952428420063185]
								}, {
									"case":	78,
									"scores":	[-3.952428420063185]
								}, {
									"case":	79,
									"scores":	[-3.952428420063185]
								}, {
									"case":	80,
									"scores":	[-3.952428420063185]
								}, {
									"case":	81,
									"scores":	[-3.952428420063185]
								}, {
									"case":	82,
									"scores":	[-3.952428420063185]
								}, {
									"case":	83,
									"scores":	[-3.952428420063185]
								}, {
									"case":	84,
									"scores":	[-3.952428420063185]
								}, {
									"case":	85,
									"scores":	[-3.952428420063185]
								}, {
									"case":	86,
									"scores":	[-3.952428420063185]
								}, {
									"case":	87,
									"scores":	[-3.952428420063185]
								}, {
									"case":	88,
									"scores":	[-3.952428420063185]
								}, {
									"case":	89,
									"scores":	[-3.952428420063185]
								}, {
									"case":	90,
									"scores":	[-3.952428420063185]
								}, {
									"case":	91,
									"scores":	[-3.952428420063185]
								}, {
									"case":	92,
									"scores":	[-3.952428420063185]
								}, {
									"case":	93,
									"scores":	[-3.952428420063185]
								}, {
									"case":	94,
									"scores":	[-3.952428420063185]
								}, {
									"case":	95,
									"scores":	[-3.952428420063185]
								}, {
									"case":	96,
									"scores":	[-3.952428420063185]
								}, {
									"case":	97,
									"scores":	[-3.952428420063185]
								}, {
									"case":	98,
									"scores":	[-3.952428420063185]
								}, {
									"case":	99,
									"scores":	[-3.952428420063185]
								}, {
									"case":	100,
									"scores":	[-3.952428420063185]
								}, {
									"case":	101,
									"scores":	[-3.952428420063185]
								}, {
									"case":	102,
									"scores":	[-3.952428420063185]
								}, {
									"case":	103,
									"scores":	[-3.952428420063185]
								}, {
									"case":	104,
									"scores":	[-3.952428420063185]
								}, {
									"case":	105,
									"scores":	[-3.952428420063185]
								}, {
									"case":	106,
									"scores":	[-3.952428420063185]
								}, {
									"case":	107,
									"scores":	[-3.952428420063185]
								}, {
									"case":	108,
									"scores":	[-3.952428420063185]
								}, {
									"case":	109,
									"scores":	[-3.952428420063185]
								}, {
									"case":	110,
									"scores":	[-3.952428420063185]
								}, {
									"case":	111,
									"scores":	[-3.952428420063185]
								}, {
									"case":	112,
									"scores":	[-3.952428420063185]
								}, {
									"case":	113,
									"scores":	[-3.952428420063185]
								}, {
									"case":	114,
									"scores":	[-3.952428420063185]
								}, {
									"case":	115,
									"scores":	[-3.952428420063185]
								}, {
									"case":	116,
									"scores":	[-3.952428420063185]
								}, {
									"case":	117,
									"scores":	[-3.952428420063185]
								}, {
									"case":	118,
									"scores":	[-3.952428420063185]
								}, {
									"case":	119,
									"scores":	[-3.952428420063185]
								}, {
									"case":	120,
									"scores":	[-3.952428420063185]
								}, {
									"case":	121,
									"scores":	[-3.952428420063185]
								}, {
									"case":	122,
									"scores":	[-3.952428420063185]
								}, {
									"case":	123,
									"scores":	[-3.952428420063185]
								}, {
									"case":	124,
									"scores":	[-3.952428420063185]
								}, {
									"case":	125,
									"scores":	[-3.952428420063185]
								}, {
									"case":	126,
									"scores":	[-3.952428420063185]
								}, {
									"case":	127,
									"scores":	[-3.952428420063185]
								}, {
									"case":	128,
									"scores":	[-3.952428420063185]
								}, {
									"case":	129,
									"scores":	[-3.952428420063185]
								}, {
									"case":	130,
									"scores":	[-3.952428420063185]
								}, {
									"case":	131,
									"scores":	[-3.952428420063185]
								}, {
									"case":	132,
									"scores":	[-3.952428420063185]
								}, {
									"case":	133,
									"scores":	[-3.952428420063185]
								}, {
									"case":	134,
									"scores":	[-3.952428420063185]
								}, {
									"case":	135,
									"scores":	[-3.952428420063185]
								}, {
									"case":	136,
									"scores":	[-3.952428420063185]
								}, {
									"case":	137,
									"scores":	[-3.952428420063185]
								}, {
									"case":	138,
									"scores":	[-3.952428420063185]
								}, {
									"case":	139,
									"scores":	[-3.952428420063185]
								}, {
									"case":	140,
									"scores":	[-3.952428420063185]
								}, {
									"case":	141,
									"scores":	[-3.952428420063185]
								}, {
									"case":	142,
									"scores":	[-3.952428420063185]
								}, {
									"case":	143,
									"scores":	[-3.952428420063185]
								}, {
									"case":	144,
									"scores":	[-3.952428420063185]
								}, {
									"case":	145,
									"scores":	[-3.952428420063185]
								}, {
									"case":	146,
									"scores":	[-3.952428420063185]
								}, {
									"case":	147,
									"scores":	[-3.952428420063185]
								}, {
									"case":	148,
									"scores":	[-3.952428420063185]
								}, {
									"case":	149,
									"scores":	[-3.952428420063185]
								}, {
									"case":	150,
									"scores":	[-3.952428420063185]
								}, {
									"case":	151,
									"scores":	[-3.952428420063185]
								}, {
									"case":	152,
									"scores":	[-3.952428420063185]
								}, {
									"case":	153,
									"scores":	[-3.952428420063185]
								}, {
									"case":	154,
									"scores":	[-3.952428420063185]
								}, {
									"case":	155,
									"scores":	[-3.952428420063185]
								}, {
									"case":	156,
									"scores":	[-3.952428420063185]
								}, {
									"case":	157,
									"scores":	[-3.952428420063185]
								}, {
									"case":	158,
									"scores":	[-3.952428420063185]
								}, {
									"case":	159,
									"scores":	[-3.952428420063185]
								}, {
									"case":	160,
									"scores":	[-3.952428420063185]
								}, {
									"case":	161,
									"scores":	[-3.952428420063185]
								}, {
									"case":	162,
									"scores":	[-3.952428420063185]
								}, {
									"case":	163,
									"scores":	[-3.952428420063185]
								}, {
									"case":	164,
									"scores":	[-3.952428420063185]
								}, {
									"case":	165,
									"scores":	[-3.952428420063185]
								}, {
									"case":	166,
									"scores":	[-3.952428420063185]
								}, {
									"case":	167,
									"scores":	[-3.952428420063185]
								}, {
									"case":	168,
									"scores":	[-3.952428420063185]
								}, {
									"case":	169,
									"scores":	[-3.952428420063185]
								}, {
									"case":	170,
									"scores":	[-3.952428420063185]
								}, {
									"case":	171,
									"scores":	[-3.952428420063185]
								}, {
									"case":	172,
									"scores":	[-3.952428420063185]
								}, {
									"case":	173,
									"scores":	[-3.952428420063185]
								}, {
									"case":	174,
									"scores":	[-3.952428420063185]
								}, {
									"case":	175,
									"scores":	[-3.952428420063185]
								}, {
									"case":	176,
									"scores":	[-3.952428420063185]
								}, {
									"case":	177,
									"scores":	[-3.952428420063185]
								}, {
									"case":	178,
									"scores":	[-3.952428420063185]
								}, {
									"case":	179,
									"scores":	[-3.952428420063185]
								}, {
									"case":	180,
									"scores":	[-3.952428420063185]
								}, {
									"case":	181,
									"scores":	[-3.952428420063185]
								}, {
									"case":	182,
									"scores":	[-3.952428420063185]
								}, {
									"case":	183,
									"scores":	[-3.952428420063185]
								}, {
									"case":	184,
									"scores":	[-3.952428420063185]
								}, {
									"case":	185,
									"scores":	[-3.952428420063185]
								}]
						}]
				}, {
					"line":	280,
					"switches":	[{
							"switch":	64,
							"types":	[[], [], [], [], [394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [], [], [], [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], [], [], [], [], [], []],
							"begin_line":	281,
							"begin_column":	1,
							"end_line":	281,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 0;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 16;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 1;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 213;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 219;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 225;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 234;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 244;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 251;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 261;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 268;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 282;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 310;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 324;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 32;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 403;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 408;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 4;\n", "if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	2,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	3,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	4,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	5,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	6,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	7,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	8,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	9,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	10,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	11,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	12,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	13,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	14,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	15,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	16,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	17,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	18,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	19,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	20,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	21,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	22,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	23,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	24,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	25,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	26,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	27,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	28,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	29,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	30,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	31,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	32,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	33,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	34,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	35,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	36,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	37,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	38,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	39,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	40,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	41,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	42,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	43,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	44,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	45,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	46,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	47,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	48,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	49,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	50,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	51,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	52,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	53,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	54,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	55,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	56,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	57,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	58,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	59,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	60,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	61,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	62,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	63,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	64,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	65,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	66,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	67,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	68,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	69,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	70,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	71,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	72,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	73,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	74,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	75,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	76,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	77,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	78,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	79,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	80,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	81,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	82,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	83,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	84,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	85,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	86,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	87,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	88,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	89,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	90,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	91,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	92,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	93,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	94,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	95,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	96,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	97,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	98,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	99,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	100,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	101,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	102,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	103,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	104,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	105,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	106,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	107,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	108,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	109,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	110,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	111,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	112,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	113,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	114,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	115,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	116,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	117,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	118,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	119,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	120,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	121,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	122,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	123,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	124,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	125,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	126,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	127,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	128,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	129,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	130,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	131,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	132,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	133,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	134,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	135,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	136,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	137,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	138,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	139,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	140,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	141,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	142,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	143,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	144,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	145,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	146,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	147,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	148,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	149,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	150,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	151,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	152,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	153,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	154,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	155,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	156,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	157,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	158,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	159,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	160,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	161,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	162,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	163,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	164,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	165,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	166,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	167,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	168,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	169,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	170,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	171,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	172,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	173,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	174,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	175,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	176,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	177,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	178,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	179,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	180,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	181,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	182,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	183,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	184,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	185,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	186,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	187,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	188,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	189,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	190,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	191,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	192,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	193,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	194,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	195,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	196,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	197,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	198,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	199,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	200,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	201,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	202,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	203,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	204,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	205,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	206,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	207,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	208,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	209,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	210,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	211,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	212,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	213,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	214,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	215,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	216,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	217,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	218,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	219,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	220,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	221,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	222,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	223,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	224,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	225,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	226,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	227,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	228,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	229,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	230,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	231,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	232,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	233,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	234,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	235,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	236,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	237,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	238,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	239,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	240,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	241,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	242,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	243,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	244,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	245,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	246,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	247,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	248,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	249,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	250,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	251,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	252,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	253,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	254,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	255,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	256,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	257,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	258,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	259,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	260,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	261,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	262,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	263,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	264,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	265,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	266,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	267,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	268,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	269,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	270,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	271,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	272,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	273,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	274,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	275,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	276,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	277,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	278,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	279,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	280,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	281,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	282,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	283,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	284,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	285,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	286,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	287,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	288,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	289,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	290,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	291,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	292,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	293,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	294,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	295,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	296,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	297,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	298,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	299,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	300,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	301,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	302,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	303,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	304,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	305,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	306,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	307,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	308,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	309,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	310,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	311,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	312,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	313,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	314,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	315,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	316,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	317,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	318,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	319,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	320,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	321,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	322,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	323,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	324,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	325,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	326,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	327,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	328,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	329,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	330,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	331,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	332,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	333,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	334,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	335,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	336,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	337,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	338,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	339,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	340,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	341,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	342,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	343,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	344,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	345,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	346,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	347,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	348,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	349,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	350,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	351,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	352,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	353,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	354,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	355,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	356,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	357,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	358,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	359,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	360,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	361,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	362,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	363,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	364,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	365,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	366,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	367,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	368,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	369,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	370,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	371,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	372,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	373,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	374,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	375,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	376,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	377,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	378,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	379,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	380,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	381,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	382,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	383,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	384,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	385,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	386,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	387,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	388,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	389,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	390,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	391,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	392,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	393,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	394,
									"scores":	[-7.5421373513807044, -7.932371717380704, -8.0187669573807039, -7.4364609013807037, -6.1599113173807041, -7.932371717380704, -6.9332949173807048, -8.2973887311807033, -7.2484108173807034, -7.6508721173807039, -7.2484108173807034, -8.1230037173807048, -8.1230037173807048, -7.2484108173807034, -8.1230037173807048, -8.1230037173807048, -7.4256736573807043, -8.1230037173807048, -8.1230037173807048, -8.0217944173807041, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -7.6668927173807049, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -7.932371717380704, -7.932371717380704, -7.932371717380704, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.0217944173807041, -7.932371717380704, -7.932371717380704, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -7.932371717380704, -7.932371717380704, -7.932371717380704, -8.0217944173807041, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -8.1230037173807048, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -7.4762607173807041, -8.1230037173807048, -8.1230037173807048, -7.932371717380704, -7.932371717380704, -7.932371717380704, -8.0217944173807041, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -7.932371717380704, -7.932371717380704, -8.0217944173807041, -7.932371717380704, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -8.1230037173807048, -8.1230037173807048, -8.1230037173807048, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.4762607173807041, -7.932371717380704, -7.932371717380704, -7.932371717380704, -7.932371717380704, -8.0217944173807041, -8.1230037173807048]
								}, {
									"case":	395,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	396,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	397,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	398,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	399,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	400,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	401,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	402,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	403,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	404,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	405,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	406,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	407,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	408,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	409,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	410,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	411,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}, {
									"case":	412,
									"scores":	[-9.8049191513807052, -10.195153517380705, -10.281548757380705, -9.6992427013807045, -8.4226931173807049, -10.195153517380705, -9.1960767173807056, -10.560170531180704, -9.5111926173807042, -9.9136539173807048, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.5111926173807042, -10.385785517380706, -10.385785517380706, -9.6884554573807051, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.9296745173807039, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -9.7390425173807049, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.385785517380706, -10.385785517380706, -10.385785517380706, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -9.7390425173807049, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.195153517380705, -10.284576217380705, -10.385785517380706]
								}]
						}, {
							"switch":	65,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	281,
							"begin_column":	3,
							"end_line":	283,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n}\n", "if ((con->conf.log_request_handling) || __is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n}\n", "if ((con->conf.log_request_handling) && !__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2328929724281457, -3.5691294344281461, -4.448275234428146, -3.346204734428146, -2.1335521344281458, -3.5691294344281461, -2.9043858344281461, -4.326383211428146, -3.2352607344281461, -3.3395887344281463, -3.2352607344281461, -4.4130344344281465, -4.4130344344281465, -3.2352607344281461, -4.4130344344281465, -4.4130344344281465, -3.5000422344281463, -4.4130344344281465, -4.4130344344281465, -4.0060944344281459, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.1691075644281463, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.0060944344281459, -3.5691294344281461, -3.5691294344281461, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -4.0060944344281459, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -4.4130344344281465, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -3.325202564428146, -4.4130344344281465, -4.4130344344281465, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -4.0060944344281459, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -3.5691294344281461, -3.5691294344281461, -4.0060944344281459, -3.5691294344281461, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -4.4130344344281465, -4.4130344344281465, -4.4130344344281465, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.325202564428146, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -3.5691294344281461, -4.0060944344281459, -4.4130344344281465]
								}, {
									"case":	2,
									"scores":	[-6.0891524034281463, -5.4253888654281459, -6.3045346654281467, -5.2024641654281467, -3.9898115654281456, -5.4253888654281459, -4.7606452654281455, -6.1826426424281458, -5.0915201654281459, -5.1958481654281456, -5.0915201654281459, -6.2692938654281463, -6.2692938654281463, -5.0915201654281459, -6.2692938654281463, -6.2692938654281463, -5.3563016654281466, -6.2692938654281463, -6.2692938654281463, -5.8623538654281457, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.0253669954281461, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.8623538654281457, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.8623538654281457, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.1814619954281458, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.8623538654281457, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.8623538654281457, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.1814619954281458, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.8623538654281457, -6.2692938654281463]
								}, {
									"case":	3,
									"scores":	[-6.0891524034281463, -5.4253888654281459, -6.3045346654281467, -5.2024641654281467, -3.9898115654281456, -5.4253888654281459, -4.7606452654281455, -6.1826426424281458, -5.0915201654281459, -5.1958481654281456, -5.0915201654281459, -6.2692938654281463, -6.2692938654281463, -5.0915201654281459, -6.2692938654281463, -6.2692938654281463, -5.3563016654281466, -6.2692938654281463, -6.2692938654281463, -5.8623538654281457, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.0253669954281461, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.8623538654281457, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.8623538654281457, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.1814619954281458, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.8623538654281457, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.8623538654281457, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -6.2692938654281463, -6.2692938654281463, -6.2692938654281463, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.1814619954281458, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.4253888654281459, -5.8623538654281457, -6.2692938654281463]
								}]
						}, {
							"switch":	68,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	281,
							"begin_column":	3,
							"end_line":	283,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)))\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n    }\n", "if (!__is_neg(\"\", \"L281\", 144, &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con->http_status), sizeof (con->http_status), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx)) && (con->conf.log_request_handling)) {\n    log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1342151553807049, -5.4704516173807045, -6.3495974173807044, -5.2475269173807044, -4.0348743173807042, -5.4704516173807045, -4.8057080173807041, -6.2277053943807044, -5.1365829173807036, -5.2409109173807042, -5.1365829173807036, -6.3143566173807049, -6.3143566173807049, -5.1365829173807036, -6.3143566173807049, -6.3143566173807049, -5.4013644173807043, -6.3143566173807049, -6.3143566173807049, -5.9074166173807043, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.0704297473807038, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -5.9074166173807043, -5.4704516173807045, -5.4704516173807045, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.9074166173807043, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -6.3143566173807049, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -5.2265247473807044, -6.3143566173807049, -6.3143566173807049, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.9074166173807043, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -5.4704516173807045, -5.4704516173807045, -5.9074166173807043, -5.4704516173807045, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -6.3143566173807049, -6.3143566173807049, -6.3143566173807049, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.2265247473807044, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.4704516173807045, -5.9074166173807043, -6.3143566173807049]
								}, {
									"case":	2,
									"scores":	[-6.6657448253807043, -6.0019812873807048, -6.8811270873807047, -5.7790565873807047, -4.5664039873807045, -6.0019812873807048, -5.3372376873807044, -6.7592350643807038, -5.6681125873807048, -5.7724405873807045, -5.6681125873807048, -6.8458862873807043, -6.8458862873807043, -5.6681125873807048, -6.8458862873807043, -6.8458862873807043, -5.9328940873807046, -6.8458862873807043, -6.8458862873807043, -6.4389462873807037, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.6019594173807041, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.4389462873807037, -6.0019812873807048, -6.0019812873807048, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.4389462873807037, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.8458862873807043, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -5.7580544173807047, -6.8458862873807043, -6.8458862873807043, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.4389462873807037, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.0019812873807048, -6.0019812873807048, -6.4389462873807037, -6.0019812873807048, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.8458862873807043, -6.8458862873807043, -6.8458862873807043, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -5.7580544173807047, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.0019812873807048, -6.4389462873807037, -6.8458862873807043]
								}]
						}]
				}, {
					"line":	284,
					"switches":	[{
							"switch":	69,
							"types":	[[], [], [], [], [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], [], [], [], [], [], []],
							"begin_line":	285,
							"begin_column":	1,
							"end_line":	285,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 0;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 16;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 1;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 213;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 219;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 225;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 234;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 244;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 251;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 261;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 268;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 282;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 310;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 324;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 32;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 403;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 408;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 4;\n", "if (__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	13,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	14,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	15,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	16,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	17,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	18,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	19,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	20,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	21,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	22,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	23,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	24,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	25,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	26,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	27,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	28,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	29,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	30,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	31,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	32,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	33,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	34,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	35,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	36,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	37,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	38,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	39,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	40,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	41,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	42,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	43,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	44,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	45,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	46,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	47,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	48,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	49,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	50,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	51,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	52,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	53,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	54,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	55,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	56,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	57,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	58,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	59,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	60,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	61,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	62,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	63,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	64,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	65,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	66,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	67,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	68,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	69,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	70,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	71,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	72,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	73,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	74,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	75,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	76,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	77,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	78,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	79,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	80,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	81,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	82,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	83,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	84,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	85,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	86,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	87,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	88,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	89,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	90,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	91,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	92,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	93,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	94,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	95,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	96,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	97,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	98,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	99,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	100,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	101,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	102,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	103,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	104,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	105,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	106,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	107,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	108,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	109,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	110,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	111,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	112,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	113,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	114,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	115,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	116,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	117,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	118,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	119,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	120,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	121,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	122,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	123,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	124,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	125,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	126,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	127,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	128,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	129,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	130,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	131,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	132,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	133,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	134,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	135,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	136,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	137,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	138,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	139,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	140,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	141,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	142,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	143,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	144,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	145,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	146,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	147,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	148,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	149,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	150,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	151,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	152,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	153,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	154,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	155,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	156,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	157,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	158,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	159,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	160,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	161,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	162,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	163,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	164,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	165,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	166,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	167,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	168,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	169,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	170,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	171,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	172,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	173,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	174,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	175,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	176,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	177,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	178,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	179,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	180,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	181,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	182,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	183,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	184,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	185,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	186,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	187,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	188,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	189,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	190,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	191,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	192,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	193,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	194,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	195,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	196,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	197,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	198,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	199,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	200,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	201,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	202,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	203,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	204,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	205,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	206,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	207,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	208,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	209,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	210,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	211,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	212,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	213,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	214,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	215,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	216,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	217,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	218,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	219,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	220,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	221,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	222,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	223,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	224,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	225,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	226,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	227,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	228,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	229,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	230,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	231,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	232,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	233,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	234,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	235,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	236,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	237,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	238,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	239,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	240,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	241,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	242,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	243,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	244,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	245,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	246,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	247,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	248,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	249,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	250,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	251,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	252,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	253,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	254,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	255,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	256,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	257,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	258,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	259,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	260,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	261,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	262,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	263,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	264,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	265,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	266,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	267,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	268,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	269,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	270,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	271,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	272,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	273,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	274,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	275,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	276,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	277,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	278,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	279,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	280,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	281,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	282,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	283,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	284,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	285,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	286,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	287,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	288,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	289,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	290,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	291,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	292,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	293,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	294,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	295,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	296,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	297,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	298,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	299,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	300,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	301,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	302,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	303,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	304,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	305,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	306,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	307,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	308,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	309,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	310,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	311,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	312,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	313,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	314,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	315,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	316,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	317,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	318,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	319,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	320,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	321,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	322,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	323,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	324,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	325,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	326,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	327,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	328,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	329,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	330,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	331,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	332,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	333,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	334,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	335,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	336,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	337,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	338,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	339,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	340,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	341,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	342,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	343,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	344,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	345,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	346,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	347,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	348,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	349,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	350,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	351,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	352,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	353,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	354,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	355,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	356,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	357,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	358,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	359,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	360,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	361,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	362,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	363,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	364,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	365,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	366,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	367,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	368,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	369,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	370,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	371,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	372,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	373,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	374,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	375,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	376,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	377,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	378,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	379,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	380,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	381,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	382,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	383,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	384,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	385,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	386,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	387,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	388,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	389,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	390,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	391,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	392,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	393,
									"scores":	[-6.3796907367456654, -7.0908502874456651, -7.6115533027456657, -6.3532657724456651, -7.0224816427456656, -6.252125502745665, -6.252125502745665, -6.6545868027456656, -6.252125502745665, -6.429388342745666, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -7.1267184027456647, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -7.1267184027456647, -7.1267184027456647, -7.1267184027456647, -7.1267184027456647, -7.1267184027456647, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -7.1267184027456647, -7.1267184027456647, -7.1267184027456647, -6.4799754027456657, -7.1267184027456647, -7.1267184027456647, -6.9360864027456657, -6.9360864027456657, -6.9360864027456657, -7.0255091027456658, -7.1267184027456647, -7.1267184027456647, -7.1267184027456647, -6.9360864027456657, -6.9360864027456657, -7.0255091027456658, -6.9360864027456657]
								}, {
									"case":	394,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	395,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	396,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	397,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	398,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	399,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	400,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	401,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	402,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	403,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	404,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	405,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	406,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	407,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	408,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	409,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	410,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}, {
									"case":	411,
									"scores":	[-8.6424725367456663, -9.353632087445666, -9.8743351027456647, -8.616047572445666, -9.2852634427456664, -8.5149073027456659, -8.5149073027456659, -8.9173686027456665, -8.5149073027456659, -8.692170142745665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -8.7427572027456666, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.3895002027456655, -9.3895002027456655, -9.3895002027456655, -9.1988682027456665, -9.1988682027456665, -9.2882909027456666, -9.1988682027456665]
								}]
						}, {
							"switch":	70,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	285,
							"begin_column":	3,
							"end_line":	285,
							"end_column":	22,
							"patch_codes":	["if (!__is_neg(\"\", \"L285\", 51, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags)))\n    con->http_status = 408;\n", "{\n}\n", "con->http_status = (0 * i)", "con->http_status = (0 * ts)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "con->http_status = (HA1 != 0)", "con->http_status = (HA1 == 0)", "con->http_status = (Md5Ctx != 0)", "con->http_status = (Md5Ctx == 0)", "con->http_status = (con != 0)", "con->http_status = (con == 0)", "con->http_status = (i != 0)", "con->http_status = (i * ts)", "con->http_status = (i + 0)", "con->http_status = (i - 0)", "con->http_status = (i == 0)", "con->http_status = (md5_str != 0)", "con->http_status = (md5_str == 0)", "con->http_status = (p != 0)", "con->http_status = (p == 0)", "con->http_status = (p_d != 0)", "con->http_status = (p_d == 0)", "con->http_status = (rel_uri != 0)", "con->http_status = (rel_uri != md5_str)", "con->http_status = (rel_uri != ts_str)", "con->http_status = (rel_uri == 0)", "con->http_status = (rel_uri == md5_str)", "con->http_status = (rel_uri == ts_str)", "con->http_status = (srv != 0)", "con->http_status = (srv == 0)", "con->http_status = (ts != 0)", "con->http_status = (ts != i)", "con->http_status = (ts * i)", "con->http_status = (ts + 0)", "con->http_status = (ts + i)", "con->http_status = (ts - 0)", "con->http_status = (ts - i)", "con->http_status = (ts == 0)", "con->http_status = (ts == i)", "con->http_status = (ts_str != 0)", "con->http_status = (ts_str != md5_str)", "con->http_status = (ts_str == 0)", "con->http_status = (ts_str == md5_str)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2600929097456657, -6.0532461787456651, -6.4801726867456653, -4.5501841254456652, -6.212236305745666, -4.9992218057456661, -4.9992218057456661, -5.103549805745665, -4.9992218057456661, -5.2640033057456659, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -6.1769955057456656, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -6.1769955057456656, -6.1769955057456656, -6.1769955057456656, -6.1769955057456656, -6.1769955057456656, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -6.1769955057456656, -6.1769955057456656, -6.1769955057456656, -5.0891636357456651, -6.1769955057456656, -6.1769955057456656, -5.3330905057456652, -5.3330905057456652, -5.3330905057456652, -5.7700555057456651, -6.1769955057456656, -6.1769955057456656, -6.1769955057456656, -5.3330905057456652, -5.3330905057456652, -5.7700555057456651, -5.3330905057456652]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	13,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	14,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	15,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	16,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	17,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	18,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	19,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	20,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	21,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	22,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	23,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	24,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	25,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	26,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	27,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	28,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	29,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	30,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	31,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	32,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	33,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	34,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	35,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	36,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	37,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	38,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	39,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	40,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	41,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	42,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	43,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	44,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	45,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	46,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	47,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	48,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	49,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	50,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	51,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	52,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	53,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	54,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	55,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	56,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	57,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	58,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	59,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	60,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	61,
									"scores":	[-3.9322257127456655]
								}]
						}]
				}, {
					"line":	286,
					"switches":	[{
							"switch":	71,
							"types":	[[], [], [], [], [392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], [], [], [], [], [], []],
							"begin_line":	287,
							"begin_column":	1,
							"end_line":	287,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 0;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 16;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 1;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 213;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 219;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 225;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 234;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 244;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 251;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 261;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 268;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 282;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 310;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 324;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 32;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 403;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 408;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 4;\n", "if (__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.912023005428146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-3.912023005428146]
								}, {
									"case":	97,
									"scores":	[-3.912023005428146]
								}, {
									"case":	98,
									"scores":	[-3.912023005428146]
								}, {
									"case":	99,
									"scores":	[-3.912023005428146]
								}, {
									"case":	100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	225,
									"scores":	[-3.912023005428146]
								}, {
									"case":	226,
									"scores":	[-3.912023005428146]
								}, {
									"case":	227,
									"scores":	[-3.912023005428146]
								}, {
									"case":	228,
									"scores":	[-3.912023005428146]
								}, {
									"case":	229,
									"scores":	[-3.912023005428146]
								}, {
									"case":	230,
									"scores":	[-3.912023005428146]
								}, {
									"case":	231,
									"scores":	[-3.912023005428146]
								}, {
									"case":	232,
									"scores":	[-3.912023005428146]
								}, {
									"case":	233,
									"scores":	[-3.912023005428146]
								}, {
									"case":	234,
									"scores":	[-3.912023005428146]
								}, {
									"case":	235,
									"scores":	[-3.912023005428146]
								}, {
									"case":	236,
									"scores":	[-3.912023005428146]
								}, {
									"case":	237,
									"scores":	[-3.912023005428146]
								}, {
									"case":	238,
									"scores":	[-3.912023005428146]
								}, {
									"case":	239,
									"scores":	[-3.912023005428146]
								}, {
									"case":	240,
									"scores":	[-3.912023005428146]
								}, {
									"case":	241,
									"scores":	[-3.912023005428146]
								}, {
									"case":	242,
									"scores":	[-3.912023005428146]
								}, {
									"case":	243,
									"scores":	[-3.912023005428146]
								}, {
									"case":	244,
									"scores":	[-3.912023005428146]
								}, {
									"case":	245,
									"scores":	[-3.912023005428146]
								}, {
									"case":	246,
									"scores":	[-3.912023005428146]
								}, {
									"case":	247,
									"scores":	[-3.912023005428146]
								}, {
									"case":	248,
									"scores":	[-3.912023005428146]
								}, {
									"case":	249,
									"scores":	[-3.912023005428146]
								}, {
									"case":	250,
									"scores":	[-3.912023005428146]
								}, {
									"case":	251,
									"scores":	[-3.912023005428146]
								}, {
									"case":	252,
									"scores":	[-3.912023005428146]
								}, {
									"case":	253,
									"scores":	[-3.912023005428146]
								}, {
									"case":	254,
									"scores":	[-3.912023005428146]
								}, {
									"case":	255,
									"scores":	[-3.912023005428146]
								}, {
									"case":	256,
									"scores":	[-3.912023005428146]
								}, {
									"case":	257,
									"scores":	[-3.912023005428146]
								}, {
									"case":	258,
									"scores":	[-3.912023005428146]
								}, {
									"case":	259,
									"scores":	[-3.912023005428146]
								}, {
									"case":	260,
									"scores":	[-3.912023005428146]
								}, {
									"case":	261,
									"scores":	[-3.912023005428146]
								}, {
									"case":	262,
									"scores":	[-3.912023005428146]
								}, {
									"case":	263,
									"scores":	[-3.912023005428146]
								}, {
									"case":	264,
									"scores":	[-3.912023005428146]
								}, {
									"case":	265,
									"scores":	[-3.912023005428146]
								}, {
									"case":	266,
									"scores":	[-3.912023005428146]
								}, {
									"case":	267,
									"scores":	[-3.912023005428146]
								}, {
									"case":	268,
									"scores":	[-3.912023005428146]
								}, {
									"case":	269,
									"scores":	[-3.912023005428146]
								}, {
									"case":	270,
									"scores":	[-3.912023005428146]
								}, {
									"case":	271,
									"scores":	[-3.912023005428146]
								}, {
									"case":	272,
									"scores":	[-3.912023005428146]
								}, {
									"case":	273,
									"scores":	[-3.912023005428146]
								}, {
									"case":	274,
									"scores":	[-3.912023005428146]
								}, {
									"case":	275,
									"scores":	[-3.912023005428146]
								}, {
									"case":	276,
									"scores":	[-3.912023005428146]
								}, {
									"case":	277,
									"scores":	[-3.912023005428146]
								}, {
									"case":	278,
									"scores":	[-3.912023005428146]
								}, {
									"case":	279,
									"scores":	[-3.912023005428146]
								}, {
									"case":	280,
									"scores":	[-3.912023005428146]
								}, {
									"case":	281,
									"scores":	[-3.912023005428146]
								}, {
									"case":	282,
									"scores":	[-3.912023005428146]
								}, {
									"case":	283,
									"scores":	[-3.912023005428146]
								}, {
									"case":	284,
									"scores":	[-3.912023005428146]
								}, {
									"case":	285,
									"scores":	[-3.912023005428146]
								}, {
									"case":	286,
									"scores":	[-3.912023005428146]
								}, {
									"case":	287,
									"scores":	[-3.912023005428146]
								}, {
									"case":	288,
									"scores":	[-3.912023005428146]
								}, {
									"case":	289,
									"scores":	[-3.912023005428146]
								}, {
									"case":	290,
									"scores":	[-3.912023005428146]
								}, {
									"case":	291,
									"scores":	[-3.912023005428146]
								}, {
									"case":	292,
									"scores":	[-3.912023005428146]
								}, {
									"case":	293,
									"scores":	[-3.912023005428146]
								}, {
									"case":	294,
									"scores":	[-3.912023005428146]
								}, {
									"case":	295,
									"scores":	[-3.912023005428146]
								}, {
									"case":	296,
									"scores":	[-3.912023005428146]
								}, {
									"case":	297,
									"scores":	[-3.912023005428146]
								}, {
									"case":	298,
									"scores":	[-3.912023005428146]
								}, {
									"case":	299,
									"scores":	[-3.912023005428146]
								}, {
									"case":	300,
									"scores":	[-3.912023005428146]
								}, {
									"case":	301,
									"scores":	[-3.912023005428146]
								}, {
									"case":	302,
									"scores":	[-3.912023005428146]
								}, {
									"case":	303,
									"scores":	[-3.912023005428146]
								}, {
									"case":	304,
									"scores":	[-3.912023005428146]
								}, {
									"case":	305,
									"scores":	[-3.912023005428146]
								}, {
									"case":	306,
									"scores":	[-3.912023005428146]
								}, {
									"case":	307,
									"scores":	[-3.912023005428146]
								}, {
									"case":	308,
									"scores":	[-3.912023005428146]
								}, {
									"case":	309,
									"scores":	[-3.912023005428146]
								}, {
									"case":	310,
									"scores":	[-3.912023005428146]
								}, {
									"case":	311,
									"scores":	[-3.912023005428146]
								}, {
									"case":	312,
									"scores":	[-3.912023005428146]
								}, {
									"case":	313,
									"scores":	[-3.912023005428146]
								}, {
									"case":	314,
									"scores":	[-3.912023005428146]
								}, {
									"case":	315,
									"scores":	[-3.912023005428146]
								}, {
									"case":	316,
									"scores":	[-3.912023005428146]
								}, {
									"case":	317,
									"scores":	[-3.912023005428146]
								}, {
									"case":	318,
									"scores":	[-3.912023005428146]
								}, {
									"case":	319,
									"scores":	[-3.912023005428146]
								}, {
									"case":	320,
									"scores":	[-3.912023005428146]
								}, {
									"case":	321,
									"scores":	[-3.912023005428146]
								}, {
									"case":	322,
									"scores":	[-3.912023005428146]
								}, {
									"case":	323,
									"scores":	[-3.912023005428146]
								}, {
									"case":	324,
									"scores":	[-3.912023005428146]
								}, {
									"case":	325,
									"scores":	[-3.912023005428146]
								}, {
									"case":	326,
									"scores":	[-3.912023005428146]
								}, {
									"case":	327,
									"scores":	[-3.912023005428146]
								}, {
									"case":	328,
									"scores":	[-3.912023005428146]
								}, {
									"case":	329,
									"scores":	[-3.912023005428146]
								}, {
									"case":	330,
									"scores":	[-3.912023005428146]
								}, {
									"case":	331,
									"scores":	[-3.912023005428146]
								}, {
									"case":	332,
									"scores":	[-3.912023005428146]
								}, {
									"case":	333,
									"scores":	[-3.912023005428146]
								}, {
									"case":	334,
									"scores":	[-3.912023005428146]
								}, {
									"case":	335,
									"scores":	[-3.912023005428146]
								}, {
									"case":	336,
									"scores":	[-3.912023005428146]
								}, {
									"case":	337,
									"scores":	[-3.912023005428146]
								}, {
									"case":	338,
									"scores":	[-3.912023005428146]
								}, {
									"case":	339,
									"scores":	[-3.912023005428146]
								}, {
									"case":	340,
									"scores":	[-3.912023005428146]
								}, {
									"case":	341,
									"scores":	[-3.912023005428146]
								}, {
									"case":	342,
									"scores":	[-3.912023005428146]
								}, {
									"case":	343,
									"scores":	[-3.912023005428146]
								}, {
									"case":	344,
									"scores":	[-3.912023005428146]
								}, {
									"case":	345,
									"scores":	[-3.912023005428146]
								}, {
									"case":	346,
									"scores":	[-3.912023005428146]
								}, {
									"case":	347,
									"scores":	[-3.912023005428146]
								}, {
									"case":	348,
									"scores":	[-3.912023005428146]
								}, {
									"case":	349,
									"scores":	[-3.912023005428146]
								}, {
									"case":	350,
									"scores":	[-3.912023005428146]
								}, {
									"case":	351,
									"scores":	[-3.912023005428146]
								}, {
									"case":	352,
									"scores":	[-3.912023005428146]
								}, {
									"case":	353,
									"scores":	[-3.912023005428146]
								}, {
									"case":	354,
									"scores":	[-3.912023005428146]
								}, {
									"case":	355,
									"scores":	[-3.912023005428146]
								}, {
									"case":	356,
									"scores":	[-3.912023005428146]
								}, {
									"case":	357,
									"scores":	[-3.912023005428146]
								}, {
									"case":	358,
									"scores":	[-3.912023005428146]
								}, {
									"case":	359,
									"scores":	[-3.912023005428146]
								}, {
									"case":	360,
									"scores":	[-3.912023005428146]
								}, {
									"case":	361,
									"scores":	[-3.912023005428146]
								}, {
									"case":	362,
									"scores":	[-3.912023005428146]
								}, {
									"case":	363,
									"scores":	[-3.912023005428146]
								}, {
									"case":	364,
									"scores":	[-3.912023005428146]
								}, {
									"case":	365,
									"scores":	[-3.912023005428146]
								}, {
									"case":	366,
									"scores":	[-3.912023005428146]
								}, {
									"case":	367,
									"scores":	[-3.912023005428146]
								}, {
									"case":	368,
									"scores":	[-3.912023005428146]
								}, {
									"case":	369,
									"scores":	[-3.912023005428146]
								}, {
									"case":	370,
									"scores":	[-3.912023005428146]
								}, {
									"case":	371,
									"scores":	[-3.912023005428146]
								}, {
									"case":	372,
									"scores":	[-3.912023005428146]
								}, {
									"case":	373,
									"scores":	[-3.912023005428146]
								}, {
									"case":	374,
									"scores":	[-3.912023005428146]
								}, {
									"case":	375,
									"scores":	[-3.912023005428146]
								}, {
									"case":	376,
									"scores":	[-3.912023005428146]
								}, {
									"case":	377,
									"scores":	[-3.912023005428146]
								}, {
									"case":	378,
									"scores":	[-3.912023005428146]
								}, {
									"case":	379,
									"scores":	[-3.912023005428146]
								}, {
									"case":	380,
									"scores":	[-3.912023005428146]
								}, {
									"case":	381,
									"scores":	[-3.912023005428146]
								}, {
									"case":	382,
									"scores":	[-3.912023005428146]
								}, {
									"case":	383,
									"scores":	[-3.912023005428146]
								}, {
									"case":	384,
									"scores":	[-3.912023005428146]
								}, {
									"case":	385,
									"scores":	[-3.912023005428146]
								}, {
									"case":	386,
									"scores":	[-3.912023005428146]
								}, {
									"case":	387,
									"scores":	[-3.912023005428146]
								}, {
									"case":	388,
									"scores":	[-3.912023005428146]
								}, {
									"case":	389,
									"scores":	[-3.912023005428146]
								}, {
									"case":	390,
									"scores":	[-3.912023005428146]
								}, {
									"case":	391,
									"scores":	[-3.912023005428146]
								}, {
									"case":	392,
									"scores":	[-7.2614474544281453, -6.2623366144281452, -6.2623366144281452, -7.6217644144281458, -6.3634768841281453, -7.0326927544281457, -6.6647979144281457, -6.2623366144281452, -6.4395994544281461]
								}, {
									"case":	393,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	394,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	395,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	396,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	397,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	398,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	399,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	400,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	401,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	402,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	403,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	404,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	405,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	406,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	407,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	408,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	409,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}, {
									"case":	410,
									"scores":	[-9.5242292544281462, -8.525118414428146, -8.525118414428146, -9.8845462144281466, -8.6262586841281461, -9.2954745544281465, -8.9275797144281466, -8.525118414428146, -8.7023812544281469]
								}]
						}, {
							"switch":	72,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	287,
							"begin_column":	3,
							"end_line":	287,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L287\", 9, &(con), sizeof (con), &(rel_uri), sizeof (rel_uri), &(ts_str), sizeof (ts_str), &(p), sizeof (p), &(ts), sizeof (ts), &(srv), sizeof (srv), &(i), sizeof (i), &(md5_str), sizeof (md5_str), &(p_d), sizeof (p_d)))\n    return HANDLER_FINISHED;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.7331957394281456, -5.2656583084281454, -5.2656583084281454, -6.7466091894281455, -4.8166206281281454, -6.4786728084281462, -5.3699863084281461, -5.2656583084281454, -5.5304398084281461]
								}]
						}]
				}, {
					"line":	278,
					"switches":	[{
							"switch":	62,
							"types":	[[], [], [], [], [395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247], [], [], [], [366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], [248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365], [], [], [], [], [], []],
							"begin_line":	279,
							"begin_column":	0,
							"end_line":	279,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->conf.allow_http11, 0, sizeof (*(&con->conf.allow_http11)))", "memset(&con->conf.dirlist_encoding, 0, sizeof (*(&con->conf.dirlist_encoding)))", "memset(&con->conf.document_root, 0, sizeof (*(&con->conf.document_root)))", "memset(&con->conf.error_handler, 0, sizeof (*(&con->conf.error_handler)))", "memset(&con->conf.errorfile_prefix, 0, sizeof (*(&con->conf.errorfile_prefix)))", "memset(&con->conf.etag_use_inode, 0, sizeof (*(&con->conf.etag_use_inode)))", "memset(&con->conf.etag_use_mtime, 0, sizeof (*(&con->conf.etag_use_mtime)))", "memset(&con->conf.etag_use_size, 0, sizeof (*(&con->conf.etag_use_size)))", "memset(&con->conf.follow_symlink, 0, sizeof (*(&con->conf.follow_symlink)))", "memset(&con->conf.force_lowercase_filenames, 0, sizeof (*(&con->conf.force_lowercase_filenames)))", "memset(&con->conf.global_bytes_per_second_cnt, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt)))", "memset(&con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(&con->conf.global_bytes_per_second_cnt_ptr)))", "memset(&con->conf.global_kbytes_per_second, 0, sizeof (*(&con->conf.global_kbytes_per_second)))", "memset(&con->conf.is_ssl, 0, sizeof (*(&con->conf.is_ssl)))", "memset(&con->conf.kbytes_per_second, 0, sizeof (*(&con->conf.kbytes_per_second)))", "memset(&con->conf.log_condition_cache_handling, 0, sizeof (*(&con->conf.log_condition_cache_handling)))", "memset(&con->conf.log_condition_handling, 0, sizeof (*(&con->conf.log_condition_handling)))", "memset(&con->conf.log_file_not_found, 0, sizeof (*(&con->conf.log_file_not_found)))", "memset(&con->conf.log_request_handling, 0, sizeof (*(&con->conf.log_request_handling)))", "memset(&con->conf.log_request_header, 0, sizeof (*(&con->conf.log_request_header)))", "memset(&con->conf.log_response_header, 0, sizeof (*(&con->conf.log_response_header)))", "memset(&con->conf.max_connection_idle, 0, sizeof (*(&con->conf.max_connection_idle)))", "memset(&con->conf.max_keep_alive_idle, 0, sizeof (*(&con->conf.max_keep_alive_idle)))", "memset(&con->conf.max_keep_alive_requests, 0, sizeof (*(&con->conf.max_keep_alive_requests)))", "memset(&con->conf.max_read_idle, 0, sizeof (*(&con->conf.max_read_idle)))", "memset(&con->conf.max_request_size, 0, sizeof (*(&con->conf.max_request_size)))", "memset(&con->conf.max_write_idle, 0, sizeof (*(&con->conf.max_write_idle)))", "memset(&con->conf.mimetypes, 0, sizeof (*(&con->conf.mimetypes)))", "memset(&con->conf.range_requests, 0, sizeof (*(&con->conf.range_requests)))", "memset(&con->conf.server_name, 0, sizeof (*(&con->conf.server_name)))", "memset(&con->conf.server_tag, 0, sizeof (*(&con->conf.server_tag)))", "memset(&con->conf.ssl_ca_file, 0, sizeof (*(&con->conf.ssl_ca_file)))", "memset(&con->conf.ssl_cipher_list, 0, sizeof (*(&con->conf.ssl_cipher_list)))", "memset(&con->conf.ssl_ctx, 0, sizeof (*(&con->conf.ssl_ctx)))", "memset(&con->conf.ssl_pemfile, 0, sizeof (*(&con->conf.ssl_pemfile)))", "memset(&con->conf.ssl_use_sslv2, 0, sizeof (*(&con->conf.ssl_use_sslv2)))", "memset(&con->conf.use_ipv6, 0, sizeof (*(&con->conf.use_ipv6)))", "memset(&con->conf.use_xattr, 0, sizeof (*(&con->conf.use_xattr)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->etag_flags, 0, sizeof (*(&con->etag_flags)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->conf.doc_root, 0, sizeof (*(&p->conf.doc_root)))", "memset(&p->conf.secret, 0, sizeof (*(&p->conf.secret)))", "memset(&p->conf.timeout, 0, sizeof (*(&p->conf.timeout)))", "memset(&p->conf.uri_prefix, 0, sizeof (*(&p->conf.uri_prefix)))", "memset(&p->conf.uri_prefix->ptr, 0, sizeof (*(&p->conf.uri_prefix->ptr)))", "memset(&p->conf.uri_prefix->size, 0, sizeof (*(&p->conf.uri_prefix->size)))", "memset(&p->conf.uri_prefix->used, 0, sizeof (*(&p->conf.uri_prefix->used)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->md5, 0, sizeof (*(&p->md5)))", "memset(&p->md5->ptr, 0, sizeof (*(&p->md5->ptr)))", "memset(&p->md5->size, 0, sizeof (*(&p->md5->size)))", "memset(&p->md5->used, 0, sizeof (*(&p->md5->used)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->conf.dirlist_encoding, 0, sizeof (*(con->conf.dirlist_encoding)))", "memset(con->conf.document_root, 0, sizeof (*(con->conf.document_root)))", "memset(con->conf.error_handler, 0, sizeof (*(con->conf.error_handler)))", "memset(con->conf.errorfile_prefix, 0, sizeof (*(con->conf.errorfile_prefix)))", "memset(con->conf.global_bytes_per_second_cnt_ptr, 0, sizeof (*(con->conf.global_bytes_per_second_cnt_ptr)))", "memset(con->conf.mimetypes, 0, sizeof (*(con->conf.mimetypes)))", "memset(con->conf.server_name, 0, sizeof (*(con->conf.server_name)))", "memset(con->conf.server_tag, 0, sizeof (*(con->conf.server_tag)))", "memset(con->conf.ssl_ca_file, 0, sizeof (*(con->conf.ssl_ca_file)))", "memset(con->conf.ssl_cipher_list, 0, sizeof (*(con->conf.ssl_cipher_list)))", "memset(con->conf.ssl_ctx, 0, sizeof (*(con->conf.ssl_ctx)))", "memset(con->conf.ssl_pemfile, 0, sizeof (*(con->conf.ssl_pemfile)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(p, 0, sizeof (*(p)))", "memset(p->conf.doc_root, 0, sizeof (*(p->conf.doc_root)))", "memset(p->conf.secret, 0, sizeof (*(p->conf.secret)))", "memset(p->conf.uri_prefix, 0, sizeof (*(p->conf.uri_prefix)))", "memset(p->conf.uri_prefix->ptr, 0, sizeof (*(p->conf.uri_prefix->ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->md5, 0, sizeof (*(p->md5)))", "memset(p->md5->ptr, 0, sizeof (*(p->md5->ptr)))", "memset(srv, 0, sizeof (*(srv)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, (p)->md5->used - 1)", "buffer_append_string((p)->md5, rel_uri)", "buffer_append_string(p->md5, (md5_str))", "buffer_append_string(p->md5, (rel_uri))", "buffer_append_string(p->md5, (ts_str))", "buffer_append_string_buffer((con)->physical.path, con->physical.rel_path)", "buffer_append_string_buffer(con->physical.path, (con)->physical.rel_path)", "buffer_append_string_len((p)->md5, ts_str, 8)", "buffer_append_string_len(p->md5, (md5_str), 8)", "buffer_append_string_len(p->md5, (rel_uri), 8)", "buffer_append_string_len(p->md5, (ts_str), 8)", "buffer_copy_string((con)->physical.rel_path, rel_uri)", "buffer_copy_string(con->physical.rel_path, (md5_str))", "buffer_copy_string(con->physical.rel_path, (rel_uri))", "buffer_copy_string(con->physical.rel_path, (ts_str))", "buffer_copy_string_buffer((con)->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer((con)->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer((p)->md5, p->conf.secret)", "buffer_copy_string_buffer(con->physical.doc_root, (p)->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, (con)->physical.doc_root)", "buffer_copy_string_buffer(p->md5, (p)->conf.secret)", "buffer_copy_string_hex((p)->md5, (char *)HA1, 16)", "buffer_free((p)->md5)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (16)", "con->http_status = (213)", "con->http_status = (219)", "con->http_status = (225)", "con->http_status = (234)", "con->http_status = (244)", "con->http_status = (251)", "con->http_status = (261)", "con->http_status = (268)", "con->http_status = (282)", "con->http_status = (310)", "con->http_status = (32)", "con->http_status = (324)", "con->http_status = (4)", "con->http_status = (403)", "con->http_status = (408)", "con->http_status = (8)", "free((p))", "free((p)->config_storage)", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (md5_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (rel_uri), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, (ts_str), p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, (p)->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && (p)->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? (p)->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, (con)->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && (con)->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? (con)->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, (p)->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && (p)->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? (p)->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", (con)->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && (con)->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? (con)->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, (p)->conf.timeout)", "md5_str = (con)->uri.path->ptr + p->conf.uri_prefix->used - 1", "md5_str = (md5_str)", "md5_str = (rel_uri)", "md5_str = (ts_str)", "md5_str = con->uri.path->ptr + (p)->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection((srv), con, p)", "mod_secdownload_patch_connection(srv, (con), p)", "mod_secdownload_patch_connection(srv, con, (p))", "rel_uri = (md5_str) + 8", "rel_uri = (md5_str)", "rel_uri = (rel_uri) + 8", "rel_uri = (rel_uri)", "rel_uri = (ts_str) + 8", "rel_uri = (ts_str)", "ts = (0)", "ts = (1)", "ts = (16)", "ts = (213)", "ts = (219)", "ts = (225)", "ts = (234)", "ts = (244)", "ts = (251)", "ts = (261)", "ts = (268)", "ts = (282)", "ts = (310)", "ts = (32)", "ts = (324)", "ts = (4)", "ts = (403)", "ts = (408)", "ts = (8)", "ts = (ts << 4) + hex2int(*((md5_str) + i))", "ts = (ts << 4) + hex2int(*((rel_uri) + i))", "ts = (ts << 4) + hex2int(*((ts_str) + i))", "ts = (ts)", "ts_str = (md5_str) + 32 + 1", "ts_str = (md5_str)", "ts_str = (rel_uri) + 32 + 1", "ts_str = (rel_uri)", "ts_str = (ts_str) + 32 + 1", "ts_str = (ts_str)", "MD5_Final(HA1, &Md5Ctx)", "MD5_Init(&Md5Ctx)", "MD5_Update(&Md5Ctx, (unsigned char *)p->md5->ptr, p->md5->used - 1)", "buffer_append_string(p->md5, rel_uri)", "buffer_append_string_buffer(con->physical.path, con->physical.rel_path)", "buffer_append_string_len(p->md5, ts_str, 8)", "buffer_copy_string(con->physical.rel_path, rel_uri)", "buffer_copy_string_buffer(con->physical.doc_root, p->conf.doc_root)", "buffer_copy_string_buffer(con->physical.path, con->physical.doc_root)", "buffer_copy_string_buffer(p->md5, p->conf.secret)", "buffer_copy_string_hex(p->md5, (char *)HA1, 16)", "con->http_status = 403", "con->http_status = 408", "log_trace(\"%s.%d: (error) secdownload.document-root has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 219, \"\")", "log_trace(\"%s.%d: (error) secdownload.secret has to be set: %s\", remove_path(\"src/mod_secure_download.c\"), 213, \"\")", "log_trace(\"%s.%d: (trace) -- handling %s in mod_secdownload\", remove_path(\"src/mod_secure_download.c\"), 225, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 didn't matched: %s == %s\", remove_path(\"src/mod_secure_download.c\"), 310, md5_str, p->md5 && p->md5->ptr ? p->md5->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) MD5 matched, timestamp is ok, sending %s\", remove_path(\"src/mod_secure_download.c\"), 324, con->physical.path && con->physical.path->ptr ? con->physical.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 32-char hex-val as md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 244, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) expected a 8-char hex-val after md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 261, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the md5-hash: %s\", remove_path(\"src/mod_secure_download.c\"), 251, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) missing a / after the timestamp: %s\", remove_path(\"src/mod_secure_download.c\"), 268, con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) prefix '%s' didn't matched the url: %s\", remove_path(\"src/mod_secure_download.c\"), 234, p->conf.uri_prefix && p->conf.uri_prefix->ptr ? p->conf.uri_prefix->ptr : \"(null)\", con->uri.path && con->uri.path->ptr ? con->uri.path->ptr : \"(null)\")", "log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout)", "md5_str = con->uri.path->ptr + p->conf.uri_prefix->used - 1", "mod_secdownload_patch_connection(srv, con, p)", "rel_uri = ts_str + 8", "ts = (ts << 4) + hex2int(*(ts_str + i))", "ts_str = md5_str + 32 + 1", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 0;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 16;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 1;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 213;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 219;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 225;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 234;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 244;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 251;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 261;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 268;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 282;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 310;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 324;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 32;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 403;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 408;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 4;\n", "if (__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	2,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	3,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	4,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	5,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	6,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	7,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	8,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	9,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	10,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	11,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	12,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	13,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	14,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	15,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	16,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	17,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	18,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	19,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	20,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	21,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	22,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	23,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	24,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	25,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	26,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	27,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	28,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	29,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	30,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	31,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	32,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	33,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	34,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	35,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	36,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	37,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	38,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	39,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	40,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	41,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	42,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	43,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	44,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	45,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	46,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	47,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	48,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	49,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	50,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	51,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	52,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	53,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	54,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	55,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	56,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	57,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	58,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	59,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	60,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	61,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	62,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	63,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	64,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	65,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	66,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	67,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	68,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	69,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	70,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	71,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	72,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	73,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	74,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	75,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	76,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	77,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	78,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	79,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	80,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	81,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	82,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	83,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	84,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	85,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	86,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	87,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	88,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	89,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	90,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	91,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	92,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	93,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	94,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	95,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	96,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	97,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	98,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	99,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	100,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	101,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	102,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	103,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	104,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	105,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	106,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	107,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	108,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	109,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	110,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	111,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	112,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	113,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	114,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	115,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	116,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	117,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	118,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	119,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	120,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	121,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	122,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	123,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	124,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	125,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	126,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	127,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	128,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	129,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	130,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	131,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	132,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	133,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	134,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	135,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	136,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	137,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	138,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	139,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	140,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	141,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	142,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	143,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	144,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	145,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	146,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	147,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	148,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	149,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	150,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	151,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	152,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	153,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	154,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	155,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	156,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	157,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	158,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	159,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	160,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	161,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	162,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	163,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	164,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	165,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	166,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	167,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	168,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	169,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	170,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	171,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	172,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	173,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	174,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	175,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	176,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	177,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	178,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	179,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	180,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	181,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	182,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	183,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	184,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	185,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	186,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	187,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	188,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	189,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	190,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	191,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	192,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	193,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	194,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	195,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	196,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	197,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	198,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	199,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	200,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	201,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	202,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	203,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	204,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	205,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	206,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	207,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	208,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	209,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	210,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	211,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	212,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	213,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	214,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	215,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	216,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	217,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	218,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	219,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	220,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	221,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	222,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	223,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	224,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	225,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	226,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	227,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	228,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	229,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	230,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	231,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	232,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	233,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	234,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	235,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	236,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	237,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	238,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	239,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	240,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	241,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	242,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	243,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	244,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	245,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	246,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	247,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	248,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	249,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	250,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	251,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	252,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	253,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	254,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	255,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	256,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	257,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	258,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	259,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	260,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	261,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	262,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	263,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	264,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	265,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	266,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	267,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	268,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	269,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	270,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	271,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	272,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	273,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	274,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	275,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	276,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	277,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	278,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	279,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	280,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	281,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	282,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	283,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	284,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	285,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	286,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	287,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	288,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	289,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	290,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	291,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	292,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	293,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	294,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	295,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	296,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	297,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	298,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	299,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	300,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	301,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	302,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	303,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	304,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	305,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	306,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	307,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	308,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	309,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	310,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	311,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	312,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	313,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	314,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	315,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	316,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	317,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	318,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	319,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	320,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	321,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	322,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	323,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	324,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	325,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	326,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	327,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	328,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	329,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	330,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	331,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	332,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	333,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	334,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	335,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	336,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	337,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	338,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	339,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	340,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	341,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	342,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	343,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	344,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	345,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	346,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	347,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	348,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	349,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	350,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	351,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	352,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	353,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	354,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	355,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	356,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	357,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	358,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	359,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	360,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	361,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	362,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	363,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	364,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	365,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	366,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	367,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	368,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	369,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	370,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	371,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	372,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	373,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	374,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	375,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	376,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	377,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	378,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	379,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	380,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	381,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	382,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	383,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	384,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	385,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	386,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	387,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	388,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	389,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	390,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	391,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	392,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	393,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	394,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	395,
									"scores":	[-8.5510826486982232, -8.3578926086982239, -4.402959100698224, -8.4503045006982234, -7.2801347216982251, -8.4520865586982232, -7.8970473733982249, -7.6016072166982234, -8.6125285446982236, -9.1930064246982237, -9.1930064246982237, -8.1698425246982236, -9.0444354246982233, -9.0444354246982233, -8.3471053646982245, -9.0444354246982233, -9.0444354246982233, -8.9432261246982243, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -9.0444354246982233, -9.0444354246982233, -9.0444354246982233, -9.0444354246982233, -8.5883244246982233, -9.0444354246982233, -9.0444354246982233, -9.0444354246982233, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -9.0444354246982233, -9.0444354246982233, -9.0444354246982233, -9.0444354246982233, -9.0444354246982233, -8.9432261246982243, -8.8538034246982242, -8.8538034246982242, -9.0444354246982233, -9.0444354246982233, -9.0444354246982233, -9.0444354246982233, -9.0444354246982233, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -9.0444354246982233, -9.0444354246982233, -9.0444354246982233, -8.8538034246982242, -8.8538034246982242, -8.8538034246982242, -8.9432261246982243]
								}, {
									"case":	396,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	397,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	398,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	399,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	400,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	401,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	402,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	403,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	404,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	405,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	406,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	407,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	408,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	409,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	410,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	411,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	412,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}, {
									"case":	413,
									"scores":	[-10.813864448698224, -10.620674408698225, -6.6657409006982249, -10.713086300698224, -9.5429165216982259, -10.714868358698224, -10.159829173398224, -9.8643890166982242, -10.875310344698224, -11.455788224698225, -11.455788224698225, -10.432624324698224, -11.307217224698224, -11.307217224698224, -10.609887164698225, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -10.851106224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.206007924698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.307217224698224, -11.307217224698224, -11.307217224698224, -11.116585224698225, -11.116585224698225, -11.116585224698225, -11.206007924698225]
								}]
						}, {
							"switch":	63,
							"types":	[[4], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3]],
							"begin_line":	279,
							"begin_column":	2,
							"end_line":	288,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L279\", 144, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n    }\n    con->http_status = 408;\n    return HANDLER_FINISHED;\n}\n", "if ((srv->cur_ts - ts > p->conf.timeout || srv->cur_ts - ts < -p->conf.timeout) || __is_neg(\"\", \"L279\", 144, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n    }\n    con->http_status = 408;\n    return HANDLER_FINISHED;\n}\n", "if (srv->cur_ts - ts > p->conf.timeout) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n    }\n    con->http_status = 408;\n    return HANDLER_FINISHED;\n}\n", "if ((srv->cur_ts - ts > p->conf.timeout || srv->cur_ts - ts < -p->conf.timeout) && !__is_neg(\"\", \"L279\", 144, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(con->conf.log_request_handling), sizeof (con->conf.log_request_handling), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(con->http_status), sizeof (con->http_status), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->etag_flags), sizeof (con->etag_flags), &(con->conf.mimetypes), sizeof (con->conf.mimetypes), &(con->conf.document_root), sizeof (con->conf.document_root), &(con->conf.server_name), sizeof (con->conf.server_name), &(con->conf.error_handler), sizeof (con->conf.error_handler), &(con->conf.server_tag), sizeof (con->conf.server_tag), &(con->conf.dirlist_encoding), sizeof (con->conf.dirlist_encoding), &(con->conf.errorfile_prefix), sizeof (con->conf.errorfile_prefix), &(con->conf.max_keep_alive_requests), sizeof (con->conf.max_keep_alive_requests), &(con->conf.max_keep_alive_idle), sizeof (con->conf.max_keep_alive_idle), &(con->conf.max_read_idle), sizeof (con->conf.max_read_idle), &(con->conf.max_write_idle), sizeof (con->conf.max_write_idle), &(con->conf.max_connection_idle), sizeof (con->conf.max_connection_idle), &(con->conf.use_xattr), sizeof (con->conf.use_xattr), &(con->conf.follow_symlink), sizeof (con->conf.follow_symlink), &(con->conf.range_requests), sizeof (con->conf.range_requests), &(con->conf.log_file_not_found), sizeof (con->conf.log_file_not_found), &(con->conf.log_request_header), sizeof (con->conf.log_request_header), &(con->conf.log_response_header), sizeof (con->conf.log_response_header), &(con->conf.log_condition_handling), sizeof (con->conf.log_condition_handling), &(con->conf.log_condition_cache_handling), sizeof (con->conf.log_condition_cache_handling), &(con->conf.ssl_pemfile), sizeof (con->conf.ssl_pemfile), &(con->conf.ssl_ca_file), sizeof (con->conf.ssl_ca_file), &(con->conf.ssl_cipher_list), sizeof (con->conf.ssl_cipher_list), &(con->conf.ssl_use_sslv2), sizeof (con->conf.ssl_use_sslv2), &(con->conf.use_ipv6), sizeof (con->conf.use_ipv6), &(con->conf.is_ssl), sizeof (con->conf.is_ssl), &(con->conf.allow_http11), sizeof (con->conf.allow_http11), &(con->conf.etag_use_inode), sizeof (con->conf.etag_use_inode), &(con->conf.etag_use_mtime), sizeof (con->conf.etag_use_mtime), &(con->conf.etag_use_size), sizeof (con->conf.etag_use_size), &(con->conf.force_lowercase_filenames), sizeof (con->conf.force_lowercase_filenames), &(con->conf.max_request_size), sizeof (con->conf.max_request_size), &(con->conf.kbytes_per_second), sizeof (con->conf.kbytes_per_second), &(con->conf.global_kbytes_per_second), sizeof (con->conf.global_kbytes_per_second), &(con->conf.global_bytes_per_second_cnt), sizeof (con->conf.global_bytes_per_second_cnt), &(con->conf.global_bytes_per_second_cnt_ptr), sizeof (con->conf.global_bytes_per_second_cnt_ptr), &(con->conf.ssl_ctx), sizeof (con->conf.ssl_ctx))) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n    }\n    con->http_status = 408;\n    return HANDLER_FINISHED;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6519925400281439, -5.3226751050281464, -2.3783258870281463, -4.5272620400281456, -2.6713714400281461, -5.7315723940281442, -4.7418047400281456, -3.0049452117281463, -4.953289565028145, -5.4619604130281454, -4.5356786310281452, -5.6760079400281445, -5.6760079400281445, -4.4079360400281455, -5.5857097400281441, -5.5857097400281441, -4.6727175400281453, -5.5857097400281441, -5.5857097400281441, -5.1787697400281445, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.341782870028144, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.1787697400281445, -4.7418047400281456, -4.7418047400281456, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -5.1787697400281445, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -5.5857097400281441, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -4.4978778700281454, -5.5857097400281441, -5.5857097400281441, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -5.1787697400281445, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -4.7418047400281456, -4.7418047400281456, -5.1787697400281445, -4.7418047400281456, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -5.5857097400281441, -5.5857097400281441, -5.5857097400281441, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.4978778700281454, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -4.7418047400281456, -5.1787697400281445, -5.5857097400281441]
								}, {
									"case":	2,
									"scores":	[-7.9086300224281461, -7.579312587428146, -4.6349633694281458, -6.783899522428146, -4.9280089224281456, -7.9882098764281455, -6.998442222428146, -5.2615826941281467, -7.2099270474281463, -7.7185978954281449, -6.7923161134281456, -7.9326454224281466, -7.9326454224281466, -6.6645735224281459, -7.8423472224281454, -7.8423472224281454, -6.9293550224281457, -7.8423472224281454, -7.8423472224281454, -7.4354072224281458, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.5984203524281462, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.4354072224281458, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.4354072224281458, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.7545153524281458, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.4354072224281458, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -7.4354072224281458, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.7545153524281458, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.4354072224281458, -7.8423472224281454]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-7.9086300224281461, -7.579312587428146, -4.6349633694281458, -6.783899522428146, -4.9280089224281456, -7.9882098764281455, -6.998442222428146, -5.2615826941281467, -7.2099270474281463, -7.7185978954281449, -6.7923161134281456, -7.9326454224281466, -7.9326454224281466, -6.6645735224281459, -7.8423472224281454, -7.8423472224281454, -6.9293550224281457, -7.8423472224281454, -7.8423472224281454, -7.4354072224281458, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.5984203524281462, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.4354072224281458, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.4354072224281458, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.7545153524281458, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.4354072224281458, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -7.4354072224281458, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.8423472224281454, -7.8423472224281454, -7.8423472224281454, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.7545153524281458, -6.998442222428146, -6.998442222428146, -6.998442222428146, -6.998442222428146, -7.4354072224281458, -7.8423472224281454]
								}]
						}, {
							"switch":	73,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	279,
							"begin_column":	2,
							"end_line":	288,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)))\n    if (srv->cur_ts - ts > p->conf.timeout || srv->cur_ts - ts < -p->conf.timeout) {\n        if (con->conf.log_request_handling) {\n            log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n        }\n        con->http_status = 408;\n        return HANDLER_FINISHED;\n    }\n", "if (!__is_neg(\"\", \"L279\", 64, &(srv), sizeof (srv), &(p), sizeof (p), &(ts), sizeof (ts), &(srv->cur_ts), sizeof (srv->cur_ts), &(p->conf.timeout), sizeof (p->conf.timeout), &(con), sizeof (con), &(ts_str), sizeof (ts_str), &(i), sizeof (i), &(rel_uri), sizeof (rel_uri), &(p->md5), sizeof (p->md5), &(p->conf.secret), sizeof (p->conf.secret), &(md5_str), sizeof (md5_str), &(p->conf.doc_root), sizeof (p->conf.doc_root), &(p->conf.uri_prefix), sizeof (p->conf.uri_prefix), &(p_d), sizeof (p_d), &(srv->ev), sizeof (srv->ev), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(p->id), sizeof (p->id), &(p->config_storage), sizeof (p->config_storage)) && (srv->cur_ts - ts > p->conf.timeout || srv->cur_ts - ts < -p->conf.timeout)) {\n    if (con->conf.log_request_handling) {\n        log_trace(\"%s.%d: (trace) timestamp is too old: %ld, timeout: %d\", remove_path(\"src/mod_secure_download.c\"), 282, ts, p->conf.timeout);\n    }\n    con->http_status = 408;\n    return HANDLER_FINISHED;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9476919246982236, -6.6183744896982244, -3.6740252716982242, -5.8229614246982235, -3.967070824698224, -7.0272717786982231, -4.3006445963982243, -6.2489889496982238, -5.831378015698224, -6.9717073246982242, -6.9717073246982242, -5.7036354246982235, -6.881409124698223, -6.881409124698223, -5.9684169246982233, -6.881409124698223, -6.881409124698223, -6.4744691246982233, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.881409124698223, -6.881409124698223, -6.881409124698223, -6.881409124698223, -6.6374822546982237, -6.881409124698223, -6.881409124698223, -6.881409124698223, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.881409124698223, -6.881409124698223, -6.881409124698223, -6.881409124698223, -6.881409124698223, -6.4744691246982233, -6.0375041246982235, -6.0375041246982235, -6.881409124698223, -6.881409124698223, -6.881409124698223, -6.881409124698223, -6.881409124698223, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.881409124698223, -6.881409124698223, -6.881409124698223, -6.0375041246982235, -6.0375041246982235, -6.0375041246982235, -6.4744691246982233]
								}, {
									"case":	2,
									"scores":	[-9.2477921546982227, -8.9184747196982244, -5.9741255016982233, -8.1230616546982244, -6.2671710546982231, -9.327372008698223, -6.6007448263982234, -8.5490891796982229, -8.131478245698224, -9.2718075546982242, -9.2718075546982242, -8.0037356546982235, -9.1815093546982229, -9.1815093546982229, -8.2685171546982232, -9.1815093546982229, -9.1815093546982229, -8.7745693546982242, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -9.1815093546982229, -9.1815093546982229, -9.1815093546982229, -9.1815093546982229, -8.9375824846982237, -9.1815093546982229, -9.1815093546982229, -9.1815093546982229, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -9.1815093546982229, -9.1815093546982229, -9.1815093546982229, -9.1815093546982229, -9.1815093546982229, -8.7745693546982242, -8.3376043546982235, -8.3376043546982235, -9.1815093546982229, -9.1815093546982229, -9.1815093546982229, -9.1815093546982229, -9.1815093546982229, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -9.1815093546982229, -9.1815093546982229, -9.1815093546982229, -8.3376043546982235, -8.3376043546982235, -8.3376043546982235, -8.7745693546982242]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	3,
			"size":	3
		}, {
			"switch":	1,
			"case":	1,
			"size":	3
		}, {
			"switch":	1,
			"case":	2,
			"size":	3
		}, {
			"switch":	1,
			"case":	3,
			"size":	3
		}, {
			"switch":	2,
			"case":	1,
			"size":	3
		}, {
			"switch":	3,
			"case":	3,
			"size":	3
		}, {
			"switch":	4,
			"case":	3,
			"size":	3
		}, {
			"switch":	4,
			"case":	4,
			"size":	3
		}, {
			"switch":	5,
			"case":	1,
			"size":	3
		}, {
			"switch":	5,
			"case":	2,
			"size":	3
		}, {
			"switch":	5,
			"case":	3,
			"size":	3
		}, {
			"switch":	6,
			"case":	1,
			"size":	3
		}, {
			"switch":	7,
			"case":	1,
			"size":	3
		}, {
			"switch":	8,
			"case":	3,
			"size":	3
		}, {
			"switch":	9,
			"case":	1,
			"size":	3
		}, {
			"switch":	9,
			"case":	2,
			"size":	3
		}, {
			"switch":	9,
			"case":	3,
			"size":	3
		}, {
			"switch":	10,
			"case":	183,
			"size":	35
		}, {
			"switch":	10,
			"case":	184,
			"size":	35
		}, {
			"switch":	10,
			"case":	185,
			"size":	35
		}, {
			"switch":	12,
			"case":	1,
			"size":	27
		}, {
			"switch":	12,
			"case":	63,
			"size":	27
		}, {
			"switch":	13,
			"case":	196,
			"size":	27
		}, {
			"switch":	13,
			"case":	197,
			"size":	27
		}, {
			"switch":	13,
			"case":	198,
			"size":	27
		}, {
			"switch":	14,
			"case":	1,
			"size":	27
		}, {
			"switch":	16,
			"case":	1,
			"size":	27
		}, {
			"switch":	16,
			"case":	63,
			"size":	27
		}, {
			"switch":	17,
			"case":	196,
			"size":	27
		}, {
			"switch":	17,
			"case":	197,
			"size":	27
		}, {
			"switch":	17,
			"case":	198,
			"size":	27
		}, {
			"switch":	18,
			"case":	1,
			"size":	27
		}, {
			"switch":	20,
			"case":	1,
			"size":	27
		}, {
			"switch":	20,
			"case":	63,
			"size":	27
		}, {
			"switch":	21,
			"case":	196,
			"size":	27
		}, {
			"switch":	21,
			"case":	197,
			"size":	27
		}, {
			"switch":	21,
			"case":	198,
			"size":	27
		}, {
			"switch":	22,
			"case":	1,
			"size":	27
		}, {
			"switch":	24,
			"case":	1,
			"size":	27
		}, {
			"switch":	24,
			"case":	63,
			"size":	27
		}, {
			"switch":	25,
			"case":	196,
			"size":	27
		}, {
			"switch":	25,
			"case":	197,
			"size":	27
		}, {
			"switch":	25,
			"case":	198,
			"size":	27
		}, {
			"switch":	26,
			"case":	1,
			"size":	27
		}, {
			"switch":	27,
			"case":	1,
			"size":	35
		}, {
			"switch":	28,
			"case":	393,
			"size":	16
		}, {
			"switch":	28,
			"case":	394,
			"size":	16
		}, {
			"switch":	28,
			"case":	395,
			"size":	16
		}, {
			"switch":	28,
			"case":	396,
			"size":	16
		}, {
			"switch":	28,
			"case":	397,
			"size":	16
		}, {
			"switch":	28,
			"case":	398,
			"size":	16
		}, {
			"switch":	28,
			"case":	399,
			"size":	16
		}, {
			"switch":	28,
			"case":	400,
			"size":	16
		}, {
			"switch":	28,
			"case":	401,
			"size":	16
		}, {
			"switch":	28,
			"case":	402,
			"size":	16
		}, {
			"switch":	28,
			"case":	403,
			"size":	16
		}, {
			"switch":	28,
			"case":	404,
			"size":	16
		}, {
			"switch":	28,
			"case":	405,
			"size":	16
		}, {
			"switch":	28,
			"case":	406,
			"size":	16
		}, {
			"switch":	28,
			"case":	407,
			"size":	16
		}, {
			"switch":	28,
			"case":	408,
			"size":	16
		}, {
			"switch":	28,
			"case":	409,
			"size":	16
		}, {
			"switch":	28,
			"case":	410,
			"size":	16
		}, {
			"switch":	28,
			"case":	411,
			"size":	16
		}, {
			"switch":	29,
			"case":	1,
			"size":	16
		}, {
			"switch":	29,
			"case":	2,
			"size":	16
		}, {
			"switch":	29,
			"case":	14,
			"size":	16
		}, {
			"switch":	30,
			"case":	1,
			"size":	16
		}, {
			"switch":	30,
			"case":	2,
			"size":	16
		}, {
			"switch":	31,
			"case":	393,
			"size":	16
		}, {
			"switch":	31,
			"case":	394,
			"size":	16
		}, {
			"switch":	31,
			"case":	395,
			"size":	16
		}, {
			"switch":	31,
			"case":	396,
			"size":	16
		}, {
			"switch":	31,
			"case":	397,
			"size":	16
		}, {
			"switch":	31,
			"case":	398,
			"size":	16
		}, {
			"switch":	31,
			"case":	399,
			"size":	16
		}, {
			"switch":	31,
			"case":	400,
			"size":	16
		}, {
			"switch":	31,
			"case":	401,
			"size":	16
		}, {
			"switch":	31,
			"case":	402,
			"size":	16
		}, {
			"switch":	31,
			"case":	403,
			"size":	16
		}, {
			"switch":	31,
			"case":	404,
			"size":	16
		}, {
			"switch":	31,
			"case":	405,
			"size":	16
		}, {
			"switch":	31,
			"case":	406,
			"size":	16
		}, {
			"switch":	31,
			"case":	407,
			"size":	16
		}, {
			"switch":	31,
			"case":	408,
			"size":	16
		}, {
			"switch":	31,
			"case":	409,
			"size":	16
		}, {
			"switch":	31,
			"case":	410,
			"size":	16
		}, {
			"switch":	31,
			"case":	411,
			"size":	16
		}, {
			"switch":	32,
			"case":	1,
			"size":	16
		}, {
			"switch":	32,
			"case":	2,
			"size":	16
		}, {
			"switch":	32,
			"case":	14,
			"size":	16
		}, {
			"switch":	33,
			"case":	1,
			"size":	16
		}, {
			"switch":	33,
			"case":	2,
			"size":	16
		}, {
			"switch":	34,
			"case":	393,
			"size":	97
		}, {
			"switch":	34,
			"case":	394,
			"size":	97
		}, {
			"switch":	34,
			"case":	395,
			"size":	97
		}, {
			"switch":	34,
			"case":	396,
			"size":	97
		}, {
			"switch":	34,
			"case":	397,
			"size":	97
		}, {
			"switch":	34,
			"case":	398,
			"size":	97
		}, {
			"switch":	34,
			"case":	399,
			"size":	97
		}, {
			"switch":	34,
			"case":	400,
			"size":	97
		}, {
			"switch":	34,
			"case":	401,
			"size":	97
		}, {
			"switch":	34,
			"case":	402,
			"size":	97
		}, {
			"switch":	34,
			"case":	403,
			"size":	97
		}, {
			"switch":	34,
			"case":	404,
			"size":	97
		}, {
			"switch":	34,
			"case":	405,
			"size":	97
		}, {
			"switch":	34,
			"case":	406,
			"size":	97
		}, {
			"switch":	34,
			"case":	407,
			"size":	97
		}, {
			"switch":	34,
			"case":	408,
			"size":	97
		}, {
			"switch":	34,
			"case":	409,
			"size":	97
		}, {
			"switch":	34,
			"case":	410,
			"size":	97
		}, {
			"switch":	34,
			"case":	411,
			"size":	97
		}, {
			"switch":	35,
			"case":	1,
			"size":	97
		}, {
			"switch":	35,
			"case":	2,
			"size":	97
		}, {
			"switch":	35,
			"case":	3,
			"size":	97
		}, {
			"switch":	36,
			"case":	393,
			"size":	97
		}, {
			"switch":	36,
			"case":	394,
			"size":	97
		}, {
			"switch":	36,
			"case":	395,
			"size":	97
		}, {
			"switch":	36,
			"case":	396,
			"size":	97
		}, {
			"switch":	36,
			"case":	397,
			"size":	97
		}, {
			"switch":	36,
			"case":	398,
			"size":	97
		}, {
			"switch":	36,
			"case":	399,
			"size":	97
		}, {
			"switch":	36,
			"case":	400,
			"size":	97
		}, {
			"switch":	36,
			"case":	401,
			"size":	97
		}, {
			"switch":	36,
			"case":	402,
			"size":	97
		}, {
			"switch":	36,
			"case":	403,
			"size":	97
		}, {
			"switch":	36,
			"case":	404,
			"size":	97
		}, {
			"switch":	36,
			"case":	405,
			"size":	97
		}, {
			"switch":	36,
			"case":	406,
			"size":	97
		}, {
			"switch":	36,
			"case":	407,
			"size":	97
		}, {
			"switch":	36,
			"case":	408,
			"size":	97
		}, {
			"switch":	36,
			"case":	409,
			"size":	97
		}, {
			"switch":	36,
			"case":	410,
			"size":	97
		}, {
			"switch":	36,
			"case":	411,
			"size":	97
		}, {
			"switch":	37,
			"case":	1,
			"size":	97
		}, {
			"switch":	38,
			"case":	1,
			"size":	97
		}, {
			"switch":	38,
			"case":	2,
			"size":	97
		}, {
			"switch":	39,
			"case":	394,
			"size":	107
		}, {
			"switch":	39,
			"case":	395,
			"size":	107
		}, {
			"switch":	39,
			"case":	396,
			"size":	107
		}, {
			"switch":	39,
			"case":	397,
			"size":	107
		}, {
			"switch":	39,
			"case":	398,
			"size":	107
		}, {
			"switch":	39,
			"case":	399,
			"size":	107
		}, {
			"switch":	39,
			"case":	400,
			"size":	107
		}, {
			"switch":	39,
			"case":	401,
			"size":	107
		}, {
			"switch":	39,
			"case":	402,
			"size":	107
		}, {
			"switch":	39,
			"case":	403,
			"size":	107
		}, {
			"switch":	39,
			"case":	404,
			"size":	107
		}, {
			"switch":	39,
			"case":	405,
			"size":	107
		}, {
			"switch":	39,
			"case":	406,
			"size":	107
		}, {
			"switch":	39,
			"case":	407,
			"size":	107
		}, {
			"switch":	39,
			"case":	408,
			"size":	107
		}, {
			"switch":	39,
			"case":	409,
			"size":	107
		}, {
			"switch":	39,
			"case":	410,
			"size":	107
		}, {
			"switch":	39,
			"case":	411,
			"size":	107
		}, {
			"switch":	39,
			"case":	412,
			"size":	107
		}, {
			"switch":	40,
			"case":	1,
			"size":	107
		}, {
			"switch":	40,
			"case":	2,
			"size":	107
		}, {
			"switch":	40,
			"case":	28,
			"size":	107
		}, {
			"switch":	41,
			"case":	1,
			"size":	107
		}, {
			"switch":	41,
			"case":	2,
			"size":	107
		}, {
			"switch":	42,
			"case":	394,
			"size":	69
		}, {
			"switch":	42,
			"case":	395,
			"size":	69
		}, {
			"switch":	42,
			"case":	396,
			"size":	69
		}, {
			"switch":	42,
			"case":	397,
			"size":	69
		}, {
			"switch":	42,
			"case":	398,
			"size":	69
		}, {
			"switch":	42,
			"case":	399,
			"size":	69
		}, {
			"switch":	42,
			"case":	400,
			"size":	69
		}, {
			"switch":	42,
			"case":	401,
			"size":	69
		}, {
			"switch":	42,
			"case":	402,
			"size":	69
		}, {
			"switch":	42,
			"case":	403,
			"size":	69
		}, {
			"switch":	42,
			"case":	404,
			"size":	69
		}, {
			"switch":	42,
			"case":	405,
			"size":	69
		}, {
			"switch":	42,
			"case":	406,
			"size":	69
		}, {
			"switch":	42,
			"case":	407,
			"size":	69
		}, {
			"switch":	42,
			"case":	408,
			"size":	69
		}, {
			"switch":	42,
			"case":	409,
			"size":	69
		}, {
			"switch":	42,
			"case":	410,
			"size":	69
		}, {
			"switch":	42,
			"case":	411,
			"size":	69
		}, {
			"switch":	42,
			"case":	412,
			"size":	69
		}, {
			"switch":	43,
			"case":	1,
			"size":	69
		}, {
			"switch":	44,
			"case":	393,
			"size":	89
		}, {
			"switch":	44,
			"case":	394,
			"size":	89
		}, {
			"switch":	44,
			"case":	395,
			"size":	89
		}, {
			"switch":	44,
			"case":	396,
			"size":	89
		}, {
			"switch":	44,
			"case":	397,
			"size":	89
		}, {
			"switch":	44,
			"case":	398,
			"size":	89
		}, {
			"switch":	44,
			"case":	399,
			"size":	89
		}, {
			"switch":	44,
			"case":	400,
			"size":	89
		}, {
			"switch":	44,
			"case":	401,
			"size":	89
		}, {
			"switch":	44,
			"case":	402,
			"size":	89
		}, {
			"switch":	44,
			"case":	403,
			"size":	89
		}, {
			"switch":	44,
			"case":	404,
			"size":	89
		}, {
			"switch":	44,
			"case":	405,
			"size":	89
		}, {
			"switch":	44,
			"case":	406,
			"size":	89
		}, {
			"switch":	44,
			"case":	407,
			"size":	89
		}, {
			"switch":	44,
			"case":	408,
			"size":	89
		}, {
			"switch":	44,
			"case":	409,
			"size":	89
		}, {
			"switch":	44,
			"case":	410,
			"size":	89
		}, {
			"switch":	44,
			"case":	411,
			"size":	89
		}, {
			"switch":	45,
			"case":	1,
			"size":	89
		}, {
			"switch":	45,
			"case":	2,
			"size":	89
		}, {
			"switch":	45,
			"case":	35,
			"size":	89
		}, {
			"switch":	46,
			"case":	1,
			"size":	89
		}, {
			"switch":	46,
			"case":	2,
			"size":	89
		}, {
			"switch":	47,
			"case":	393,
			"size":	89
		}, {
			"switch":	47,
			"case":	394,
			"size":	89
		}, {
			"switch":	47,
			"case":	395,
			"size":	89
		}, {
			"switch":	47,
			"case":	396,
			"size":	89
		}, {
			"switch":	47,
			"case":	397,
			"size":	89
		}, {
			"switch":	47,
			"case":	398,
			"size":	89
		}, {
			"switch":	47,
			"case":	399,
			"size":	89
		}, {
			"switch":	47,
			"case":	400,
			"size":	89
		}, {
			"switch":	47,
			"case":	401,
			"size":	89
		}, {
			"switch":	47,
			"case":	402,
			"size":	89
		}, {
			"switch":	47,
			"case":	403,
			"size":	89
		}, {
			"switch":	47,
			"case":	404,
			"size":	89
		}, {
			"switch":	47,
			"case":	405,
			"size":	89
		}, {
			"switch":	47,
			"case":	406,
			"size":	89
		}, {
			"switch":	47,
			"case":	407,
			"size":	89
		}, {
			"switch":	47,
			"case":	408,
			"size":	89
		}, {
			"switch":	47,
			"case":	409,
			"size":	89
		}, {
			"switch":	47,
			"case":	410,
			"size":	89
		}, {
			"switch":	47,
			"case":	411,
			"size":	89
		}, {
			"switch":	48,
			"case":	1,
			"size":	89
		}, {
			"switch":	48,
			"case":	2,
			"size":	89
		}, {
			"switch":	48,
			"case":	3,
			"size":	89
		}, {
			"switch":	49,
			"case":	1,
			"size":	89
		}, {
			"switch":	49,
			"case":	2,
			"size":	89
		}, {
			"switch":	50,
			"case":	392,
			"size":	9
		}, {
			"switch":	50,
			"case":	393,
			"size":	9
		}, {
			"switch":	50,
			"case":	394,
			"size":	9
		}, {
			"switch":	50,
			"case":	395,
			"size":	9
		}, {
			"switch":	50,
			"case":	396,
			"size":	9
		}, {
			"switch":	50,
			"case":	397,
			"size":	9
		}, {
			"switch":	50,
			"case":	398,
			"size":	9
		}, {
			"switch":	50,
			"case":	399,
			"size":	9
		}, {
			"switch":	50,
			"case":	400,
			"size":	9
		}, {
			"switch":	50,
			"case":	401,
			"size":	9
		}, {
			"switch":	50,
			"case":	402,
			"size":	9
		}, {
			"switch":	50,
			"case":	403,
			"size":	9
		}, {
			"switch":	50,
			"case":	404,
			"size":	9
		}, {
			"switch":	50,
			"case":	405,
			"size":	9
		}, {
			"switch":	50,
			"case":	406,
			"size":	9
		}, {
			"switch":	50,
			"case":	407,
			"size":	9
		}, {
			"switch":	50,
			"case":	408,
			"size":	9
		}, {
			"switch":	50,
			"case":	409,
			"size":	9
		}, {
			"switch":	50,
			"case":	410,
			"size":	9
		}, {
			"switch":	51,
			"case":	1,
			"size":	9
		}, {
			"switch":	52,
			"case":	393,
			"size":	89
		}, {
			"switch":	52,
			"case":	394,
			"size":	89
		}, {
			"switch":	52,
			"case":	395,
			"size":	89
		}, {
			"switch":	52,
			"case":	396,
			"size":	89
		}, {
			"switch":	52,
			"case":	397,
			"size":	89
		}, {
			"switch":	52,
			"case":	398,
			"size":	89
		}, {
			"switch":	52,
			"case":	399,
			"size":	89
		}, {
			"switch":	52,
			"case":	400,
			"size":	89
		}, {
			"switch":	52,
			"case":	401,
			"size":	89
		}, {
			"switch":	52,
			"case":	402,
			"size":	89
		}, {
			"switch":	52,
			"case":	403,
			"size":	89
		}, {
			"switch":	52,
			"case":	404,
			"size":	89
		}, {
			"switch":	52,
			"case":	405,
			"size":	89
		}, {
			"switch":	52,
			"case":	406,
			"size":	89
		}, {
			"switch":	52,
			"case":	407,
			"size":	89
		}, {
			"switch":	52,
			"case":	408,
			"size":	89
		}, {
			"switch":	52,
			"case":	409,
			"size":	89
		}, {
			"switch":	52,
			"case":	410,
			"size":	89
		}, {
			"switch":	52,
			"case":	411,
			"size":	89
		}, {
			"switch":	53,
			"case":	1,
			"size":	89
		}, {
			"switch":	53,
			"case":	2,
			"size":	89
		}, {
			"switch":	53,
			"case":	35,
			"size":	89
		}, {
			"switch":	54,
			"case":	1,
			"size":	89
		}, {
			"switch":	54,
			"case":	2,
			"size":	89
		}, {
			"switch":	55,
			"case":	393,
			"size":	89
		}, {
			"switch":	55,
			"case":	394,
			"size":	89
		}, {
			"switch":	55,
			"case":	395,
			"size":	89
		}, {
			"switch":	55,
			"case":	396,
			"size":	89
		}, {
			"switch":	55,
			"case":	397,
			"size":	89
		}, {
			"switch":	55,
			"case":	398,
			"size":	89
		}, {
			"switch":	55,
			"case":	399,
			"size":	89
		}, {
			"switch":	55,
			"case":	400,
			"size":	89
		}, {
			"switch":	55,
			"case":	401,
			"size":	89
		}, {
			"switch":	55,
			"case":	402,
			"size":	89
		}, {
			"switch":	55,
			"case":	403,
			"size":	89
		}, {
			"switch":	55,
			"case":	404,
			"size":	89
		}, {
			"switch":	55,
			"case":	405,
			"size":	89
		}, {
			"switch":	55,
			"case":	406,
			"size":	89
		}, {
			"switch":	55,
			"case":	407,
			"size":	89
		}, {
			"switch":	55,
			"case":	408,
			"size":	89
		}, {
			"switch":	55,
			"case":	409,
			"size":	89
		}, {
			"switch":	55,
			"case":	410,
			"size":	89
		}, {
			"switch":	55,
			"case":	411,
			"size":	89
		}, {
			"switch":	56,
			"case":	1,
			"size":	89
		}, {
			"switch":	56,
			"case":	2,
			"size":	89
		}, {
			"switch":	56,
			"case":	3,
			"size":	89
		}, {
			"switch":	57,
			"case":	1,
			"size":	89
		}, {
			"switch":	57,
			"case":	2,
			"size":	89
		}, {
			"switch":	58,
			"case":	392,
			"size":	9
		}, {
			"switch":	58,
			"case":	393,
			"size":	9
		}, {
			"switch":	58,
			"case":	394,
			"size":	9
		}, {
			"switch":	58,
			"case":	395,
			"size":	9
		}, {
			"switch":	58,
			"case":	396,
			"size":	9
		}, {
			"switch":	58,
			"case":	397,
			"size":	9
		}, {
			"switch":	58,
			"case":	398,
			"size":	9
		}, {
			"switch":	58,
			"case":	399,
			"size":	9
		}, {
			"switch":	58,
			"case":	400,
			"size":	9
		}, {
			"switch":	58,
			"case":	401,
			"size":	9
		}, {
			"switch":	58,
			"case":	402,
			"size":	9
		}, {
			"switch":	58,
			"case":	403,
			"size":	9
		}, {
			"switch":	58,
			"case":	404,
			"size":	9
		}, {
			"switch":	58,
			"case":	405,
			"size":	9
		}, {
			"switch":	58,
			"case":	406,
			"size":	9
		}, {
			"switch":	58,
			"case":	407,
			"size":	9
		}, {
			"switch":	58,
			"case":	408,
			"size":	9
		}, {
			"switch":	58,
			"case":	409,
			"size":	9
		}, {
			"switch":	58,
			"case":	410,
			"size":	9
		}, {
			"switch":	59,
			"case":	392,
			"size":	9
		}, {
			"switch":	59,
			"case":	393,
			"size":	9
		}, {
			"switch":	59,
			"case":	394,
			"size":	9
		}, {
			"switch":	59,
			"case":	395,
			"size":	9
		}, {
			"switch":	59,
			"case":	396,
			"size":	9
		}, {
			"switch":	59,
			"case":	397,
			"size":	9
		}, {
			"switch":	59,
			"case":	398,
			"size":	9
		}, {
			"switch":	59,
			"case":	399,
			"size":	9
		}, {
			"switch":	59,
			"case":	400,
			"size":	9
		}, {
			"switch":	59,
			"case":	401,
			"size":	9
		}, {
			"switch":	59,
			"case":	402,
			"size":	9
		}, {
			"switch":	59,
			"case":	403,
			"size":	9
		}, {
			"switch":	59,
			"case":	404,
			"size":	9
		}, {
			"switch":	59,
			"case":	405,
			"size":	9
		}, {
			"switch":	59,
			"case":	406,
			"size":	9
		}, {
			"switch":	59,
			"case":	407,
			"size":	9
		}, {
			"switch":	59,
			"case":	408,
			"size":	9
		}, {
			"switch":	59,
			"case":	409,
			"size":	9
		}, {
			"switch":	59,
			"case":	410,
			"size":	9
		}, {
			"switch":	59,
			"case":	411,
			"size":	9
		}, {
			"switch":	60,
			"case":	1,
			"size":	9
		}, {
			"switch":	61,
			"case":	1,
			"size":	9
		}, {
			"switch":	62,
			"case":	395,
			"size":	64
		}, {
			"switch":	62,
			"case":	396,
			"size":	64
		}, {
			"switch":	62,
			"case":	397,
			"size":	64
		}, {
			"switch":	62,
			"case":	398,
			"size":	64
		}, {
			"switch":	62,
			"case":	399,
			"size":	64
		}, {
			"switch":	62,
			"case":	400,
			"size":	64
		}, {
			"switch":	62,
			"case":	401,
			"size":	64
		}, {
			"switch":	62,
			"case":	402,
			"size":	64
		}, {
			"switch":	62,
			"case":	403,
			"size":	64
		}, {
			"switch":	62,
			"case":	404,
			"size":	64
		}, {
			"switch":	62,
			"case":	405,
			"size":	64
		}, {
			"switch":	62,
			"case":	406,
			"size":	64
		}, {
			"switch":	62,
			"case":	407,
			"size":	64
		}, {
			"switch":	62,
			"case":	408,
			"size":	64
		}, {
			"switch":	62,
			"case":	409,
			"size":	64
		}, {
			"switch":	62,
			"case":	410,
			"size":	64
		}, {
			"switch":	62,
			"case":	411,
			"size":	64
		}, {
			"switch":	62,
			"case":	412,
			"size":	64
		}, {
			"switch":	62,
			"case":	413,
			"size":	64
		}, {
			"switch":	63,
			"case":	1,
			"size":	144
		}, {
			"switch":	63,
			"case":	2,
			"size":	144
		}, {
			"switch":	63,
			"case":	4,
			"size":	144
		}, {
			"switch":	64,
			"case":	394,
			"size":	144
		}, {
			"switch":	64,
			"case":	395,
			"size":	144
		}, {
			"switch":	64,
			"case":	396,
			"size":	144
		}, {
			"switch":	64,
			"case":	397,
			"size":	144
		}, {
			"switch":	64,
			"case":	398,
			"size":	144
		}, {
			"switch":	64,
			"case":	399,
			"size":	144
		}, {
			"switch":	64,
			"case":	400,
			"size":	144
		}, {
			"switch":	64,
			"case":	401,
			"size":	144
		}, {
			"switch":	64,
			"case":	402,
			"size":	144
		}, {
			"switch":	64,
			"case":	403,
			"size":	144
		}, {
			"switch":	64,
			"case":	404,
			"size":	144
		}, {
			"switch":	64,
			"case":	405,
			"size":	144
		}, {
			"switch":	64,
			"case":	406,
			"size":	144
		}, {
			"switch":	64,
			"case":	407,
			"size":	144
		}, {
			"switch":	64,
			"case":	408,
			"size":	144
		}, {
			"switch":	64,
			"case":	409,
			"size":	144
		}, {
			"switch":	64,
			"case":	410,
			"size":	144
		}, {
			"switch":	64,
			"case":	411,
			"size":	144
		}, {
			"switch":	64,
			"case":	412,
			"size":	144
		}, {
			"switch":	65,
			"case":	1,
			"size":	144
		}, {
			"switch":	65,
			"case":	2,
			"size":	144
		}, {
			"switch":	65,
			"case":	3,
			"size":	144
		}, {
			"switch":	66,
			"case":	393,
			"size":	96
		}, {
			"switch":	66,
			"case":	394,
			"size":	96
		}, {
			"switch":	66,
			"case":	395,
			"size":	96
		}, {
			"switch":	66,
			"case":	396,
			"size":	96
		}, {
			"switch":	66,
			"case":	397,
			"size":	96
		}, {
			"switch":	66,
			"case":	398,
			"size":	96
		}, {
			"switch":	66,
			"case":	399,
			"size":	96
		}, {
			"switch":	66,
			"case":	400,
			"size":	96
		}, {
			"switch":	66,
			"case":	401,
			"size":	96
		}, {
			"switch":	66,
			"case":	402,
			"size":	96
		}, {
			"switch":	66,
			"case":	403,
			"size":	96
		}, {
			"switch":	66,
			"case":	404,
			"size":	96
		}, {
			"switch":	66,
			"case":	405,
			"size":	96
		}, {
			"switch":	66,
			"case":	406,
			"size":	96
		}, {
			"switch":	66,
			"case":	407,
			"size":	96
		}, {
			"switch":	66,
			"case":	408,
			"size":	96
		}, {
			"switch":	66,
			"case":	409,
			"size":	96
		}, {
			"switch":	66,
			"case":	410,
			"size":	96
		}, {
			"switch":	66,
			"case":	411,
			"size":	96
		}, {
			"switch":	67,
			"case":	1,
			"size":	96
		}, {
			"switch":	68,
			"case":	1,
			"size":	144
		}, {
			"switch":	68,
			"case":	2,
			"size":	144
		}, {
			"switch":	69,
			"case":	393,
			"size":	51
		}, {
			"switch":	69,
			"case":	394,
			"size":	51
		}, {
			"switch":	69,
			"case":	395,
			"size":	51
		}, {
			"switch":	69,
			"case":	396,
			"size":	51
		}, {
			"switch":	69,
			"case":	397,
			"size":	51
		}, {
			"switch":	69,
			"case":	398,
			"size":	51
		}, {
			"switch":	69,
			"case":	399,
			"size":	51
		}, {
			"switch":	69,
			"case":	400,
			"size":	51
		}, {
			"switch":	69,
			"case":	401,
			"size":	51
		}, {
			"switch":	69,
			"case":	402,
			"size":	51
		}, {
			"switch":	69,
			"case":	403,
			"size":	51
		}, {
			"switch":	69,
			"case":	404,
			"size":	51
		}, {
			"switch":	69,
			"case":	405,
			"size":	51
		}, {
			"switch":	69,
			"case":	406,
			"size":	51
		}, {
			"switch":	69,
			"case":	407,
			"size":	51
		}, {
			"switch":	69,
			"case":	408,
			"size":	51
		}, {
			"switch":	69,
			"case":	409,
			"size":	51
		}, {
			"switch":	69,
			"case":	410,
			"size":	51
		}, {
			"switch":	69,
			"case":	411,
			"size":	51
		}, {
			"switch":	70,
			"case":	1,
			"size":	51
		}, {
			"switch":	71,
			"case":	392,
			"size":	9
		}, {
			"switch":	71,
			"case":	393,
			"size":	9
		}, {
			"switch":	71,
			"case":	394,
			"size":	9
		}, {
			"switch":	71,
			"case":	395,
			"size":	9
		}, {
			"switch":	71,
			"case":	396,
			"size":	9
		}, {
			"switch":	71,
			"case":	397,
			"size":	9
		}, {
			"switch":	71,
			"case":	398,
			"size":	9
		}, {
			"switch":	71,
			"case":	399,
			"size":	9
		}, {
			"switch":	71,
			"case":	400,
			"size":	9
		}, {
			"switch":	71,
			"case":	401,
			"size":	9
		}, {
			"switch":	71,
			"case":	402,
			"size":	9
		}, {
			"switch":	71,
			"case":	403,
			"size":	9
		}, {
			"switch":	71,
			"case":	404,
			"size":	9
		}, {
			"switch":	71,
			"case":	405,
			"size":	9
		}, {
			"switch":	71,
			"case":	406,
			"size":	9
		}, {
			"switch":	71,
			"case":	407,
			"size":	9
		}, {
			"switch":	71,
			"case":	408,
			"size":	9
		}, {
			"switch":	71,
			"case":	409,
			"size":	9
		}, {
			"switch":	71,
			"case":	410,
			"size":	9
		}, {
			"switch":	72,
			"case":	1,
			"size":	9
		}, {
			"switch":	73,
			"case":	1,
			"size":	64
		}, {
			"switch":	73,
			"case":	2,
			"size":	64
		}],
	"func_locations":	[{
			"file":	"src/mod_secure_download.c",
			"functions":	[{
					"function":	"VALGRIND_PRINTF",
					"begin":	293,
					"end":	304
				}, {
					"function":	"VALGRIND_PRINTF_BACKTRACE",
					"begin":	308,
					"end":	319
				}, {
					"function":	"_GLIB_CHECKED_ADD_U32",
					"begin":	418,
					"end":	419
				}, {
					"function":	"_GLIB_CHECKED_ADD_U64",
					"begin":	422,
					"end":	424
				}, {
					"function":	"_GLIB_CHECKED_MUL_U32",
					"begin":	420,
					"end":	421
				}, {
					"function":	"_GLIB_CHECKED_MUL_U64",
					"begin":	425,
					"end":	426
				}, {
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"g_autoptr_cleanup_generic_gfree",
					"begin":	24,
					"end":	29
				}, {
					"function":	"g_autoptr_cleanup_gstring_free",
					"begin":	31,
					"end":	36
				}, {
					"function":	"g_bit_nth_lsf_impl",
					"begin":	254,
					"end":	267
				}, {
					"function":	"g_bit_nth_msf_impl",
					"begin":	269,
					"end":	282
				}, {
					"function":	"g_bit_storage_impl",
					"begin":	284,
					"end":	301
				}, {
					"function":	"g_mutex_locker_free",
					"begin":	333,
					"end":	337
				}, {
					"function":	"g_mutex_locker_new",
					"begin":	318,
					"end":	323
				}, {
					"function":	"g_steal_pointer",
					"begin":	186,
					"end":	196
				}, {
					"function":	"g_string_append_c_inline",
					"begin":	160,
					"end":	172
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"glib_auto_cleanup_GCond",
					"begin":	78,
					"end":	78
				}, {
					"function":	"glib_auto_cleanup_GMutex",
					"begin":	76,
					"end":	76
				}, {
					"function":	"glib_auto_cleanup_GQueue",
					"begin":	66,
					"end":	66
				}, {
					"function":	"glib_auto_cleanup_GStrv",
					"begin":	89,
					"end":	89
				}, {
					"function":	"glib_auto_cleanup_GVariantBuilder",
					"begin":	84,
					"end":	84
				}, {
					"function":	"glib_auto_cleanup_GVariantDict",
					"begin":	87,
					"end":	87
				}, {
					"function":	"glib_autoptr_cleanup_GArray",
					"begin":	53,
					"end":	53
				}, {
					"function":	"glib_autoptr_cleanup_GAsyncQueue",
					"begin":	41,
					"end":	41
				}, {
					"function":	"glib_autoptr_cleanup_GBookmarkFile",
					"begin":	42,
					"end":	42
				}, {
					"function":	"glib_autoptr_cleanup_GByteArray",
					"begin":	55,
					"end":	55
				}, {
					"function":	"glib_autoptr_cleanup_GBytes",
					"begin":	43,
					"end":	43
				}, {
					"function":	"glib_autoptr_cleanup_GChecksum",
					"begin":	44,
					"end":	44
				}, {
					"function":	"glib_autoptr_cleanup_GDateTime",
					"begin":	45,
					"end":	45
				}, {
					"function":	"glib_autoptr_cleanup_GDir",
					"begin":	46,
					"end":	46
				}, {
					"function":	"glib_autoptr_cleanup_GError",
					"begin":	47,
					"end":	47
				}, {
					"function":	"glib_autoptr_cleanup_GHashTable",
					"begin":	48,
					"end":	48
				}, {
					"function":	"glib_autoptr_cleanup_GHmac",
					"begin":	49,
					"end":	49
				}, {
					"function":	"glib_autoptr_cleanup_GIOChannel",
					"begin":	50,
					"end":	50
				}, {
					"function":	"glib_autoptr_cleanup_GKeyFile",
					"begin":	51,
					"end":	51
				}, {
					"function":	"glib_autoptr_cleanup_GList",
					"begin":	52,
					"end":	52
				}, {
					"function":	"glib_autoptr_cleanup_GMainContext",
					"begin":	56,
					"end":	56
				}, {
					"function":	"glib_autoptr_cleanup_GMainLoop",
					"begin":	57,
					"end":	57
				}, {
					"function":	"glib_autoptr_cleanup_GMappedFile",
					"begin":	59,
					"end":	59
				}, {
					"function":	"glib_autoptr_cleanup_GMarkupParseContext",
					"begin":	60,
					"end":	60
				}, {
					"function":	"glib_autoptr_cleanup_GMatchInfo",
					"begin":	69,
					"end":	69
				}, {
					"function":	"glib_autoptr_cleanup_GMutexLocker",
					"begin":	77,
					"end":	77
				}, {
					"function":	"glib_autoptr_cleanup_GNode",
					"begin":	61,
					"end":	61
				}, {
					"function":	"glib_autoptr_cleanup_GOptionContext",
					"begin":	62,
					"end":	62
				}, {
					"function":	"glib_autoptr_cleanup_GOptionGroup",
					"begin":	63,
					"end":	63
				}, {
					"function":	"glib_autoptr_cleanup_GPatternSpec",
					"begin":	64,
					"end":	64
				}, {
					"function":	"glib_autoptr_cleanup_GPtrArray",
					"begin":	54,
					"end":	54
				}, {
					"function":	"glib_autoptr_cleanup_GQueue",
					"begin":	65,
					"end":	65
				}, {
					"function":	"glib_autoptr_cleanup_GRand",
					"begin":	67,
					"end":	67
				}, {
					"function":	"glib_autoptr_cleanup_GRegex",
					"begin":	68,
					"end":	68
				}, {
					"function":	"glib_autoptr_cleanup_GSList",
					"begin":	72,
					"end":	72
				}, {
					"function":	"glib_autoptr_cleanup_GScanner",
					"begin":	70,
					"end":	70
				}, {
					"function":	"glib_autoptr_cleanup_GSequence",
					"begin":	71,
					"end":	71
				}, {
					"function":	"glib_autoptr_cleanup_GSource",
					"begin":	58,
					"end":	58
				}, {
					"function":	"glib_autoptr_cleanup_GString",
					"begin":	73,
					"end":	73
				}, {
					"function":	"glib_autoptr_cleanup_GStringChunk",
					"begin":	74,
					"end":	74
				}, {
					"function":	"glib_autoptr_cleanup_GThread",
					"begin":	75,
					"end":	75
				}, {
					"function":	"glib_autoptr_cleanup_GTimeZone",
					"begin":	80,
					"end":	80
				}, {
					"function":	"glib_autoptr_cleanup_GTimer",
					"begin":	79,
					"end":	79
				}, {
					"function":	"glib_autoptr_cleanup_GTree",
					"begin":	81,
					"end":	81
				}, {
					"function":	"glib_autoptr_cleanup_GVariant",
					"begin":	82,
					"end":	82
				}, {
					"function":	"glib_autoptr_cleanup_GVariantBuilder",
					"begin":	83,
					"end":	83
				}, {
					"function":	"glib_autoptr_cleanup_GVariantDict",
					"begin":	86,
					"end":	86
				}, {
					"function":	"glib_autoptr_cleanup_GVariantIter",
					"begin":	85,
					"end":	85
				}, {
					"function":	"glib_autoptr_cleanup_GVariantType",
					"begin":	88,
					"end":	88
				}, {
					"function":	"glib_listautoptr_cleanup_GArray",
					"begin":	53,
					"end":	53
				}, {
					"function":	"glib_listautoptr_cleanup_GAsyncQueue",
					"begin":	41,
					"end":	41
				}, {
					"function":	"glib_listautoptr_cleanup_GBookmarkFile",
					"begin":	42,
					"end":	42
				}, {
					"function":	"glib_listautoptr_cleanup_GByteArray",
					"begin":	55,
					"end":	55
				}, {
					"function":	"glib_listautoptr_cleanup_GBytes",
					"begin":	43,
					"end":	43
				}, {
					"function":	"glib_listautoptr_cleanup_GChecksum",
					"begin":	44,
					"end":	44
				}, {
					"function":	"glib_listautoptr_cleanup_GDateTime",
					"begin":	45,
					"end":	45
				}, {
					"function":	"glib_listautoptr_cleanup_GDir",
					"begin":	46,
					"end":	46
				}, {
					"function":	"glib_listautoptr_cleanup_GError",
					"begin":	47,
					"end":	47
				}, {
					"function":	"glib_listautoptr_cleanup_GHashTable",
					"begin":	48,
					"end":	48
				}, {
					"function":	"glib_listautoptr_cleanup_GHmac",
					"begin":	49,
					"end":	49
				}, {
					"function":	"glib_listautoptr_cleanup_GIOChannel",
					"begin":	50,
					"end":	50
				}, {
					"function":	"glib_listautoptr_cleanup_GKeyFile",
					"begin":	51,
					"end":	51
				}, {
					"function":	"glib_listautoptr_cleanup_GList",
					"begin":	52,
					"end":	52
				}, {
					"function":	"glib_listautoptr_cleanup_GMainContext",
					"begin":	56,
					"end":	56
				}, {
					"function":	"glib_listautoptr_cleanup_GMainLoop",
					"begin":	57,
					"end":	57
				}, {
					"function":	"glib_listautoptr_cleanup_GMappedFile",
					"begin":	59,
					"end":	59
				}, {
					"function":	"glib_listautoptr_cleanup_GMarkupParseContext",
					"begin":	60,
					"end":	60
				}, {
					"function":	"glib_listautoptr_cleanup_GMatchInfo",
					"begin":	69,
					"end":	69
				}, {
					"function":	"glib_listautoptr_cleanup_GMutexLocker",
					"begin":	77,
					"end":	77
				}, {
					"function":	"glib_listautoptr_cleanup_GNode",
					"begin":	61,
					"end":	61
				}, {
					"function":	"glib_listautoptr_cleanup_GOptionContext",
					"begin":	62,
					"end":	62
				}, {
					"function":	"glib_listautoptr_cleanup_GOptionGroup",
					"begin":	63,
					"end":	63
				}, {
					"function":	"glib_listautoptr_cleanup_GPatternSpec",
					"begin":	64,
					"end":	64
				}, {
					"function":	"glib_listautoptr_cleanup_GPtrArray",
					"begin":	54,
					"end":	54
				}, {
					"function":	"glib_listautoptr_cleanup_GQueue",
					"begin":	65,
					"end":	65
				}, {
					"function":	"glib_listautoptr_cleanup_GRand",
					"begin":	67,
					"end":	67
				}, {
					"function":	"glib_listautoptr_cleanup_GRegex",
					"begin":	68,
					"end":	68
				}, {
					"function":	"glib_listautoptr_cleanup_GSList",
					"begin":	72,
					"end":	72
				}, {
					"function":	"glib_listautoptr_cleanup_GScanner",
					"begin":	70,
					"end":	70
				}, {
					"function":	"glib_listautoptr_cleanup_GSequence",
					"begin":	71,
					"end":	71
				}, {
					"function":	"glib_listautoptr_cleanup_GSource",
					"begin":	58,
					"end":	58
				}, {
					"function":	"glib_listautoptr_cleanup_GString",
					"begin":	73,
					"end":	73
				}, {
					"function":	"glib_listautoptr_cleanup_GStringChunk",
					"begin":	74,
					"end":	74
				}, {
					"function":	"glib_listautoptr_cleanup_GThread",
					"begin":	75,
					"end":	75
				}, {
					"function":	"glib_listautoptr_cleanup_GTimeZone",
					"begin":	80,
					"end":	80
				}, {
					"function":	"glib_listautoptr_cleanup_GTimer",
					"begin":	79,
					"end":	79
				}, {
					"function":	"glib_listautoptr_cleanup_GTree",
					"begin":	81,
					"end":	81
				}, {
					"function":	"glib_listautoptr_cleanup_GVariant",
					"begin":	82,
					"end":	82
				}, {
					"function":	"glib_listautoptr_cleanup_GVariantBuilder",
					"begin":	83,
					"end":	83
				}, {
					"function":	"glib_listautoptr_cleanup_GVariantDict",
					"begin":	86,
					"end":	86
				}, {
					"function":	"glib_listautoptr_cleanup_GVariantIter",
					"begin":	85,
					"end":	85
				}, {
					"function":	"glib_listautoptr_cleanup_GVariantType",
					"begin":	88,
					"end":	88
				}, {
					"function":	"glib_slistautoptr_cleanup_GArray",
					"begin":	53,
					"end":	53
				}, {
					"function":	"glib_slistautoptr_cleanup_GAsyncQueue",
					"begin":	41,
					"end":	41
				}, {
					"function":	"glib_slistautoptr_cleanup_GBookmarkFile",
					"begin":	42,
					"end":	42
				}, {
					"function":	"glib_slistautoptr_cleanup_GByteArray",
					"begin":	55,
					"end":	55
				}, {
					"function":	"glib_slistautoptr_cleanup_GBytes",
					"begin":	43,
					"end":	43
				}, {
					"function":	"glib_slistautoptr_cleanup_GChecksum",
					"begin":	44,
					"end":	44
				}, {
					"function":	"glib_slistautoptr_cleanup_GDateTime",
					"begin":	45,
					"end":	45
				}, {
					"function":	"glib_slistautoptr_cleanup_GDir",
					"begin":	46,
					"end":	46
				}, {
					"function":	"glib_slistautoptr_cleanup_GError",
					"begin":	47,
					"end":	47
				}, {
					"function":	"glib_slistautoptr_cleanup_GHashTable",
					"begin":	48,
					"end":	48
				}, {
					"function":	"glib_slistautoptr_cleanup_GHmac",
					"begin":	49,
					"end":	49
				}, {
					"function":	"glib_slistautoptr_cleanup_GIOChannel",
					"begin":	50,
					"end":	50
				}, {
					"function":	"glib_slistautoptr_cleanup_GKeyFile",
					"begin":	51,
					"end":	51
				}, {
					"function":	"glib_slistautoptr_cleanup_GList",
					"begin":	52,
					"end":	52
				}, {
					"function":	"glib_slistautoptr_cleanup_GMainContext",
					"begin":	56,
					"end":	56
				}, {
					"function":	"glib_slistautoptr_cleanup_GMainLoop",
					"begin":	57,
					"end":	57
				}, {
					"function":	"glib_slistautoptr_cleanup_GMappedFile",
					"begin":	59,
					"end":	59
				}, {
					"function":	"glib_slistautoptr_cleanup_GMarkupParseContext",
					"begin":	60,
					"end":	60
				}, {
					"function":	"glib_slistautoptr_cleanup_GMatchInfo",
					"begin":	69,
					"end":	69
				}, {
					"function":	"glib_slistautoptr_cleanup_GMutexLocker",
					"begin":	77,
					"end":	77
				}, {
					"function":	"glib_slistautoptr_cleanup_GNode",
					"begin":	61,
					"end":	61
				}, {
					"function":	"glib_slistautoptr_cleanup_GOptionContext",
					"begin":	62,
					"end":	62
				}, {
					"function":	"glib_slistautoptr_cleanup_GOptionGroup",
					"begin":	63,
					"end":	63
				}, {
					"function":	"glib_slistautoptr_cleanup_GPatternSpec",
					"begin":	64,
					"end":	64
				}, {
					"function":	"glib_slistautoptr_cleanup_GPtrArray",
					"begin":	54,
					"end":	54
				}, {
					"function":	"glib_slistautoptr_cleanup_GQueue",
					"begin":	65,
					"end":	65
				}, {
					"function":	"glib_slistautoptr_cleanup_GRand",
					"begin":	67,
					"end":	67
				}, {
					"function":	"glib_slistautoptr_cleanup_GRegex",
					"begin":	68,
					"end":	68
				}, {
					"function":	"glib_slistautoptr_cleanup_GSList",
					"begin":	72,
					"end":	72
				}, {
					"function":	"glib_slistautoptr_cleanup_GScanner",
					"begin":	70,
					"end":	70
				}, {
					"function":	"glib_slistautoptr_cleanup_GSequence",
					"begin":	71,
					"end":	71
				}, {
					"function":	"glib_slistautoptr_cleanup_GSource",
					"begin":	58,
					"end":	58
				}, {
					"function":	"glib_slistautoptr_cleanup_GString",
					"begin":	73,
					"end":	73
				}, {
					"function":	"glib_slistautoptr_cleanup_GStringChunk",
					"begin":	74,
					"end":	74
				}, {
					"function":	"glib_slistautoptr_cleanup_GThread",
					"begin":	75,
					"end":	75
				}, {
					"function":	"glib_slistautoptr_cleanup_GTimeZone",
					"begin":	80,
					"end":	80
				}, {
					"function":	"glib_slistautoptr_cleanup_GTimer",
					"begin":	79,
					"end":	79
				}, {
					"function":	"glib_slistautoptr_cleanup_GTree",
					"begin":	81,
					"end":	81
				}, {
					"function":	"glib_slistautoptr_cleanup_GVariant",
					"begin":	82,
					"end":	82
				}, {
					"function":	"glib_slistautoptr_cleanup_GVariantBuilder",
					"begin":	83,
					"end":	83
				}, {
					"function":	"glib_slistautoptr_cleanup_GVariantDict",
					"begin":	86,
					"end":	86
				}, {
					"function":	"glib_slistautoptr_cleanup_GVariantIter",
					"begin":	85,
					"end":	85
				}, {
					"function":	"glib_slistautoptr_cleanup_GVariantType",
					"begin":	88,
					"end":	88
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"is_hex_len",
					"begin":	144,
					"end":	160
				}, {
					"function":	"lh_OPENSSL_CSTRING_delete",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_doall",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_error",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_free",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_get_down_load",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_insert",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_new",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_node_stats_bio",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_node_usage_stats_bio",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_num_items",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_retrieve",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_set_down_load",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_stats_bio",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_STRING_delete",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_doall",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_error",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_free",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_get_down_load",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_insert",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_new",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_node_stats_bio",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_node_usage_stats_bio",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_num_items",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_retrieve",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_set_down_load",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_stats_bio",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"mod_secdownload_free",
					"begin":	68,
					"end":	93
				}, {
					"function":	"mod_secdownload_init",
					"begin":	55,
					"end":	65
				}, {
					"function":	"mod_secdownload_patch_connection",
					"begin":	162,
					"end":	196
				}, {
					"function":	"mod_secdownload_plugin_init",
					"begin":	332,
					"end":	344
				}, {
					"function":	"mod_secdownload_set_defaults",
					"begin":	97,
					"end":	135
				}, {
					"function":	"mod_secdownload_uri_handler",
					"begin":	198,
					"end":	328
				}, {
					"function":	"pthread_equal",
					"begin":	1153,
					"end":	1157
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"sk_ASN1_GENERALSTRING_deep_copy",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_delete",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_delete_ptr",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_dup",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_find",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_find_ex",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_free",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_insert",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_is_sorted",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_new",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_new_null",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_new_reserve",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_num",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_pop",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_pop_free",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_push",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_reserve",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_set",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_set_cmp_func",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_shift",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_sort",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_unshift",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_value",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_zero",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_INTEGER_deep_copy",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_delete",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_delete_ptr",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_dup",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_find",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_find_ex",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_free",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_insert",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_is_sorted",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_new",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_new_null",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_new_reserve",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_num",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_pop",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_pop_free",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_push",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_reserve",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_set",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_set_cmp_func",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_shift",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_sort",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_unshift",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_value",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_zero",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_OBJECT_deep_copy",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_delete",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_delete_ptr",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_dup",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_find",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_find_ex",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_free",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_insert",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_is_sorted",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_new",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_new_null",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_new_reserve",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_num",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_pop",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_pop_free",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_push",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_reserve",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_set",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_set_cmp_func",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_shift",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_sort",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_unshift",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_value",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_zero",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_STRING_TABLE_deep_copy",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_delete",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_delete_ptr",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_dup",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_find",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_find_ex",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_free",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_insert",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_is_sorted",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_new",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_new_null",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_new_reserve",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_num",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_pop",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_pop_free",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_push",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_reserve",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_set",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_set_cmp_func",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_shift",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_sort",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_unshift",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_value",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_zero",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_TYPE_deep_copy",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_delete",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_delete_ptr",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_dup",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_find",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_find_ex",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_free",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_insert",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_is_sorted",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_new",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_new_null",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_new_reserve",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_num",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_pop",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_pop_free",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_push",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_reserve",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_set",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_set_cmp_func",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_shift",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_sort",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_unshift",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_value",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_zero",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_UTF8STRING_deep_copy",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_delete",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_delete_ptr",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_dup",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_find",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_find_ex",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_free",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_insert",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_is_sorted",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_new",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_new_null",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_new_reserve",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_num",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_pop",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_pop_free",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_push",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_reserve",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_set",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_set_cmp_func",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_shift",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_sort",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_unshift",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_value",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_zero",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_BIO_deep_copy",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_delete",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_delete_ptr",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_dup",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_find",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_find_ex",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_free",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_insert",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_is_sorted",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_new",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_new_null",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_new_reserve",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_num",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_pop",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_pop_free",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_push",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_reserve",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_set",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_set_cmp_func",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_shift",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_sort",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_unshift",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_value",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_zero",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_CTLOG_deep_copy",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_delete",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_delete_ptr",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_dup",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_find",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_find_ex",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_insert",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_is_sorted",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_new",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_new_null",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_new_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_num",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_pop",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_pop_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_push",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_set",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_set_cmp_func",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_shift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_sort",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_unshift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_value",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_zero",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_OPENSSL_BLOCK_deep_copy",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_delete",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_delete_ptr",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_dup",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_find",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_find_ex",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_free",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_insert",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_is_sorted",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_new",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_new_null",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_new_reserve",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_num",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_pop",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_pop_free",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_push",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_reserve",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_set",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_set_cmp_func",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_shift",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_sort",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_unshift",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_value",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_zero",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_CSTRING_deep_copy",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_delete",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_delete_ptr",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_dup",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_find",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_find_ex",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_free",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_insert",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_is_sorted",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_new",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_new_null",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_new_reserve",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_num",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_pop",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_pop_free",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_push",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_reserve",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_set",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_set_cmp_func",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_shift",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_sort",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_unshift",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_value",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_zero",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_STRING_deep_copy",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_delete",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_delete_ptr",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_dup",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_find",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_find_ex",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_free",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_insert",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_is_sorted",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_new",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_new_null",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_new_reserve",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_num",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_pop",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_pop_free",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_push",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_reserve",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_set",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_set_cmp_func",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_shift",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_sort",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_unshift",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_value",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_zero",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_deep_copy",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_delete",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_delete_ptr",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_dup",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_find",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_find_ex",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_insert",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_is_sorted",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_new",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_new_null",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_new_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_num",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_pop",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_pop_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_push",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_set",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_set_cmp_func",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_shift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_sort",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_unshift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_value",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_zero",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_deep_copy",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_delete",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_delete_ptr",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_dup",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_find",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_find_ex",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_free",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_insert",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_is_sorted",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_new",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_new_null",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_new_reserve",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_num",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_pop",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_pop_free",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_push",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_reserve",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_set",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_set_cmp_func",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_shift",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_sort",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_unshift",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_value",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_zero",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_deep_copy",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_delete",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_delete_ptr",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_dup",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_find",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_find_ex",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_free",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_insert",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_is_sorted",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_new",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_new_null",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_new_reserve",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_num",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_pop",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_pop_free",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_push",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_reserve",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_set",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_set_cmp_func",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_shift",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_sort",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_unshift",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_value",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_zero",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_SCT_deep_copy",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_delete",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_delete_ptr",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_dup",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_find",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_find_ex",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_free",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_insert",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_is_sorted",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_new",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_new_null",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_new_reserve",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_num",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_pop",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_pop_free",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_push",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_reserve",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_set",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_set_cmp_func",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_shift",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_sort",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_unshift",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_value",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_zero",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_deep_copy",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_delete",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_delete_ptr",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_dup",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_find",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_find_ex",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_free",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_insert",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_is_sorted",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_new",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_new_null",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_new_reserve",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_num",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_pop",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_pop_free",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_push",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_reserve",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_set",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_set_cmp_func",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_shift",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_sort",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_unshift",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_value",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_zero",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SSL_CIPHER_deep_copy",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_delete",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_delete_ptr",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_dup",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_find",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_find_ex",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_free",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_insert",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_is_sorted",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_new",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_new_null",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_new_reserve",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_num",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_pop",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_pop_free",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_push",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_reserve",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_set",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_set_cmp_func",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_shift",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_sort",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_unshift",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_value",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_zero",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_COMP_deep_copy",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_delete",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_delete_ptr",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_dup",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_find",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_find_ex",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_free",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_insert",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_is_sorted",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_new",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_new_null",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_new_reserve",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_num",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_pop",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_pop_free",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_push",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_reserve",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_set",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_set_cmp_func",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_shift",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_sort",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_unshift",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_value",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_zero",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_X509_ALGOR_deep_copy",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_delete",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_delete_ptr",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_dup",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_find",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_find_ex",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_free",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_insert",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_is_sorted",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_new",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_new_null",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_new_reserve",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_num",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_pop",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_pop_free",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_push",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_reserve",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_set",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_set_cmp_func",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_shift",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_sort",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_unshift",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_value",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_zero",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ATTRIBUTE_deep_copy",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_delete",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_delete_ptr",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_dup",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_find",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_find_ex",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_free",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_insert",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_is_sorted",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_new",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_new_null",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_new_reserve",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_num",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_pop",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_pop_free",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_push",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_reserve",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_set",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_set_cmp_func",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_shift",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_sort",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_unshift",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_value",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_zero",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_CRL_deep_copy",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_delete",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_delete_ptr",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_dup",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_find",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_find_ex",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_free",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_insert",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_is_sorted",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_new",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_new_null",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_new_reserve",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_num",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_pop",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_pop_free",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_push",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_reserve",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_set",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_set_cmp_func",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_shift",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_sort",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_unshift",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_value",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_zero",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_EXTENSION_deep_copy",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_delete",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_delete_ptr",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_dup",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_find",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_find_ex",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_free",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_insert",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_is_sorted",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_new",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_new_null",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_new_reserve",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_num",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_pop",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_pop_free",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_push",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_reserve",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_set",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_set_cmp_func",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_shift",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_sort",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_unshift",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_value",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_zero",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_INFO_deep_copy",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_delete",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_delete_ptr",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_dup",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_find",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_find_ex",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_free",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_insert",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_is_sorted",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_new",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_new_null",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_new_reserve",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_num",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_pop",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_pop_free",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_push",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_reserve",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_set",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_set_cmp_func",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_shift",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_sort",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_unshift",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_value",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_zero",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_LOOKUP_deep_copy",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_delete",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_delete_ptr",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_dup",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_find",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_find_ex",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_free",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_insert",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_is_sorted",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_new",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_new_null",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_new_reserve",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_num",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_pop",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_pop_free",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_push",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_reserve",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_set",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_set_cmp_func",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_shift",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_sort",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_unshift",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_value",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_zero",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_NAME_ENTRY_deep_copy",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_delete",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_delete_ptr",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_dup",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_find",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_find_ex",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_free",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_insert",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_is_sorted",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_new",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_new_null",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_new_reserve",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_num",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_pop",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_pop_free",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_push",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_reserve",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_set",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_set_cmp_func",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_shift",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_sort",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_unshift",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_value",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_zero",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_deep_copy",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_delete",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_delete_ptr",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_dup",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_find",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_find_ex",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_free",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_insert",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_is_sorted",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_new",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_new_null",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_new_reserve",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_num",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_pop",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_pop_free",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_push",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_reserve",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_set",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_set_cmp_func",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_shift",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_sort",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_unshift",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_value",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_zero",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_OBJECT_deep_copy",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_delete",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_delete_ptr",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_dup",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_find",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_find_ex",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_free",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_insert",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_is_sorted",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_new",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_new_null",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_new_reserve",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_num",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_pop",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_pop_free",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_push",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_reserve",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_set",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_set_cmp_func",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_shift",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_sort",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_unshift",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_value",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_zero",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_REVOKED_deep_copy",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_delete",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_delete_ptr",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_dup",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_find",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_find_ex",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_free",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_insert",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_is_sorted",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_new",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_new_null",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_new_reserve",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_num",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_pop",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_pop_free",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_push",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_reserve",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_set",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_set_cmp_func",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_shift",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_sort",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_unshift",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_value",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_zero",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_TRUST_deep_copy",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_delete",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_delete_ptr",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_dup",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_find",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_find_ex",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_free",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_insert",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_is_sorted",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_new",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_new_null",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_new_reserve",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_num",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_pop",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_pop_free",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_push",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_reserve",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_set",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_set_cmp_func",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_shift",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_sort",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_unshift",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_value",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_zero",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_VERIFY_PARAM_deep_copy",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_delete",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_delete_ptr",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_dup",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_find",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_find_ex",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_insert",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_is_sorted",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_new",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_new_null",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_new_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_num",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_pop",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_pop_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_push",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_set",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_set_cmp_func",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_shift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_sort",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_unshift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_value",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_zero",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_deep_copy",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_delete",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_delete_ptr",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_dup",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_find",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_find_ex",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_free",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_insert",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_is_sorted",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_new",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_new_null",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_new_reserve",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_num",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_pop",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_pop_free",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_push",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_reserve",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_set",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_set_cmp_func",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_shift",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_sort",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_unshift",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_value",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_zero",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_void_deep_copy",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_delete",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_delete_ptr",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_dup",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_find",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_find_ex",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_free",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_insert",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_is_sorted",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_new",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_new_null",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_new_reserve",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_num",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_pop",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_pop_free",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_push",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_reserve",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_set",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_set_cmp_func",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_shift",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_sort",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_unshift",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_value",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_zero",
					"begin":	89,
					"end":	89
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"strtoimax",
					"begin":	323,
					"end":	328
				}, {
					"function":	"strtoumax",
					"begin":	335,
					"end":	340
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"wcstoimax",
					"begin":	347,
					"end":	352
				}, {
					"function":	"wcstoumax",
					"begin":	361,
					"end":	366
				}]
		}]
}
