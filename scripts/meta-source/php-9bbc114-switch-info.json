{
	"switch_num":	109,
	"case_num":	[621, 460, 614, 1, 614, 1, 613, 26, 614, 1, 614, 1, 613, 26, 614, 1, 613, 26, 614, 1, 613, 269, 613, 237, 613, 26, 614, 1, 614, 1, 614, 295, 615, 17, 654, 138, 653, 5, 2, 654, 27, 653, 26, 2, 614, 3, 2, 613, 3, 613, 31, 2, 613, 31, 613, 31, 613, 31, 613, 31, 613, 31, 614, 5, 614, 107, 613, 1, 96, 3, 96, 1, 97, 47, 96, 3, 2, 97, 13, 97, 46, 96, 1, 104, 3, 104, 1, 105, 52, 104, 17, 104, 21, 2, 104, 3, 2, 104, 1, 216, 1, 216, 3, 2, 216, 3, 2, 216, 1],
	"switch_cluster":	[[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 38, 40, 42, 43, 46, 50, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 76, 78, 80, 82, 84, 86, 88, 92, 93, 96, 98, 100, 103, 106, 108], [33, 37, 45, 48, 75, 90, 95, 102, 105], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 39, 41, 44, 47, 49, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 77, 79, 81, 83, 85, 87, 89, 91, 94, 97, 99, 101, 104, 107], []],
	"priority":	[{
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	428,
			"primary_score":	999707,
			"second_score":	3110
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	429,
			"primary_score":	999707,
			"second_score":	3108
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	479,
			"primary_score":	999707,
			"second_score":	3111
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	485,
			"primary_score":	999707,
			"second_score":	2
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	590,
			"primary_score":	999707,
			"second_score":	3107
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	592,
			"primary_score":	999707,
			"second_score":	3106
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	593,
			"primary_score":	999707,
			"second_score":	6
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	594,
			"primary_score":	999707,
			"second_score":	5
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	595,
			"primary_score":	999707,
			"second_score":	277
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	596,
			"primary_score":	999707,
			"second_score":	276
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	597,
			"primary_score":	999707,
			"second_score":	275
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	599,
			"primary_score":	999707,
			"second_score":	4
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	601,
			"primary_score":	999707,
			"second_score":	3
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	692,
			"primary_score":	999707,
			"second_score":	121743
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	697,
			"primary_score":	999707,
			"second_score":	121742
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	699,
			"primary_score":	999707,
			"second_score":	121741
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	812,
			"primary_score":	999707,
			"second_score":	121740
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	816,
			"primary_score":	999707,
			"second_score":	121739
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	819,
			"primary_score":	999707,
			"second_score":	121738
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	820,
			"primary_score":	999707,
			"second_score":	121737
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1897,
			"primary_score":	999707,
			"second_score":	121959
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1898,
			"primary_score":	999707,
			"second_score":	121958
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1901,
			"primary_score":	999707,
			"second_score":	121957
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1902,
			"primary_score":	999707,
			"second_score":	121956
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1903,
			"primary_score":	999707,
			"second_score":	121955
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1904,
			"primary_score":	999707,
			"second_score":	121954
		}, {
			"file":	"Zend/zend.c",
			"line":	227,
			"primary_score":	999707,
			"second_score":	131193
		}, {
			"file":	"Zend/zend.c",
			"line":	228,
			"primary_score":	999707,
			"second_score":	131192
		}, {
			"file":	"Zend/zend.c",
			"line":	229,
			"primary_score":	999707,
			"second_score":	131191
		}, {
			"file":	"Zend/zend.c",
			"line":	305,
			"primary_score":	999707,
			"second_score":	131197
		}, {
			"file":	"Zend/zend.c",
			"line":	311,
			"primary_score":	999707,
			"second_score":	131196
		}, {
			"file":	"Zend/zend.c",
			"line":	312,
			"primary_score":	999707,
			"second_score":	131195
		}, {
			"file":	"Zend/zend.c",
			"line":	314,
			"primary_score":	999707,
			"second_score":	131194
		}, {
			"file":	"Zend/zend.c",
			"line":	315,
			"primary_score":	999707,
			"second_score":	131190
		}, {
			"file":	"Zend/zend.c",
			"line":	318,
			"primary_score":	999707,
			"second_score":	131189
		}, {
			"file":	"Zend/zend.c",
			"line":	319,
			"primary_score":	999707,
			"second_score":	119716
		}, {
			"file":	"Zend/zend.c",
			"line":	322,
			"primary_score":	999707,
			"second_score":	119715
		}, {
			"file":	"Zend/zend.c",
			"line":	324,
			"primary_score":	999707,
			"second_score":	131188
		}, {
			"file":	"Zend/zend.c",
			"line":	325,
			"primary_score":	999707,
			"second_score":	131140
		}, {
			"file":	"Zend/zend.c",
			"line":	328,
			"primary_score":	999707,
			"second_score":	131139
		}, {
			"file":	"Zend/zend.c",
			"line":	797,
			"primary_score":	999707,
			"second_score":	103457
		}, {
			"file":	"Zend/zend.c",
			"line":	798,
			"primary_score":	999707,
			"second_score":	103449
		}, {
			"file":	"Zend/zend.c",
			"line":	800,
			"primary_score":	999707,
			"second_score":	47188
		}, {
			"file":	"Zend/zend.c",
			"line":	801,
			"primary_score":	999707,
			"second_score":	47169
		}, {
			"file":	"Zend/zend.c",
			"line":	803,
			"primary_score":	999707,
			"second_score":	14813
		}, {
			"file":	"Zend/zend.c",
			"line":	804,
			"primary_score":	999707,
			"second_score":	14750
		}, {
			"file":	"Zend/zend.c",
			"line":	806,
			"primary_score":	999707,
			"second_score":	14749
		}, {
			"file":	"Zend/zend.c",
			"line":	807,
			"primary_score":	999707,
			"second_score":	14741
		}, {
			"file":	"Zend/zend.c",
			"line":	809,
			"primary_score":	999707,
			"second_score":	14740
		}, {
			"file":	"Zend/zend.c",
			"line":	810,
			"primary_score":	999707,
			"second_score":	14739
		}, {
			"file":	"Zend/zend.c",
			"line":	812,
			"primary_score":	999707,
			"second_score":	14738
		}, {
			"file":	"Zend/zend.c",
			"line":	813,
			"primary_score":	999707,
			"second_score":	6281
		}, {
			"file":	"Zend/zend.c",
			"line":	814,
			"primary_score":	999707,
			"second_score":	6280
		}, {
			"file":	"Zend/zend.c",
			"line":	822,
			"primary_score":	999707,
			"second_score":	6224
		}, {
			"file":	"Zend/zend.c",
			"line":	824,
			"primary_score":	999707,
			"second_score":	6124
		}, {
			"file":	"Zend/zend.c",
			"line":	898,
			"primary_score":	999707,
			"second_score":	126719
		}, {
			"file":	"Zend/zend.c",
			"line":	899,
			"primary_score":	999707,
			"second_score":	126713
		}, {
			"file":	"Zend/zend.c",
			"line":	900,
			"primary_score":	999707,
			"second_score":	126580
		}, {
			"file":	"Zend/zend.c",
			"line":	907,
			"primary_score":	999707,
			"second_score":	125746
		}, {
			"file":	"Zend/zend.c",
			"line":	908,
			"primary_score":	999707,
			"second_score":	125745
		}, {
			"file":	"Zend/zend.c",
			"line":	910,
			"primary_score":	999707,
			"second_score":	125744
		}, {
			"file":	"Zend/zend.c",
			"line":	911,
			"primary_score":	999707,
			"second_score":	125738
		}, {
			"file":	"Zend/zend.c",
			"line":	912,
			"primary_score":	999707,
			"second_score":	125728
		}, {
			"file":	"Zend/zend.c",
			"line":	915,
			"primary_score":	999707,
			"second_score":	125726
		}, {
			"file":	"Zend/zend.c",
			"line":	917,
			"primary_score":	999707,
			"second_score":	114436
		}, {
			"file":	"Zend/zend.c",
			"line":	918,
			"primary_score":	999707,
			"second_score":	114430
		}, {
			"file":	"Zend/zend.c",
			"line":	919,
			"primary_score":	999707,
			"second_score":	114218
		}, {
			"file":	"Zend/zend.c",
			"line":	921,
			"primary_score":	999707,
			"second_score":	114216
		}, {
			"file":	"Zend/zend.c",
			"line":	924,
			"primary_score":	999707,
			"second_score":	113618
		}, {
			"file":	"Zend/zend.c",
			"line":	925,
			"primary_score":	999707,
			"second_score":	113617
		}, {
			"file":	"Zend/zend.c",
			"line":	943,
			"primary_score":	999707,
			"second_score":	113613
		}, {
			"file":	"Zend/zend.c",
			"line":	944,
			"primary_score":	999707,
			"second_score":	113607
		}, {
			"file":	"Zend/zend.c",
			"line":	945,
			"primary_score":	999707,
			"second_score":	113604
		}, {
			"file":	"Zend/zend.c",
			"line":	971,
			"primary_score":	999863,
			"second_score":	129298
		}, {
			"file":	"Zend/zend.c",
			"line":	972,
			"primary_score":	999863,
			"second_score":	129297
		}, {
			"file":	"Zend/zend.c",
			"line":	973,
			"primary_score":	999863,
			"second_score":	129296
		}, {
			"file":	"Zend/zend.c",
			"line":	974,
			"primary_score":	999863,
			"second_score":	129295
		}, {
			"file":	"Zend/zend.c",
			"line":	975,
			"primary_score":	999863,
			"second_score":	129294
		}, {
			"file":	"Zend/zend.c",
			"line":	976,
			"primary_score":	999863,
			"second_score":	129293
		}, {
			"file":	"Zend/zend.c",
			"line":	977,
			"primary_score":	999863,
			"second_score":	129292
		}, {
			"file":	"Zend/zend.c",
			"line":	978,
			"primary_score":	999863,
			"second_score":	129291
		}, {
			"file":	"Zend/zend.c",
			"line":	979,
			"primary_score":	999863,
			"second_score":	129290
		}, {
			"file":	"Zend/zend.c",
			"line":	980,
			"primary_score":	999863,
			"second_score":	129289
		}, {
			"file":	"Zend/zend.c",
			"line":	981,
			"primary_score":	999863,
			"second_score":	129288
		}, {
			"file":	"Zend/zend.c",
			"line":	984,
			"primary_score":	999863,
			"second_score":	129287
		}, {
			"file":	"Zend/zend.c",
			"line":	1006,
			"primary_score":	999866,
			"second_score":	129285
		}, {
			"file":	"Zend/zend.c",
			"line":	1007,
			"primary_score":	999866,
			"second_score":	129283
		}, {
			"file":	"Zend/zend.c",
			"line":	1008,
			"primary_score":	999866,
			"second_score":	129280
		}, {
			"file":	"Zend/zend.c",
			"line":	1013,
			"primary_score":	999863,
			"second_score":	129276
		}, {
			"file":	"Zend/zend.c",
			"line":	1019,
			"primary_score":	999863,
			"second_score":	129275
		}, {
			"file":	"Zend/zend.c",
			"line":	1023,
			"primary_score":	999863,
			"second_score":	129274
		}, {
			"file":	"Zend/zend.c",
			"line":	1035,
			"primary_score":	999863,
			"second_score":	129273
		}, {
			"file":	"Zend/zend.c",
			"line":	1038,
			"primary_score":	999872,
			"second_score":	129272
		}, {
			"file":	"Zend/zend.c",
			"line":	1151,
			"primary_score":	999864,
			"second_score":	128299
		}, {
			"file":	"Zend/zend.c",
			"line":	1153,
			"primary_score":	999864,
			"second_score":	128298
		}, {
			"file":	"Zend/zend.c",
			"line":	1200,
			"primary_score":	999707,
			"second_score":	126767
		}, {
			"file":	"Zend/zend.c",
			"line":	1201,
			"primary_score":	999707,
			"second_score":	126766
		}, {
			"file":	"Zend/zend.c",
			"line":	1202,
			"primary_score":	999707,
			"second_score":	126765
		}, {
			"file":	"Zend/zend.c",
			"line":	1213,
			"primary_score":	999707,
			"second_score":	127279
		}, {
			"file":	"Zend/zend.c",
			"line":	1214,
			"primary_score":	999707,
			"second_score":	127277
		}, {
			"file":	"Zend/zend.c",
			"line":	1239,
			"primary_score":	999707,
			"second_score":	127276
		}, {
			"file":	"Zend/zend.c",
			"line":	1240,
			"primary_score":	999707,
			"second_score":	126786
		}, {
			"file":	"Zend/zend.c",
			"line":	1248,
			"primary_score":	999707,
			"second_score":	126764
		}, {
			"file":	"Zend/zend.c",
			"line":	1249,
			"primary_score":	999707,
			"second_score":	126763
		}, {
			"file":	"Zend/zend.c",
			"line":	1250,
			"primary_score":	999707,
			"second_score":	126762
		}, {
			"file":	"Zend/zend.c",
			"line":	1252,
			"primary_score":	999707,
			"second_score":	126761
		}, {
			"file":	"Zend/zend.c",
			"line":	1282,
			"primary_score":	999707,
			"second_score":	114307
		}, {
			"file":	"Zend/zend.h",
			"line":	379,
			"primary_score":	999707,
			"second_score":	15289
		}, {
			"file":	"Zend/zend.h",
			"line":	383,
			"primary_score":	999707,
			"second_score":	128217
		}, {
			"file":	"Zend/zend.h",
			"line":	387,
			"primary_score":	999707,
			"second_score":	125071
		}, {
			"file":	"Zend/zend.h",
			"line":	391,
			"primary_score":	999707,
			"second_score":	15291
		}, {
			"file":	"Zend/zend.h",
			"line":	395,
			"primary_score":	999707,
			"second_score":	128002
		}, {
			"file":	"Zend/zend.h",
			"line":	399,
			"primary_score":	999707,
			"second_score":	153038
		}, {
			"file":	"Zend/zend.h",
			"line":	403,
			"primary_score":	999707,
			"second_score":	17648
		}, {
			"file":	"Zend/zend_API.c",
			"line":	241,
			"primary_score":	999956,
			"second_score":	121640
		}, {
			"file":	"Zend/zend_API.c",
			"line":	242,
			"primary_score":	999956,
			"second_score":	121639
		}, {
			"file":	"Zend/zend_API.c",
			"line":	307,
			"primary_score":	999707,
			"second_score":	130888
		}, {
			"file":	"Zend/zend_API.c",
			"line":	308,
			"primary_score":	999707,
			"second_score":	130887
		}, {
			"file":	"Zend/zend_API.c",
			"line":	309,
			"primary_score":	999707,
			"second_score":	130886
		}, {
			"file":	"Zend/zend_API.c",
			"line":	312,
			"primary_score":	999707,
			"second_score":	130885
		}, {
			"file":	"Zend/zend_API.c",
			"line":	313,
			"primary_score":	999707,
			"second_score":	130884
		}, {
			"file":	"Zend/zend_API.c",
			"line":	315,
			"primary_score":	999707,
			"second_score":	130883
		}, {
			"file":	"Zend/zend_API.c",
			"line":	320,
			"primary_score":	999707,
			"second_score":	130882
		}, {
			"file":	"Zend/zend_API.c",
			"line":	325,
			"primary_score":	999707,
			"second_score":	130881
		}, {
			"file":	"Zend/zend_API.c",
			"line":	329,
			"primary_score":	999847,
			"second_score":	130880
		}, {
			"file":	"Zend/zend_API.c",
			"line":	330,
			"primary_score":	999847,
			"second_score":	130879
		}, {
			"file":	"Zend/zend_API.c",
			"line":	367,
			"primary_score":	999847,
			"second_score":	130878
		}, {
			"file":	"Zend/zend_API.c",
			"line":	368,
			"primary_score":	999847,
			"second_score":	130877
		}, {
			"file":	"Zend/zend_API.c",
			"line":	369,
			"primary_score":	999847,
			"second_score":	130876
		}, {
			"file":	"Zend/zend_API.c",
			"line":	378,
			"primary_score":	999847,
			"second_score":	130875
		}, {
			"file":	"Zend/zend_API.c",
			"line":	416,
			"primary_score":	999707,
			"second_score":	154438
		}, {
			"file":	"Zend/zend_API.c",
			"line":	417,
			"primary_score":	999707,
			"second_score":	154437
		}, {
			"file":	"Zend/zend_API.c",
			"line":	418,
			"primary_score":	999707,
			"second_score":	154436
		}, {
			"file":	"Zend/zend_API.c",
			"line":	431,
			"primary_score":	999707,
			"second_score":	154435
		}, {
			"file":	"Zend/zend_API.c",
			"line":	432,
			"primary_score":	999707,
			"second_score":	154434
		}, {
			"file":	"Zend/zend_API.c",
			"line":	438,
			"primary_score":	999707,
			"second_score":	154432
		}, {
			"file":	"Zend/zend_API.c",
			"line":	439,
			"primary_score":	999707,
			"second_score":	154431
		}, {
			"file":	"Zend/zend_API.c",
			"line":	440,
			"primary_score":	999707,
			"second_score":	154430
		}, {
			"file":	"Zend/zend_API.c",
			"line":	453,
			"primary_score":	999707,
			"second_score":	154429
		}, {
			"file":	"Zend/zend_API.c",
			"line":	479,
			"primary_score":	999883,
			"second_score":	130906
		}, {
			"file":	"Zend/zend_API.c",
			"line":	480,
			"primary_score":	999883,
			"second_score":	130905
		}, {
			"file":	"Zend/zend_API.c",
			"line":	484,
			"primary_score":	999883,
			"second_score":	130904
		}, {
			"file":	"Zend/zend_API.c",
			"line":	485,
			"primary_score":	999885,
			"second_score":	130903
		}, {
			"file":	"Zend/zend_API.c",
			"line":	490,
			"primary_score":	999885,
			"second_score":	130902
		}, {
			"file":	"Zend/zend_API.c",
			"line":	643,
			"primary_score":	999707,
			"second_score":	122849
		}, {
			"file":	"Zend/zend_API.c",
			"line":	644,
			"primary_score":	999707,
			"second_score":	122848
		}, {
			"file":	"Zend/zend_API.c",
			"line":	647,
			"primary_score":	999707,
			"second_score":	122847
		}, {
			"file":	"Zend/zend_API.c",
			"line":	650,
			"primary_score":	999707,
			"second_score":	122846
		}, {
			"file":	"Zend/zend_API.c",
			"line":	656,
			"primary_score":	999707,
			"second_score":	130874
		}, {
			"file":	"Zend/zend_API.c",
			"line":	658,
			"primary_score":	999707,
			"second_score":	130873
		}, {
			"file":	"Zend/zend_API.c",
			"line":	664,
			"primary_score":	999707,
			"second_score":	130891
		}, {
			"file":	"Zend/zend_API.c",
			"line":	665,
			"primary_score":	999707,
			"second_score":	130890
		}, {
			"file":	"Zend/zend_API.c",
			"line":	667,
			"primary_score":	999707,
			"second_score":	130889
		}, {
			"file":	"Zend/zend_API.c",
			"line":	668,
			"primary_score":	999707,
			"second_score":	130872
		}, {
			"file":	"Zend/zend_API.c",
			"line":	688,
			"primary_score":	999707,
			"second_score":	130871
		}, {
			"file":	"Zend/zend_API.c",
			"line":	694,
			"primary_score":	999707,
			"second_score":	128088
		}, {
			"file":	"Zend/zend_API.c",
			"line":	695,
			"primary_score":	999707,
			"second_score":	128087
		}, {
			"file":	"Zend/zend_API.c",
			"line":	696,
			"primary_score":	999707,
			"second_score":	128086
		}, {
			"file":	"Zend/zend_API.c",
			"line":	697,
			"primary_score":	999707,
			"second_score":	128085
		}, {
			"file":	"Zend/zend_API.c",
			"line":	698,
			"primary_score":	999707,
			"second_score":	128084
		}, {
			"file":	"Zend/zend_API.c",
			"line":	699,
			"primary_score":	999707,
			"second_score":	128083
		}, {
			"file":	"Zend/zend_API.c",
			"line":	700,
			"primary_score":	999707,
			"second_score":	128082
		}, {
			"file":	"Zend/zend_API.c",
			"line":	701,
			"primary_score":	999707,
			"second_score":	128081
		}, {
			"file":	"Zend/zend_API.c",
			"line":	702,
			"primary_score":	999707,
			"second_score":	128080
		}, {
			"file":	"Zend/zend_API.c",
			"line":	703,
			"primary_score":	999707,
			"second_score":	128079
		}, {
			"file":	"Zend/zend_API.c",
			"line":	704,
			"primary_score":	999707,
			"second_score":	128078
		}, {
			"file":	"Zend/zend_API.c",
			"line":	706,
			"primary_score":	999707,
			"second_score":	128077
		}, {
			"file":	"Zend/zend_API.c",
			"line":	707,
			"primary_score":	999707,
			"second_score":	128076
		}, {
			"file":	"Zend/zend_API.c",
			"line":	708,
			"primary_score":	999707,
			"second_score":	128075
		}, {
			"file":	"Zend/zend_API.c",
			"line":	718,
			"primary_score":	999707,
			"second_score":	130932
		}, {
			"file":	"Zend/zend_API.c",
			"line":	722,
			"primary_score":	999707,
			"second_score":	154500
		}, {
			"file":	"Zend/zend_API.c",
			"line":	742,
			"primary_score":	999747,
			"second_score":	128074
		}, {
			"file":	"Zend/zend_API.c",
			"line":	744,
			"primary_score":	999747,
			"second_score":	128073
		}, {
			"file":	"Zend/zend_API.c",
			"line":	745,
			"primary_score":	999747,
			"second_score":	128072
		}, {
			"file":	"Zend/zend_API.c",
			"line":	748,
			"primary_score":	999747,
			"second_score":	128071
		}, {
			"file":	"Zend/zend_API.c",
			"line":	749,
			"primary_score":	999747,
			"second_score":	128070
		}, {
			"file":	"Zend/zend_API.c",
			"line":	764,
			"primary_score":	999707,
			"second_score":	128069
		}, {
			"file":	"Zend/zend_API.c",
			"line":	765,
			"primary_score":	999707,
			"second_score":	128068
		}, {
			"file":	"Zend/zend_API.c",
			"line":	768,
			"primary_score":	999707,
			"second_score":	128067
		}, {
			"file":	"Zend/zend_API.c",
			"line":	770,
			"primary_score":	999747,
			"second_score":	128066
		}, {
			"file":	"Zend/zend_API.c",
			"line":	771,
			"primary_score":	999747,
			"second_score":	128065
		}, {
			"file":	"Zend/zend_API.c",
			"line":	774,
			"primary_score":	999707,
			"second_score":	128064
		}, {
			"file":	"Zend/zend_API.c",
			"line":	790,
			"primary_score":	999707,
			"second_score":	128063
		}, {
			"file":	"Zend/zend_API.c",
			"line":	792,
			"primary_score":	999707,
			"second_score":	128061
		}, {
			"file":	"Zend/zend_API.c",
			"line":	798,
			"primary_score":	999707,
			"second_score":	128060
		}, {
			"file":	"Zend/zend_API.c",
			"line":	799,
			"primary_score":	999707,
			"second_score":	128059
		}, {
			"file":	"Zend/zend_API.c",
			"line":	800,
			"primary_score":	999707,
			"second_score":	128058
		}, {
			"file":	"Zend/zend_API.c",
			"line":	801,
			"primary_score":	999707,
			"second_score":	122865
		}, {
			"file":	"Zend/zend_API.c",
			"line":	804,
			"primary_score":	999707,
			"second_score":	128057
		}, {
			"file":	"Zend/zend_API.c",
			"line":	805,
			"primary_score":	999747,
			"second_score":	128056
		}, {
			"file":	"Zend/zend_API.c",
			"line":	808,
			"primary_score":	999747,
			"second_score":	128055
		}, {
			"file":	"Zend/zend_API.c",
			"line":	809,
			"primary_score":	999747,
			"second_score":	128054
		}, {
			"file":	"Zend/zend_API.c",
			"line":	810,
			"primary_score":	999747,
			"second_score":	128053
		}, {
			"file":	"Zend/zend_API.c",
			"line":	812,
			"primary_score":	999747,
			"second_score":	128052
		}, {
			"file":	"Zend/zend_API.c",
			"line":	813,
			"primary_score":	999747,
			"second_score":	128051
		}, {
			"file":	"Zend/zend_API.c",
			"line":	814,
			"primary_score":	999747,
			"second_score":	128050
		}, {
			"file":	"Zend/zend_API.c",
			"line":	816,
			"primary_score":	999747,
			"second_score":	128048
		}, {
			"file":	"Zend/zend_API.c",
			"line":	819,
			"primary_score":	999747,
			"second_score":	128047
		}, {
			"file":	"Zend/zend_API.c",
			"line":	820,
			"primary_score":	999747,
			"second_score":	128019
		}, {
			"file":	"Zend/zend_API.c",
			"line":	821,
			"primary_score":	999747,
			"second_score":	128018
		}, {
			"file":	"Zend/zend_API.c",
			"line":	825,
			"primary_score":	999747,
			"second_score":	128017
		}, {
			"file":	"Zend/zend_API.c",
			"line":	826,
			"primary_score":	999747,
			"second_score":	128016
		}, {
			"file":	"Zend/zend_API.c",
			"line":	827,
			"primary_score":	999747,
			"second_score":	128015
		}, {
			"file":	"Zend/zend_API.c",
			"line":	834,
			"primary_score":	999707,
			"second_score":	130894
		}, {
			"file":	"Zend/zend_API.c",
			"line":	836,
			"primary_score":	999707,
			"second_score":	130892
		}, {
			"file":	"Zend/zend_API.c",
			"line":	844,
			"primary_score":	999707,
			"second_score":	130870
		}, {
			"file":	"Zend/zend_API.c",
			"line":	847,
			"primary_score":	999707,
			"second_score":	128014
		}, {
			"file":	"Zend/zend_API.c",
			"line":	881,
			"primary_score":	999707,
			"second_score":	128096
		}, {
			"file":	"Zend/zend_API.c",
			"line":	882,
			"primary_score":	999707,
			"second_score":	128095
		}, {
			"file":	"Zend/zend_API.c",
			"line":	884,
			"primary_score":	999707,
			"second_score":	128094
		}, {
			"file":	"Zend/zend_API.c",
			"line":	886,
			"primary_score":	999707,
			"second_score":	128090
		}, {
			"file":	"Zend/zend_API.c",
			"line":	887,
			"primary_score":	999707,
			"second_score":	128089
		}, {
			"file":	"Zend/zend_API.c",
			"line":	888,
			"primary_score":	999707,
			"second_score":	128013
		}, {
			"file":	"Zend/zend_API.c",
			"line":	890,
			"primary_score":	999707,
			"second_score":	128012
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1018,
			"primary_score":	999944,
			"second_score":	154252
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1019,
			"primary_score":	999944,
			"second_score":	154251
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1020,
			"primary_score":	999944,
			"second_score":	154250
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1021,
			"primary_score":	999944,
			"second_score":	154249
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1023,
			"primary_score":	999944,
			"second_score":	154248
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1024,
			"primary_score":	999944,
			"second_score":	154247
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1026,
			"primary_score":	999944,
			"second_score":	154238
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1027,
			"primary_score":	999985,
			"second_score":	154237
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1028,
			"primary_score":	999985,
			"second_score":	154236
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1032,
			"primary_score":	999944,
			"second_score":	154226
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1068,
			"primary_score":	999944,
			"second_score":	154225
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1072,
			"primary_score":	999944,
			"second_score":	154224
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1073,
			"primary_score":	999944,
			"second_score":	154223
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1080,
			"primary_score":	999948,
			"second_score":	154171
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1082,
			"primary_score":	999948,
			"second_score":	154170
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1083,
			"primary_score":	999988,
			"second_score":	154169
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1084,
			"primary_score":	999988,
			"second_score":	154147
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1085,
			"primary_score":	999988,
			"second_score":	154146
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1086,
			"primary_score":	999988,
			"second_score":	154145
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1087,
			"primary_score":	999988,
			"second_score":	154144
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1090,
			"primary_score":	999988,
			"second_score":	154142
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1101,
			"primary_score":	999947,
			"second_score":	154255
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1103,
			"primary_score":	999947,
			"second_score":	154254
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1108,
			"primary_score":	999947,
			"second_score":	154253
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1110,
			"primary_score":	999947,
			"second_score":	154222
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1111,
			"primary_score":	999947,
			"second_score":	154221
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1112,
			"primary_score":	999948,
			"second_score":	154220
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1113,
			"primary_score":	999948,
			"second_score":	154173
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1117,
			"primary_score":	999948,
			"second_score":	154172
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1122,
			"primary_score":	999947,
			"second_score":	154141
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1128,
			"primary_score":	999947,
			"second_score":	154256
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1368,
			"primary_score":	999707,
			"second_score":	123589
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1370,
			"primary_score":	999707,
			"second_score":	123588
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1371,
			"primary_score":	999707,
			"second_score":	123478
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1373,
			"primary_score":	999707,
			"second_score":	123363
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1516,
			"primary_score":	999994,
			"second_score":	154133
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1517,
			"primary_score":	999994,
			"second_score":	154132
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1519,
			"primary_score":	999994,
			"second_score":	154131
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1520,
			"primary_score":	999994,
			"second_score":	154103
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1522,
			"primary_score":	999994,
			"second_score":	154099
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1523,
			"primary_score":	999994,
			"second_score":	154071
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1525,
			"primary_score":	999994,
			"second_score":	153955
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1526,
			"primary_score":	999994,
			"second_score":	153390
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1527,
			"primary_score":	999994,
			"second_score":	153378
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1528,
			"primary_score":	999994,
			"second_score":	153324
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1779,
			"primary_score":	999707,
			"second_score":	103448
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1780,
			"primary_score":	999707,
			"second_score":	103447
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1781,
			"primary_score":	999707,
			"second_score":	103446
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2171,
			"primary_score":	999707,
			"second_score":	50133
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2172,
			"primary_score":	999707,
			"second_score":	50132
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2173,
			"primary_score":	999707,
			"second_score":	50131
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2175,
			"primary_score":	999707,
			"second_score":	50130
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2176,
			"primary_score":	999707,
			"second_score":	50129
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2178,
			"primary_score":	999707,
			"second_score":	50128
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2179,
			"primary_score":	999707,
			"second_score":	47249
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2185,
			"primary_score":	999707,
			"second_score":	47248
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2186,
			"primary_score":	999707,
			"second_score":	47200
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2187,
			"primary_score":	999707,
			"second_score":	47199
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2213,
			"primary_score":	999707,
			"second_score":	50140
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2215,
			"primary_score":	999707,
			"second_score":	50139
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2220,
			"primary_score":	999707,
			"second_score":	50138
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2224,
			"primary_score":	999707,
			"second_score":	53380
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2228,
			"primary_score":	999707,
			"second_score":	50137
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2232,
			"primary_score":	999707,
			"second_score":	52697
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2233,
			"primary_score":	999707,
			"second_score":	53765
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2238,
			"primary_score":	999707,
			"second_score":	50136
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2239,
			"primary_score":	999707,
			"second_score":	50135
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2240,
			"primary_score":	999707,
			"second_score":	50134
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2245,
			"primary_score":	999707,
			"second_score":	47198
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2284,
			"primary_score":	999707,
			"second_score":	126543
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2286,
			"primary_score":	999707,
			"second_score":	126542
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2287,
			"primary_score":	999707,
			"second_score":	126536
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2290,
			"primary_score":	999707,
			"second_score":	126535
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2292,
			"primary_score":	999707,
			"second_score":	126534
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2293,
			"primary_score":	999707,
			"second_score":	125952
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2295,
			"primary_score":	999707,
			"second_score":	125951
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2296,
			"primary_score":	999707,
			"second_score":	125945
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2299,
			"primary_score":	999707,
			"second_score":	125944
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2305,
			"primary_score":	999707,
			"second_score":	117515
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2307,
			"primary_score":	999707,
			"second_score":	117514
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2331,
			"primary_score":	999707,
			"second_score":	113595
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2335,
			"primary_score":	999707,
			"second_score":	113594
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2337,
			"primary_score":	999707,
			"second_score":	113593
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2594,
			"primary_score":	999972,
			"second_score":	121980
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2595,
			"primary_score":	999972,
			"second_score":	121979
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2596,
			"primary_score":	999972,
			"second_score":	121978
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2597,
			"primary_score":	999972,
			"second_score":	121977
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2598,
			"primary_score":	999972,
			"second_score":	121976
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2599,
			"primary_score":	999972,
			"second_score":	121975
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2600,
			"primary_score":	999972,
			"second_score":	121974
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2601,
			"primary_score":	999972,
			"second_score":	121973
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2603,
			"primary_score":	999972,
			"second_score":	121972
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2604,
			"primary_score":	999972,
			"second_score":	121971
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2607,
			"primary_score":	999972,
			"second_score":	121970
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2608,
			"primary_score":	999972,
			"second_score":	121969
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2610,
			"primary_score":	999972,
			"second_score":	121968
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2631,
			"primary_score":	999988,
			"second_score":	121967
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2663,
			"primary_score":	999988,
			"second_score":	121950
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2665,
			"primary_score":	999988,
			"second_score":	121949
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2666,
			"primary_score":	999988,
			"second_score":	121948
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2667,
			"primary_score":	999988,
			"second_score":	121947
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2668,
			"primary_score":	999988,
			"second_score":	121946
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2677,
			"primary_score":	999988,
			"second_score":	121945
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2678,
			"primary_score":	999988,
			"second_score":	121832
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2686,
			"primary_score":	999988,
			"second_score":	121831
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2687,
			"primary_score":	999988,
			"second_score":	152376
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2688,
			"primary_score":	999988,
			"second_score":	152375
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2699,
			"primary_score":	999988,
			"second_score":	152374
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2718,
			"primary_score":	999995,
			"second_score":	121802
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2720,
			"primary_score":	999995,
			"second_score":	121801
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2732,
			"primary_score":	999995,
			"second_score":	121800
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2733,
			"primary_score":	999995,
			"second_score":	121799
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2734,
			"primary_score":	999995,
			"second_score":	121664
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2763,
			"primary_score":	999988,
			"second_score":	121663
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2764,
			"primary_score":	999988,
			"second_score":	152372
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2765,
			"primary_score":	999988,
			"second_score":	152371
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2800,
			"primary_score":	999988,
			"second_score":	152370
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2801,
			"primary_score":	999988,
			"second_score":	152369
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2811,
			"primary_score":	999988,
			"second_score":	152368
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2824,
			"primary_score":	999995,
			"second_score":	121662
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2831,
			"primary_score":	999988,
			"second_score":	121661
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2833,
			"primary_score":	999988,
			"second_score":	121642
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2834,
			"primary_score":	999988,
			"second_score":	121641
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2836,
			"primary_score":	999988,
			"second_score":	121635
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2837,
			"primary_score":	999988,
			"second_score":	152340
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2839,
			"primary_score":	999988,
			"second_score":	121634
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2845,
			"primary_score":	999971,
			"second_score":	122038
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2846,
			"primary_score":	999971,
			"second_score":	122037
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2847,
			"primary_score":	999971,
			"second_score":	122036
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2849,
			"primary_score":	999971,
			"second_score":	122035
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2850,
			"primary_score":	999971,
			"second_score":	122034
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2852,
			"primary_score":	999971,
			"second_score":	122033
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2853,
			"primary_score":	999971,
			"second_score":	122032
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2855,
			"primary_score":	999971,
			"second_score":	122031
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2858,
			"primary_score":	999971,
			"second_score":	122030
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2859,
			"primary_score":	999971,
			"second_score":	122029
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2862,
			"primary_score":	999971,
			"second_score":	122028
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2863,
			"primary_score":	999971,
			"second_score":	122027
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2864,
			"primary_score":	999971,
			"second_score":	122026
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2865,
			"primary_score":	999971,
			"second_score":	122025
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2866,
			"primary_score":	999971,
			"second_score":	122024
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2867,
			"primary_score":	999971,
			"second_score":	122023
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2869,
			"primary_score":	999971,
			"second_score":	122022
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2872,
			"primary_score":	999971,
			"second_score":	122021
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2878,
			"primary_score":	999971,
			"second_score":	122020
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2881,
			"primary_score":	999990,
			"second_score":	122019
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2882,
			"primary_score":	999990,
			"second_score":	122018
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2883,
			"primary_score":	999990,
			"second_score":	122012
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2884,
			"primary_score":	999990,
			"second_score":	122011
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2886,
			"primary_score":	999990,
			"second_score":	122010
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2887,
			"primary_score":	999990,
			"second_score":	122009
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2888,
			"primary_score":	999990,
			"second_score":	121987
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2889,
			"primary_score":	999990,
			"second_score":	121986
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2890,
			"primary_score":	999990,
			"second_score":	121985
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2891,
			"primary_score":	999990,
			"second_score":	121984
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2892,
			"primary_score":	999990,
			"second_score":	121983
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2898,
			"primary_score":	999972,
			"second_score":	121982
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2903,
			"primary_score":	999972,
			"second_score":	121981
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2904,
			"primary_score":	999972,
			"second_score":	121633
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2915,
			"primary_score":	999972,
			"second_score":	121632
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3321,
			"primary_score":	999993,
			"second_score":	238308
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	144,
			"primary_score":	999707,
			"second_score":	3194
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	297,
			"primary_score":	999707,
			"second_score":	3197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	673,
			"primary_score":	999707,
			"second_score":	113038
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	675,
			"primary_score":	999707,
			"second_score":	113037
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	676,
			"primary_score":	999707,
			"second_score":	113036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	699,
			"primary_score":	999707,
			"second_score":	113096
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	701,
			"primary_score":	999707,
			"second_score":	113095
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	702,
			"primary_score":	999707,
			"second_score":	113094
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	725,
			"primary_score":	999707,
			"second_score":	113045
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	726,
			"primary_score":	999707,
			"second_score":	113044
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	728,
			"primary_score":	999707,
			"second_score":	113043
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	730,
			"primary_score":	999707,
			"second_score":	113042
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	731,
			"primary_score":	999707,
			"second_score":	113041
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	732,
			"primary_score":	999707,
			"second_score":	113040
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	734,
			"primary_score":	999707,
			"second_score":	113039
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	735,
			"primary_score":	999707,
			"second_score":	113035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	736,
			"primary_score":	999707,
			"second_score":	113034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	737,
			"primary_score":	999707,
			"second_score":	113033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	738,
			"primary_score":	999707,
			"second_score":	113032
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	739,
			"primary_score":	999707,
			"second_score":	113031
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	740,
			"primary_score":	999707,
			"second_score":	113030
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	741,
			"primary_score":	999707,
			"second_score":	113029
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	743,
			"primary_score":	999707,
			"second_score":	116718
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	745,
			"primary_score":	999707,
			"second_score":	116717
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	746,
			"primary_score":	999707,
			"second_score":	116716
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	748,
			"primary_score":	999707,
			"second_score":	116715
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	749,
			"primary_score":	999707,
			"second_score":	117226
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	750,
			"primary_score":	999707,
			"second_score":	117225
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	751,
			"primary_score":	999707,
			"second_score":	117224
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	752,
			"primary_score":	999707,
			"second_score":	117223
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	753,
			"primary_score":	999707,
			"second_score":	117222
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	754,
			"primary_score":	999707,
			"second_score":	117221
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	757,
			"primary_score":	999980,
			"second_score":	115441
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	759,
			"primary_score":	999980,
			"second_score":	115440
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	760,
			"primary_score":	999980,
			"second_score":	115439
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	761,
			"primary_score":	999980,
			"second_score":	115438
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	762,
			"primary_score":	999980,
			"second_score":	115437
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	763,
			"primary_score":	999980,
			"second_score":	115436
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	786,
			"primary_score":	999707,
			"second_score":	113082
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	787,
			"primary_score":	999707,
			"second_score":	113081
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	789,
			"primary_score":	999707,
			"second_score":	113080
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	791,
			"primary_score":	999707,
			"second_score":	113079
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	792,
			"primary_score":	999707,
			"second_score":	113078
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	795,
			"primary_score":	999707,
			"second_score":	113077
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	800,
			"primary_score":	999707,
			"second_score":	113076
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	801,
			"primary_score":	999707,
			"second_score":	113075
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	802,
			"primary_score":	999707,
			"second_score":	113074
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	803,
			"primary_score":	999707,
			"second_score":	113073
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	805,
			"primary_score":	999707,
			"second_score":	113069
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	806,
			"primary_score":	999707,
			"second_score":	113067
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	807,
			"primary_score":	999707,
			"second_score":	113066
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	808,
			"primary_score":	999707,
			"second_score":	113065
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	811,
			"primary_score":	999910,
			"second_score":	117261
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	815,
			"primary_score":	999910,
			"second_score":	117260
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	817,
			"primary_score":	999910,
			"second_score":	117259
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	818,
			"primary_score":	999910,
			"second_score":	117258
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	819,
			"primary_score":	999910,
			"second_score":	117257
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	820,
			"primary_score":	999910,
			"second_score":	117256
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	821,
			"primary_score":	999910,
			"second_score":	117255
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	825,
			"primary_score":	999910,
			"second_score":	117254
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	833,
			"primary_score":	999707,
			"second_score":	159270
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	838,
			"primary_score":	999707,
			"second_score":	159269
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	839,
			"primary_score":	999707,
			"second_score":	159268
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	841,
			"primary_score":	999707,
			"second_score":	159267
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	842,
			"primary_score":	999707,
			"second_score":	159266
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	843,
			"primary_score":	999707,
			"second_score":	159265
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	845,
			"primary_score":	999707,
			"second_score":	159264
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	846,
			"primary_score":	999707,
			"second_score":	159263
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	890,
			"primary_score":	999707,
			"second_score":	113420
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	891,
			"primary_score":	999707,
			"second_score":	113419
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	893,
			"primary_score":	999707,
			"second_score":	113418
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	894,
			"primary_score":	999707,
			"second_score":	113417
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	896,
			"primary_score":	999707,
			"second_score":	113416
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	897,
			"primary_score":	999707,
			"second_score":	113415
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	904,
			"primary_score":	999707,
			"second_score":	113414
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	905,
			"primary_score":	999707,
			"second_score":	113413
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	906,
			"primary_score":	999707,
			"second_score":	113160
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	907,
			"primary_score":	999707,
			"second_score":	113159
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	908,
			"primary_score":	999707,
			"second_score":	113158
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	909,
			"primary_score":	999707,
			"second_score":	113157
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	911,
			"primary_score":	999707,
			"second_score":	113156
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	912,
			"primary_score":	999707,
			"second_score":	113155
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1599,
			"primary_score":	999707,
			"second_score":	3212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1600,
			"primary_score":	999707,
			"second_score":	3211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1601,
			"primary_score":	999707,
			"second_score":	3210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1602,
			"primary_score":	999707,
			"second_score":	3209
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1604,
			"primary_score":	999707,
			"second_score":	3208
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1608,
			"primary_score":	999707,
			"second_score":	3207
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1614,
			"primary_score":	999707,
			"second_score":	3206
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1669,
			"primary_score":	999707,
			"second_score":	3205
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1670,
			"primary_score":	999707,
			"second_score":	3204
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1671,
			"primary_score":	999707,
			"second_score":	3203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1672,
			"primary_score":	999707,
			"second_score":	3202
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1673,
			"primary_score":	999707,
			"second_score":	3201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1674,
			"primary_score":	999707,
			"second_score":	3200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1675,
			"primary_score":	999707,
			"second_score":	3199
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1676,
			"primary_score":	999707,
			"second_score":	3198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1678,
			"primary_score":	999707,
			"second_score":	3196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1679,
			"primary_score":	999707,
			"second_score":	3195
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1680,
			"primary_score":	999707,
			"second_score":	3193
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1681,
			"primary_score":	999707,
			"second_score":	3192
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1684,
			"primary_score":	999707,
			"second_score":	113426
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1686,
			"primary_score":	999707,
			"second_score":	113425
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1687,
			"primary_score":	999707,
			"second_score":	113424
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1692,
			"primary_score":	999707,
			"second_score":	113423
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1705,
			"primary_score":	999707,
			"second_score":	113422
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1709,
			"primary_score":	999707,
			"second_score":	113421
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1710,
			"primary_score":	999707,
			"second_score":	113154
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1711,
			"primary_score":	999707,
			"second_score":	113153
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1712,
			"primary_score":	999707,
			"second_score":	113152
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1717,
			"primary_score":	999707,
			"second_score":	113151
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1718,
			"primary_score":	999707,
			"second_score":	113150
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1719,
			"primary_score":	999707,
			"second_score":	113149
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1721,
			"primary_score":	999707,
			"second_score":	113148
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1722,
			"primary_score":	999707,
			"second_score":	113147
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1724,
			"primary_score":	999707,
			"second_score":	113146
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1725,
			"primary_score":	999707,
			"second_score":	113145
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1726,
			"primary_score":	999707,
			"second_score":	113141
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1727,
			"primary_score":	999707,
			"second_score":	113135
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1729,
			"primary_score":	999707,
			"second_score":	113117
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1730,
			"primary_score":	999707,
			"second_score":	113116
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1732,
			"primary_score":	999707,
			"second_score":	113021
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1802,
			"primary_score":	999707,
			"second_score":	113106
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1803,
			"primary_score":	999707,
			"second_score":	113105
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1804,
			"primary_score":	999707,
			"second_score":	113101
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1805,
			"primary_score":	999707,
			"second_score":	113100
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1807,
			"primary_score":	999707,
			"second_score":	113099
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1811,
			"primary_score":	999707,
			"second_score":	113098
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1836,
			"primary_score":	999959,
			"second_score":	231553
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1839,
			"primary_score":	999959,
			"second_score":	231552
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1856,
			"primary_score":	999953,
			"second_score":	231549
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1857,
			"primary_score":	999953,
			"second_score":	231548
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1860,
			"primary_score":	999953,
			"second_score":	231547
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1864,
			"primary_score":	999707,
			"second_score":	113097
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1865,
			"primary_score":	999707,
			"second_score":	113093
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1870,
			"primary_score":	999707,
			"second_score":	113092
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1875,
			"primary_score":	999707,
			"second_score":	113115
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1876,
			"primary_score":	999707,
			"second_score":	113114
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1877,
			"primary_score":	999707,
			"second_score":	113113
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1878,
			"primary_score":	999707,
			"second_score":	113112
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1879,
			"primary_score":	999707,
			"second_score":	113111
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1880,
			"primary_score":	999707,
			"second_score":	113110
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1881,
			"primary_score":	999707,
			"second_score":	113109
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1883,
			"primary_score":	999707,
			"second_score":	113108
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1884,
			"primary_score":	999707,
			"second_score":	121932
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1885,
			"primary_score":	999707,
			"second_score":	121931
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1887,
			"primary_score":	999707,
			"second_score":	121930
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1891,
			"primary_score":	999707,
			"second_score":	121929
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1897,
			"primary_score":	999707,
			"second_score":	121928
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1898,
			"primary_score":	999707,
			"second_score":	121927
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1899,
			"primary_score":	999707,
			"second_score":	121926
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1900,
			"primary_score":	999707,
			"second_score":	121925
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1901,
			"primary_score":	999707,
			"second_score":	121924
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1902,
			"primary_score":	999707,
			"second_score":	121923
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1909,
			"primary_score":	999707,
			"second_score":	146609
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1910,
			"primary_score":	999707,
			"second_score":	146608
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1917,
			"primary_score":	999707,
			"second_score":	159281
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1925,
			"primary_score":	999707,
			"second_score":	113107
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1927,
			"primary_score":	999707,
			"second_score":	113091
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1944,
			"primary_score":	999707,
			"second_score":	113090
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2005,
			"primary_score":	999707,
			"second_score":	113089
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2007,
			"primary_score":	999707,
			"second_score":	113088
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2008,
			"primary_score":	999707,
			"second_score":	113087
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2009,
			"primary_score":	999707,
			"second_score":	113086
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2010,
			"primary_score":	999707,
			"second_score":	113085
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2011,
			"primary_score":	999707,
			"second_score":	113083
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2013,
			"primary_score":	999707,
			"second_score":	113064
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2016,
			"primary_score":	999707,
			"second_score":	113063
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2018,
			"primary_score":	999707,
			"second_score":	113062
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2019,
			"primary_score":	999707,
			"second_score":	159259
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2020,
			"primary_score":	999707,
			"second_score":	159258
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2022,
			"primary_score":	999707,
			"second_score":	113061
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2025,
			"primary_score":	999707,
			"second_score":	113060
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2026,
			"primary_score":	999707,
			"second_score":	113054
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2027,
			"primary_score":	999707,
			"second_score":	113053
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2030,
			"primary_score":	999707,
			"second_score":	113047
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2031,
			"primary_score":	999707,
			"second_score":	113046
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2037,
			"primary_score":	999707,
			"second_score":	113028
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2039,
			"primary_score":	999707,
			"second_score":	113027
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2040,
			"primary_score":	999707,
			"second_score":	113026
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2041,
			"primary_score":	999707,
			"second_score":	113025
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2044,
			"primary_score":	999707,
			"second_score":	113024
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2046,
			"primary_score":	999707,
			"second_score":	113022
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2052,
			"primary_score":	999707,
			"second_score":	113464
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2053,
			"primary_score":	999707,
			"second_score":	113463
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2054,
			"primary_score":	999707,
			"second_score":	113462
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2056,
			"primary_score":	999707,
			"second_score":	113461
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2060,
			"primary_score":	999707,
			"second_score":	113460
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2061,
			"primary_score":	999707,
			"second_score":	113459
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2062,
			"primary_score":	999707,
			"second_score":	113458
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2069,
			"primary_score":	999707,
			"second_score":	113457
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2070,
			"primary_score":	999707,
			"second_score":	113456
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2071,
			"primary_score":	999707,
			"second_score":	113455
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2073,
			"primary_score":	999707,
			"second_score":	113454
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2074,
			"primary_score":	999707,
			"second_score":	113453
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2075,
			"primary_score":	999707,
			"second_score":	113452
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2076,
			"primary_score":	999707,
			"second_score":	113451
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2082,
			"primary_score":	999707,
			"second_score":	113450
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2086,
			"primary_score":	999707,
			"second_score":	114500
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2088,
			"primary_score":	999707,
			"second_score":	114498
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2090,
			"primary_score":	999707,
			"second_score":	114497
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2091,
			"primary_score":	999707,
			"second_score":	114496
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2095,
			"primary_score":	999707,
			"second_score":	114495
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2096,
			"primary_score":	999707,
			"second_score":	114494
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2097,
			"primary_score":	999707,
			"second_score":	114493
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2098,
			"primary_score":	999707,
			"second_score":	114474
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2100,
			"primary_score":	999707,
			"second_score":	114473
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2104,
			"primary_score":	999707,
			"second_score":	114472
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2105,
			"primary_score":	999707,
			"second_score":	114466
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2107,
			"primary_score":	999707,
			"second_score":	114448
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2112,
			"primary_score":	999707,
			"second_score":	127937
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2113,
			"primary_score":	999707,
			"second_score":	127936
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2114,
			"primary_score":	999707,
			"second_score":	127935
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2115,
			"primary_score":	999707,
			"second_score":	127934
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2116,
			"primary_score":	999707,
			"second_score":	127933
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2118,
			"primary_score":	999707,
			"second_score":	127932
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2119,
			"primary_score":	999707,
			"second_score":	127931
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2121,
			"primary_score":	999707,
			"second_score":	128779
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2122,
			"primary_score":	999707,
			"second_score":	128778
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2123,
			"primary_score":	999707,
			"second_score":	128777
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2124,
			"primary_score":	999707,
			"second_score":	128776
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2126,
			"primary_score":	999707,
			"second_score":	128775
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2130,
			"primary_score":	999707,
			"second_score":	128774
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2159,
			"primary_score":	999707,
			"second_score":	130625
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2160,
			"primary_score":	999707,
			"second_score":	152266
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2162,
			"primary_score":	999707,
			"second_score":	152265
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2163,
			"primary_score":	999707,
			"second_score":	128770
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2164,
			"primary_score":	999707,
			"second_score":	128769
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2170,
			"primary_score":	999707,
			"second_score":	128768
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2171,
			"primary_score":	999707,
			"second_score":	128767
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2172,
			"primary_score":	999707,
			"second_score":	128766
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2173,
			"primary_score":	999707,
			"second_score":	128765
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2175,
			"primary_score":	999707,
			"second_score":	128764
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2180,
			"primary_score":	999707,
			"second_score":	128763
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2183,
			"primary_score":	999707,
			"second_score":	128762
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2185,
			"primary_score":	999707,
			"second_score":	128761
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2186,
			"primary_score":	999707,
			"second_score":	128760
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2188,
			"primary_score":	999707,
			"second_score":	128759
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2189,
			"primary_score":	999707,
			"second_score":	128758
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2190,
			"primary_score":	999707,
			"second_score":	128757
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2197,
			"primary_score":	999707,
			"second_score":	128756
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2202,
			"primary_score":	999707,
			"second_score":	146625
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2204,
			"primary_score":	999707,
			"second_score":	146624
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2246,
			"primary_score":	999707,
			"second_score":	146700
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2344,
			"primary_score":	999707,
			"second_score":	146699
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2348,
			"primary_score":	999707,
			"second_score":	146598
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2350,
			"primary_score":	999707,
			"second_score":	146597
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2351,
			"primary_score":	999707,
			"second_score":	146581
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2408,
			"primary_score":	999707,
			"second_score":	121943
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2410,
			"primary_score":	999707,
			"second_score":	121942
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2413,
			"primary_score":	999707,
			"second_score":	121941
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2418,
			"primary_score":	999707,
			"second_score":	113467
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2420,
			"primary_score":	999707,
			"second_score":	113466
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2424,
			"primary_score":	999707,
			"second_score":	113465
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2429,
			"primary_score":	999707,
			"second_score":	127940
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2431,
			"primary_score":	999707,
			"second_score":	127939
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2434,
			"primary_score":	999707,
			"second_score":	127938
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2469,
			"primary_score":	999707,
			"second_score":	132788
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2470,
			"primary_score":	999707,
			"second_score":	132787
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2472,
			"primary_score":	999707,
			"second_score":	132786
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2478,
			"primary_score":	999707,
			"second_score":	132785
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2482,
			"primary_score":	999707,
			"second_score":	132784
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2517,
			"primary_score":	999707,
			"second_score":	132789
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2527,
			"primary_score":	999707,
			"second_score":	121572
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2538,
			"primary_score":	999707,
			"second_score":	147954
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2540,
			"primary_score":	999707,
			"second_score":	147953
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2541,
			"primary_score":	999707,
			"second_score":	147843
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2544,
			"primary_score":	999707,
			"second_score":	147842
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2545,
			"primary_score":	999707,
			"second_score":	147841
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2550,
			"primary_score":	999707,
			"second_score":	150998
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2551,
			"primary_score":	999707,
			"second_score":	150997
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2553,
			"primary_score":	999707,
			"second_score":	150996
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2554,
			"primary_score":	999707,
			"second_score":	150995
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2555,
			"primary_score":	999707,
			"second_score":	150973
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2558,
			"primary_score":	999707,
			"second_score":	150972
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2559,
			"primary_score":	999707,
			"second_score":	150971
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2564,
			"primary_score":	999707,
			"second_score":	128443
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2566,
			"primary_score":	999707,
			"second_score":	128442
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2567,
			"primary_score":	999707,
			"second_score":	128420
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2570,
			"primary_score":	999707,
			"second_score":	128419
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2571,
			"primary_score":	999707,
			"second_score":	128418
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2572,
			"primary_score":	999707,
			"second_score":	128417
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2625,
			"primary_score":	999707,
			"second_score":	3213
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	346,
			"primary_score":	999707,
			"second_score":	124132
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1335,
			"primary_score":	999707,
			"second_score":	121162
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1336,
			"primary_score":	999707,
			"second_score":	121161
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1337,
			"primary_score":	999707,
			"second_score":	121160
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1338,
			"primary_score":	999707,
			"second_score":	121159
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1339,
			"primary_score":	999707,
			"second_score":	121158
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1341,
			"primary_score":	999707,
			"second_score":	121157
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1345,
			"primary_score":	999707,
			"second_score":	121090
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1348,
			"primary_score":	999707,
			"second_score":	120914
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1349,
			"primary_score":	999707,
			"second_score":	120913
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1354,
			"primary_score":	999707,
			"second_score":	120912
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1356,
			"primary_score":	999707,
			"second_score":	120872
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1362,
			"primary_score":	999707,
			"second_score":	120853
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1367,
			"primary_score":	999707,
			"second_score":	120852
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1891,
			"primary_score":	999707,
			"second_score":	123591
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1892,
			"primary_score":	999707,
			"second_score":	123590
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1893,
			"primary_score":	999707,
			"second_score":	123215
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1921,
			"primary_score":	999707,
			"second_score":	133013
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1923,
			"primary_score":	999707,
			"second_score":	133012
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1927,
			"primary_score":	999707,
			"second_score":	132974
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1929,
			"primary_score":	999707,
			"second_score":	132872
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1932,
			"primary_score":	999707,
			"second_score":	132871
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	100,
			"primary_score":	999992,
			"second_score":	209681
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	103,
			"primary_score":	999992,
			"second_score":	209680
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	121,
			"primary_score":	999986,
			"second_score":	115948
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	122,
			"primary_score":	999986,
			"second_score":	115946
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	131,
			"primary_score":	999707,
			"second_score":	18912
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	137,
			"primary_score":	999922,
			"second_score":	207872
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	138,
			"primary_score":	999922,
			"second_score":	207871
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	139,
			"primary_score":	999922,
			"second_score":	207870
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	141,
			"primary_score":	999922,
			"second_score":	207869
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	142,
			"primary_score":	999922,
			"second_score":	207868
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	143,
			"primary_score":	999922,
			"second_score":	207867
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	149,
			"primary_score":	999922,
			"second_score":	207866
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	152,
			"primary_score":	999922,
			"second_score":	207865
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	153,
			"primary_score":	999922,
			"second_score":	207837
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	154,
			"primary_score":	999922,
			"second_score":	207836
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	156,
			"primary_score":	999922,
			"second_score":	207835
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	157,
			"primary_score":	999922,
			"second_score":	207834
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	229,
			"primary_score":	999707,
			"second_score":	114429
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	230,
			"primary_score":	999707,
			"second_score":	114404
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	231,
			"primary_score":	999707,
			"second_score":	114379
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	232,
			"primary_score":	999707,
			"second_score":	114354
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	233,
			"primary_score":	999707,
			"second_score":	114329
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	234,
			"primary_score":	999707,
			"second_score":	114325
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	235,
			"primary_score":	999707,
			"second_score":	114321
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	236,
			"primary_score":	999707,
			"second_score":	114317
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	237,
			"primary_score":	999707,
			"second_score":	114247
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	238,
			"primary_score":	999707,
			"second_score":	114243
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	276,
			"primary_score":	999921,
			"second_score":	199565
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	283,
			"primary_score":	999707,
			"second_score":	129286
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	296,
			"primary_score":	999736,
			"second_score":	172037
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	297,
			"primary_score":	999736,
			"second_score":	172036
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	299,
			"primary_score":	999736,
			"second_score":	172027
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	300,
			"primary_score":	999736,
			"second_score":	172022
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	304,
			"primary_score":	999739,
			"second_score":	172021
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	305,
			"primary_score":	999739,
			"second_score":	172000
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	307,
			"primary_score":	999763,
			"second_score":	172023
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	309,
			"primary_score":	999736,
			"second_score":	184826
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	310,
			"primary_score":	999736,
			"second_score":	184825
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	311,
			"primary_score":	999736,
			"second_score":	184824
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	312,
			"primary_score":	999736,
			"second_score":	189744
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	313,
			"primary_score":	999736,
			"second_score":	189743
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	315,
			"primary_score":	999736,
			"second_score":	184823
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	316,
			"primary_score":	999736,
			"second_score":	184755
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	317,
			"primary_score":	999736,
			"second_score":	184754
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	318,
			"primary_score":	999736,
			"second_score":	184753
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	324,
			"primary_score":	999922,
			"second_score":	199340
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	325,
			"primary_score":	999922,
			"second_score":	199333
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	326,
			"primary_score":	999922,
			"second_score":	199332
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	328,
			"primary_score":	999923,
			"second_score":	199342
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	417,
			"primary_score":	999950,
			"second_score":	217491
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	418,
			"primary_score":	999950,
			"second_score":	217490
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	419,
			"primary_score":	999950,
			"second_score":	217489
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	420,
			"primary_score":	999950,
			"second_score":	217488
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	421,
			"primary_score":	999950,
			"second_score":	217487
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	423,
			"primary_score":	999950,
			"second_score":	217486
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	429,
			"primary_score":	999950,
			"second_score":	217485
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	432,
			"primary_score":	999950,
			"second_score":	217416
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	436,
			"primary_score":	999950,
			"second_score":	217415
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	437,
			"primary_score":	999950,
			"second_score":	217414
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	439,
			"primary_score":	999950,
			"second_score":	217266
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	440,
			"primary_score":	999950,
			"second_score":	217259
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	441,
			"primary_score":	999950,
			"second_score":	217190
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	443,
			"primary_score":	999950,
			"second_score":	217187
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	445,
			"primary_score":	999950,
			"second_score":	217185
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	632,
			"primary_score":	999739,
			"second_score":	172065
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	633,
			"primary_score":	999739,
			"second_score":	172064
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	634,
			"primary_score":	999739,
			"second_score":	172063
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	636,
			"primary_score":	999739,
			"second_score":	172062
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	637,
			"primary_score":	999739,
			"second_score":	172061
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	640,
			"primary_score":	999739,
			"second_score":	172060
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	645,
			"primary_score":	999739,
			"second_score":	172039
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	646,
			"primary_score":	999739,
			"second_score":	172038
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	647,
			"primary_score":	999739,
			"second_score":	171999
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	648,
			"primary_score":	999739,
			"second_score":	171998
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	649,
			"primary_score":	999739,
			"second_score":	171997
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	685,
			"primary_score":	999739,
			"second_score":	172066
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	851,
			"primary_score":	999947,
			"second_score":	211082
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	853,
			"primary_score":	999947,
			"second_score":	211081
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	857,
			"primary_score":	999947,
			"second_score":	211080
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	860,
			"primary_score":	999947,
			"second_score":	211079
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	875,
			"primary_score":	999947,
			"second_score":	211078
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	897,
			"primary_score":	999742,
			"second_score":	182962
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	898,
			"primary_score":	999742,
			"second_score":	182961
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	900,
			"primary_score":	999742,
			"second_score":	182960
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	927,
			"primary_score":	999742,
			"second_score":	182959
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	929,
			"primary_score":	999742,
			"second_score":	182921
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	930,
			"primary_score":	999742,
			"second_score":	182919
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	932,
			"primary_score":	999742,
			"second_score":	182909
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	933,
			"primary_score":	999742,
			"second_score":	182908
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	989,
			"primary_score":	999742,
			"second_score":	182907
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	990,
			"primary_score":	999742,
			"second_score":	182906
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	991,
			"primary_score":	999742,
			"second_score":	182902
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	992,
			"primary_score":	999742,
			"second_score":	182898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	993,
			"primary_score":	999742,
			"second_score":	182897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	994,
			"primary_score":	999742,
			"second_score":	182895
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1251,
			"primary_score":	999742,
			"second_score":	182966
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1253,
			"primary_score":	999742,
			"second_score":	182965
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1256,
			"primary_score":	999742,
			"second_score":	182964
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1369,
			"primary_score":	999858,
			"second_score":	203903
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1371,
			"primary_score":	999858,
			"second_score":	203902
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1372,
			"primary_score":	999860,
			"second_score":	203901
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1373,
			"primary_score":	999860,
			"second_score":	203891
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1374,
			"primary_score":	999976,
			"second_score":	212306
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1375,
			"primary_score":	999976,
			"second_score":	212305
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1378,
			"primary_score":	999976,
			"second_score":	212304
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1379,
			"primary_score":	999976,
			"second_score":	212285
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1380,
			"primary_score":	999976,
			"second_score":	212280
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1381,
			"primary_score":	999976,
			"second_score":	212270
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1387,
			"primary_score":	999858,
			"second_score":	203890
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1388,
			"primary_score":	999860,
			"second_score":	203889
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1389,
			"primary_score":	999860,
			"second_score":	203885
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1391,
			"primary_score":	999867,
			"second_score":	204220
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1392,
			"primary_score":	999867,
			"second_score":	204219
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1393,
			"primary_score":	999867,
			"second_score":	204218
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1395,
			"primary_score":	999858,
			"second_score":	203881
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1396,
			"primary_score":	999858,
			"second_score":	203793
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1402,
			"primary_score":	999858,
			"second_score":	203976
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1404,
			"primary_score":	999858,
			"second_score":	203966
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1406,
			"primary_score":	999858,
			"second_score":	203965
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1407,
			"primary_score":	999866,
			"second_score":	203964
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1408,
			"primary_score":	999866,
			"second_score":	203960
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1414,
			"primary_score":	999858,
			"second_score":	203956
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1415,
			"primary_score":	999858,
			"second_score":	203952
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1421,
			"primary_score":	999715,
			"second_score":	171019
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1427,
			"primary_score":	999716,
			"second_score":	171018
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1428,
			"primary_score":	999718,
			"second_score":	171017
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1430,
			"primary_score":	999718,
			"second_score":	171016
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1433,
			"primary_score":	999718,
			"second_score":	171015
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1435,
			"primary_score":	999718,
			"second_score":	171014
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1446,
			"primary_score":	999718,
			"second_score":	171013
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1501,
			"primary_score":	999922,
			"second_score":	208129
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1502,
			"primary_score":	999922,
			"second_score":	208128
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1503,
			"primary_score":	999922,
			"second_score":	208127
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1504,
			"primary_score":	999922,
			"second_score":	208126
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1505,
			"primary_score":	999922,
			"second_score":	208125
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1506,
			"primary_score":	999922,
			"second_score":	208124
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1507,
			"primary_score":	999922,
			"second_score":	208123
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1508,
			"primary_score":	999922,
			"second_score":	208122
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1510,
			"primary_score":	999922,
			"second_score":	208121
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1511,
			"primary_score":	999947,
			"second_score":	215622
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1517,
			"primary_score":	999947,
			"second_score":	215621
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1519,
			"primary_score":	999962,
			"second_score":	208120
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1521,
			"primary_score":	999922,
			"second_score":	208119
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1525,
			"primary_score":	999922,
			"second_score":	208118
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1527,
			"primary_score":	999922,
			"second_score":	208117
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1528,
			"primary_score":	999922,
			"second_score":	208116
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1529,
			"primary_score":	999922,
			"second_score":	208115
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1530,
			"primary_score":	999922,
			"second_score":	207953
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1532,
			"primary_score":	999922,
			"second_score":	207952
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1533,
			"primary_score":	999922,
			"second_score":	207951
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1536,
			"primary_score":	999922,
			"second_score":	207950
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1538,
			"primary_score":	999922,
			"second_score":	207949
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1539,
			"primary_score":	999922,
			"second_score":	207948
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1541,
			"primary_score":	999922,
			"second_score":	207947
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1543,
			"primary_score":	999922,
			"second_score":	207945
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1544,
			"primary_score":	999947,
			"second_score":	215445
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1546,
			"primary_score":	999947,
			"second_score":	215200
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1550,
			"primary_score":	999947,
			"second_score":	214831
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1551,
			"primary_score":	999947,
			"second_score":	214805
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1553,
			"primary_score":	999947,
			"second_score":	214798
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1557,
			"primary_score":	999947,
			"second_score":	214797
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1561,
			"primary_score":	999947,
			"second_score":	214796
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1592,
			"primary_score":	999947,
			"second_score":	214795
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1594,
			"primary_score":	999947,
			"second_score":	214794
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1595,
			"primary_score":	999947,
			"second_score":	214793
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1598,
			"primary_score":	999947,
			"second_score":	214674
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1602,
			"primary_score":	999948,
			"second_score":	214673
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1607,
			"primary_score":	999948,
			"second_score":	214672
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1609,
			"primary_score":	999948,
			"second_score":	214671
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1611,
			"primary_score":	999948,
			"second_score":	214670
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1616,
			"primary_score":	999948,
			"second_score":	214669
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1621,
			"primary_score":	999948,
			"second_score":	214668
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1626,
			"primary_score":	999948,
			"second_score":	214667
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1631,
			"primary_score":	999948,
			"second_score":	214666
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1636,
			"primary_score":	999948,
			"second_score":	214665
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1641,
			"primary_score":	999948,
			"second_score":	214664
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1646,
			"primary_score":	999984,
			"second_score":	214663
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1647,
			"primary_score":	999984,
			"second_score":	214662
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1649,
			"primary_score":	999947,
			"second_score":	214661
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1652,
			"primary_score":	999947,
			"second_score":	214659
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1654,
			"primary_score":	999962,
			"second_score":	207944
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1655,
			"primary_score":	999962,
			"second_score":	207934
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1657,
			"primary_score":	999962,
			"second_score":	207933
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1668,
			"primary_score":	999962,
			"second_score":	207932
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1671,
			"primary_score":	999962,
			"second_score":	207875
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1672,
			"primary_score":	999962,
			"second_score":	207874
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1673,
			"primary_score":	999962,
			"second_score":	207873
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1674,
			"primary_score":	999962,
			"second_score":	207832
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1675,
			"primary_score":	999962,
			"second_score":	207631
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1676,
			"primary_score":	999962,
			"second_score":	207504
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1677,
			"primary_score":	999962,
			"second_score":	207503
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1678,
			"primary_score":	999962,
			"second_score":	207412
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1679,
			"primary_score":	999962,
			"second_score":	207409
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1680,
			"primary_score":	999962,
			"second_score":	207408
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1681,
			"primary_score":	999962,
			"second_score":	207353
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1682,
			"primary_score":	999962,
			"second_score":	207327
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1685,
			"primary_score":	999922,
			"second_score":	207320
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1694,
			"primary_score":	999922,
			"second_score":	207319
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1696,
			"primary_score":	999922,
			"second_score":	207318
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1698,
			"primary_score":	999922,
			"second_score":	207317
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1699,
			"primary_score":	999922,
			"second_score":	207316
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1700,
			"primary_score":	999922,
			"second_score":	207315
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1702,
			"primary_score":	999922,
			"second_score":	207314
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1704,
			"primary_score":	999922,
			"second_score":	207288
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1706,
			"primary_score":	999922,
			"second_score":	207287
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1708,
			"primary_score":	999922,
			"second_score":	207286
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1709,
			"primary_score":	999922,
			"second_score":	207285
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1711,
			"primary_score":	999922,
			"second_score":	207284
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1715,
			"primary_score":	999922,
			"second_score":	207258
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1763,
			"primary_score":	999922,
			"second_score":	200001
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1764,
			"primary_score":	999922,
			"second_score":	200000
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1766,
			"primary_score":	999922,
			"second_score":	199999
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1767,
			"primary_score":	999922,
			"second_score":	199995
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1769,
			"primary_score":	999922,
			"second_score":	199937
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1770,
			"primary_score":	999922,
			"second_score":	199638
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1772,
			"primary_score":	999922,
			"second_score":	199605
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1773,
			"primary_score":	999947,
			"second_score":	210691
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1777,
			"primary_score":	999962,
			"second_score":	199604
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1778,
			"primary_score":	999962,
			"second_score":	199603
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1779,
			"primary_score":	999962,
			"second_score":	199568
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1780,
			"primary_score":	999962,
			"second_score":	199567
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1785,
			"primary_score":	999922,
			"second_score":	199566
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1786,
			"primary_score":	999922,
			"second_score":	199564
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1790,
			"primary_score":	999922,
			"second_score":	199563
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1791,
			"primary_score":	999922,
			"second_score":	199541
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1797,
			"primary_score":	999956,
			"second_score":	205729
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1798,
			"primary_score":	999956,
			"second_score":	205728
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1799,
			"primary_score":	999956,
			"second_score":	205727
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1801,
			"primary_score":	999956,
			"second_score":	205726
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1810,
			"primary_score":	999956,
			"second_score":	205725
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1813,
			"primary_score":	999956,
			"second_score":	205698
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1814,
			"primary_score":	999956,
			"second_score":	205697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1815,
			"primary_score":	999956,
			"second_score":	205597
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1816,
			"primary_score":	999956,
			"second_score":	205596
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1817,
			"primary_score":	999956,
			"second_score":	205595
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1827,
			"primary_score":	999956,
			"second_score":	205594
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1828,
			"primary_score":	999956,
			"second_score":	205584
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1829,
			"primary_score":	999956,
			"second_score":	205583
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1830,
			"primary_score":	999956,
			"second_score":	205582
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1831,
			"primary_score":	999956,
			"second_score":	205578
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1832,
			"primary_score":	999956,
			"second_score":	205574
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1835,
			"primary_score":	999956,
			"second_score":	205573
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1836,
			"primary_score":	999956,
			"second_score":	205572
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1838,
			"primary_score":	999956,
			"second_score":	205571
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1839,
			"primary_score":	999956,
			"second_score":	205491
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1840,
			"primary_score":	999956,
			"second_score":	205490
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1841,
			"primary_score":	999956,
			"second_score":	205417
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1842,
			"primary_score":	999956,
			"second_score":	205416
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1843,
			"primary_score":	999956,
			"second_score":	205415
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1844,
			"primary_score":	999956,
			"second_score":	205414
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1845,
			"primary_score":	999956,
			"second_score":	205413
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1846,
			"primary_score":	999956,
			"second_score":	205412
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1848,
			"primary_score":	999956,
			"second_score":	205411
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2098,
			"primary_score":	999950,
			"second_score":	217501
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2099,
			"primary_score":	999950,
			"second_score":	217500
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2100,
			"primary_score":	999950,
			"second_score":	217499
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2101,
			"primary_score":	999950,
			"second_score":	217498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2102,
			"primary_score":	999950,
			"second_score":	217497
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2104,
			"primary_score":	999950,
			"second_score":	217496
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2105,
			"primary_score":	999950,
			"second_score":	217495
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2147,
			"primary_score":	999950,
			"second_score":	217494
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2172,
			"primary_score":	999950,
			"second_score":	217528
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2173,
			"primary_score":	999950,
			"second_score":	217527
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2175,
			"primary_score":	999950,
			"second_score":	217526
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2184,
			"primary_score":	999950,
			"second_score":	217525
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2185,
			"primary_score":	999950,
			"second_score":	217523
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2187,
			"primary_score":	999950,
			"second_score":	217513
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2188,
			"primary_score":	999950,
			"second_score":	217512
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2189,
			"primary_score":	999950,
			"second_score":	217511
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2190,
			"primary_score":	999950,
			"second_score":	217510
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2191,
			"primary_score":	999950,
			"second_score":	217509
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2192,
			"primary_score":	999950,
			"second_score":	217508
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2194,
			"primary_score":	999950,
			"second_score":	217507
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2195,
			"primary_score":	999950,
			"second_score":	217502
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2205,
			"primary_score":	999950,
			"second_score":	217493
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2206,
			"primary_score":	999950,
			"second_score":	217492
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2208,
			"primary_score":	999950,
			"second_score":	217184
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2213,
			"primary_score":	999950,
			"second_score":	217183
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2214,
			"primary_score":	999950,
			"second_score":	217181
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2215,
			"primary_score":	999950,
			"second_score":	217180
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2216,
			"primary_score":	999950,
			"second_score":	217175
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2320,
			"primary_score":	999922,
			"second_score":	199633
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2322,
			"primary_score":	999922,
			"second_score":	199632
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2323,
			"primary_score":	999922,
			"second_score":	199628
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2324,
			"primary_score":	999922,
			"second_score":	199627
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2519,
			"primary_score":	999745,
			"second_score":	171828
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2523,
			"primary_score":	999745,
			"second_score":	171790
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2554,
			"primary_score":	999922,
			"second_score":	199985
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2556,
			"primary_score":	999922,
			"second_score":	199984
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2557,
			"primary_score":	999922,
			"second_score":	199983
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2572,
			"primary_score":	999846,
			"second_score":	199976
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2575,
			"primary_score":	999846,
			"second_score":	199975
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2576,
			"primary_score":	999922,
			"second_score":	199974
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2778,
			"primary_score":	999999,
			"second_score":	209153
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2780,
			"primary_score":	999999,
			"second_score":	209152
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2781,
			"primary_score":	999999,
			"second_score":	209151
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2789,
			"primary_score":	999999,
			"second_score":	209150
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4005,
			"primary_score":	999963,
			"second_score":	199466
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4006,
			"primary_score":	999963,
			"second_score":	199465
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4008,
			"primary_score":	999963,
			"second_score":	199464
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4009,
			"primary_score":	999963,
			"second_score":	199463
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4010,
			"primary_score":	999963,
			"second_score":	199462
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4016,
			"primary_score":	999963,
			"second_score":	199461
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4017,
			"primary_score":	999963,
			"second_score":	199450
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4033,
			"primary_score":	999963,
			"second_score":	199396
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4034,
			"primary_score":	999963,
			"second_score":	199395
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4035,
			"primary_score":	999963,
			"second_score":	199394
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4138,
			"primary_score":	999954,
			"second_score":	228716
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4139,
			"primary_score":	999954,
			"second_score":	228715
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4141,
			"primary_score":	999954,
			"second_score":	228714
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4142,
			"primary_score":	999954,
			"second_score":	228713
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4143,
			"primary_score":	999954,
			"second_score":	228712
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4148,
			"primary_score":	999954,
			"second_score":	228711
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4152,
			"primary_score":	999954,
			"second_score":	228700
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4154,
			"primary_score":	999954,
			"second_score":	228699
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4155,
			"primary_score":	999954,
			"second_score":	228698
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4167,
			"primary_score":	999954,
			"second_score":	228652
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4168,
			"primary_score":	999954,
			"second_score":	228651
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4170,
			"primary_score":	999954,
			"second_score":	228648
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4177,
			"primary_score":	999992,
			"second_score":	210092
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4178,
			"primary_score":	999992,
			"second_score":	210091
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4179,
			"primary_score":	999992,
			"second_score":	210090
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4181,
			"primary_score":	999992,
			"second_score":	210089
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4182,
			"primary_score":	999992,
			"second_score":	210088
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4183,
			"primary_score":	999992,
			"second_score":	210087
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4189,
			"primary_score":	999992,
			"second_score":	210086
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4191,
			"primary_score":	999992,
			"second_score":	210075
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4202,
			"primary_score":	999992,
			"second_score":	210074
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4205,
			"primary_score":	999992,
			"second_score":	210073
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4207,
			"primary_score":	999992,
			"second_score":	210072
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4211,
			"primary_score":	999992,
			"second_score":	210071
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4213,
			"primary_score":	999992,
			"second_score":	208660
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4216,
			"primary_score":	999992,
			"second_score":	208659
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4219,
			"primary_score":	999992,
			"second_score":	208610
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4225,
			"primary_score":	999923,
			"second_score":	199470
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4226,
			"primary_score":	999923,
			"second_score":	199469
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4228,
			"primary_score":	999923,
			"second_score":	199468
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4232,
			"primary_score":	999923,
			"second_score":	199467
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4237,
			"primary_score":	999963,
			"second_score":	199393
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4238,
			"primary_score":	999963,
			"second_score":	199392
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4243,
			"primary_score":	999954,
			"second_score":	228647
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4244,
			"primary_score":	999954,
			"second_score":	228646
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4247,
			"primary_score":	999992,
			"second_score":	210280
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4248,
			"primary_score":	999992,
			"second_score":	210279
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4249,
			"primary_score":	999992,
			"second_score":	210278
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4251,
			"primary_score":	999992,
			"second_score":	210277
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4252,
			"primary_score":	999992,
			"second_score":	210276
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4268,
			"primary_score":	999992,
			"second_score":	210093
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4272,
			"primary_score":	999992,
			"second_score":	208609
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4273,
			"primary_score":	999992,
			"second_score":	208599
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4275,
			"primary_score":	999992,
			"second_score":	208592
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4276,
			"primary_score":	999992,
			"second_score":	208591
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4290,
			"primary_score":	999923,
			"second_score":	199391
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4291,
			"primary_score":	999923,
			"second_score":	199351
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4292,
			"primary_score":	999923,
			"second_score":	199341
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4293,
			"primary_score":	999923,
			"second_score":	199331
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4570,
			"primary_score":	999947,
			"second_score":	217151
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4571,
			"primary_score":	999947,
			"second_score":	217150
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4572,
			"primary_score":	999947,
			"second_score":	217149
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4573,
			"primary_score":	999947,
			"second_score":	217148
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4574,
			"primary_score":	999947,
			"second_score":	217147
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4575,
			"primary_score":	999947,
			"second_score":	217146
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4577,
			"primary_score":	999947,
			"second_score":	217145
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4582,
			"primary_score":	999947,
			"second_score":	217144
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4584,
			"primary_score":	999947,
			"second_score":	217003
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4590,
			"primary_score":	999947,
			"second_score":	216998
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4595,
			"primary_score":	999947,
			"second_score":	216997
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4607,
			"primary_score":	999947,
			"second_score":	216996
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4617,
			"primary_score":	999947,
			"second_score":	216995
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4618,
			"primary_score":	999947,
			"second_score":	216898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4619,
			"primary_score":	999947,
			"second_score":	216897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4620,
			"primary_score":	999947,
			"second_score":	216821
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4622,
			"primary_score":	999947,
			"second_score":	216820
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4623,
			"primary_score":	999947,
			"second_score":	216716
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4624,
			"primary_score":	999947,
			"second_score":	216714
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4625,
			"primary_score":	999947,
			"second_score":	216713
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4627,
			"primary_score":	999947,
			"second_score":	216712
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4628,
			"primary_score":	999992,
			"second_score":	216711
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4641,
			"primary_score":	999992,
			"second_score":	216710
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4644,
			"primary_score":	999947,
			"second_score":	216709
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4645,
			"primary_score":	999947,
			"second_score":	216699
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4646,
			"primary_score":	999947,
			"second_score":	216698
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4647,
			"primary_score":	999947,
			"second_score":	216657
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4648,
			"primary_score":	999947,
			"second_score":	216449
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4650,
			"primary_score":	999947,
			"second_score":	216310
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4652,
			"primary_score":	999947,
			"second_score":	216309
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4653,
			"primary_score":	999992,
			"second_score":	216308
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4654,
			"primary_score":	999992,
			"second_score":	216307
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4656,
			"primary_score":	999954,
			"second_score":	239287
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4659,
			"primary_score":	999947,
			"second_score":	216306
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4660,
			"primary_score":	999947,
			"second_score":	216229
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4662,
			"primary_score":	999947,
			"second_score":	216226
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4663,
			"primary_score":	999947,
			"second_score":	216180
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4665,
			"primary_score":	999947,
			"second_score":	216179
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4666,
			"primary_score":	999947,
			"second_score":	216177
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4667,
			"primary_score":	999947,
			"second_score":	216176
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4669,
			"primary_score":	999947,
			"second_score":	216171
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4690,
			"primary_score":	999947,
			"second_score":	210347
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4692,
			"primary_score":	999947,
			"second_score":	210346
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4698,
			"primary_score":	999947,
			"second_score":	210345
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4704,
			"primary_score":	999947,
			"second_score":	210344
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4711,
			"primary_score":	999947,
			"second_score":	210343
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4716,
			"primary_score":	999947,
			"second_score":	210341
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4729,
			"primary_score":	999947,
			"second_score":	210340
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4731,
			"primary_score":	999947,
			"second_score":	210339
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4732,
			"primary_score":	999947,
			"second_score":	210336
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4740,
			"primary_score":	999947,
			"second_score":	210335
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4746,
			"primary_score":	999947,
			"second_score":	210334
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4861,
			"primary_score":	999993,
			"second_score":	238548
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4862,
			"primary_score":	999993,
			"second_score":	238547
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4863,
			"primary_score":	999993,
			"second_score":	238546
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4864,
			"primary_score":	999993,
			"second_score":	238545
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4866,
			"primary_score":	999993,
			"second_score":	238544
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4870,
			"primary_score":	999993,
			"second_score":	238543
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4874,
			"primary_score":	999993,
			"second_score":	238542
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4879,
			"primary_score":	999993,
			"second_score":	238541
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4882,
			"primary_score":	999993,
			"second_score":	238522
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4884,
			"primary_score":	999993,
			"second_score":	238498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4887,
			"primary_score":	999993,
			"second_score":	238497
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4888,
			"primary_score":	999993,
			"second_score":	238494
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4891,
			"primary_score":	999993,
			"second_score":	238493
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4898,
			"primary_score":	999993,
			"second_score":	238492
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4899,
			"primary_score":	999993,
			"second_score":	237924
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5098,
			"primary_score":	999924,
			"second_score":	221381
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5100,
			"primary_score":	999707,
			"second_score":	137275
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5105,
			"primary_score":	999707,
			"second_score":	137274
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6096,
			"primary_score":	999707,
			"second_score":	129895
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6097,
			"primary_score":	999707,
			"second_score":	129893
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6099,
			"primary_score":	999707,
			"second_score":	129892
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6101,
			"primary_score":	999707,
			"second_score":	129882
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6102,
			"primary_score":	999707,
			"second_score":	129881
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6103,
			"primary_score":	999707,
			"second_score":	129877
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6104,
			"primary_score":	999707,
			"second_score":	129876
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6105,
			"primary_score":	999707,
			"second_score":	129875
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6107,
			"primary_score":	999707,
			"second_score":	129870
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6113,
			"primary_score":	999707,
			"second_score":	127068
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6115,
			"primary_score":	999707,
			"second_score":	127058
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6117,
			"primary_score":	999707,
			"second_score":	127056
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6118,
			"primary_score":	999707,
			"second_score":	127055
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6119,
			"primary_score":	999707,
			"second_score":	127054
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6120,
			"primary_score":	999707,
			"second_score":	127052
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6121,
			"primary_score":	999707,
			"second_score":	127048
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6123,
			"primary_score":	999707,
			"second_score":	127047
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6124,
			"primary_score":	999707,
			"second_score":	127042
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6126,
			"primary_score":	999707,
			"second_score":	127040
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6127,
			"primary_score":	999707,
			"second_score":	127030
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6128,
			"primary_score":	999707,
			"second_score":	127029
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6129,
			"primary_score":	999707,
			"second_score":	127028
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6135,
			"primary_score":	999707,
			"second_score":	126638
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6137,
			"primary_score":	999707,
			"second_score":	126628
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6138,
			"primary_score":	999707,
			"second_score":	126627
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6139,
			"primary_score":	999707,
			"second_score":	126623
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6140,
			"primary_score":	999707,
			"second_score":	126525
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6142,
			"primary_score":	999707,
			"second_score":	126524
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6144,
			"primary_score":	999707,
			"second_score":	126522
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6146,
			"primary_score":	999707,
			"second_score":	126517
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6221,
			"primary_score":	999736,
			"second_score":	172040
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6280,
			"primary_score":	999707,
			"second_score":	134066
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6283,
			"primary_score":	999707,
			"second_score":	134065
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6284,
			"primary_score":	999707,
			"second_score":	134064
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6328,
			"primary_score":	999947,
			"second_score":	216749
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6329,
			"primary_score":	999947,
			"second_score":	216748
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6330,
			"primary_score":	999947,
			"second_score":	216747
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6337,
			"primary_score":	999947,
			"second_score":	216743
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6338,
			"primary_score":	999947,
			"second_score":	216742
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6339,
			"primary_score":	999947,
			"second_score":	216741
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6340,
			"primary_score":	999947,
			"second_score":	216740
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6341,
			"primary_score":	999947,
			"second_score":	216739
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6342,
			"primary_score":	999947,
			"second_score":	216738
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6343,
			"primary_score":	999947,
			"second_score":	216737
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6344,
			"primary_score":	999947,
			"second_score":	216736
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6345,
			"primary_score":	999947,
			"second_score":	216735
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6346,
			"primary_score":	999947,
			"second_score":	216734
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6347,
			"primary_score":	999947,
			"second_score":	216733
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6348,
			"primary_score":	999947,
			"second_score":	216732
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6349,
			"primary_score":	999947,
			"second_score":	216731
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6350,
			"primary_score":	999947,
			"second_score":	216730
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6351,
			"primary_score":	999947,
			"second_score":	216729
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6352,
			"primary_score":	999947,
			"second_score":	216728
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6353,
			"primary_score":	999947,
			"second_score":	216727
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6354,
			"primary_score":	999947,
			"second_score":	216726
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6355,
			"primary_score":	999947,
			"second_score":	216725
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6356,
			"primary_score":	999947,
			"second_score":	216724
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6357,
			"primary_score":	999947,
			"second_score":	216723
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6358,
			"primary_score":	999947,
			"second_score":	216722
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6359,
			"primary_score":	999947,
			"second_score":	216721
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6360,
			"primary_score":	999947,
			"second_score":	216720
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6361,
			"primary_score":	999947,
			"second_score":	216719
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6362,
			"primary_score":	999947,
			"second_score":	216718
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6363,
			"primary_score":	999947,
			"second_score":	216717
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6373,
			"primary_score":	999950,
			"second_score":	217506
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6376,
			"primary_score":	999950,
			"second_score":	217505
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6379,
			"primary_score":	999950,
			"second_score":	217504
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6383,
			"primary_score":	999950,
			"second_score":	217503
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	32,
			"primary_score":	999707,
			"second_score":	6291
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	33,
			"primary_score":	999707,
			"second_score":	114845
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	35,
			"primary_score":	999707,
			"second_score":	6290
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	60,
			"primary_score":	999707,
			"second_score":	114627
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	171,
			"primary_score":	999707,
			"second_score":	115361
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	174,
			"primary_score":	999707,
			"second_score":	115360
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	73,
			"primary_score":	999707,
			"second_score":	127278
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	71,
			"primary_score":	999707,
			"second_score":	128220
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	72,
			"primary_score":	999707,
			"second_score":	128218
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	73,
			"primary_score":	999707,
			"second_score":	128216
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	74,
			"primary_score":	999707,
			"second_score":	128214
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	177,
			"primary_score":	999707,
			"second_score":	131201
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	182,
			"primary_score":	999707,
			"second_score":	128222
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	184,
			"primary_score":	999707,
			"second_score":	128221
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	185,
			"primary_score":	999707,
			"second_score":	128213
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	273,
			"primary_score":	999741,
			"second_score":	131403
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	275,
			"primary_score":	999741,
			"second_score":	131402
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	276,
			"primary_score":	999962,
			"second_score":	131401
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	277,
			"primary_score":	999962,
			"second_score":	131399
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	278,
			"primary_score":	999962,
			"second_score":	131398
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	279,
			"primary_score":	999742,
			"second_score":	150839
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	280,
			"primary_score":	999742,
			"second_score":	150828
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	281,
			"primary_score":	999742,
			"second_score":	150826
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	283,
			"primary_score":	999741,
			"second_score":	131397
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	298,
			"primary_score":	999742,
			"second_score":	131075
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	300,
			"primary_score":	999742,
			"second_score":	131074
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	303,
			"primary_score":	999744,
			"second_score":	131073
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	439,
			"primary_score":	999741,
			"second_score":	131406
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	441,
			"primary_score":	999741,
			"second_score":	131405
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	442,
			"primary_score":	999741,
			"second_score":	131404
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	602,
			"primary_score":	999707,
			"second_score":	128111
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	603,
			"primary_score":	999707,
			"second_score":	128110
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	604,
			"primary_score":	999707,
			"second_score":	128109
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	606,
			"primary_score":	999707,
			"second_score":	128108
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	611,
			"primary_score":	999707,
			"second_score":	128107
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	613,
			"primary_score":	999707,
			"second_score":	128106
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	629,
			"primary_score":	999707,
			"second_score":	128105
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	638,
			"primary_score":	999707,
			"second_score":	128104
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	856,
			"primary_score":	999787,
			"second_score":	150670
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	857,
			"primary_score":	999787,
			"second_score":	150669
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	859,
			"primary_score":	999787,
			"second_score":	150668
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	865,
			"primary_score":	999787,
			"second_score":	150667
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	866,
			"primary_score":	999787,
			"second_score":	150665
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	884,
			"primary_score":	999787,
			"second_score":	150663
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	885,
			"primary_score":	999787,
			"second_score":	150661
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	886,
			"primary_score":	999787,
			"second_score":	150659
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	893,
			"primary_score":	999787,
			"second_score":	150657
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	894,
			"primary_score":	999787,
			"second_score":	150656
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	895,
			"primary_score":	999787,
			"second_score":	150654
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	896,
			"primary_score":	999787,
			"second_score":	150652
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	82,
			"primary_score":	999707,
			"second_score":	127343
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	83,
			"primary_score":	999707,
			"second_score":	127341
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	85,
			"primary_score":	999707,
			"second_score":	127340
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	86,
			"primary_score":	999707,
			"second_score":	127339
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	87,
			"primary_score":	999707,
			"second_score":	127337
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	88,
			"primary_score":	999707,
			"second_score":	127330
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	91,
			"primary_score":	999707,
			"second_score":	127353
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	93,
			"primary_score":	999707,
			"second_score":	127352
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	94,
			"primary_score":	999707,
			"second_score":	127350
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	97,
			"primary_score":	999707,
			"second_score":	127348
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	103,
			"primary_score":	999707,
			"second_score":	120775
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	105,
			"primary_score":	999707,
			"second_score":	120774
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	113,
			"primary_score":	999707,
			"second_score":	120773
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	155,
			"primary_score":	999707,
			"second_score":	120772
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	199,
			"primary_score":	999707,
			"second_score":	117512
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	201,
			"primary_score":	999707,
			"second_score":	117511
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	202,
			"primary_score":	999707,
			"second_score":	117510
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	203,
			"primary_score":	999707,
			"second_score":	117509
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	204,
			"primary_score":	999707,
			"second_score":	117464
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	217,
			"primary_score":	999707,
			"second_score":	128049
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	222,
			"primary_score":	999707,
			"second_score":	148422
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	223,
			"primary_score":	999707,
			"second_score":	148420
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	228,
			"primary_score":	999945,
			"second_score":	152236
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	245,
			"primary_score":	999707,
			"second_score":	133334
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	247,
			"primary_score":	999707,
			"second_score":	133333
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	250,
			"primary_score":	999707,
			"second_score":	133332
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	265,
			"primary_score":	999707,
			"second_score":	133331
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	267,
			"primary_score":	999707,
			"second_score":	133329
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	268,
			"primary_score":	999707,
			"second_score":	133328
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	269,
			"primary_score":	999707,
			"second_score":	133327
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	274,
			"primary_score":	999707,
			"second_score":	127310
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	280,
			"primary_score":	999707,
			"second_score":	127309
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	286,
			"primary_score":	999707,
			"second_score":	127287
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	293,
			"primary_score":	999707,
			"second_score":	127286
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	297,
			"primary_score":	999707,
			"second_score":	127285
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	305,
			"primary_score":	999707,
			"second_score":	128156
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	327,
			"primary_score":	999707,
			"second_score":	128155
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	328,
			"primary_score":	999707,
			"second_score":	128154
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	333,
			"primary_score":	999707,
			"second_score":	127392
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	334,
			"primary_score":	999707,
			"second_score":	127391
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	336,
			"primary_score":	999707,
			"second_score":	127390
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	337,
			"primary_score":	999707,
			"second_score":	127346
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	338,
			"primary_score":	999707,
			"second_score":	127345
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	339,
			"primary_score":	999707,
			"second_score":	127344
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	341,
			"primary_score":	999707,
			"second_score":	127311
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	346,
			"primary_score":	999961,
			"second_score":	131423
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	347,
			"primary_score":	999961,
			"second_score":	131422
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	349,
			"primary_score":	999961,
			"second_score":	131421
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	352,
			"primary_score":	999963,
			"second_score":	131420
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	367,
			"primary_score":	999707,
			"second_score":	128166
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	369,
			"primary_score":	999707,
			"second_score":	128165
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	371,
			"primary_score":	999707,
			"second_score":	128160
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	372,
			"primary_score":	999707,
			"second_score":	128159
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	373,
			"primary_score":	999707,
			"second_score":	128158
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	107,
			"primary_score":	999707,
			"second_score":	117153
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	119,
			"primary_score":	999707,
			"second_score":	115426
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	203,
			"primary_score":	999707,
			"second_score":	126629
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	206,
			"primary_score":	999707,
			"second_score":	126628
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	213,
			"primary_score":	999707,
			"second_score":	126712
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	214,
			"primary_score":	999707,
			"second_score":	126706
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	215,
			"primary_score":	999707,
			"second_score":	126705
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	216,
			"primary_score":	999707,
			"second_score":	126704
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	217,
			"primary_score":	999707,
			"second_score":	126701
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	219,
			"primary_score":	999707,
			"second_score":	126618
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	223,
			"primary_score":	999707,
			"second_score":	126582
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	229,
			"primary_score":	999707,
			"second_score":	125725
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	246,
			"primary_score":	999707,
			"second_score":	125719
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	247,
			"primary_score":	999707,
			"second_score":	125716
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	248,
			"primary_score":	999707,
			"second_score":	117636
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	250,
			"primary_score":	999707,
			"second_score":	117634
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	251,
			"primary_score":	999707,
			"second_score":	117628
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	254,
			"primary_score":	999707,
			"second_score":	117627
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	261,
			"primary_score":	999707,
			"second_score":	117626
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	268,
			"primary_score":	999707,
			"second_score":	117625
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	269,
			"primary_score":	999707,
			"second_score":	117621
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	270,
			"primary_score":	999707,
			"second_score":	117616
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	271,
			"primary_score":	999707,
			"second_score":	117607
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	272,
			"primary_score":	999707,
			"second_score":	117598
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	274,
			"primary_score":	999707,
			"second_score":	117596
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	284,
			"primary_score":	999707,
			"second_score":	117590
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	288,
			"primary_score":	999707,
			"second_score":	117589
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	289,
			"primary_score":	999707,
			"second_score":	117563
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	290,
			"primary_score":	999707,
			"second_score":	117516
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	293,
			"primary_score":	999707,
			"second_score":	117513
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	295,
			"primary_score":	999707,
			"second_score":	117463
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	298,
			"primary_score":	999707,
			"second_score":	117457
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	302,
			"primary_score":	999707,
			"second_score":	117456
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	303,
			"primary_score":	999707,
			"second_score":	117145
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	306,
			"primary_score":	999707,
			"second_score":	115418
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	307,
			"primary_score":	999992,
			"second_score":	115417
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	308,
			"primary_score":	999992,
			"second_score":	115390
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	309,
			"primary_score":	999992,
			"second_score":	115371
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	311,
			"primary_score":	999707,
			"second_score":	115370
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	313,
			"primary_score":	999707,
			"second_score":	115368
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	314,
			"primary_score":	999707,
			"second_score":	115362
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	315,
			"primary_score":	999707,
			"second_score":	114619
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	317,
			"primary_score":	999707,
			"second_score":	114617
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	322,
			"primary_score":	999707,
			"second_score":	114611
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	324,
			"primary_score":	999707,
			"second_score":	114542
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	325,
			"primary_score":	999707,
			"second_score":	114521
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	326,
			"primary_score":	999707,
			"second_score":	114517
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	327,
			"primary_score":	999707,
			"second_score":	114515
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	328,
			"primary_score":	999707,
			"second_score":	114513
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	329,
			"primary_score":	999707,
			"second_score":	114445
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	333,
			"primary_score":	999707,
			"second_score":	114444
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	335,
			"primary_score":	999707,
			"second_score":	114442
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	337,
			"primary_score":	999707,
			"second_score":	114437
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	344,
			"primary_score":	999882,
			"second_score":	130424
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	350,
			"primary_score":	999882,
			"second_score":	130422
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	354,
			"primary_score":	999882,
			"second_score":	130421
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	356,
			"primary_score":	999882,
			"second_score":	130420
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	357,
			"primary_score":	999882,
			"second_score":	130419
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	359,
			"primary_score":	999882,
			"second_score":	130418
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	372,
			"primary_score":	999881,
			"second_score":	130430
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	375,
			"primary_score":	999881,
			"second_score":	130428
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	397,
			"primary_score":	999707,
			"second_score":	129282
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	398,
			"primary_score":	999707,
			"second_score":	129281
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	407,
			"primary_score":	999707,
			"second_score":	129279
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	411,
			"primary_score":	999707,
			"second_score":	129278
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	412,
			"primary_score":	999707,
			"second_score":	129277
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	421,
			"primary_score":	999707,
			"second_score":	129284
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	430,
			"primary_score":	999707,
			"second_score":	114808
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	431,
			"primary_score":	999707,
			"second_score":	114806
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	432,
			"primary_score":	999707,
			"second_score":	114804
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	434,
			"primary_score":	999707,
			"second_score":	114803
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	435,
			"primary_score":	999707,
			"second_score":	117745
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	436,
			"primary_score":	999707,
			"second_score":	114789
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	437,
			"primary_score":	999707,
			"second_score":	114755
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	440,
			"primary_score":	999707,
			"second_score":	116555
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	442,
			"primary_score":	999707,
			"second_score":	116554
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	443,
			"primary_score":	999707,
			"second_score":	116552
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	446,
			"primary_score":	999707,
			"second_score":	116550
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	456,
			"primary_score":	999707,
			"second_score":	15292
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	457,
			"primary_score":	999707,
			"second_score":	15290
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	458,
			"primary_score":	999707,
			"second_score":	15288
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	459,
			"primary_score":	999707,
			"second_score":	15286
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	460,
			"primary_score":	999707,
			"second_score":	17651
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	461,
			"primary_score":	999707,
			"second_score":	17649
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	494,
			"primary_score":	999985,
			"second_score":	154234
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	495,
			"primary_score":	999985,
			"second_score":	154233
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	496,
			"primary_score":	999985,
			"second_score":	154232
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	497,
			"primary_score":	999985,
			"second_score":	154231
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	499,
			"primary_score":	999985,
			"second_score":	154230
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	501,
			"primary_score":	999985,
			"second_score":	154229
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	582,
			"primary_score":	999985,
			"second_score":	154228
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	683,
			"primary_score":	999985,
			"second_score":	154227
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	701,
			"primary_score":	999985,
			"second_score":	154235
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	735,
			"primary_score":	999972,
			"second_score":	122073
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	737,
			"primary_score":	999972,
			"second_score":	122072
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	738,
			"primary_score":	999972,
			"second_score":	122071
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	739,
			"primary_score":	999972,
			"second_score":	122070
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	740,
			"primary_score":	999972,
			"second_score":	122069
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	741,
			"primary_score":	999972,
			"second_score":	122068
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	742,
			"primary_score":	999972,
			"second_score":	122067
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	743,
			"primary_score":	999972,
			"second_score":	122066
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	744,
			"primary_score":	999972,
			"second_score":	122065
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	745,
			"primary_score":	999972,
			"second_score":	122064
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	747,
			"primary_score":	999972,
			"second_score":	122063
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	753,
			"primary_score":	999945,
			"second_score":	122062
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	754,
			"primary_score":	999945,
			"second_score":	122061
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	755,
			"primary_score":	999945,
			"second_score":	122060
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	756,
			"primary_score":	999945,
			"second_score":	122059
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	757,
			"primary_score":	999945,
			"second_score":	122058
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	758,
			"primary_score":	999945,
			"second_score":	122057
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	759,
			"primary_score":	999945,
			"second_score":	122056
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	760,
			"primary_score":	999945,
			"second_score":	122055
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	761,
			"primary_score":	999945,
			"second_score":	122054
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	762,
			"primary_score":	999945,
			"second_score":	122053
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	763,
			"primary_score":	999945,
			"second_score":	122052
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	765,
			"primary_score":	999945,
			"second_score":	122051
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	767,
			"primary_score":	999945,
			"second_score":	122050
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	771,
			"primary_score":	999945,
			"second_score":	122049
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	775,
			"primary_score":	999945,
			"second_score":	122048
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	784,
			"primary_score":	999945,
			"second_score":	122047
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	785,
			"primary_score":	999945,
			"second_score":	152780
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	786,
			"primary_score":	999945,
			"second_score":	152779
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	787,
			"primary_score":	999945,
			"second_score":	152778
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	788,
			"primary_score":	999945,
			"second_score":	152777
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	794,
			"primary_score":	999998,
			"second_score":	122046
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	797,
			"primary_score":	999945,
			"second_score":	122045
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	798,
			"primary_score":	999971,
			"second_score":	122044
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	799,
			"primary_score":	999971,
			"second_score":	122043
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	800,
			"primary_score":	999971,
			"second_score":	122042
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	802,
			"primary_score":	999971,
			"second_score":	122041
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	803,
			"primary_score":	999972,
			"second_score":	122040
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	806,
			"primary_score":	999971,
			"second_score":	122039
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	807,
			"primary_score":	999994,
			"second_score":	121631
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	811,
			"primary_score":	999994,
			"second_score":	121630
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	812,
			"primary_score":	999994,
			"second_score":	121629
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	814,
			"primary_score":	999994,
			"second_score":	121610
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	815,
			"primary_score":	999971,
			"second_score":	152336
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	823,
			"primary_score":	999971,
			"second_score":	152335
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	826,
			"primary_score":	999945,
			"second_score":	152316
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	827,
			"primary_score":	999945,
			"second_score":	152315
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	828,
			"primary_score":	999945,
			"second_score":	152314
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	829,
			"primary_score":	999945,
			"second_score":	152313
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	830,
			"primary_score":	999945,
			"second_score":	152312
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	831,
			"primary_score":	999945,
			"second_score":	152311
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	836,
			"primary_score":	999945,
			"second_score":	152310
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	848,
			"primary_score":	999945,
			"second_score":	152309
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	850,
			"primary_score":	999945,
			"second_score":	152307
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	851,
			"primary_score":	999972,
			"second_score":	152276
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	853,
			"primary_score":	999972,
			"second_score":	152275
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	883,
			"primary_score":	999972,
			"second_score":	152274
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	886,
			"primary_score":	999999,
			"second_score":	152272
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	887,
			"primary_score":	999999,
			"second_score":	152248
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	888,
			"primary_score":	999999,
			"second_score":	152247
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	889,
			"primary_score":	999999,
			"second_score":	152244
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	890,
			"primary_score":	999972,
			"second_score":	152282
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	891,
			"primary_score":	999972,
			"second_score":	152281
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	892,
			"primary_score":	999972,
			"second_score":	152279
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	898,
			"primary_score":	999972,
			"second_score":	152241
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	901,
			"primary_score":	999945,
			"second_score":	152239
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	902,
			"primary_score":	999945,
			"second_score":	152237
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	904,
			"primary_score":	999945,
			"second_score":	152235
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	905,
			"primary_score":	999945,
			"second_score":	152234
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	907,
			"primary_score":	999945,
			"second_score":	152233
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	909,
			"primary_score":	999945,
			"second_score":	152232
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	910,
			"primary_score":	999945,
			"second_score":	152231
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	911,
			"primary_score":	999961,
			"second_score":	152230
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	916,
			"primary_score":	999945,
			"second_score":	152229
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	917,
			"primary_score":	999961,
			"second_score":	152228
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	920,
			"primary_score":	999961,
			"second_score":	152227
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	922,
			"primary_score":	999961,
			"second_score":	152226
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	925,
			"primary_score":	999985,
			"second_score":	152224
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	927,
			"primary_score":	999985,
			"second_score":	152223
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	928,
			"primary_score":	999985,
			"second_score":	152117
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	929,
			"primary_score":	999985,
			"second_score":	152116
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	930,
			"primary_score":	999985,
			"second_score":	152113
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	931,
			"primary_score":	999985,
			"second_score":	152104
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	938,
			"primary_score":	999945,
			"second_score":	152103
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	939,
			"primary_score":	999945,
			"second_score":	152102
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	941,
			"primary_score":	999945,
			"second_score":	152101
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	942,
			"primary_score":	999947,
			"second_score":	152100
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	943,
			"primary_score":	999947,
			"second_score":	152099
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	944,
			"primary_score":	999947,
			"second_score":	152098
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	947,
			"primary_score":	999947,
			"second_score":	152097
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	950,
			"primary_score":	999947,
			"second_score":	152096
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	951,
			"primary_score":	999947,
			"second_score":	152095
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	952,
			"primary_score":	999947,
			"second_score":	152094
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	953,
			"primary_score":	999947,
			"second_score":	152093
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	954,
			"primary_score":	999947,
			"second_score":	152092
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	955,
			"primary_score":	999947,
			"second_score":	152091
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	956,
			"primary_score":	999948,
			"second_score":	151757
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	967,
			"primary_score":	999948,
			"second_score":	151756
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	968,
			"primary_score":	999948,
			"second_score":	151755
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	969,
			"primary_score":	999948,
			"second_score":	151754
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	970,
			"primary_score":	999948,
			"second_score":	151753
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1013,
			"primary_score":	999946,
			"second_score":	151752
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1015,
			"primary_score":	999946,
			"second_score":	151678
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1016,
			"primary_score":	999962,
			"second_score":	151677
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1018,
			"primary_score":	999946,
			"second_score":	151602
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1019,
			"primary_score":	999946,
			"second_score":	151601
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1020,
			"primary_score":	999946,
			"second_score":	151600
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1021,
			"primary_score":	999946,
			"second_score":	151599
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1023,
			"primary_score":	999946,
			"second_score":	151598
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1026,
			"primary_score":	999946,
			"second_score":	151597
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1032,
			"primary_score":	999944,
			"second_score":	165016
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1033,
			"primary_score":	999944,
			"second_score":	165015
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1034,
			"primary_score":	999944,
			"second_score":	165014
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1035,
			"primary_score":	999944,
			"second_score":	165013
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1036,
			"primary_score":	999944,
			"second_score":	165012
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1037,
			"primary_score":	999944,
			"second_score":	165011
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1038,
			"primary_score":	999944,
			"second_score":	165010
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1039,
			"primary_score":	999944,
			"second_score":	165009
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1040,
			"primary_score":	999944,
			"second_score":	165008
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1041,
			"primary_score":	999944,
			"second_score":	165007
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1042,
			"primary_score":	999944,
			"second_score":	165006
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1043,
			"primary_score":	999944,
			"second_score":	165005
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1045,
			"primary_score":	999944,
			"second_score":	165004
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1050,
			"primary_score":	999982,
			"second_score":	165003
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1054,
			"primary_score":	999982,
			"second_score":	165002
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1055,
			"primary_score":	999982,
			"second_score":	165001
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1056,
			"primary_score":	999982,
			"second_score":	164882
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1058,
			"primary_score":	999982,
			"second_score":	164881
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1063,
			"primary_score":	999982,
			"second_score":	164880
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1066,
			"primary_score":	999944,
			"second_score":	164858
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1067,
			"primary_score":	999944,
			"second_score":	164847
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1068,
			"primary_score":	999982,
			"second_score":	164846
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1070,
			"primary_score":	999944,
			"second_score":	164844
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1149,
			"primary_score":	999984,
			"second_score":	165017
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1155,
			"primary_score":	999707,
			"second_score":	121846
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1156,
			"primary_score":	999707,
			"second_score":	121845
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1157,
			"primary_score":	999707,
			"second_score":	121844
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1158,
			"primary_score":	999707,
			"second_score":	121843
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1159,
			"primary_score":	999707,
			"second_score":	121842
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1161,
			"primary_score":	999707,
			"second_score":	121841
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1169,
			"primary_score":	999707,
			"second_score":	121840
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1170,
			"primary_score":	999707,
			"second_score":	121839
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1172,
			"primary_score":	999707,
			"second_score":	121838
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1176,
			"primary_score":	999707,
			"second_score":	121837
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1177,
			"primary_score":	999707,
			"second_score":	121836
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1178,
			"primary_score":	999707,
			"second_score":	121835
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1179,
			"primary_score":	999707,
			"second_score":	119348
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1181,
			"primary_score":	999707,
			"second_score":	119347
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1182,
			"primary_score":	999707,
			"second_score":	119346
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1183,
			"primary_score":	999707,
			"second_score":	119345
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1184,
			"primary_score":	999707,
			"second_score":	119344
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1185,
			"primary_score":	999707,
			"second_score":	119343
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1187,
			"primary_score":	999707,
			"second_score":	119342
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1188,
			"primary_score":	999707,
			"second_score":	119341
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1189,
			"primary_score":	999707,
			"second_score":	119340
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1190,
			"primary_score":	999707,
			"second_score":	119339
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1193,
			"primary_score":	999707,
			"second_score":	119338
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1195,
			"primary_score":	999707,
			"second_score":	119337
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1197,
			"primary_score":	999707,
			"second_score":	118972
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1198,
			"primary_score":	999707,
			"second_score":	118971
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1199,
			"primary_score":	999707,
			"second_score":	118970
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1202,
			"primary_score":	999707,
			"second_score":	118969
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1210,
			"primary_score":	999707,
			"second_score":	118938
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1211,
			"primary_score":	999707,
			"second_score":	118937
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1212,
			"primary_score":	999707,
			"second_score":	118936
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1213,
			"primary_score":	999707,
			"second_score":	118935
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1214,
			"primary_score":	999707,
			"second_score":	118846
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1215,
			"primary_score":	999707,
			"second_score":	118827
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1216,
			"primary_score":	999707,
			"second_score":	118826
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1220,
			"primary_score":	999707,
			"second_score":	118825
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1223,
			"primary_score":	999707,
			"second_score":	118824
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1235,
			"primary_score":	999707,
			"second_score":	121848
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1237,
			"primary_score":	999707,
			"second_score":	121847
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1238,
			"primary_score":	999707,
			"second_score":	118823
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1242,
			"primary_score":	999707,
			"second_score":	118822
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1248,
			"primary_score":	999707,
			"second_score":	121849
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1510,
			"primary_score":	999707,
			"second_score":	103476
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1732,
			"primary_score":	999992,
			"second_score":	129679
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1733,
			"primary_score":	999992,
			"second_score":	129678
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1735,
			"primary_score":	999992,
			"second_score":	129677
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1738,
			"primary_score":	999992,
			"second_score":	129676
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1739,
			"primary_score":	999992,
			"second_score":	129675
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1742,
			"primary_score":	999992,
			"second_score":	129674
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1747,
			"primary_score":	999992,
			"second_score":	129673
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1748,
			"primary_score":	999992,
			"second_score":	129672
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1750,
			"primary_score":	999994,
			"second_score":	129671
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1752,
			"primary_score":	999992,
			"second_score":	148089
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1753,
			"primary_score":	999992,
			"second_score":	147985
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1756,
			"primary_score":	999992,
			"second_score":	129670
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1758,
			"primary_score":	999992,
			"second_score":	129669
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1764,
			"primary_score":	999992,
			"second_score":	129668
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1765,
			"primary_score":	999992,
			"second_score":	129534
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1766,
			"primary_score":	999994,
			"second_score":	129533
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	182,
			"primary_score":	999707,
			"second_score":	14748
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	183,
			"primary_score":	999707,
			"second_score":	14745
		}, {
			"file":	"Zend/zend_float.c",
			"line":	44,
			"primary_score":	999707,
			"second_score":	114441
		}, {
			"file":	"Zend/zend_float.c",
			"line":	45,
			"primary_score":	999707,
			"second_score":	114440
		}, {
			"file":	"Zend/zend_float.c",
			"line":	48,
			"primary_score":	999707,
			"second_score":	114438
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	35,
			"primary_score":	999707,
			"second_score":	3139
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	36,
			"primary_score":	999707,
			"second_score":	3138
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	37,
			"primary_score":	999707,
			"second_score":	3137
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	84,
			"primary_score":	999707,
			"second_score":	3140
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	132,
			"primary_score":	999707,
			"second_score":	118538
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	142,
			"primary_score":	999707,
			"second_score":	118537
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	143,
			"primary_score":	999949,
			"second_score":	121593
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	144,
			"primary_score":	999949,
			"second_score":	121585
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	147,
			"primary_score":	999707,
			"second_score":	118536
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	149,
			"primary_score":	999707,
			"second_score":	118535
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	150,
			"primary_score":	999707,
			"second_score":	125772
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	152,
			"primary_score":	999707,
			"second_score":	125771
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	153,
			"primary_score":	999707,
			"second_score":	125770
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	155,
			"primary_score":	999707,
			"second_score":	125769
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	156,
			"primary_score":	999707,
			"second_score":	118401
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	157,
			"primary_score":	999707,
			"second_score":	125768
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	158,
			"primary_score":	999707,
			"second_score":	125767
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	159,
			"primary_score":	999707,
			"second_score":	125766
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	176,
			"primary_score":	999707,
			"second_score":	125765
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	177,
			"primary_score":	999707,
			"second_score":	125764
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	178,
			"primary_score":	999707,
			"second_score":	125763
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	179,
			"primary_score":	999707,
			"second_score":	125762
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	181,
			"primary_score":	999707,
			"second_score":	125761
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	183,
			"primary_score":	999707,
			"second_score":	125760
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	184,
			"primary_score":	999707,
			"second_score":	125759
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	186,
			"primary_score":	999707,
			"second_score":	125758
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	187,
			"primary_score":	999707,
			"second_score":	125757
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	188,
			"primary_score":	999707,
			"second_score":	125756
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	195,
			"primary_score":	999948,
			"second_score":	121590
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	197,
			"primary_score":	999948,
			"second_score":	121589
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	202,
			"primary_score":	999948,
			"second_score":	121588
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	204,
			"primary_score":	999948,
			"second_score":	121587
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	205,
			"primary_score":	999948,
			"second_score":	121586
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	206,
			"primary_score":	999948,
			"second_score":	151639
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	207,
			"primary_score":	999948,
			"second_score":	151638
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	208,
			"primary_score":	999948,
			"second_score":	151637
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	210,
			"primary_score":	999948,
			"second_score":	151636
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	212,
			"primary_score":	999952,
			"second_score":	151635
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	213,
			"primary_score":	999952,
			"second_score":	151634
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	214,
			"primary_score":	999952,
			"second_score":	151633
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	232,
			"primary_score":	999948,
			"second_score":	151632
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	233,
			"primary_score":	999948,
			"second_score":	151631
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	234,
			"primary_score":	999948,
			"second_score":	151630
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	235,
			"primary_score":	999948,
			"second_score":	151629
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	237,
			"primary_score":	999948,
			"second_score":	151628
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	239,
			"primary_score":	999948,
			"second_score":	151627
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	240,
			"primary_score":	999948,
			"second_score":	151626
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	242,
			"primary_score":	999948,
			"second_score":	151625
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	243,
			"primary_score":	999948,
			"second_score":	151624
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	244,
			"primary_score":	999948,
			"second_score":	151623
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	251,
			"primary_score":	999707,
			"second_score":	117744
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	253,
			"primary_score":	999707,
			"second_score":	117743
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	264,
			"primary_score":	999707,
			"second_score":	117742
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	265,
			"primary_score":	999707,
			"second_score":	117741
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	266,
			"primary_score":	999707,
			"second_score":	117735
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	653,
			"primary_score":	999707,
			"second_score":	113616
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	655,
			"primary_score":	999707,
			"second_score":	113615
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	728,
			"primary_score":	999707,
			"second_score":	113614
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	182,
			"primary_score":	999707,
			"second_score":	116549
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	183,
			"primary_score":	999707,
			"second_score":	118539
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	189,
			"primary_score":	999707,
			"second_score":	117740
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	190,
			"primary_score":	999707,
			"second_score":	117739
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	191,
			"primary_score":	999707,
			"second_score":	117738
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	192,
			"primary_score":	999707,
			"second_score":	117737
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	193,
			"primary_score":	999707,
			"second_score":	117736
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	103,
			"primary_score":	999922,
			"second_score":	121698
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	150,
			"primary_score":	999707,
			"second_score":	156982
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	152,
			"primary_score":	999707,
			"second_score":	156981
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	154,
			"primary_score":	999707,
			"second_score":	156980
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	158,
			"primary_score":	999707,
			"second_score":	156979
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	161,
			"primary_score":	999707,
			"second_score":	156978
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	164,
			"primary_score":	999707,
			"second_score":	156977
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	165,
			"primary_score":	999707,
			"second_score":	156976
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	166,
			"primary_score":	999707,
			"second_score":	156975
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	167,
			"primary_score":	999707,
			"second_score":	156974
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	168,
			"primary_score":	999707,
			"second_score":	156973
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	169,
			"primary_score":	999707,
			"second_score":	156972
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	170,
			"primary_score":	999707,
			"second_score":	156971
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	171,
			"primary_score":	999707,
			"second_score":	156970
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	172,
			"primary_score":	999707,
			"second_score":	156969
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	173,
			"primary_score":	999707,
			"second_score":	156968
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	174,
			"primary_score":	999707,
			"second_score":	156967
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	175,
			"primary_score":	999707,
			"second_score":	156966
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	197,
			"primary_score":	999707,
			"second_score":	133542
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	198,
			"primary_score":	999707,
			"second_score":	133541
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	199,
			"primary_score":	999707,
			"second_score":	133540
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	201,
			"primary_score":	999707,
			"second_score":	133539
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	203,
			"primary_score":	999707,
			"second_score":	133538
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	210,
			"primary_score":	999707,
			"second_score":	133537
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	212,
			"primary_score":	999707,
			"second_score":	133535
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	213,
			"primary_score":	999707,
			"second_score":	133428
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	215,
			"primary_score":	999707,
			"second_score":	133427
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	216,
			"primary_score":	999707,
			"second_score":	133426
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	217,
			"primary_score":	999707,
			"second_score":	133425
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	233,
			"primary_score":	999707,
			"second_score":	128326
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	243,
			"primary_score":	999707,
			"second_score":	143615
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	250,
			"primary_score":	999707,
			"second_score":	143614
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	251,
			"primary_score":	999707,
			"second_score":	143510
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	254,
			"primary_score":	999707,
			"second_score":	143509
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	255,
			"primary_score":	999707,
			"second_score":	143508
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	257,
			"primary_score":	999707,
			"second_score":	143507
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	258,
			"primary_score":	999707,
			"second_score":	143506
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	259,
			"primary_score":	999707,
			"second_score":	143501
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	260,
			"primary_score":	999707,
			"second_score":	143500
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	261,
			"primary_score":	999707,
			"second_score":	143496
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	265,
			"primary_score":	999707,
			"second_score":	143494
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	266,
			"primary_score":	999707,
			"second_score":	147846
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	267,
			"primary_score":	999707,
			"second_score":	143483
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	268,
			"primary_score":	999707,
			"second_score":	143482
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	270,
			"primary_score":	999707,
			"second_score":	143480
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	271,
			"primary_score":	999707,
			"second_score":	143479
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	272,
			"primary_score":	999707,
			"second_score":	143477
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	363,
			"primary_score":	999707,
			"second_score":	151463
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	364,
			"primary_score":	999707,
			"second_score":	151462
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	366,
			"primary_score":	999707,
			"second_score":	151461
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	367,
			"primary_score":	999707,
			"second_score":	151460
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	369,
			"primary_score":	999707,
			"second_score":	151458
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	372,
			"primary_score":	999707,
			"second_score":	151457
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	374,
			"primary_score":	999707,
			"second_score":	151456
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	375,
			"primary_score":	999707,
			"second_score":	151455
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	376,
			"primary_score":	999707,
			"second_score":	155805
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	401,
			"primary_score":	999707,
			"second_score":	155804
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	403,
			"primary_score":	999707,
			"second_score":	151454
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	404,
			"primary_score":	999707,
			"second_score":	151350
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	407,
			"primary_score":	999707,
			"second_score":	151349
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	408,
			"primary_score":	999707,
			"second_score":	151348
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	409,
			"primary_score":	999707,
			"second_score":	151347
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	410,
			"primary_score":	999707,
			"second_score":	151346
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	411,
			"primary_score":	999707,
			"second_score":	151318
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	415,
			"primary_score":	999707,
			"second_score":	155663
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	417,
			"primary_score":	999707,
			"second_score":	151313
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	418,
			"primary_score":	999707,
			"second_score":	151311
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	419,
			"primary_score":	999707,
			"second_score":	151310
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	420,
			"primary_score":	999707,
			"second_score":	151302
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	422,
			"primary_score":	999707,
			"second_score":	151300
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	423,
			"primary_score":	999707,
			"second_score":	151299
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	425,
			"primary_score":	999707,
			"second_score":	151298
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	426,
			"primary_score":	999707,
			"second_score":	155644
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	427,
			"primary_score":	999707,
			"second_score":	151295
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	433,
			"primary_score":	999707,
			"second_score":	155643
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	435,
			"primary_score":	999707,
			"second_score":	155642
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	437,
			"primary_score":	999707,
			"second_score":	155641
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	438,
			"primary_score":	999707,
			"second_score":	155640
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	439,
			"primary_score":	999707,
			"second_score":	155499
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	440,
			"primary_score":	999707,
			"second_score":	155498
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	441,
			"primary_score":	999707,
			"second_score":	155496
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	442,
			"primary_score":	999707,
			"second_score":	155495
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	443,
			"primary_score":	999707,
			"second_score":	155494
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	444,
			"primary_score":	999707,
			"second_score":	155493
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	445,
			"primary_score":	999707,
			"second_score":	155421
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	446,
			"primary_score":	999707,
			"second_score":	155419
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	455,
			"primary_score":	999707,
			"second_score":	155492
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	456,
			"primary_score":	999707,
			"second_score":	155491
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	458,
			"primary_score":	999707,
			"second_score":	155490
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	459,
			"primary_score":	999707,
			"second_score":	155489
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	463,
			"primary_score":	999707,
			"second_score":	155488
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	464,
			"primary_score":	999707,
			"second_score":	155487
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	465,
			"primary_score":	999707,
			"second_score":	155486
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	466,
			"primary_score":	999707,
			"second_score":	155429
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	467,
			"primary_score":	999707,
			"second_score":	155428
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	468,
			"primary_score":	999707,
			"second_score":	155424
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	469,
			"primary_score":	999707,
			"second_score":	155423
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	471,
			"primary_score":	999707,
			"second_score":	155422
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	476,
			"primary_score":	999707,
			"second_score":	47247
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	477,
			"primary_score":	999707,
			"second_score":	47246
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	479,
			"primary_score":	999707,
			"second_score":	47245
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	481,
			"primary_score":	999707,
			"second_score":	47244
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	482,
			"primary_score":	999707,
			"second_score":	47243
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	484,
			"primary_score":	999707,
			"second_score":	47227
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	486,
			"primary_score":	999707,
			"second_score":	47226
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	487,
			"primary_score":	999707,
			"second_score":	47225
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	488,
			"primary_score":	999707,
			"second_score":	47224
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	492,
			"primary_score":	999707,
			"second_score":	47223
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	493,
			"primary_score":	999707,
			"second_score":	47221
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	494,
			"primary_score":	999707,
			"second_score":	47220
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	496,
			"primary_score":	999707,
			"second_score":	47271
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	498,
			"primary_score":	999707,
			"second_score":	47219
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	499,
			"primary_score":	999707,
			"second_score":	51598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	501,
			"primary_score":	999707,
			"second_score":	47218
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	502,
			"primary_score":	999707,
			"second_score":	50185
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	505,
			"primary_score":	999707,
			"second_score":	47217
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	507,
			"primary_score":	999707,
			"second_score":	47216
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	508,
			"primary_score":	999707,
			"second_score":	47215
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	510,
			"primary_score":	999707,
			"second_score":	62017
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	512,
			"primary_score":	999707,
			"second_score":	47214
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	513,
			"primary_score":	999707,
			"second_score":	47213
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	515,
			"primary_score":	999707,
			"second_score":	47212
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	516,
			"primary_score":	999707,
			"second_score":	47211
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	518,
			"primary_score":	999707,
			"second_score":	47207
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	519,
			"primary_score":	999707,
			"second_score":	47206
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	521,
			"primary_score":	999707,
			"second_score":	47205
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	522,
			"primary_score":	999707,
			"second_score":	47204
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	523,
			"primary_score":	999707,
			"second_score":	47202
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	524,
			"primary_score":	999707,
			"second_score":	47201
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	526,
			"primary_score":	999707,
			"second_score":	47276
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	534,
			"primary_score":	999707,
			"second_score":	3133
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	536,
			"primary_score":	999707,
			"second_score":	3132
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	538,
			"primary_score":	999707,
			"second_score":	3131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	540,
			"primary_score":	999707,
			"second_score":	3130
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	541,
			"primary_score":	999707,
			"second_score":	3129
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	542,
			"primary_score":	999707,
			"second_score":	3122
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	543,
			"primary_score":	999707,
			"second_score":	3121
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	544,
			"primary_score":	999707,
			"second_score":	3120
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	545,
			"primary_score":	999707,
			"second_score":	3257
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	547,
			"primary_score":	999707,
			"second_score":	3119
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	548,
			"primary_score":	999707,
			"second_score":	3118
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	550,
			"primary_score":	999707,
			"second_score":	3117
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	552,
			"primary_score":	999707,
			"second_score":	3116
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	553,
			"primary_score":	999707,
			"second_score":	3115
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	556,
			"primary_score":	999707,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	562,
			"primary_score":	999992,
			"second_score":	127596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	564,
			"primary_score":	999992,
			"second_score":	127595
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	566,
			"primary_score":	999992,
			"second_score":	127594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	568,
			"primary_score":	999992,
			"second_score":	127593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	569,
			"primary_score":	999992,
			"second_score":	127592
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	570,
			"primary_score":	999992,
			"second_score":	127488
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	571,
			"primary_score":	999992,
			"second_score":	127487
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	572,
			"primary_score":	999992,
			"second_score":	127486
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	573,
			"primary_score":	999992,
			"second_score":	127485
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	575,
			"primary_score":	999992,
			"second_score":	127431
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	578,
			"primary_score":	999992,
			"second_score":	127430
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	580,
			"primary_score":	999992,
			"second_score":	127411
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	581,
			"primary_score":	999992,
			"second_score":	127410
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	583,
			"primary_score":	999992,
			"second_score":	127409
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	584,
			"primary_score":	999992,
			"second_score":	127408
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	585,
			"primary_score":	999992,
			"second_score":	127407
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	586,
			"primary_score":	999992,
			"second_score":	127406
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	587,
			"primary_score":	999992,
			"second_score":	127405
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	589,
			"primary_score":	999992,
			"second_score":	127404
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	599,
			"primary_score":	999707,
			"second_score":	3611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	601,
			"primary_score":	999707,
			"second_score":	3610
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	602,
			"primary_score":	999707,
			"second_score":	3608
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	603,
			"primary_score":	999707,
			"second_score":	3924
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	605,
			"primary_score":	999707,
			"second_score":	3607
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	607,
			"primary_score":	999707,
			"second_score":	3606
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	608,
			"primary_score":	999707,
			"second_score":	3605
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	610,
			"primary_score":	999707,
			"second_score":	3604
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	611,
			"primary_score":	999707,
			"second_score":	52792
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	616,
			"primary_score":	999707,
			"second_score":	3603
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	617,
			"primary_score":	999707,
			"second_score":	52734
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	620,
			"primary_score":	999707,
			"second_score":	3602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	622,
			"primary_score":	999707,
			"second_score":	3601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	623,
			"primary_score":	999707,
			"second_score":	3600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	625,
			"primary_score":	999707,
			"second_score":	50148
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	627,
			"primary_score":	999707,
			"second_score":	3599
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	628,
			"primary_score":	999707,
			"second_score":	3598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	630,
			"primary_score":	999707,
			"second_score":	3597
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	631,
			"primary_score":	999707,
			"second_score":	3596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	633,
			"primary_score":	999707,
			"second_score":	3594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	634,
			"primary_score":	999707,
			"second_score":	50141
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	636,
			"primary_score":	999707,
			"second_score":	3593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	637,
			"primary_score":	999707,
			"second_score":	3592
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	639,
			"primary_score":	999707,
			"second_score":	3591
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	640,
			"primary_score":	999707,
			"second_score":	3590
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	642,
			"primary_score":	999707,
			"second_score":	3589
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	665,
			"primary_score":	999707,
			"second_score":	103445
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	667,
			"primary_score":	999707,
			"second_score":	103444
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	669,
			"primary_score":	999707,
			"second_score":	103443
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	670,
			"primary_score":	999707,
			"second_score":	103442
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	671,
			"primary_score":	999707,
			"second_score":	50160
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	672,
			"primary_score":	999707,
			"second_score":	47192
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	675,
			"primary_score":	999707,
			"second_score":	47191
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	676,
			"primary_score":	999707,
			"second_score":	47190
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	679,
			"primary_score":	999707,
			"second_score":	47189
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	693,
			"primary_score":	999707,
			"second_score":	126487
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	695,
			"primary_score":	999707,
			"second_score":	126486
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	697,
			"primary_score":	999707,
			"second_score":	126485
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	698,
			"primary_score":	999707,
			"second_score":	126483
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	699,
			"primary_score":	999707,
			"second_score":	126482
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	711,
			"primary_score":	999707,
			"second_score":	126481
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	717,
			"primary_score":	999707,
			"second_score":	6024
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	719,
			"primary_score":	999707,
			"second_score":	6023
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	721,
			"primary_score":	999707,
			"second_score":	6022
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	722,
			"primary_score":	999707,
			"second_score":	6020
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	723,
			"primary_score":	999707,
			"second_score":	6019
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	724,
			"primary_score":	999707,
			"second_score":	3575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	726,
			"primary_score":	999707,
			"second_score":	3572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	727,
			"primary_score":	999707,
			"second_score":	3612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	729,
			"primary_score":	999707,
			"second_score":	3571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	731,
			"primary_score":	999707,
			"second_score":	3570
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	735,
			"primary_score":	999707,
			"second_score":	3569
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	775,
			"primary_score":	999707,
			"second_score":	115359
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	777,
			"primary_score":	999707,
			"second_score":	115358
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	779,
			"primary_score":	999707,
			"second_score":	126697
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	780,
			"primary_score":	999707,
			"second_score":	115355
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	781,
			"primary_score":	999707,
			"second_score":	115354
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	782,
			"primary_score":	999707,
			"second_score":	114628
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	784,
			"primary_score":	999707,
			"second_score":	114626
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	785,
			"primary_score":	999707,
			"second_score":	114625
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	786,
			"primary_score":	999707,
			"second_score":	114624
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	787,
			"primary_score":	999707,
			"second_score":	114866
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	789,
			"primary_score":	999707,
			"second_score":	114623
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	790,
			"primary_score":	999707,
			"second_score":	114622
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	793,
			"primary_score":	999707,
			"second_score":	126622
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	799,
			"primary_score":	999960,
			"second_score":	168778
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	800,
			"primary_score":	999960,
			"second_score":	168777
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	801,
			"primary_score":	999960,
			"second_score":	168776
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	803,
			"primary_score":	999960,
			"second_score":	168775
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	804,
			"primary_score":	999960,
			"second_score":	168774
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	806,
			"primary_score":	999960,
			"second_score":	168773
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	807,
			"primary_score":	999960,
			"second_score":	168772
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	808,
			"primary_score":	999960,
			"second_score":	168771
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	809,
			"primary_score":	999961,
			"second_score":	168431
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	810,
			"primary_score":	999961,
			"second_score":	168769
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	812,
			"primary_score":	999961,
			"second_score":	168430
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	813,
			"primary_score":	999983,
			"second_score":	168429
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	817,
			"primary_score":	999961,
			"second_score":	168381
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	820,
			"primary_score":	999961,
			"second_score":	168380
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	822,
			"primary_score":	999960,
			"second_score":	168379
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	898,
			"primary_score":	999707,
			"second_score":	97552
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	899,
			"primary_score":	999707,
			"second_score":	97551
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	900,
			"primary_score":	999707,
			"second_score":	97550
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	902,
			"primary_score":	999707,
			"second_score":	97549
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	904,
			"primary_score":	999707,
			"second_score":	97548
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	905,
			"primary_score":	999707,
			"second_score":	97534
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	907,
			"primary_score":	999707,
			"second_score":	97533
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	908,
			"primary_score":	999707,
			"second_score":	97532
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	909,
			"primary_score":	999707,
			"second_score":	97529
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	911,
			"primary_score":	999707,
			"second_score":	97528
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	912,
			"primary_score":	999707,
			"second_score":	97527
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	914,
			"primary_score":	999707,
			"second_score":	97530
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	916,
			"primary_score":	999707,
			"second_score":	138398
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	948,
			"primary_score":	999707,
			"second_score":	64575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	949,
			"primary_score":	999707,
			"second_score":	64574
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	950,
			"primary_score":	999707,
			"second_score":	64573
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	952,
			"primary_score":	999707,
			"second_score":	64572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	954,
			"primary_score":	999707,
			"second_score":	64571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	955,
			"primary_score":	999707,
			"second_score":	64562
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	957,
			"primary_score":	999707,
			"second_score":	64561
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	958,
			"primary_score":	999707,
			"second_score":	64560
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	959,
			"primary_score":	999707,
			"second_score":	64559
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	961,
			"primary_score":	999707,
			"second_score":	64558
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	997,
			"primary_score":	999707,
			"second_score":	113952
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	998,
			"primary_score":	999707,
			"second_score":	113951
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1000,
			"primary_score":	999707,
			"second_score":	113950
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1002,
			"primary_score":	999707,
			"second_score":	113949
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1004,
			"primary_score":	999707,
			"second_score":	113948
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1005,
			"primary_score":	999707,
			"second_score":	113947
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1006,
			"primary_score":	999707,
			"second_score":	113946
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1007,
			"primary_score":	999707,
			"second_score":	113945
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1008,
			"primary_score":	999707,
			"second_score":	113944
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1038,
			"primary_score":	999707,
			"second_score":	126620
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1040,
			"primary_score":	999707,
			"second_score":	126619
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1536,
			"primary_score":	999707,
			"second_score":	151466
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1538,
			"primary_score":	999707,
			"second_score":	151465
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	263,
			"primary_score":	999707,
			"second_score":	47242
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	266,
			"primary_score":	999707,
			"second_score":	47241
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	267,
			"primary_score":	999707,
			"second_score":	47240
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	268,
			"primary_score":	999707,
			"second_score":	47239
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	269,
			"primary_score":	999707,
			"second_score":	47238
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	270,
			"primary_score":	999707,
			"second_score":	47237
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	271,
			"primary_score":	999707,
			"second_score":	47236
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	272,
			"primary_score":	999707,
			"second_score":	47235
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	273,
			"primary_score":	999707,
			"second_score":	47234
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	274,
			"primary_score":	999707,
			"second_score":	47233
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	276,
			"primary_score":	999707,
			"second_score":	47232
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	278,
			"primary_score":	999707,
			"second_score":	48691
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	279,
			"primary_score":	999707,
			"second_score":	47446
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	280,
			"primary_score":	999707,
			"second_score":	47445
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	281,
			"primary_score":	999707,
			"second_score":	47444
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	282,
			"primary_score":	999707,
			"second_score":	47231
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	283,
			"primary_score":	999707,
			"second_score":	47230
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	287,
			"primary_score":	999707,
			"second_score":	47228
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	39,
			"primary_score":	999707,
			"second_score":	3574
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	40,
			"primary_score":	999707,
			"second_score":	3614
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	42,
			"primary_score":	999707,
			"second_score":	3573
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	105,
			"primary_score":	999707,
			"second_score":	3243
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	106,
			"primary_score":	999707,
			"second_score":	3216
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	107,
			"primary_score":	999707,
			"second_score":	3215
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	121,
			"primary_score":	999707,
			"second_score":	113606
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	127,
			"primary_score":	999707,
			"second_score":	113605
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	226,
			"primary_score":	999707,
			"second_score":	6025
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	384,
			"primary_score":	999707,
			"second_score":	97555
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	385,
			"primary_score":	999707,
			"second_score":	97554
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	387,
			"primary_score":	999707,
			"second_score":	97553
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	388,
			"primary_score":	999707,
			"second_score":	97526
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	392,
			"primary_score":	999707,
			"second_score":	97525
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	395,
			"primary_score":	999707,
			"second_score":	97524
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3497,
			"primary_score":	999963,
			"second_score":	199473
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3498,
			"primary_score":	999963,
			"second_score":	199324
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3502,
			"primary_score":	999947,
			"second_score":	210287
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3503,
			"primary_score":	999947,
			"second_score":	208533
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3577,
			"primary_score":	999801,
			"second_score":	203282
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3578,
			"primary_score":	999801,
			"second_score":	203278
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3582,
			"primary_score":	999801,
			"second_score":	200153
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3583,
			"primary_score":	999801,
			"second_score":	200151
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3717,
			"primary_score":	999940,
			"second_score":	211458
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3718,
			"primary_score":	999940,
			"second_score":	211336
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3732,
			"primary_score":	999715,
			"second_score":	171020
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3733,
			"primary_score":	999715,
			"second_score":	171012
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3857,
			"primary_score":	999963,
			"second_score":	199497
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3858,
			"primary_score":	999963,
			"second_score":	199495
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3862,
			"primary_score":	999947,
			"second_score":	210311
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3863,
			"primary_score":	999947,
			"second_score":	210309
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3867,
			"primary_score":	999922,
			"second_score":	208174
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3868,
			"primary_score":	999922,
			"second_score":	208173
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3877,
			"primary_score":	999963,
			"second_score":	208130
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3878,
			"primary_score":	999963,
			"second_score":	207257
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3882,
			"primary_score":	999963,
			"second_score":	200002
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3883,
			"primary_score":	999963,
			"second_score":	199519
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3887,
			"primary_score":	999947,
			"second_score":	217152
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3888,
			"primary_score":	999947,
			"second_score":	216170
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3892,
			"primary_score":	999947,
			"second_score":	210348
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3893,
			"primary_score":	999947,
			"second_score":	210333
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3907,
			"primary_score":	999947,
			"second_score":	218319
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3908,
			"primary_score":	999947,
			"second_score":	218317
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3927,
			"primary_score":	999954,
			"second_score":	240436
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3928,
			"primary_score":	999954,
			"second_score":	240435
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3932,
			"primary_score":	999992,
			"second_score":	217529
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3933,
			"primary_score":	999992,
			"second_score":	217174
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4047,
			"primary_score":	999956,
			"second_score":	206979
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4048,
			"primary_score":	999956,
			"second_score":	206642
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4067,
			"primary_score":	999964,
			"second_score":	205732
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4068,
			"primary_score":	999964,
			"second_score":	205410
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4087,
			"primary_score":	999956,
			"second_score":	205815
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4088,
			"primary_score":	999956,
			"second_score":	205814
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4147,
			"primary_score":	999707,
			"second_score":	135330
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4148,
			"primary_score":	999707,
			"second_score":	135329
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4227,
			"primary_score":	999993,
			"second_score":	238632
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4228,
			"primary_score":	999993,
			"second_score":	238631
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4232,
			"primary_score":	999947,
			"second_score":	215632
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4233,
			"primary_score":	999947,
			"second_score":	214594
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4237,
			"primary_score":	999947,
			"second_score":	211083
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4238,
			"primary_score":	999947,
			"second_score":	210518
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4317,
			"primary_score":	999947,
			"second_score":	211106
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4318,
			"primary_score":	999947,
			"second_score":	211105
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4322,
			"primary_score":	999996,
			"second_score":	238655
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4323,
			"primary_score":	999996,
			"second_score":	238654
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4332,
			"primary_score":	999979,
			"second_score":	215960
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4333,
			"primary_score":	999979,
			"second_score":	215959
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4342,
			"primary_score":	999964,
			"second_score":	238910
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4343,
			"primary_score":	999964,
			"second_score":	238909
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4352,
			"primary_score":	999964,
			"second_score":	238933
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4353,
			"primary_score":	999964,
			"second_score":	238932
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4392,
			"primary_score":	999993,
			"second_score":	238549
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4393,
			"primary_score":	999993,
			"second_score":	237905
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4412,
			"primary_score":	999707,
			"second_score":	126364
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4413,
			"primary_score":	999707,
			"second_score":	126347
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4457,
			"primary_score":	999743,
			"second_score":	182967
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4458,
			"primary_score":	999743,
			"second_score":	182890
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4672,
			"primary_score":	999931,
			"second_score":	173926
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4673,
			"primary_score":	999931,
			"second_score":	173906
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4732,
			"primary_score":	999707,
			"second_score":	126449
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4733,
			"primary_score":	999707,
			"second_score":	126448
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4737,
			"primary_score":	999707,
			"second_score":	129896
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4738,
			"primary_score":	999707,
			"second_score":	129868
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4742,
			"primary_score":	999707,
			"second_score":	127069
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4743,
			"primary_score":	999707,
			"second_score":	127027
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4747,
			"primary_score":	999707,
			"second_score":	126639
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4748,
			"primary_score":	999707,
			"second_score":	126515
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4867,
			"primary_score":	999922,
			"second_score":	208333
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4868,
			"primary_score":	999922,
			"second_score":	208332
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4992,
			"primary_score":	999992,
			"second_score":	217552
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4993,
			"primary_score":	999992,
			"second_score":	217551
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5082,
			"primary_score":	999763,
			"second_score":	171629
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5083,
			"primary_score":	999763,
			"second_score":	171628
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5217,
			"primary_score":	999859,
			"second_score":	203709
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5218,
			"primary_score":	999859,
			"second_score":	203708
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5399,
			"primary_score":	999739,
			"second_score":	171911
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5400,
			"primary_score":	999739,
			"second_score":	171910
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5414,
			"primary_score":	999739,
			"second_score":	171935
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5415,
			"primary_score":	999739,
			"second_score":	171933
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5439,
			"primary_score":	999739,
			"second_score":	172102
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5440,
			"primary_score":	999739,
			"second_score":	171996
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5444,
			"primary_score":	999739,
			"second_score":	172125
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5445,
			"primary_score":	999739,
			"second_score":	172124
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5589,
			"primary_score":	999860,
			"second_score":	203904
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5590,
			"primary_score":	999860,
			"second_score":	203788
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5599,
			"primary_score":	999867,
			"second_score":	204235
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5600,
			"primary_score":	999867,
			"second_score":	203947
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5604,
			"primary_score":	999859,
			"second_score":	204361
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5605,
			"primary_score":	999859,
			"second_score":	204257
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	127,
			"primary_score":	999796,
			"second_score":	205282
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	128,
			"primary_score":	999796,
			"second_score":	205256
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	135,
			"primary_score":	999796,
			"second_score":	200063
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	136,
			"primary_score":	999796,
			"second_score":	200062
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	137,
			"primary_score":	999796,
			"second_score":	200058
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	138,
			"primary_score":	999796,
			"second_score":	200057
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	146,
			"primary_score":	999707,
			"second_score":	121468
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	161,
			"primary_score":	999707,
			"second_score":	125737
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	165,
			"primary_score":	999707,
			"second_score":	125736
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	166,
			"primary_score":	999707,
			"second_score":	125732
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	614,
			"primary_score":	999707,
			"second_score":	121576
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	615,
			"primary_score":	999707,
			"second_score":	121575
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	618,
			"primary_score":	999707,
			"second_score":	121574
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	623,
			"primary_score":	999707,
			"second_score":	121573
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	626,
			"primary_score":	999707,
			"second_score":	121478
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	628,
			"primary_score":	999707,
			"second_score":	121477
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	629,
			"primary_score":	999707,
			"second_score":	121476
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	631,
			"primary_score":	999707,
			"second_score":	121475
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	632,
			"primary_score":	999707,
			"second_score":	121474
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	634,
			"primary_score":	999707,
			"second_score":	121473
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	651,
			"primary_score":	999707,
			"second_score":	121472
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	653,
			"primary_score":	999707,
			"second_score":	121467
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	654,
			"primary_score":	999707,
			"second_score":	121031
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	655,
			"primary_score":	999707,
			"second_score":	121030
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	656,
			"primary_score":	999707,
			"second_score":	121029
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	684,
			"primary_score":	999707,
			"second_score":	121834
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	685,
			"primary_score":	999707,
			"second_score":	121833
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	686,
			"primary_score":	999707,
			"second_score":	121729
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	687,
			"primary_score":	999707,
			"second_score":	121728
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	688,
			"primary_score":	999707,
			"second_score":	121727
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	689,
			"primary_score":	999707,
			"second_score":	121726
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	690,
			"primary_score":	999707,
			"second_score":	121725
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	692,
			"primary_score":	999707,
			"second_score":	121724
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	697,
			"primary_score":	999707,
			"second_score":	121723
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	699,
			"primary_score":	999707,
			"second_score":	121722
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	700,
			"primary_score":	999707,
			"second_score":	121721
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	701,
			"primary_score":	999707,
			"second_score":	121605
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	702,
			"primary_score":	999707,
			"second_score":	121603
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	704,
			"primary_score":	999707,
			"second_score":	121602
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	705,
			"primary_score":	999707,
			"second_score":	121577
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	709,
			"primary_score":	999707,
			"second_score":	121028
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	711,
			"primary_score":	999707,
			"second_score":	121027
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	712,
			"primary_score":	999707,
			"second_score":	121026
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	713,
			"primary_score":	999707,
			"second_score":	120782
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	714,
			"primary_score":	999707,
			"second_score":	120781
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	715,
			"primary_score":	999707,
			"second_score":	120780
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	716,
			"primary_score":	999707,
			"second_score":	120773
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	717,
			"primary_score":	999707,
			"second_score":	120772
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	719,
			"primary_score":	999707,
			"second_score":	119630
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	724,
			"primary_score":	999707,
			"second_score":	119629
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	729,
			"primary_score":	999707,
			"second_score":	119628
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	730,
			"primary_score":	999707,
			"second_score":	119580
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	731,
			"primary_score":	999707,
			"second_score":	119579
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	732,
			"primary_score":	999707,
			"second_score":	119408
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	733,
			"primary_score":	999707,
			"second_score":	119403
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	736,
			"primary_score":	999707,
			"second_score":	119402
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	737,
			"primary_score":	999707,
			"second_score":	119376
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	738,
			"primary_score":	999707,
			"second_score":	119350
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	739,
			"primary_score":	999707,
			"second_score":	119349
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	943,
			"primary_score":	999707,
			"second_score":	132321
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	978,
			"primary_score":	999846,
			"second_score":	203759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	981,
			"primary_score":	999847,
			"second_score":	203758
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	982,
			"primary_score":	999859,
			"second_score":	203757
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1048,
			"primary_score":	999707,
			"second_score":	133891
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1064,
			"primary_score":	999707,
			"second_score":	133888
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1066,
			"primary_score":	999707,
			"second_score":	133887
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1067,
			"primary_score":	999707,
			"second_score":	133886
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1068,
			"primary_score":	999707,
			"second_score":	133885
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1128,
			"primary_score":	999707,
			"second_score":	133890
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1129,
			"primary_score":	999707,
			"second_score":	133889
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1449,
			"primary_score":	999712,
			"second_score":	241216
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1450,
			"primary_score":	999712,
			"second_score":	241215
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1452,
			"primary_score":	999707,
			"second_score":	143117
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1453,
			"primary_score":	999707,
			"second_score":	143116
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1466,
			"primary_score":	999709,
			"second_score":	241204
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1701,
			"primary_score":	999859,
			"second_score":	203756
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1735,
			"primary_score":	999859,
			"second_score":	203755
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1736,
			"primary_score":	999859,
			"second_score":	203754
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1737,
			"primary_score":	999859,
			"second_score":	203751
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1738,
			"primary_score":	999859,
			"second_score":	203750
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1739,
			"primary_score":	999859,
			"second_score":	203749
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1742,
			"primary_score":	999860,
			"second_score":	204739
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1743,
			"primary_score":	999861,
			"second_score":	204550
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1744,
			"primary_score":	999861,
			"second_score":	204549
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1748,
			"primary_score":	999860,
			"second_score":	204738
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1749,
			"primary_score":	999860,
			"second_score":	204737
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1754,
			"primary_score":	999860,
			"second_score":	204736
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1755,
			"primary_score":	999860,
			"second_score":	204735
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1763,
			"primary_score":	999859,
			"second_score":	204546
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1765,
			"primary_score":	999859,
			"second_score":	204545
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1766,
			"primary_score":	999859,
			"second_score":	204544
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1767,
			"primary_score":	999868,
			"second_score":	204923
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1768,
			"primary_score":	999868,
			"second_score":	204922
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1770,
			"primary_score":	999868,
			"second_score":	204921
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1773,
			"primary_score":	999860,
			"second_score":	204543
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1776,
			"primary_score":	999860,
			"second_score":	204542
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1777,
			"primary_score":	999986,
			"second_score":	212919
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1780,
			"primary_score":	999860,
			"second_score":	204541
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1781,
			"primary_score":	999860,
			"second_score":	204529
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1796,
			"primary_score":	999879,
			"second_score":	204531
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1799,
			"primary_score":	999879,
			"second_score":	204530
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1803,
			"primary_score":	999860,
			"second_score":	204528
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1804,
			"primary_score":	999860,
			"second_score":	204527
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1807,
			"primary_score":	999860,
			"second_score":	204526
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1810,
			"primary_score":	999859,
			"second_score":	204525
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1811,
			"primary_score":	999859,
			"second_score":	204379
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1821,
			"primary_score":	999859,
			"second_score":	203747
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1822,
			"primary_score":	999859,
			"second_score":	203746
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1823,
			"primary_score":	999859,
			"second_score":	203745
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1825,
			"primary_score":	999859,
			"second_score":	203744
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1826,
			"primary_score":	999859,
			"second_score":	203743
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1827,
			"primary_score":	999859,
			"second_score":	203742
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1832,
			"primary_score":	999859,
			"second_score":	204548
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1833,
			"primary_score":	999859,
			"second_score":	204547
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1849,
			"primary_score":	999860,
			"second_score":	204706
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1850,
			"primary_score":	999860,
			"second_score":	204705
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1851,
			"primary_score":	999860,
			"second_score":	204704
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1852,
			"primary_score":	999860,
			"second_score":	204701
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1853,
			"primary_score":	999860,
			"second_score":	204700
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1854,
			"primary_score":	999860,
			"second_score":	204699
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1855,
			"primary_score":	999866,
			"second_score":	204707
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1857,
			"primary_score":	999860,
			"second_score":	204698
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1858,
			"primary_score":	999861,
			"second_score":	204697
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1859,
			"primary_score":	999861,
			"second_score":	204696
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1861,
			"primary_score":	999860,
			"second_score":	204695
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1863,
			"primary_score":	999860,
			"second_score":	204694
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1864,
			"primary_score":	999860,
			"second_score":	204693
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1865,
			"primary_score":	999860,
			"second_score":	204602
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1866,
			"primary_score":	999860,
			"second_score":	204601
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2411,
			"primary_score":	999849,
			"second_score":	230180
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2412,
			"primary_score":	999865,
			"second_score":	230179
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2416,
			"primary_score":	999803,
			"second_score":	184497
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2417,
			"primary_score":	999803,
			"second_score":	184496
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2420,
			"primary_score":	999927,
			"second_score":	202799
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2426,
			"primary_score":	999867,
			"second_score":	218407
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2427,
			"primary_score":	999867,
			"second_score":	218406
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2437,
			"primary_score":	999867,
			"second_score":	218405
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2441,
			"primary_score":	999931,
			"second_score":	218403
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2454,
			"primary_score":	999909,
			"second_score":	173188
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2455,
			"primary_score":	999909,
			"second_score":	173187
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2460,
			"primary_score":	999919,
			"second_score":	173186
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2461,
			"primary_score":	999979,
			"second_score":	173184
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2464,
			"primary_score":	999937,
			"second_score":	221579
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2585,
			"primary_score":	999707,
			"second_score":	136150
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2586,
			"primary_score":	999707,
			"second_score":	136149
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2591,
			"primary_score":	999707,
			"second_score":	136148
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2592,
			"primary_score":	999707,
			"second_score":	136147
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2603,
			"primary_score":	999707,
			"second_score":	137534
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2604,
			"primary_score":	999707,
			"second_score":	137533
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2608,
			"primary_score":	999707,
			"second_score":	128715
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2611,
			"primary_score":	999964,
			"second_score":	238989
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2617,
			"primary_score":	999915,
			"second_score":	174118
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2618,
			"primary_score":	999915,
			"second_score":	174117
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2619,
			"primary_score":	999928,
			"second_score":	174116
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2624,
			"primary_score":	999928,
			"second_score":	174115
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2651,
			"primary_score":	999707,
			"second_score":	127291
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2652,
			"primary_score":	999707,
			"second_score":	127290
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2653,
			"primary_score":	999707,
			"second_score":	127289
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2688,
			"primary_score":	999753,
			"second_score":	193188
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2689,
			"primary_score":	999753,
			"second_score":	193187
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2690,
			"primary_score":	999756,
			"second_score":	193185
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2731,
			"primary_score":	999707,
			"second_score":	134768
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2732,
			"primary_score":	999707,
			"second_score":	134767
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2735,
			"primary_score":	999922,
			"second_score":	193016
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2736,
			"primary_score":	999931,
			"second_score":	193015
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2737,
			"primary_score":	999937,
			"second_score":	193014
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2768,
			"primary_score":	999738,
			"second_score":	184674
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2769,
			"primary_score":	999744,
			"second_score":	184672
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2891,
			"primary_score":	999736,
			"second_score":	172227
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2892,
			"primary_score":	999736,
			"second_score":	172226
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2898,
			"primary_score":	999736,
			"second_score":	172225
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2899,
			"primary_score":	999736,
			"second_score":	172224
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2909,
			"primary_score":	999707,
			"second_score":	134081
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2910,
			"primary_score":	999707,
			"second_score":	134080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2911,
			"primary_score":	999707,
			"second_score":	130301
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2914,
			"primary_score":	999798,
			"second_score":	205287
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2915,
			"primary_score":	999798,
			"second_score":	205286
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2916,
			"primary_score":	999798,
			"second_score":	205285
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2918,
			"primary_score":	999798,
			"second_score":	205284
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2919,
			"primary_score":	999798,
			"second_score":	205283
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2920,
			"primary_score":	999798,
			"second_score":	205255
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2925,
			"primary_score":	999798,
			"second_score":	200075
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2926,
			"primary_score":	999798,
			"second_score":	200074
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2927,
			"primary_score":	999798,
			"second_score":	200073
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2929,
			"primary_score":	999798,
			"second_score":	200072
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2930,
			"primary_score":	999798,
			"second_score":	200071
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2931,
			"primary_score":	999798,
			"second_score":	200067
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2932,
			"primary_score":	999798,
			"second_score":	200064
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2934,
			"primary_score":	999798,
			"second_score":	200035
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2939,
			"primary_score":	999818,
			"second_score":	171673
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2940,
			"primary_score":	999818,
			"second_score":	171672
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2941,
			"primary_score":	999818,
			"second_score":	171671
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2942,
			"primary_score":	999824,
			"second_score":	171670
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2943,
			"primary_score":	999861,
			"second_score":	171669
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2956,
			"primary_score":	999833,
			"second_score":	171668
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2958,
			"primary_score":	999764,
			"second_score":	171667
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2960,
			"primary_score":	999764,
			"second_score":	171666
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2961,
			"primary_score":	999764,
			"second_score":	171665
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2962,
			"primary_score":	999764,
			"second_score":	171664
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2977,
			"primary_score":	999764,
			"second_score":	171663
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2978,
			"primary_score":	999764,
			"second_score":	171662
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2983,
			"primary_score":	999777,
			"second_score":	174062
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2984,
			"primary_score":	999777,
			"second_score":	174061
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2985,
			"primary_score":	999777,
			"second_score":	174060
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2986,
			"primary_score":	999814,
			"second_score":	174059
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2987,
			"primary_score":	999866,
			"second_score":	174057
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2988,
			"primary_score":	999877,
			"second_score":	176447
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3000,
			"primary_score":	999707,
			"second_score":	139133
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3001,
			"primary_score":	999707,
			"second_score":	139132
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3136,
			"primary_score":	999860,
			"second_score":	204987
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3146,
			"primary_score":	999707,
			"second_score":	129494
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3149,
			"primary_score":	999707,
			"second_score":	129493
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3153,
			"primary_score":	999859,
			"second_score":	204986
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3154,
			"primary_score":	999859,
			"second_score":	204985
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3158,
			"primary_score":	999859,
			"second_score":	204984
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3160,
			"primary_score":	999859,
			"second_score":	204983
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3162,
			"primary_score":	999859,
			"second_score":	204982
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3163,
			"primary_score":	999859,
			"second_score":	204981
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3227,
			"primary_score":	999866,
			"second_score":	176446
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3228,
			"primary_score":	999866,
			"second_score":	176445
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3229,
			"primary_score":	999866,
			"second_score":	176444
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3230,
			"primary_score":	999866,
			"second_score":	176441
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3231,
			"primary_score":	999866,
			"second_score":	176440
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3232,
			"primary_score":	999866,
			"second_score":	176439
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3233,
			"primary_score":	999876,
			"second_score":	176438
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3234,
			"primary_score":	999894,
			"second_score":	176436
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3333,
			"primary_score":	999707,
			"second_score":	134078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3334,
			"primary_score":	999707,
			"second_score":	134077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3335,
			"primary_score":	999707,
			"second_score":	134076
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3336,
			"primary_score":	999707,
			"second_score":	134075
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3338,
			"primary_score":	999707,
			"second_score":	134074
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3340,
			"primary_score":	999707,
			"second_score":	134073
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3341,
			"primary_score":	999707,
			"second_score":	134072
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3342,
			"primary_score":	999707,
			"second_score":	134071
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3343,
			"primary_score":	999707,
			"second_score":	134070
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3344,
			"primary_score":	999707,
			"second_score":	134069
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3345,
			"primary_score":	999707,
			"second_score":	134068
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3359,
			"primary_score":	999736,
			"second_score":	172202
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3360,
			"primary_score":	999736,
			"second_score":	172201
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3361,
			"primary_score":	999736,
			"second_score":	172198
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3362,
			"primary_score":	999736,
			"second_score":	172197
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3363,
			"primary_score":	999736,
			"second_score":	172196
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3364,
			"primary_score":	999736,
			"second_score":	172195
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3365,
			"primary_score":	999969,
			"second_score":	172203
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3367,
			"primary_score":	999950,
			"second_score":	238790
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3371,
			"primary_score":	999742,
			"second_score":	172215
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3372,
			"primary_score":	999840,
			"second_score":	201681
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3374,
			"primary_score":	999742,
			"second_score":	172214
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3378,
			"primary_score":	999736,
			"second_score":	172193
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3380,
			"primary_score":	999736,
			"second_score":	172192
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3382,
			"primary_score":	999736,
			"second_score":	172191
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3383,
			"primary_score":	999736,
			"second_score":	172190
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3384,
			"primary_score":	999736,
			"second_score":	172159
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3385,
			"primary_score":	999736,
			"second_score":	172158
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4788,
			"primary_score":	999831,
			"second_score":	193011
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4797,
			"primary_score":	999851,
			"second_score":	193010
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4798,
			"primary_score":	999865,
			"second_score":	193009
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4799,
			"primary_score":	999870,
			"second_score":	193008
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4842,
			"primary_score":	999870,
			"second_score":	193007
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4843,
			"primary_score":	999870,
			"second_score":	193006
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4848,
			"primary_score":	999870,
			"second_score":	193005
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4852,
			"primary_score":	999923,
			"second_score":	193003
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5000,
			"primary_score":	999923,
			"second_score":	193002
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5001,
			"primary_score":	999923,
			"second_score":	193001
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5002,
			"primary_score":	999923,
			"second_score":	193000
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5048,
			"primary_score":	999923,
			"second_score":	192998
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5049,
			"primary_score":	999923,
			"second_score":	192997
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5050,
			"primary_score":	999936,
			"second_score":	192995
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5273,
			"primary_score":	999756,
			"second_score":	193184
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5274,
			"primary_score":	999756,
			"second_score":	193183
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5275,
			"primary_score":	999756,
			"second_score":	193182
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5276,
			"primary_score":	999756,
			"second_score":	193181
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5278,
			"primary_score":	999756,
			"second_score":	193180
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5279,
			"primary_score":	999756,
			"second_score":	193179
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5280,
			"primary_score":	999756,
			"second_score":	193178
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5476,
			"primary_score":	999715,
			"second_score":	182698
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5477,
			"primary_score":	999715,
			"second_score":	182697
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5478,
			"primary_score":	999715,
			"second_score":	182694
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5479,
			"primary_score":	999715,
			"second_score":	182693
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5482,
			"primary_score":	999985,
			"second_score":	170896
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5483,
			"primary_score":	999719,
			"second_score":	182700
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5539,
			"primary_score":	999964,
			"second_score":	238987
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5540,
			"primary_score":	999964,
			"second_score":	238986
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5541,
			"primary_score":	999964,
			"second_score":	238985
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5542,
			"primary_score":	999964,
			"second_score":	238984
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5544,
			"primary_score":	999964,
			"second_score":	238983
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5545,
			"primary_score":	999964,
			"second_score":	238982
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5546,
			"primary_score":	999964,
			"second_score":	238981
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5547,
			"primary_score":	999964,
			"second_score":	238980
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5549,
			"primary_score":	999964,
			"second_score":	238979
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5550,
			"primary_score":	999964,
			"second_score":	238978
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5551,
			"primary_score":	999964,
			"second_score":	238977
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5552,
			"primary_score":	999964,
			"second_score":	238976
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5554,
			"primary_score":	999964,
			"second_score":	238975
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5555,
			"primary_score":	999964,
			"second_score":	238974
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5556,
			"primary_score":	999964,
			"second_score":	238973
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5557,
			"primary_score":	999964,
			"second_score":	238972
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5559,
			"primary_score":	999964,
			"second_score":	238971
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5560,
			"primary_score":	999964,
			"second_score":	238970
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5563,
			"primary_score":	999964,
			"second_score":	238969
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5564,
			"primary_score":	999964,
			"second_score":	238968
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5566,
			"primary_score":	999964,
			"second_score":	238967
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5567,
			"primary_score":	999964,
			"second_score":	238966
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6770,
			"primary_score":	999925,
			"second_score":	221578
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6771,
			"primary_score":	999925,
			"second_score":	221577
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6775,
			"primary_score":	999937,
			"second_score":	221576
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6779,
			"primary_score":	999937,
			"second_score":	221575
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6854,
			"primary_score":	999707,
			"second_score":	134922
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6858,
			"primary_score":	999908,
			"second_score":	211817
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6859,
			"primary_score":	999908,
			"second_score":	211816
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6860,
			"primary_score":	999909,
			"second_score":	211815
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6863,
			"primary_score":	999933,
			"second_score":	211814
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6864,
			"primary_score":	999933,
			"second_score":	211813
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6865,
			"primary_score":	999933,
			"second_score":	211812
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6866,
			"primary_score":	999933,
			"second_score":	211811
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6876,
			"primary_score":	999707,
			"second_score":	134920
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6877,
			"primary_score":	999707,
			"second_score":	134919
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6878,
			"primary_score":	999707,
			"second_score":	134918
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6989,
			"primary_score":	999707,
			"second_score":	134916
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6990,
			"primary_score":	999707,
			"second_score":	134915
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6991,
			"primary_score":	999707,
			"second_score":	134914
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6992,
			"primary_score":	999707,
			"second_score":	134913
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7151,
			"primary_score":	999933,
			"second_score":	211809
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7152,
			"primary_score":	999933,
			"second_score":	211808
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7153,
			"primary_score":	999933,
			"second_score":	211807
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7154,
			"primary_score":	999933,
			"second_score":	211806
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7156,
			"primary_score":	999933,
			"second_score":	211805
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7157,
			"primary_score":	999933,
			"second_score":	211804
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7158,
			"primary_score":	999933,
			"second_score":	211803
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7159,
			"primary_score":	999933,
			"second_score":	211802
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7161,
			"primary_score":	999933,
			"second_score":	211801
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7162,
			"primary_score":	999933,
			"second_score":	211800
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7165,
			"primary_score":	999933,
			"second_score":	211799
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7166,
			"primary_score":	999933,
			"second_score":	211798
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7168,
			"primary_score":	999933,
			"second_score":	211797
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7169,
			"primary_score":	999933,
			"second_score":	211796
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7187,
			"primary_score":	999931,
			"second_score":	218402
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7188,
			"primary_score":	999931,
			"second_score":	218401
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7193,
			"primary_score":	999931,
			"second_score":	218400
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7194,
			"primary_score":	999947,
			"second_score":	218399
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7195,
			"primary_score":	999947,
			"second_score":	218398
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7272,
			"primary_score":	999947,
			"second_score":	218397
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7273,
			"primary_score":	999947,
			"second_score":	218396
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7274,
			"primary_score":	999947,
			"second_score":	218395
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7301,
			"primary_score":	999947,
			"second_score":	218393
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7302,
			"primary_score":	999947,
			"second_score":	218392
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7303,
			"primary_score":	999947,
			"second_score":	218391
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7304,
			"primary_score":	999947,
			"second_score":	218390
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7306,
			"primary_score":	999947,
			"second_score":	218389
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7307,
			"primary_score":	999947,
			"second_score":	218388
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7310,
			"primary_score":	999947,
			"second_score":	218387
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7311,
			"primary_score":	999947,
			"second_score":	218386
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7313,
			"primary_score":	999947,
			"second_score":	218385
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7314,
			"primary_score":	999947,
			"second_score":	218384
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7373,
			"primary_score":	999803,
			"second_score":	184495
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7374,
			"primary_score":	999803,
			"second_score":	184494
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7375,
			"primary_score":	999803,
			"second_score":	184493
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7376,
			"primary_score":	999880,
			"second_score":	184492
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7411,
			"primary_score":	999707,
			"second_score":	131746
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7413,
			"primary_score":	999922,
			"second_score":	208401
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7414,
			"primary_score":	999922,
			"second_score":	208400
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7416,
			"primary_score":	999922,
			"second_score":	208399
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7417,
			"primary_score":	999922,
			"second_score":	208398
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7688,
			"primary_score":	999958,
			"second_score":	217992
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7689,
			"primary_score":	999958,
			"second_score":	217991
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7694,
			"primary_score":	999958,
			"second_score":	217990
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7697,
			"primary_score":	999992,
			"second_score":	217988
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7709,
			"primary_score":	999992,
			"second_score":	217987
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7710,
			"primary_score":	999992,
			"second_score":	217986
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7711,
			"primary_score":	999992,
			"second_score":	217985
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7712,
			"primary_score":	999992,
			"second_score":	217984
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7714,
			"primary_score":	999992,
			"second_score":	217983
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7715,
			"primary_score":	999992,
			"second_score":	217982
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7716,
			"primary_score":	999992,
			"second_score":	217981
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7717,
			"primary_score":	999992,
			"second_score":	217980
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7719,
			"primary_score":	999992,
			"second_score":	217979
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7720,
			"primary_score":	999992,
			"second_score":	217978
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7721,
			"primary_score":	999992,
			"second_score":	217977
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7722,
			"primary_score":	999992,
			"second_score":	217976
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7724,
			"primary_score":	999992,
			"second_score":	217975
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7725,
			"primary_score":	999992,
			"second_score":	217974
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7726,
			"primary_score":	999992,
			"second_score":	217973
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7727,
			"primary_score":	999992,
			"second_score":	217972
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7729,
			"primary_score":	999992,
			"second_score":	217971
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7730,
			"primary_score":	999992,
			"second_score":	217970
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7733,
			"primary_score":	999992,
			"second_score":	217969
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7734,
			"primary_score":	999992,
			"second_score":	217968
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7736,
			"primary_score":	999992,
			"second_score":	217967
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7737,
			"primary_score":	999992,
			"second_score":	217966
		}, {
			"file":	"Zend/zend_list.c",
			"line":	37,
			"primary_score":	999707,
			"second_score":	151472
		}, {
			"file":	"Zend/zend_list.c",
			"line":	38,
			"primary_score":	999707,
			"second_score":	151471
		}, {
			"file":	"Zend/zend_list.c",
			"line":	40,
			"primary_score":	999707,
			"second_score":	151470
		}, {
			"file":	"Zend/zend_list.c",
			"line":	41,
			"primary_score":	999707,
			"second_score":	151469
		}, {
			"file":	"Zend/zend_list.c",
			"line":	42,
			"primary_score":	999707,
			"second_score":	151468
		}, {
			"file":	"Zend/zend_list.c",
			"line":	44,
			"primary_score":	999707,
			"second_score":	151467
		}, {
			"file":	"Zend/zend_list.c",
			"line":	46,
			"primary_score":	999707,
			"second_score":	151464
		}, {
			"file":	"Zend/zend_list.c",
			"line":	47,
			"primary_score":	999707,
			"second_score":	151294
		}, {
			"file":	"Zend/zend_list.c",
			"line":	52,
			"primary_score":	999707,
			"second_score":	114839
		}, {
			"file":	"Zend/zend_list.c",
			"line":	54,
			"primary_score":	999707,
			"second_score":	114838
		}, {
			"file":	"Zend/zend_list.c",
			"line":	56,
			"primary_score":	999707,
			"second_score":	114828
		}, {
			"file":	"Zend/zend_list.c",
			"line":	57,
			"primary_score":	999707,
			"second_score":	114827
		}, {
			"file":	"Zend/zend_list.c",
			"line":	59,
			"primary_score":	999987,
			"second_score":	121438
		}, {
			"file":	"Zend/zend_list.c",
			"line":	69,
			"primary_score":	999885,
			"second_score":	130851
		}, {
			"file":	"Zend/zend_list.c",
			"line":	71,
			"primary_score":	999885,
			"second_score":	130850
		}, {
			"file":	"Zend/zend_list.c",
			"line":	72,
			"primary_score":	999885,
			"second_score":	130840
		}, {
			"file":	"Zend/zend_list.c",
			"line":	73,
			"primary_score":	999885,
			"second_score":	130839
		}, {
			"file":	"Zend/zend_list.c",
			"line":	82,
			"primary_score":	999987,
			"second_score":	153322
		}, {
			"file":	"Zend/zend_list.c",
			"line":	84,
			"primary_score":	999987,
			"second_score":	153321
		}, {
			"file":	"Zend/zend_list.c",
			"line":	86,
			"primary_score":	999987,
			"second_score":	153311
		}, {
			"file":	"Zend/zend_list.c",
			"line":	87,
			"primary_score":	999987,
			"second_score":	153310
		}, {
			"file":	"Zend/zend_list.c",
			"line":	96,
			"primary_score":	999707,
			"second_score":	151474
		}, {
			"file":	"Zend/zend_list.c",
			"line":	98,
			"primary_score":	999707,
			"second_score":	151473
		}, {
			"file":	"Zend/zend_list.c",
			"line":	100,
			"primary_score":	999707,
			"second_score":	151293
		}, {
			"file":	"Zend/zend_list.c",
			"line":	105,
			"primary_score":	999707,
			"second_score":	151292
		}, {
			"file":	"Zend/zend_list.c",
			"line":	111,
			"primary_score":	999884,
			"second_score":	130863
		}, {
			"file":	"Zend/zend_list.c",
			"line":	112,
			"primary_score":	999884,
			"second_score":	130862
		}, {
			"file":	"Zend/zend_list.c",
			"line":	113,
			"primary_score":	999884,
			"second_score":	130861
		}, {
			"file":	"Zend/zend_list.c",
			"line":	114,
			"primary_score":	999884,
			"second_score":	130860
		}, {
			"file":	"Zend/zend_list.c",
			"line":	115,
			"primary_score":	999884,
			"second_score":	130859
		}, {
			"file":	"Zend/zend_list.c",
			"line":	116,
			"primary_score":	999884,
			"second_score":	130858
		}, {
			"file":	"Zend/zend_list.c",
			"line":	117,
			"primary_score":	999884,
			"second_score":	130857
		}, {
			"file":	"Zend/zend_list.c",
			"line":	119,
			"primary_score":	999884,
			"second_score":	130856
		}, {
			"file":	"Zend/zend_list.c",
			"line":	120,
			"primary_score":	999884,
			"second_score":	130855
		}, {
			"file":	"Zend/zend_list.c",
			"line":	126,
			"primary_score":	999884,
			"second_score":	130854
		}, {
			"file":	"Zend/zend_list.c",
			"line":	133,
			"primary_score":	999885,
			"second_score":	130853
		}, {
			"file":	"Zend/zend_list.c",
			"line":	138,
			"primary_score":	999885,
			"second_score":	130852
		}, {
			"file":	"Zend/zend_list.c",
			"line":	139,
			"primary_score":	999885,
			"second_score":	130838
		}, {
			"file":	"Zend/zend_list.c",
			"line":	147,
			"primary_score":	999885,
			"second_score":	130837
		}, {
			"file":	"Zend/zend_list.c",
			"line":	148,
			"primary_score":	999885,
			"second_score":	130836
		}, {
			"file":	"Zend/zend_list.c",
			"line":	149,
			"primary_score":	999885,
			"second_score":	130835
		}, {
			"file":	"Zend/zend_list.c",
			"line":	150,
			"primary_score":	999885,
			"second_score":	130834
		}, {
			"file":	"Zend/zend_list.c",
			"line":	151,
			"primary_score":	999885,
			"second_score":	130833
		}, {
			"file":	"Zend/zend_list.c",
			"line":	154,
			"primary_score":	999885,
			"second_score":	130832
		}, {
			"file":	"Zend/zend_list.c",
			"line":	170,
			"primary_score":	999707,
			"second_score":	113956
		}, {
			"file":	"Zend/zend_list.c",
			"line":	171,
			"primary_score":	999707,
			"second_score":	113955
		}, {
			"file":	"Zend/zend_list.c",
			"line":	172,
			"primary_score":	999707,
			"second_score":	113954
		}, {
			"file":	"Zend/zend_list.c",
			"line":	174,
			"primary_score":	999707,
			"second_score":	113953
		}, {
			"file":	"Zend/zend_list.c",
			"line":	175,
			"primary_score":	999707,
			"second_score":	113943
		}, {
			"file":	"Zend/zend_list.c",
			"line":	183,
			"primary_score":	999707,
			"second_score":	113942
		}, {
			"file":	"Zend/zend_list.c",
			"line":	185,
			"primary_score":	999707,
			"second_score":	113833
		}, {
			"file":	"Zend/zend_list.c",
			"line":	239,
			"primary_score":	999707,
			"second_score":	103456
		}, {
			"file":	"Zend/zend_list.c",
			"line":	347,
			"primary_score":	999707,
			"second_score":	6223
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	109,
			"primary_score":	999707,
			"second_score":	3144
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	111,
			"primary_score":	999707,
			"second_score":	3143
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	120,
			"primary_score":	999707,
			"second_score":	3142
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	126,
			"primary_score":	999707,
			"second_score":	126741
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	127,
			"primary_score":	999707,
			"second_score":	126737
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	190,
			"primary_score":	999707,
			"second_score":	14747
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	192,
			"primary_score":	999707,
			"second_score":	14746
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	233,
			"primary_score":	999707,
			"second_score":	119307
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	235,
			"primary_score":	999707,
			"second_score":	119306
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	57,
			"primary_score":	999984,
			"second_score":	153894
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	58,
			"primary_score":	999984,
			"second_score":	153893
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	59,
			"primary_score":	999984,
			"second_score":	153892
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	60,
			"primary_score":	999984,
			"second_score":	153891
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	62,
			"primary_score":	999984,
			"second_score":	153890
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	63,
			"primary_score":	999984,
			"second_score":	153786
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	64,
			"primary_score":	999984,
			"second_score":	153768
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	65,
			"primary_score":	999990,
			"second_score":	153767
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	68,
			"primary_score":	999990,
			"second_score":	153757
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	72,
			"primary_score":	999990,
			"second_score":	153756
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	75,
			"primary_score":	999990,
			"second_score":	153564
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	76,
			"primary_score":	999995,
			"second_score":	153563
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	77,
			"primary_score":	999995,
			"second_score":	153562
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	80,
			"primary_score":	999995,
			"second_score":	153552
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	239,
			"primary_score":	999988,
			"second_score":	153947
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	240,
			"primary_score":	999988,
			"second_score":	153946
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	241,
			"primary_score":	999988,
			"second_score":	153945
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	242,
			"primary_score":	999988,
			"second_score":	153944
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	244,
			"primary_score":	999988,
			"second_score":	153943
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	248,
			"primary_score":	999988,
			"second_score":	153942
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	258,
			"primary_score":	999988,
			"second_score":	153941
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	259,
			"primary_score":	999988,
			"second_score":	153940
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	260,
			"primary_score":	999988,
			"second_score":	153926
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	287,
			"primary_score":	999989,
			"second_score":	153915
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	296,
			"primary_score":	999989,
			"second_score":	153914
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	310,
			"primary_score":	999989,
			"second_score":	153913
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	311,
			"primary_score":	999989,
			"second_score":	153912
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	312,
			"primary_score":	999989,
			"second_score":	153911
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	313,
			"primary_score":	999989,
			"second_score":	153910
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	314,
			"primary_score":	999989,
			"second_score":	153909
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	315,
			"primary_score":	999989,
			"second_score":	153908
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	316,
			"primary_score":	999989,
			"second_score":	153907
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	318,
			"primary_score":	999989,
			"second_score":	153906
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	477,
			"primary_score":	999988,
			"second_score":	153954
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	478,
			"primary_score":	999988,
			"second_score":	153953
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	479,
			"primary_score":	999988,
			"second_score":	153952
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	480,
			"primary_score":	999988,
			"second_score":	153951
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	482,
			"primary_score":	999988,
			"second_score":	153950
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	484,
			"primary_score":	999988,
			"second_score":	153949
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	494,
			"primary_score":	999988,
			"second_score":	153948
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	496,
			"primary_score":	999988,
			"second_score":	153905
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	531,
			"primary_score":	999989,
			"second_score":	153904
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	533,
			"primary_score":	999989,
			"second_score":	153903
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	546,
			"primary_score":	999989,
			"second_score":	153902
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	548,
			"primary_score":	999989,
			"second_score":	153901
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	549,
			"primary_score":	999989,
			"second_score":	153899
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	552,
			"primary_score":	999989,
			"second_score":	153897
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	562,
			"primary_score":	999989,
			"second_score":	153896
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	563,
			"primary_score":	999989,
			"second_score":	153895
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	565,
			"primary_score":	999989,
			"second_score":	153541
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	578,
			"primary_score":	999988,
			"second_score":	153391
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	961,
			"primary_score":	999993,
			"second_score":	121798
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	962,
			"primary_score":	999993,
			"second_score":	121797
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	963,
			"primary_score":	999993,
			"second_score":	121796
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	964,
			"primary_score":	999993,
			"second_score":	121795
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	965,
			"primary_score":	999993,
			"second_score":	121794
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	966,
			"primary_score":	999993,
			"second_score":	121793
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	968,
			"primary_score":	999993,
			"second_score":	121792
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	972,
			"primary_score":	999995,
			"second_score":	121791
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	974,
			"primary_score":	999995,
			"second_score":	121790
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	975,
			"primary_score":	999995,
			"second_score":	121699
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	978,
			"primary_score":	999993,
			"second_score":	121680
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	979,
			"primary_score":	999995,
			"second_score":	121669
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	980,
			"primary_score":	999995,
			"second_score":	121668
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	982,
			"primary_score":	999995,
			"second_score":	121666
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	985,
			"primary_score":	999995,
			"second_score":	121665
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1431,
			"primary_score":	999956,
			"second_score":	121638
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1432,
			"primary_score":	999956,
			"second_score":	121637
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1434,
			"primary_score":	999956,
			"second_score":	121636
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	39,
			"primary_score":	999947,
			"second_score":	121509
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	43,
			"primary_score":	999947,
			"second_score":	121508
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	44,
			"primary_score":	999984,
			"second_score":	121507
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	45,
			"primary_score":	999984,
			"second_score":	121376
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	46,
			"primary_score":	999984,
			"second_score":	121357
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	47,
			"primary_score":	999990,
			"second_score":	121356
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	63,
			"primary_score":	999948,
			"second_score":	126586
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	65,
			"primary_score":	999948,
			"second_score":	126585
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	137,
			"primary_score":	999948,
			"second_score":	121510
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	138,
			"primary_score":	999948,
			"second_score":	121337
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	143,
			"primary_score":	999948,
			"second_score":	154219
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	145,
			"primary_score":	999948,
			"second_score":	154218
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	146,
			"primary_score":	999948,
			"second_score":	154196
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	147,
			"primary_score":	999948,
			"second_score":	154195
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	148,
			"primary_score":	999948,
			"second_score":	154194
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	149,
			"primary_score":	999948,
			"second_score":	154193
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	150,
			"primary_score":	999948,
			"second_score":	154192
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	151,
			"primary_score":	999948,
			"second_score":	154175
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	152,
			"primary_score":	999948,
			"second_score":	154174
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	41,
			"primary_score":	999707,
			"second_score":	114512
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	42,
			"primary_score":	999707,
			"second_score":	114446
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	47,
			"primary_score":	999707,
			"second_score":	126617
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	49,
			"primary_score":	999707,
			"second_score":	126616
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	50,
			"primary_score":	999947,
			"second_score":	126593
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	51,
			"primary_score":	999963,
			"second_score":	126592
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	53,
			"primary_score":	999963,
			"second_score":	126591
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	54,
			"primary_score":	999965,
			"second_score":	126590
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	55,
			"primary_score":	999965,
			"second_score":	126589
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	56,
			"primary_score":	999965,
			"second_score":	126588
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	57,
			"primary_score":	999965,
			"second_score":	126587
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	58,
			"primary_score":	999965,
			"second_score":	126584
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	59,
			"primary_score":	999965,
			"second_score":	126583
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	82,
			"primary_score":	999707,
			"second_score":	117462
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	84,
			"primary_score":	999707,
			"second_score":	117461
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	85,
			"primary_score":	999947,
			"second_score":	117458
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	104,
			"primary_score":	999947,
			"second_score":	154191
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	105,
			"primary_score":	999947,
			"second_score":	154190
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	107,
			"primary_score":	999947,
			"second_score":	154189
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	111,
			"primary_score":	999947,
			"second_score":	154188
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	115,
			"primary_score":	999947,
			"second_score":	154187
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	117,
			"primary_score":	999947,
			"second_score":	154186
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	118,
			"primary_score":	999947,
			"second_score":	154185
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	119,
			"primary_score":	999947,
			"second_score":	154184
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	121,
			"primary_score":	999947,
			"second_score":	154183
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	122,
			"primary_score":	999947,
			"second_score":	154182
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	123,
			"primary_score":	999947,
			"second_score":	154181
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	124,
			"primary_score":	999947,
			"second_score":	154180
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	125,
			"primary_score":	999947,
			"second_score":	154179
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	126,
			"primary_score":	999947,
			"second_score":	154178
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	127,
			"primary_score":	999947,
			"second_score":	154177
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	132,
			"primary_score":	999947,
			"second_score":	154176
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	144,
			"primary_score":	999963,
			"second_score":	152107
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	146,
			"primary_score":	999963,
			"second_score":	152106
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	167,
			"primary_score":	999948,
			"second_score":	121542
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	169,
			"primary_score":	999948,
			"second_score":	121541
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	171,
			"primary_score":	999948,
			"second_score":	121540
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	172,
			"primary_score":	999948,
			"second_score":	121538
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	173,
			"primary_score":	999948,
			"second_score":	121310
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	175,
			"primary_score":	999964,
			"second_score":	151645
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	183,
			"primary_score":	999948,
			"second_score":	121537
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	184,
			"primary_score":	999948,
			"second_score":	121536
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	186,
			"primary_score":	999948,
			"second_score":	121535
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	190,
			"primary_score":	999948,
			"second_score":	121534
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	196,
			"primary_score":	999948,
			"second_score":	121533
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	197,
			"primary_score":	999948,
			"second_score":	121532
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	198,
			"primary_score":	999948,
			"second_score":	121531
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	214,
			"primary_score":	999948,
			"second_score":	121530
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	216,
			"primary_score":	999948,
			"second_score":	121529
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	217,
			"primary_score":	999948,
			"second_score":	121528
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	218,
			"primary_score":	999948,
			"second_score":	121518
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	219,
			"primary_score":	999948,
			"second_score":	121517
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	220,
			"primary_score":	999948,
			"second_score":	121511
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	223,
			"primary_score":	999948,
			"second_score":	121318
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	225,
			"primary_score":	999948,
			"second_score":	121314
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	230,
			"primary_score":	999948,
			"second_score":	121312
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	239,
			"primary_score":	999948,
			"second_score":	121311
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	110,
			"primary_score":	999707,
			"second_score":	14836
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	113,
			"primary_score":	999922,
			"second_score":	115559
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	122,
			"primary_score":	999707,
			"second_score":	14838
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	124,
			"primary_score":	999707,
			"second_score":	14837
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	129,
			"primary_score":	999962,
			"second_score":	117579
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	136,
			"primary_score":	999707,
			"second_score":	117572
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	137,
			"primary_score":	999962,
			"second_score":	117580
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	138,
			"primary_score":	999962,
			"second_score":	117578
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	140,
			"primary_score":	999707,
			"second_score":	117571
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	157,
			"primary_score":	999947,
			"second_score":	117533
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	160,
			"primary_score":	999947,
			"second_score":	117532
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	197,
			"primary_score":	999707,
			"second_score":	117525
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	198,
			"primary_score":	999947,
			"second_score":	117534
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	199,
			"primary_score":	999947,
			"second_score":	117531
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	201,
			"primary_score":	999707,
			"second_score":	117524
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	217,
			"primary_score":	999947,
			"second_score":	115487
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	221,
			"primary_score":	999947,
			"second_score":	115486
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	245,
			"primary_score":	999947,
			"second_score":	115485
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	266,
			"primary_score":	999707,
			"second_score":	15271
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	268,
			"primary_score":	999707,
			"second_score":	15270
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	269,
			"primary_score":	999947,
			"second_score":	208567
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	271,
			"primary_score":	999707,
			"second_score":	15269
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	274,
			"primary_score":	999986,
			"second_score":	116012
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	276,
			"primary_score":	999986,
			"second_score":	116011
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	277,
			"primary_score":	999986,
			"second_score":	116010
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	278,
			"primary_score":	999986,
			"second_score":	116009
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	281,
			"primary_score":	999986,
			"second_score":	115978
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	283,
			"primary_score":	999947,
			"second_score":	115959
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	293,
			"primary_score":	999947,
			"second_score":	115958
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	294,
			"primary_score":	999947,
			"second_score":	115885
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	297,
			"primary_score":	999947,
			"second_score":	115884
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	298,
			"primary_score":	999947,
			"second_score":	115498
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	299,
			"primary_score":	999947,
			"second_score":	115490
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	302,
			"primary_score":	999947,
			"second_score":	115489
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	306,
			"primary_score":	999947,
			"second_score":	115488
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	308,
			"primary_score":	999947,
			"second_score":	115484
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	309,
			"primary_score":	999947,
			"second_score":	115433
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	312,
			"primary_score":	999707,
			"second_score":	19051
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	314,
			"primary_score":	999707,
			"second_score":	19050
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	315,
			"primary_score":	999707,
			"second_score":	18987
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	316,
			"primary_score":	999707,
			"second_score":	18986
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	319,
			"primary_score":	999707,
			"second_score":	18978
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	321,
			"primary_score":	999707,
			"second_score":	15268
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	329,
			"primary_score":	999707,
			"second_score":	15267
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	330,
			"primary_score":	999707,
			"second_score":	15259
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	333,
			"primary_score":	999707,
			"second_score":	15258
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	334,
			"primary_score":	999707,
			"second_score":	14829
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	335,
			"primary_score":	999707,
			"second_score":	14821
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	336,
			"primary_score":	999707,
			"second_score":	16325
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	338,
			"primary_score":	999707,
			"second_score":	14820
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	339,
			"primary_score":	999707,
			"second_score":	14819
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	350,
			"primary_score":	999707,
			"second_score":	119657
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	351,
			"primary_score":	999707,
			"second_score":	119656
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	352,
			"primary_score":	999707,
			"second_score":	119655
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	354,
			"primary_score":	999707,
			"second_score":	119654
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	359,
			"primary_score":	999707,
			"second_score":	119653
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	360,
			"primary_score":	999707,
			"second_score":	119652
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	363,
			"primary_score":	999707,
			"second_score":	119633
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	364,
			"primary_score":	999962,
			"second_score":	116172
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	367,
			"primary_score":	999707,
			"second_score":	119632
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	369,
			"primary_score":	999707,
			"second_score":	119613
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	370,
			"primary_score":	999738,
			"second_score":	115845
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	371,
			"primary_score":	999738,
			"second_score":	115844
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	372,
			"primary_score":	999738,
			"second_score":	115837
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	373,
			"primary_score":	999738,
			"second_score":	115836
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	375,
			"primary_score":	999738,
			"second_score":	115834
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	378,
			"primary_score":	999707,
			"second_score":	119612
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	379,
			"primary_score":	999707,
			"second_score":	119611
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	380,
			"primary_score":	999707,
			"second_score":	119610
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	381,
			"primary_score":	999707,
			"second_score":	119433
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	382,
			"primary_score":	999707,
			"second_score":	119430
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	384,
			"primary_score":	999707,
			"second_score":	119429
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	386,
			"primary_score":	999707,
			"second_score":	119364
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	388,
			"primary_score":	999707,
			"second_score":	119313
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	389,
			"primary_score":	999922,
			"second_score":	115586
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	391,
			"primary_score":	999707,
			"second_score":	119312
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	394,
			"primary_score":	999707,
			"second_score":	119311
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	397,
			"primary_score":	999707,
			"second_score":	119310
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	400,
			"primary_score":	999707,
			"second_score":	119309
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	401,
			"primary_score":	999707,
			"second_score":	119308
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	403,
			"primary_score":	999707,
			"second_score":	119305
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	404,
			"primary_score":	999956,
			"second_score":	115738
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	405,
			"primary_score":	999956,
			"second_score":	115731
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	406,
			"primary_score":	999956,
			"second_score":	115729
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	410,
			"primary_score":	999956,
			"second_score":	115728
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	501,
			"primary_score":	999737,
			"second_score":	170733
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	502,
			"primary_score":	999737,
			"second_score":	170663
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	520,
			"primary_score":	999740,
			"second_score":	199706
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	530,
			"primary_score":	999707,
			"second_score":	125433
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	537,
			"primary_score":	999707,
			"second_score":	125494
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	479,
			"primary_score":	999980,
			"second_score":	151594
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	481,
			"primary_score":	999980,
			"second_score":	151593
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	537,
			"primary_score":	999980,
			"second_score":	151592
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	543,
			"primary_score":	999707,
			"second_score":	120068
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	544,
			"primary_score":	999707,
			"second_score":	120067
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	546,
			"primary_score":	999707,
			"second_score":	120066
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	558,
			"primary_score":	999707,
			"second_score":	120065
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	559,
			"primary_score":	999707,
			"second_score":	120037
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	561,
			"primary_score":	999707,
			"second_score":	120036
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	608,
			"primary_score":	999707,
			"second_score":	120035
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	822,
			"primary_score":	999927,
			"second_score":	173919
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	823,
			"primary_score":	999927,
			"second_score":	173918
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	825,
			"primary_score":	999927,
			"second_score":	173917
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	826,
			"primary_score":	999927,
			"second_score":	173916
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	828,
			"primary_score":	999934,
			"second_score":	173915
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	831,
			"primary_score":	999934,
			"second_score":	173914
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	836,
			"primary_score":	999934,
			"second_score":	173913
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	838,
			"primary_score":	999934,
			"second_score":	173908
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1221,
			"primary_score":	999865,
			"second_score":	131258
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1222,
			"primary_score":	999865,
			"second_score":	131257
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1224,
			"primary_score":	999865,
			"second_score":	131256
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1228,
			"primary_score":	999865,
			"second_score":	131255
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1230,
			"primary_score":	999865,
			"second_score":	131221
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1231,
			"primary_score":	999865,
			"second_score":	131220
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1232,
			"primary_score":	999865,
			"second_score":	131219
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1233,
			"primary_score":	999865,
			"second_score":	131212
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1877,
			"primary_score":	999995,
			"second_score":	151595
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1878,
			"primary_score":	999995,
			"second_score":	151591
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1892,
			"primary_score":	999707,
			"second_score":	150421
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1893,
			"primary_score":	999707,
			"second_score":	150420
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1894,
			"primary_score":	999707,
			"second_score":	150419
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1896,
			"primary_score":	999707,
			"second_score":	150418
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1897,
			"primary_score":	999707,
			"second_score":	150410
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1899,
			"primary_score":	999707,
			"second_score":	150403
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1901,
			"primary_score":	999707,
			"second_score":	150402
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1907,
			"primary_score":	999707,
			"second_score":	150443
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	78,
			"primary_score":	999707,
			"second_score":	114514
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	79,
			"primary_score":	999707,
			"second_score":	114540
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	86,
			"primary_score":	999707,
			"second_score":	117605
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	88,
			"primary_score":	999707,
			"second_score":	117604
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	96,
			"primary_score":	999707,
			"second_score":	117606
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	97,
			"primary_score":	999707,
			"second_score":	117603
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	98,
			"primary_score":	999707,
			"second_score":	117602
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	100,
			"primary_score":	999707,
			"second_score":	117601
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	104,
			"primary_score":	999707,
			"second_score":	117600
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	105,
			"primary_score":	999707,
			"second_score":	117599
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	62,
			"primary_score":	999707,
			"second_score":	128183
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	64,
			"primary_score":	999707,
			"second_score":	128182
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	65,
			"primary_score":	999707,
			"second_score":	128181
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	66,
			"primary_score":	999707,
			"second_score":	128180
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	67,
			"primary_score":	999707,
			"second_score":	128179
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	87,
			"primary_score":	999707,
			"second_score":	128164
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	88,
			"primary_score":	999707,
			"second_score":	128163
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	89,
			"primary_score":	999707,
			"second_score":	128162
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	90,
			"primary_score":	999707,
			"second_score":	128161
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	27,
			"primary_score":	999707,
			"second_score":	117620
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	28,
			"primary_score":	999707,
			"second_score":	117619
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	29,
			"primary_score":	999707,
			"second_score":	117618
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	30,
			"primary_score":	999707,
			"second_score":	117617
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	86,
			"primary_score":	999798,
			"second_score":	199634
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	93,
			"primary_score":	999707,
			"second_score":	114242
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	95,
			"primary_score":	999707,
			"second_score":	114241
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	103,
			"primary_score":	999707,
			"second_score":	114219
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	126,
			"primary_score":	999922,
			"second_score":	199977
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	127,
			"primary_score":	999922,
			"second_score":	199973
		}, {
			"file":	"Zend/zend_string.c",
			"line":	77,
			"primary_score":	999707,
			"second_score":	6123
		}, {
			"file":	"Zend/zend_string.c",
			"line":	78,
			"primary_score":	999707,
			"second_score":	6122
		}, {
			"file":	"Zend/zend_string.c",
			"line":	90,
			"primary_score":	999987,
			"second_score":	238300
		}, {
			"file":	"Zend/zend_string.c",
			"line":	188,
			"primary_score":	999707,
			"second_score":	113017
		}, {
			"file":	"Zend/zend_string.c",
			"line":	189,
			"primary_score":	999707,
			"second_score":	113016
		}, {
			"file":	"Zend/zend_string.c",
			"line":	192,
			"primary_score":	999707,
			"second_score":	113015
		}, {
			"file":	"Zend/zend_string.c",
			"line":	199,
			"primary_score":	999707,
			"second_score":	113014
		}, {
			"file":	"Zend/zend_string.c",
			"line":	200,
			"primary_score":	999707,
			"second_score":	103488
		}, {
			"file":	"Zend/zend_string.c",
			"line":	201,
			"primary_score":	999707,
			"second_score":	103487
		}, {
			"file":	"Zend/zend_string.c",
			"line":	202,
			"primary_score":	999707,
			"second_score":	110055
		}, {
			"file":	"Zend/zend_string.c",
			"line":	203,
			"primary_score":	999707,
			"second_score":	110054
		}, {
			"file":	"Zend/zend_string.c",
			"line":	204,
			"primary_score":	999707,
			"second_score":	110053
		}, {
			"file":	"Zend/zend_string.c",
			"line":	208,
			"primary_score":	999707,
			"second_score":	110052
		}, {
			"file":	"Zend/zend_string.c",
			"line":	209,
			"primary_score":	999707,
			"second_score":	104565
		}, {
			"file":	"Zend/zend_string.c",
			"line":	211,
			"primary_score":	999707,
			"second_score":	110051
		}, {
			"file":	"Zend/zend_string.c",
			"line":	213,
			"primary_score":	999707,
			"second_score":	110050
		}, {
			"file":	"Zend/zend_string.c",
			"line":	215,
			"primary_score":	999707,
			"second_score":	103486
		}, {
			"file":	"Zend/zend_string.c",
			"line":	216,
			"primary_score":	999707,
			"second_score":	103485
		}, {
			"file":	"Zend/zend_string.c",
			"line":	218,
			"primary_score":	999707,
			"second_score":	103484
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	459,
			"primary_score":	999707,
			"second_score":	6279
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	467,
			"primary_score":	999707,
			"second_score":	6225
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1379,
			"primary_score":	999707,
			"second_score":	6278
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1380,
			"primary_score":	999707,
			"second_score":	6277
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1382,
			"primary_score":	999707,
			"second_score":	6276
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1383,
			"primary_score":	999707,
			"second_score":	6275
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1384,
			"primary_score":	999707,
			"second_score":	6229
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1385,
			"primary_score":	999707,
			"second_score":	6228
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1389,
			"primary_score":	999707,
			"second_score":	6227
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1391,
			"primary_score":	999707,
			"second_score":	6226
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	32,
			"primary_score":	999707,
			"second_score":	114162
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	37,
			"primary_score":	999707,
			"second_score":	118257
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	38,
			"primary_score":	999707,
			"second_score":	116382
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	41,
			"primary_score":	999707,
			"second_score":	114785
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	43,
			"primary_score":	999707,
			"second_score":	114784
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	44,
			"primary_score":	999707,
			"second_score":	114783
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	45,
			"primary_score":	999707,
			"second_score":	114775
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	48,
			"primary_score":	999707,
			"second_score":	114756
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	51,
			"primary_score":	999948,
			"second_score":	121544
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	53,
			"primary_score":	999948,
			"second_score":	121543
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	55,
			"primary_score":	999948,
			"second_score":	121306
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	58,
			"primary_score":	999707,
			"second_score":	114841
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	61,
			"primary_score":	999707,
			"second_score":	114840
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	63,
			"primary_score":	999707,
			"second_score":	114638
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	77,
			"primary_score":	999707,
			"second_score":	15287
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	81,
			"primary_score":	999707,
			"second_score":	19028
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	82,
			"primary_score":	999707,
			"second_score":	19025
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	107,
			"primary_score":	999707,
			"second_score":	133226
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	121,
			"primary_score":	999707,
			"second_score":	133225
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	124,
			"primary_score":	999707,
			"second_score":	133224
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	143,
			"primary_score":	999963,
			"second_score":	152109
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	144,
			"primary_score":	999963,
			"second_score":	152108
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	146,
			"primary_score":	999963,
			"second_score":	152105
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	153,
			"primary_score":	999707,
			"second_score":	131198
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	32,
			"primary_score":	999707,
			"second_score":	114164
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	33,
			"primary_score":	999707,
			"second_score":	115627
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	35,
			"primary_score":	999707,
			"second_score":	114163
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	42,
			"primary_score":	999707,
			"second_score":	133228
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	43,
			"primary_score":	999707,
			"second_score":	131613
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	45,
			"primary_score":	999707,
			"second_score":	133227
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	345,
			"primary_score":	999707,
			"second_score":	152090
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	346,
			"primary_score":	999707,
			"second_score":	152089
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	347,
			"primary_score":	999707,
			"second_score":	152088
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	350,
			"primary_score":	999707,
			"second_score":	152087
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	354,
			"primary_score":	999707,
			"second_score":	152086
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	356,
			"primary_score":	999707,
			"second_score":	152085
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	363,
			"primary_score":	999707,
			"second_score":	133326
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	364,
			"primary_score":	999707,
			"second_score":	133325
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	365,
			"primary_score":	999707,
			"second_score":	133324
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	366,
			"primary_score":	999707,
			"second_score":	133323
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	367,
			"primary_score":	999707,
			"second_score":	133322
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	368,
			"primary_score":	999707,
			"second_score":	133321
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	369,
			"primary_score":	999707,
			"second_score":	133320
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	370,
			"primary_score":	999707,
			"second_score":	133319
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	371,
			"primary_score":	999707,
			"second_score":	133318
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	372,
			"primary_score":	999707,
			"second_score":	133317
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	373,
			"primary_score":	999707,
			"second_score":	133316
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	374,
			"primary_score":	999707,
			"second_score":	133315
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	375,
			"primary_score":	999707,
			"second_score":	133314
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	377,
			"primary_score":	999707,
			"second_score":	133313
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	379,
			"primary_score":	999707,
			"second_score":	133312
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	380,
			"primary_score":	999707,
			"second_score":	150413
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	383,
			"primary_score":	999707,
			"second_score":	133278
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	395,
			"primary_score":	999707,
			"second_score":	133277
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	396,
			"primary_score":	999707,
			"second_score":	133276
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	397,
			"primary_score":	999707,
			"second_score":	133275
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	399,
			"primary_score":	999707,
			"second_score":	133274
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	400,
			"primary_score":	999707,
			"second_score":	133273
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	402,
			"primary_score":	999707,
			"second_score":	133272
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	403,
			"primary_score":	999707,
			"second_score":	127303
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	410,
			"primary_score":	999707,
			"second_score":	127302
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	411,
			"primary_score":	999707,
			"second_score":	127281
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	414,
			"primary_score":	999707,
			"second_score":	127280
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	417,
			"primary_score":	999982,
			"second_score":	131539
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	420,
			"primary_score":	999982,
			"second_score":	127304
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	431,
			"primary_score":	999707,
			"second_score":	119740
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	436,
			"primary_score":	999707,
			"second_score":	119739
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	437,
			"primary_score":	999707,
			"second_score":	119738
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	458,
			"primary_score":	999707,
			"second_score":	127294
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	459,
			"primary_score":	999707,
			"second_score":	127293
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	461,
			"primary_score":	999707,
			"second_score":	127292
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	462,
			"primary_score":	999707,
			"second_score":	127291
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	463,
			"primary_score":	999707,
			"second_score":	127290
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	464,
			"primary_score":	999934,
			"second_score":	151800
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	465,
			"primary_score":	999934,
			"second_score":	151799
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	466,
			"primary_score":	999934,
			"second_score":	151798
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	467,
			"primary_score":	999963,
			"second_score":	151777
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	468,
			"primary_score":	999963,
			"second_score":	151776
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	470,
			"primary_score":	999963,
			"second_score":	151768
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	474,
			"primary_score":	999707,
			"second_score":	127289
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	476,
			"primary_score":	999707,
			"second_score":	127288
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	478,
			"primary_score":	999707,
			"second_score":	127284
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	479,
			"primary_score":	999982,
			"second_score":	127608
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	481,
			"primary_score":	999707,
			"second_score":	127283
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	482,
			"primary_score":	999982,
			"second_score":	127606
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	484,
			"primary_score":	999982,
			"second_score":	127605
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	485,
			"primary_score":	999982,
			"second_score":	127604
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	486,
			"primary_score":	999982,
			"second_score":	127603
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	515,
			"primary_score":	999983,
			"second_score":	127602
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	516,
			"primary_score":	999983,
			"second_score":	127601
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	517,
			"primary_score":	999983,
			"second_score":	127600
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	518,
			"primary_score":	999983,
			"second_score":	127599
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	519,
			"primary_score":	999994,
			"second_score":	127598
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	525,
			"primary_score":	999994,
			"second_score":	127597
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	526,
			"primary_score":	999994,
			"second_score":	127403
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	529,
			"primary_score":	999983,
			"second_score":	127402
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	531,
			"primary_score":	999983,
			"second_score":	127401
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	532,
			"primary_score":	999983,
			"second_score":	127400
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	534,
			"primary_score":	999983,
			"second_score":	127399
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	545,
			"primary_score":	999983,
			"second_score":	127398
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	546,
			"primary_score":	999983,
			"second_score":	127397
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	547,
			"primary_score":	999983,
			"second_score":	127396
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	549,
			"primary_score":	999983,
			"second_score":	127395
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	550,
			"primary_score":	999983,
			"second_score":	127394
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	552,
			"primary_score":	999983,
			"second_score":	127393
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	554,
			"primary_score":	999983,
			"second_score":	127308
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	562,
			"primary_score":	999983,
			"second_score":	127307
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	563,
			"primary_score":	999983,
			"second_score":	127306
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	566,
			"primary_score":	999707,
			"second_score":	127282
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	571,
			"primary_score":	999707,
			"second_score":	128174
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	572,
			"primary_score":	999707,
			"second_score":	128173
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	573,
			"primary_score":	999707,
			"second_score":	128172
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	575,
			"primary_score":	999707,
			"second_score":	128171
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	576,
			"primary_score":	999707,
			"second_score":	128170
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	589,
			"primary_score":	999707,
			"second_score":	128169
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	603,
			"primary_score":	999707,
			"second_score":	128168
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	604,
			"primary_score":	999980,
			"second_score":	131572
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	605,
			"primary_score":	999980,
			"second_score":	131571
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	606,
			"primary_score":	999980,
			"second_score":	131570
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	607,
			"primary_score":	999980,
			"second_score":	131569
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	608,
			"primary_score":	999980,
			"second_score":	131568
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	609,
			"primary_score":	999980,
			"second_score":	131567
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	610,
			"primary_score":	999980,
			"second_score":	131566
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	613,
			"primary_score":	999707,
			"second_score":	128167
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	614,
			"primary_score":	999707,
			"second_score":	128157
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	615,
			"primary_score":	999707,
			"second_score":	128153
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	617,
			"primary_score":	999707,
			"second_score":	128152
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	618,
			"primary_score":	999707,
			"second_score":	128151
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	620,
			"primary_score":	999707,
			"second_score":	128150
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	621,
			"primary_score":	999707,
			"second_score":	128122
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	622,
			"primary_score":	999707,
			"second_score":	128119
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	623,
			"primary_score":	999707,
			"second_score":	128118
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	625,
			"primary_score":	999707,
			"second_score":	128117
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	626,
			"primary_score":	999707,
			"second_score":	128116
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	627,
			"primary_score":	999707,
			"second_score":	128115
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	628,
			"primary_score":	999707,
			"second_score":	128114
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	630,
			"primary_score":	999707,
			"second_score":	128113
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	631,
			"primary_score":	999707,
			"second_score":	128112
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	632,
			"primary_score":	999707,
			"second_score":	128103
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	636,
			"primary_score":	999707,
			"second_score":	128102
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	638,
			"primary_score":	999707,
			"second_score":	128101
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	643,
			"primary_score":	999707,
			"second_score":	127704
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	644,
			"primary_score":	999723,
			"second_score":	127703
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	646,
			"primary_score":	999983,
			"second_score":	131549
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	647,
			"primary_score":	999983,
			"second_score":	131548
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	648,
			"primary_score":	999983,
			"second_score":	131547
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	649,
			"primary_score":	999983,
			"second_score":	131546
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	650,
			"primary_score":	999983,
			"second_score":	131545
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	651,
			"primary_score":	999983,
			"second_score":	131544
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	660,
			"primary_score":	999983,
			"second_score":	131543
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	661,
			"primary_score":	999983,
			"second_score":	131542
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	662,
			"primary_score":	999983,
			"second_score":	131541
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	709,
			"primary_score":	999707,
			"second_score":	127674
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	710,
			"primary_score":	999707,
			"second_score":	127673
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	712,
			"primary_score":	999707,
			"second_score":	127672
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	729,
			"primary_score":	999707,
			"second_score":	127671
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	730,
			"primary_score":	999707,
			"second_score":	127670
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	732,
			"primary_score":	999707,
			"second_score":	127669
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	734,
			"primary_score":	999707,
			"second_score":	127631
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	742,
			"primary_score":	999707,
			"second_score":	127630
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	753,
			"primary_score":	999961,
			"second_score":	131426
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	754,
			"primary_score":	999961,
			"second_score":	131425
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	755,
			"primary_score":	999961,
			"second_score":	131424
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	757,
			"primary_score":	999961,
			"second_score":	131419
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	758,
			"primary_score":	999961,
			"second_score":	131418
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	779,
			"primary_score":	999963,
			"second_score":	131417
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	781,
			"primary_score":	999963,
			"second_score":	131416
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	782,
			"primary_score":	999963,
			"second_score":	131407
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	783,
			"primary_score":	999963,
			"second_score":	131396
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	784,
			"primary_score":	999963,
			"second_score":	131394
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	785,
			"primary_score":	999963,
			"second_score":	131393
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	788,
			"primary_score":	999962,
			"second_score":	131391
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	789,
			"primary_score":	999962,
			"second_score":	131390
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	984,
			"primary_score":	999923,
			"second_score":	169694
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1731,
			"primary_score":	999707,
			"second_score":	121389
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1733,
			"primary_score":	999707,
			"second_score":	121388
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1734,
			"primary_score":	999707,
			"second_score":	121387
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1736,
			"primary_score":	999707,
			"second_score":	121386
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1737,
			"primary_score":	999707,
			"second_score":	121385
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1739,
			"primary_score":	999707,
			"second_score":	121384
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1746,
			"primary_score":	999707,
			"second_score":	121383
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1749,
			"primary_score":	999707,
			"second_score":	121322
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1750,
			"primary_score":	999707,
			"second_score":	121321
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1919,
			"primary_score":	999707,
			"second_score":	128186
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1921,
			"primary_score":	999707,
			"second_score":	128185
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1923,
			"primary_score":	999707,
			"second_score":	128184
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1925,
			"primary_score":	999707,
			"second_score":	128178
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1926,
			"primary_score":	999836,
			"second_score":	128177
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1927,
			"primary_score":	999707,
			"second_score":	131594
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1931,
			"primary_score":	999707,
			"second_score":	131583
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1933,
			"primary_score":	999707,
			"second_score":	128176
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1935,
			"primary_score":	999707,
			"second_score":	128175
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1940,
			"primary_score":	999707,
			"second_score":	127301
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1941,
			"primary_score":	999707,
			"second_score":	127300
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1944,
			"primary_score":	999707,
			"second_score":	127299
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1945,
			"primary_score":	999707,
			"second_score":	127298
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1947,
			"primary_score":	999707,
			"second_score":	127297
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1948,
			"primary_score":	999707,
			"second_score":	127296
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1951,
			"primary_score":	999707,
			"second_score":	151927
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1952,
			"primary_score":	999707,
			"second_score":	151926
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1954,
			"primary_score":	999707,
			"second_score":	151925
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1956,
			"primary_score":	999707,
			"second_score":	151924
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1957,
			"primary_score":	999707,
			"second_score":	151818
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1958,
			"primary_score":	999707,
			"second_score":	151810
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1959,
			"primary_score":	999707,
			"second_score":	151807
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1978,
			"primary_score":	999707,
			"second_score":	127295
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2077,
			"primary_score":	999707,
			"second_score":	133269
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2079,
			"primary_score":	999707,
			"second_score":	133268
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2080,
			"primary_score":	999707,
			"second_score":	133267
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2084,
			"primary_score":	999707,
			"second_score":	133266
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2085,
			"primary_score":	999707,
			"second_score":	133265
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2086,
			"primary_score":	999707,
			"second_score":	133264
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2089,
			"primary_score":	999707,
			"second_score":	133263
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2091,
			"primary_score":	999707,
			"second_score":	133262
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2092,
			"primary_score":	999707,
			"second_score":	133238
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2093,
			"primary_score":	999707,
			"second_score":	133230
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2094,
			"primary_score":	999707,
			"second_score":	133229
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2096,
			"primary_score":	999707,
			"second_score":	133223
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2099,
			"primary_score":	999707,
			"second_score":	133219
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2100,
			"primary_score":	999707,
			"second_score":	133218
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5999,
			"primary_score":	999707,
			"second_score":	131207
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6000,
			"primary_score":	999707,
			"second_score":	131206
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6001,
			"primary_score":	999707,
			"second_score":	131205
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6002,
			"primary_score":	999707,
			"second_score":	131204
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6004,
			"primary_score":	999707,
			"second_score":	131203
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6005,
			"primary_score":	999707,
			"second_score":	131202
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6007,
			"primary_score":	999707,
			"second_score":	131200
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6014,
			"primary_score":	999707,
			"second_score":	131199
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6017,
			"primary_score":	999707,
			"second_score":	131138
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6018,
			"primary_score":	999707,
			"second_score":	131112
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6019,
			"primary_score":	999707,
			"second_score":	131111
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7378,
			"primary_score":	999870,
			"second_score":	131263
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7379,
			"primary_score":	999870,
			"second_score":	131262
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7381,
			"primary_score":	999870,
			"second_score":	131261
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7383,
			"primary_score":	999870,
			"second_score":	131260
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7392,
			"primary_score":	999870,
			"second_score":	131259
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	7396,
			"primary_score":	999870,
			"second_score":	131211
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9742,
			"primary_score":	999892,
			"second_score":	131329
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9744,
			"primary_score":	999892,
			"second_score":	131328
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9745,
			"primary_score":	999892,
			"second_score":	131327
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9746,
			"primary_score":	999892,
			"second_score":	131326
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9747,
			"primary_score":	999892,
			"second_score":	131325
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9749,
			"primary_score":	999892,
			"second_score":	131324
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9750,
			"primary_score":	999892,
			"second_score":	131323
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9752,
			"primary_score":	999892,
			"second_score":	131319
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9761,
			"primary_score":	999892,
			"second_score":	131318
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9768,
			"primary_score":	999892,
			"second_score":	131317
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9770,
			"primary_score":	999892,
			"second_score":	131269
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9780,
			"primary_score":	999892,
			"second_score":	131268
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	9781,
			"primary_score":	999892,
			"second_score":	131267
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10178,
			"primary_score":	999707,
			"second_score":	121526
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10179,
			"primary_score":	999707,
			"second_score":	121525
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10180,
			"primary_score":	999707,
			"second_score":	121524
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10181,
			"primary_score":	999707,
			"second_score":	121523
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10183,
			"primary_score":	999707,
			"second_score":	121522
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10184,
			"primary_score":	999707,
			"second_score":	121521
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10186,
			"primary_score":	999707,
			"second_score":	121510
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10193,
			"primary_score":	999707,
			"second_score":	121509
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10196,
			"primary_score":	999707,
			"second_score":	121448
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10197,
			"primary_score":	999707,
			"second_score":	121394
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10198,
			"primary_score":	999707,
			"second_score":	121393
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10211,
			"primary_score":	999707,
			"second_score":	120793
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10212,
			"primary_score":	999707,
			"second_score":	120792
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10213,
			"primary_score":	999707,
			"second_score":	120791
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10214,
			"primary_score":	999707,
			"second_score":	120790
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10216,
			"primary_score":	999707,
			"second_score":	120789
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10217,
			"primary_score":	999707,
			"second_score":	120788
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10219,
			"primary_score":	999707,
			"second_score":	120777
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10222,
			"primary_score":	999707,
			"second_score":	120776
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10223,
			"primary_score":	999707,
			"second_score":	120771
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10224,
			"primary_score":	999707,
			"second_score":	120740
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10228,
			"primary_score":	999707,
			"second_score":	120739
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10236,
			"primary_score":	999707,
			"second_score":	120738
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10519,
			"primary_score":	999707,
			"second_score":	128226
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10520,
			"primary_score":	999707,
			"second_score":	128225
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10521,
			"primary_score":	999707,
			"second_score":	128224
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10522,
			"primary_score":	999707,
			"second_score":	128223
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10524,
			"primary_score":	999707,
			"second_score":	128212
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10528,
			"primary_score":	999707,
			"second_score":	128211
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10537,
			"primary_score":	999707,
			"second_score":	128209
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10538,
			"primary_score":	999707,
			"second_score":	128207
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10539,
			"primary_score":	999707,
			"second_score":	128203
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10541,
			"primary_score":	999707,
			"second_score":	128191
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10542,
			"primary_score":	999707,
			"second_score":	128190
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10547,
			"primary_score":	999707,
			"second_score":	128233
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10548,
			"primary_score":	999707,
			"second_score":	128232
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10549,
			"primary_score":	999707,
			"second_score":	128231
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10551,
			"primary_score":	999707,
			"second_score":	128230
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10552,
			"primary_score":	999707,
			"second_score":	128229
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10553,
			"primary_score":	999707,
			"second_score":	128228
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10554,
			"primary_score":	999707,
			"second_score":	128227
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11261,
			"primary_score":	999707,
			"second_score":	119852
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11262,
			"primary_score":	999707,
			"second_score":	119851
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11263,
			"primary_score":	999707,
			"second_score":	119850
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11265,
			"primary_score":	999707,
			"second_score":	119849
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11266,
			"primary_score":	999707,
			"second_score":	119848
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11268,
			"primary_score":	999707,
			"second_score":	119837
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11269,
			"primary_score":	999707,
			"second_score":	119834
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11270,
			"primary_score":	999707,
			"second_score":	119833
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11272,
			"primary_score":	999707,
			"second_score":	119799
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11273,
			"primary_score":	999707,
			"second_score":	119745
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11274,
			"primary_score":	999707,
			"second_score":	119744
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	21505,
			"primary_score":	999877,
			"second_score":	131386
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	21506,
			"primary_score":	999877,
			"second_score":	131385
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	21508,
			"primary_score":	999877,
			"second_score":	131384
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	21510,
			"primary_score":	999877,
			"second_score":	131383
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	21512,
			"primary_score":	999877,
			"second_score":	131382
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	21513,
			"primary_score":	999877,
			"second_score":	131381
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	21514,
			"primary_score":	999877,
			"second_score":	131380
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	21516,
			"primary_score":	999877,
			"second_score":	131379
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	21519,
			"primary_score":	999877,
			"second_score":	131376
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	21523,
			"primary_score":	999877,
			"second_score":	131333
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26202,
			"primary_score":	999748,
			"second_score":	131078
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26203,
			"primary_score":	999748,
			"second_score":	131077
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26205,
			"primary_score":	999748,
			"second_score":	131076
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26207,
			"primary_score":	999748,
			"second_score":	131072
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26211,
			"primary_score":	999750,
			"second_score":	131071
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26220,
			"primary_score":	999748,
			"second_score":	131069
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26221,
			"primary_score":	999748,
			"second_score":	131067
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26222,
			"primary_score":	999748,
			"second_score":	131063
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26224,
			"primary_score":	999748,
			"second_score":	131062
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26225,
			"primary_score":	999748,
			"second_score":	131061
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26316,
			"primary_score":	999748,
			"second_score":	131082
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26318,
			"primary_score":	999748,
			"second_score":	131081
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26322,
			"primary_score":	999748,
			"second_score":	131080
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26323,
			"primary_score":	999748,
			"second_score":	131079
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32090,
			"primary_score":	999787,
			"second_score":	150861
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32091,
			"primary_score":	999787,
			"second_score":	150860
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32092,
			"primary_score":	999787,
			"second_score":	150859
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32093,
			"primary_score":	999787,
			"second_score":	150858
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32095,
			"primary_score":	999787,
			"second_score":	150857
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32096,
			"primary_score":	999787,
			"second_score":	150856
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32097,
			"primary_score":	999787,
			"second_score":	150845
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32099,
			"primary_score":	999787,
			"second_score":	150675
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32113,
			"primary_score":	999787,
			"second_score":	150674
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32122,
			"primary_score":	999787,
			"second_score":	150673
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32124,
			"primary_score":	999787,
			"second_score":	150672
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32127,
			"primary_score":	999787,
			"second_score":	150671
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32129,
			"primary_score":	999787,
			"second_score":	150651
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32136,
			"primary_score":	999826,
			"second_score":	150649
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32138,
			"primary_score":	999787,
			"second_score":	150638
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32139,
			"primary_score":	999787,
			"second_score":	150637
		}, {
			"file":	"ext/date/php_date.c",
			"line":	626,
			"primary_score":	999707,
			"second_score":	125950
		}, {
			"file":	"ext/date/php_date.c",
			"line":	629,
			"primary_score":	999707,
			"second_score":	125949
		}, {
			"file":	"ext/date/php_date.c",
			"line":	630,
			"primary_score":	999707,
			"second_score":	125948
		}, {
			"file":	"ext/date/php_date.c",
			"line":	635,
			"primary_score":	999707,
			"second_score":	125947
		}, {
			"file":	"ext/date/php_date.c",
			"line":	640,
			"primary_score":	999707,
			"second_score":	125946
		}, {
			"file":	"ext/date/php_date.c",
			"line":	789,
			"primary_score":	999707,
			"second_score":	53379
		}, {
			"file":	"ext/date/php_date.c",
			"line":	791,
			"primary_score":	999707,
			"second_score":	52700
		}, {
			"file":	"ext/date/php_date.c",
			"line":	795,
			"primary_score":	999707,
			"second_score":	52699
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	910,
			"primary_score":	999707,
			"second_score":	58443
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	911,
			"primary_score":	999707,
			"second_score":	58428
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	912,
			"primary_score":	999707,
			"second_score":	58413
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	913,
			"primary_score":	999707,
			"second_score":	58398
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	914,
			"primary_score":	999707,
			"second_score":	58179
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	915,
			"primary_score":	999707,
			"second_score":	58074
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	916,
			"primary_score":	999707,
			"second_score":	58017
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	917,
			"primary_score":	999707,
			"second_score":	58002
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	918,
			"primary_score":	999707,
			"second_score":	57987
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	919,
			"primary_score":	999707,
			"second_score":	57870
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	920,
			"primary_score":	999707,
			"second_score":	57735
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	921,
			"primary_score":	999707,
			"second_score":	57618
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	922,
			"primary_score":	999707,
			"second_score":	57495
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	923,
			"primary_score":	999707,
			"second_score":	57474
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	924,
			"primary_score":	999707,
			"second_score":	57429
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	925,
			"primary_score":	999707,
			"second_score":	57390
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	926,
			"primary_score":	999707,
			"second_score":	57249
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	927,
			"primary_score":	999707,
			"second_score":	57132
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	928,
			"primary_score":	999707,
			"second_score":	56991
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	930,
			"primary_score":	999707,
			"second_score":	56874
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	932,
			"primary_score":	999707,
			"second_score":	56859
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	939,
			"primary_score":	999707,
			"second_score":	56706
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	230,
			"primary_score":	999707,
			"second_score":	53764
		}, {
			"file":	"ext/filter/filter.c",
			"line":	287,
			"primary_score":	999707,
			"second_score":	59851
		}, {
			"file":	"ext/filter/filter.c",
			"line":	289,
			"primary_score":	999707,
			"second_score":	59210
		}, {
			"file":	"ext/filter/filter.c",
			"line":	303,
			"primary_score":	999707,
			"second_score":	126443
		}, {
			"file":	"ext/filter/filter.c",
			"line":	304,
			"primary_score":	999707,
			"second_score":	126442
		}, {
			"file":	"ext/filter/filter.c",
			"line":	305,
			"primary_score":	999707,
			"second_score":	126441
		}, {
			"file":	"ext/filter/filter.c",
			"line":	306,
			"primary_score":	999707,
			"second_score":	126440
		}, {
			"file":	"ext/filter/filter.c",
			"line":	307,
			"primary_score":	999707,
			"second_score":	125972
		}, {
			"file":	"ext/filter/filter.c",
			"line":	308,
			"primary_score":	999707,
			"second_score":	125971
		}, {
			"file":	"ext/filter/filter.c",
			"line":	309,
			"primary_score":	999707,
			"second_score":	125970
		}, {
			"file":	"ext/hash/hash.c",
			"line":	889,
			"primary_score":	999707,
			"second_score":	60730
		}, {
			"file":	"ext/hash/hash.c",
			"line":	891,
			"primary_score":	999707,
			"second_score":	60451
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	289,
			"primary_score":	999707,
			"second_score":	62057
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	290,
			"primary_score":	999707,
			"second_score":	62006
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	291,
			"primary_score":	999707,
			"second_score":	61323
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2852,
			"primary_score":	999707,
			"second_score":	62056
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2856,
			"primary_score":	999707,
			"second_score":	62007
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	581,
			"primary_score":	999707,
			"second_score":	54208
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	583,
			"primary_score":	999707,
			"second_score":	54207
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	585,
			"primary_score":	999707,
			"second_score":	54206
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	586,
			"primary_score":	999707,
			"second_score":	54205
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	587,
			"primary_score":	999707,
			"second_score":	54186
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	683,
			"primary_score":	999707,
			"second_score":	54210
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	690,
			"primary_score":	999707,
			"second_score":	54209
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	692,
			"primary_score":	999707,
			"second_score":	54185
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	699,
			"primary_score":	999707,
			"second_score":	125966
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	700,
			"primary_score":	999707,
			"second_score":	125965
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	701,
			"primary_score":	999707,
			"second_score":	125964
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	703,
			"primary_score":	999707,
			"second_score":	125963
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	704,
			"primary_score":	999707,
			"second_score":	125962
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	707,
			"primary_score":	999707,
			"second_score":	125961
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	711,
			"primary_score":	999707,
			"second_score":	125960
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	712,
			"primary_score":	999707,
			"second_score":	125956
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	717,
			"primary_score":	999707,
			"second_score":	125955
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	719,
			"primary_score":	999707,
			"second_score":	125954
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	113,
			"primary_score":	999707,
			"second_score":	54730
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	163,
			"primary_score":	999707,
			"second_score":	55358
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	165,
			"primary_score":	999707,
			"second_score":	54734
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	199,
			"primary_score":	999707,
			"second_score":	64576
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	203,
			"primary_score":	999707,
			"second_score":	64557
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	389,
			"primary_score":	999707,
			"second_score":	64477
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	390,
			"primary_score":	999707,
			"second_score":	64468
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	391,
			"primary_score":	999707,
			"second_score":	63128
		}, {
			"file":	"ext/pdo/pdo_sqlstate.c",
			"line":	309,
			"primary_score":	999707,
			"second_score":	64467
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	87,
			"primary_score":	999707,
			"second_score":	64577
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	88,
			"primary_score":	999707,
			"second_score":	64519
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	328,
			"primary_score":	999885,
			"second_score":	154542
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	329,
			"primary_score":	999885,
			"second_score":	154541
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	330,
			"primary_score":	999885,
			"second_score":	154540
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	331,
			"primary_score":	999885,
			"second_score":	154539
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	332,
			"primary_score":	999885,
			"second_score":	154538
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	334,
			"primary_score":	999885,
			"second_score":	154537
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	335,
			"primary_score":	999885,
			"second_score":	154536
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	419,
			"primary_score":	999886,
			"second_score":	150950
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1102,
			"primary_score":	999707,
			"second_score":	98845
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1104,
			"primary_score":	999707,
			"second_score":	98844
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1105,
			"primary_score":	999707,
			"second_score":	98819
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1106,
			"primary_score":	999707,
			"second_score":	98782
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1107,
			"primary_score":	999707,
			"second_score":	98755
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1108,
			"primary_score":	999707,
			"second_score":	98729
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1109,
			"primary_score":	999707,
			"second_score":	98702
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1110,
			"primary_score":	999707,
			"second_score":	98671
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1111,
			"primary_score":	999707,
			"second_score":	98642
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1112,
			"primary_score":	999707,
			"second_score":	98613
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1113,
			"primary_score":	999707,
			"second_score":	98585
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1114,
			"primary_score":	999707,
			"second_score":	98556
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1115,
			"primary_score":	999707,
			"second_score":	98527
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1116,
			"primary_score":	999707,
			"second_score":	98498
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1117,
			"primary_score":	999707,
			"second_score":	98469
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1118,
			"primary_score":	999707,
			"second_score":	98440
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1119,
			"primary_score":	999707,
			"second_score":	98412
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1120,
			"primary_score":	999707,
			"second_score":	98381
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1121,
			"primary_score":	999707,
			"second_score":	98350
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1122,
			"primary_score":	999707,
			"second_score":	98317
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1123,
			"primary_score":	999707,
			"second_score":	98292
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1124,
			"primary_score":	999707,
			"second_score":	98268
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1125,
			"primary_score":	999707,
			"second_score":	98238
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3527,
			"primary_score":	999707,
			"second_score":	98230
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3557,
			"primary_score":	999707,
			"second_score":	98883
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3559,
			"primary_score":	999707,
			"second_score":	98846
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3561,
			"primary_score":	999707,
			"second_score":	98237
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3562,
			"primary_score":	999707,
			"second_score":	98236
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3570,
			"primary_score":	999707,
			"second_score":	98235
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3575,
			"primary_score":	999707,
			"second_score":	98234
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3617,
			"primary_score":	999707,
			"second_score":	126531
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3619,
			"primary_score":	999707,
			"second_score":	126530
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3621,
			"primary_score":	999707,
			"second_score":	126529
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3657,
			"primary_score":	999707,
			"second_score":	126528
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3658,
			"primary_score":	999707,
			"second_score":	126527
		}, {
			"file":	"ext/session/session.c",
			"line":	93,
			"primary_score":	999707,
			"second_score":	126464
		}, {
			"file":	"ext/session/session.c",
			"line":	98,
			"primary_score":	999707,
			"second_score":	126463
		}, {
			"file":	"ext/session/session.c",
			"line":	103,
			"primary_score":	999707,
			"second_score":	126462
		}, {
			"file":	"ext/session/session.c",
			"line":	1441,
			"primary_score":	999707,
			"second_score":	126466
		}, {
			"file":	"ext/session/session.c",
			"line":	1958,
			"primary_score":	999707,
			"second_score":	126468
		}, {
			"file":	"ext/session/session.c",
			"line":	1960,
			"primary_score":	999707,
			"second_score":	126467
		}, {
			"file":	"ext/session/session.c",
			"line":	1961,
			"primary_score":	999707,
			"second_score":	126465
		}, {
			"file":	"ext/session/session.c",
			"line":	1964,
			"primary_score":	999707,
			"second_score":	126461
		}, {
			"file":	"ext/session/session.c",
			"line":	1965,
			"primary_score":	999707,
			"second_score":	126455
		}, {
			"file":	"ext/session/session.c",
			"line":	1971,
			"primary_score":	999707,
			"second_score":	126454
		}, {
			"file":	"ext/session/session.c",
			"line":	2013,
			"primary_score":	999707,
			"second_score":	67036
		}, {
			"file":	"ext/session/session.c",
			"line":	2019,
			"primary_score":	999707,
			"second_score":	65604
		}, {
			"file":	"ext/session/session.c",
			"line":	2020,
			"primary_score":	999707,
			"second_score":	65603
		}, {
			"file":	"ext/session/session.c",
			"line":	2022,
			"primary_score":	999707,
			"second_score":	65602
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2600,
			"primary_score":	999707,
			"second_score":	97942
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2601,
			"primary_score":	999707,
			"second_score":	97941
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	919,
			"primary_score":	999707,
			"second_score":	126450
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	924,
			"primary_score":	999707,
			"second_score":	126449
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	929,
			"primary_score":	999707,
			"second_score":	126448
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	932,
			"primary_score":	999707,
			"second_score":	126447
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2140,
			"primary_score":	999707,
			"second_score":	56002
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2142,
			"primary_score":	999707,
			"second_score":	55393
		}, {
			"file":	"ext/standard/array.c",
			"line":	138,
			"primary_score":	999707,
			"second_score":	97520
		}, {
			"file":	"ext/standard/assert.c",
			"line":	114,
			"primary_score":	999707,
			"second_score":	97518
		}, {
			"file":	"ext/standard/assert.c",
			"line":	118,
			"primary_score":	999707,
			"second_score":	97517
		}, {
			"file":	"ext/standard/assert.c",
			"line":	124,
			"primary_score":	999707,
			"second_score":	126502
		}, {
			"file":	"ext/standard/assert.c",
			"line":	129,
			"primary_score":	999707,
			"second_score":	126501
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3464,
			"primary_score":	999707,
			"second_score":	97714
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3465,
			"primary_score":	999707,
			"second_score":	97713
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3466,
			"primary_score":	999707,
			"second_score":	97674
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3639,
			"primary_score":	999707,
			"second_score":	97718
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3647,
			"primary_score":	999707,
			"second_score":	97715
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3653,
			"primary_score":	999707,
			"second_score":	97673
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3655,
			"primary_score":	999707,
			"second_score":	97632
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3656,
			"primary_score":	999707,
			"second_score":	97594
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3659,
			"primary_score":	999707,
			"second_score":	97557
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3660,
			"primary_score":	999707,
			"second_score":	97521
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3661,
			"primary_score":	999707,
			"second_score":	97519
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3662,
			"primary_score":	999707,
			"second_score":	97516
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3663,
			"primary_score":	999707,
			"second_score":	96439
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3664,
			"primary_score":	999707,
			"second_score":	96436
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3669,
			"primary_score":	999707,
			"second_score":	96114
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3672,
			"primary_score":	999707,
			"second_score":	96111
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3720,
			"primary_score":	999707,
			"second_score":	126523
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3723,
			"primary_score":	999707,
			"second_score":	126522
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3724,
			"primary_score":	999707,
			"second_score":	126521
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3726,
			"primary_score":	999707,
			"second_score":	126520
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3729,
			"primary_score":	999707,
			"second_score":	126512
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3735,
			"primary_score":	999707,
			"second_score":	126511
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3740,
			"primary_score":	999707,
			"second_score":	126510
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3741,
			"primary_score":	999707,
			"second_score":	126508
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3746,
			"primary_score":	999707,
			"second_score":	126507
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3752,
			"primary_score":	999707,
			"second_score":	126503
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3753,
			"primary_score":	999707,
			"second_score":	126500
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3754,
			"primary_score":	999707,
			"second_score":	126489
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3759,
			"primary_score":	999707,
			"second_score":	126478
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3765,
			"primary_score":	999707,
			"second_score":	126477
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3767,
			"primary_score":	999707,
			"second_score":	126474
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3768,
			"primary_score":	999707,
			"second_score":	126473
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3769,
			"primary_score":	999707,
			"second_score":	126472
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4520,
			"primary_score":	999707,
			"second_score":	122382
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4521,
			"primary_score":	999707,
			"second_score":	122381
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4522,
			"primary_score":	999707,
			"second_score":	122380
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4524,
			"primary_score":	999707,
			"second_score":	122379
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4528,
			"primary_score":	999707,
			"second_score":	122312
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4530,
			"primary_score":	999707,
			"second_score":	122281
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4539,
			"primary_score":	999707,
			"second_score":	122280
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5000,
			"primary_score":	999707,
			"second_score":	126729
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5012,
			"primary_score":	999707,
			"second_score":	125941
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5018,
			"primary_score":	999707,
			"second_score":	125940
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	234,
			"primary_score":	999707,
			"second_score":	97556
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	235,
			"primary_score":	999707,
			"second_score":	97523
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	238,
			"primary_score":	999707,
			"second_score":	97522
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	130,
			"primary_score":	999707,
			"second_score":	96113
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	133,
			"primary_score":	999707,
			"second_score":	96112
		}, {
			"file":	"ext/standard/file.c",
			"line":	143,
			"primary_score":	999863,
			"second_score":	163398
		}, {
			"file":	"ext/standard/file.c",
			"line":	151,
			"primary_score":	999863,
			"second_score":	114176
		}, {
			"file":	"ext/standard/file.c",
			"line":	152,
			"primary_score":	999863,
			"second_score":	114175
		}, {
			"file":	"ext/standard/file.c",
			"line":	153,
			"primary_score":	999863,
			"second_score":	114174
		}, {
			"file":	"ext/standard/file.c",
			"line":	154,
			"primary_score":	999863,
			"second_score":	114112
		}, {
			"file":	"ext/standard/file.c",
			"line":	156,
			"primary_score":	999863,
			"second_score":	114111
		}, {
			"file":	"ext/standard/file.c",
			"line":	318,
			"primary_score":	999707,
			"second_score":	96438
		}, {
			"file":	"ext/standard/file.c",
			"line":	320,
			"primary_score":	999707,
			"second_score":	96437
		}, {
			"file":	"ext/standard/file.c",
			"line":	881,
			"primary_score":	999885,
			"second_score":	154535
		}, {
			"file":	"ext/standard/file.c",
			"line":	882,
			"primary_score":	999885,
			"second_score":	154534
		}, {
			"file":	"ext/standard/file.c",
			"line":	883,
			"primary_score":	999885,
			"second_score":	154533
		}, {
			"file":	"ext/standard/file.c",
			"line":	884,
			"primary_score":	999885,
			"second_score":	154532
		}, {
			"file":	"ext/standard/file.c",
			"line":	885,
			"primary_score":	999885,
			"second_score":	154531
		}, {
			"file":	"ext/standard/file.c",
			"line":	886,
			"primary_score":	999885,
			"second_score":	154530
		}, {
			"file":	"ext/standard/file.c",
			"line":	888,
			"primary_score":	999885,
			"second_score":	154529
		}, {
			"file":	"ext/standard/file.c",
			"line":	892,
			"primary_score":	999885,
			"second_score":	154420
		}, {
			"file":	"ext/standard/file.c",
			"line":	894,
			"primary_score":	999885,
			"second_score":	154419
		}, {
			"file":	"ext/standard/file.c",
			"line":	896,
			"primary_score":	999886,
			"second_score":	150957
		}, {
			"file":	"ext/standard/file.c",
			"line":	900,
			"primary_score":	999887,
			"second_score":	150956
		}, {
			"file":	"ext/standard/file.c",
			"line":	1528,
			"primary_score":	999999,
			"second_score":	130961
		}, {
			"file":	"ext/standard/file.c",
			"line":	1529,
			"primary_score":	999999,
			"second_score":	130960
		}, {
			"file":	"ext/standard/file.c",
			"line":	1530,
			"primary_score":	999999,
			"second_score":	130959
		}, {
			"file":	"ext/standard/file.c",
			"line":	1532,
			"primary_score":	999999,
			"second_score":	130958
		}, {
			"file":	"ext/standard/file.c",
			"line":	1536,
			"primary_score":	999999,
			"second_score":	130866
		}, {
			"file":	"ext/standard/file.c",
			"line":	1538,
			"primary_score":	999999,
			"second_score":	130829
		}, {
			"file":	"ext/standard/file.c",
			"line":	1539,
			"primary_score":	1000000,
			"second_score":	130812
		}, {
			"file":	"ext/standard/file.c",
			"line":	1540,
			"primary_score":	1000000,
			"second_score":	128277
		}, {
			"file":	"ext/standard/file.c",
			"line":	2342,
			"primary_score":	999707,
			"second_score":	122076
		}, {
			"file":	"ext/standard/file.c",
			"line":	2343,
			"primary_score":	999707,
			"second_score":	122075
		}, {
			"file":	"ext/standard/file.c",
			"line":	2344,
			"primary_score":	999707,
			"second_score":	122074
		}, {
			"file":	"ext/standard/file.c",
			"line":	2346,
			"primary_score":	999707,
			"second_score":	122073
		}, {
			"file":	"ext/standard/file.c",
			"line":	2350,
			"primary_score":	999707,
			"second_score":	121963
		}, {
			"file":	"ext/standard/file.c",
			"line":	2351,
			"primary_score":	999707,
			"second_score":	121718
		}, {
			"file":	"ext/standard/file.c",
			"line":	2360,
			"primary_score":	999707,
			"second_score":	121714
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	110,
			"primary_score":	999707,
			"second_score":	126506
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	114,
			"primary_score":	999707,
			"second_score":	126505
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	118,
			"primary_score":	999707,
			"second_score":	126504
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2148,
			"primary_score":	999707,
			"second_score":	96435
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2150,
			"primary_score":	999707,
			"second_score":	96434
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2151,
			"primary_score":	999707,
			"second_score":	96155
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2153,
			"primary_score":	999707,
			"second_score":	96115
		}, {
			"file":	"ext/standard/info.c",
			"line":	527,
			"primary_score":	999707,
			"second_score":	123592
		}, {
			"file":	"ext/standard/info.c",
			"line":	528,
			"primary_score":	999707,
			"second_score":	123591
		}, {
			"file":	"ext/standard/info.c",
			"line":	577,
			"primary_score":	999707,
			"second_score":	123590
		}, {
			"file":	"ext/standard/info.c",
			"line":	578,
			"primary_score":	999707,
			"second_score":	123589
		}, {
			"file":	"ext/standard/info.c",
			"line":	605,
			"primary_score":	999707,
			"second_score":	123588
		}, {
			"file":	"ext/standard/info.c",
			"line":	607,
			"primary_score":	999707,
			"second_score":	123587
		}, {
			"file":	"ext/standard/info.c",
			"line":	609,
			"primary_score":	999707,
			"second_score":	123586
		}, {
			"file":	"ext/standard/info.c",
			"line":	611,
			"primary_score":	999707,
			"second_score":	123585
		}, {
			"file":	"ext/standard/info.c",
			"line":	613,
			"primary_score":	999707,
			"second_score":	123584
		}, {
			"file":	"ext/standard/info.c",
			"line":	616,
			"primary_score":	999707,
			"second_score":	123583
		}, {
			"file":	"ext/standard/info.c",
			"line":	619,
			"primary_score":	999707,
			"second_score":	122882
		}, {
			"file":	"ext/standard/info.c",
			"line":	627,
			"primary_score":	999707,
			"second_score":	122881
		}, {
			"file":	"ext/standard/info.c",
			"line":	1153,
			"primary_score":	999707,
			"second_score":	124523
		}, {
			"file":	"ext/standard/info.c",
			"line":	1154,
			"primary_score":	999707,
			"second_score":	124522
		}, {
			"file":	"ext/standard/info.c",
			"line":	1156,
			"primary_score":	999707,
			"second_score":	124521
		}, {
			"file":	"ext/standard/info.c",
			"line":	1160,
			"primary_score":	999707,
			"second_score":	124483
		}, {
			"file":	"ext/standard/info.c",
			"line":	1161,
			"primary_score":	999707,
			"second_score":	124482
		}, {
			"file":	"ext/standard/info.c",
			"line":	1280,
			"primary_score":	999707,
			"second_score":	123635
		}, {
			"file":	"ext/standard/info.c",
			"line":	1281,
			"primary_score":	999707,
			"second_score":	123634
		}, {
			"file":	"ext/standard/info.c",
			"line":	1283,
			"primary_score":	999707,
			"second_score":	123633
		}, {
			"file":	"ext/standard/info.c",
			"line":	1286,
			"primary_score":	999707,
			"second_score":	123595
		}, {
			"file":	"ext/standard/info.c",
			"line":	1295,
			"primary_score":	999707,
			"second_score":	120534
		}, {
			"file":	"ext/standard/info.c",
			"line":	1299,
			"primary_score":	999707,
			"second_score":	120501
		}, {
			"file":	"ext/standard/info.c",
			"line":	1302,
			"primary_score":	999707,
			"second_score":	120500
		}, {
			"file":	"ext/standard/string.c",
			"line":	1058,
			"primary_score":	999707,
			"second_score":	122829
		}, {
			"file":	"ext/standard/string.c",
			"line":	1059,
			"primary_score":	999707,
			"second_score":	122828
		}, {
			"file":	"ext/standard/string.c",
			"line":	1060,
			"primary_score":	999707,
			"second_score":	122827
		}, {
			"file":	"ext/standard/string.c",
			"line":	1061,
			"primary_score":	999707,
			"second_score":	122826
		}, {
			"file":	"ext/standard/string.c",
			"line":	1062,
			"primary_score":	999707,
			"second_score":	122825
		}, {
			"file":	"ext/standard/string.c",
			"line":	1063,
			"primary_score":	999707,
			"second_score":	122824
		}, {
			"file":	"ext/standard/string.c",
			"line":	1065,
			"primary_score":	999707,
			"second_score":	122823
		}, {
			"file":	"ext/standard/string.c",
			"line":	1067,
			"primary_score":	999707,
			"second_score":	122820
		}, {
			"file":	"ext/standard/string.c",
			"line":	1071,
			"primary_score":	999707,
			"second_score":	122819
		}, {
			"file":	"ext/standard/string.c",
			"line":	1073,
			"primary_score":	999707,
			"second_score":	122815
		}, {
			"file":	"ext/standard/string.c",
			"line":	1074,
			"primary_score":	999707,
			"second_score":	121806
		}, {
			"file":	"ext/standard/string.c",
			"line":	1076,
			"primary_score":	999707,
			"second_score":	122803
		}, {
			"file":	"ext/standard/string.c",
			"line":	1077,
			"primary_score":	999707,
			"second_score":	121797
		}, {
			"file":	"ext/standard/string.c",
			"line":	1124,
			"primary_score":	999707,
			"second_score":	121796
		}, {
			"file":	"ext/standard/string.c",
			"line":	1125,
			"primary_score":	999707,
			"second_score":	121827
		}, {
			"file":	"ext/standard/string.c",
			"line":	1127,
			"primary_score":	999707,
			"second_score":	121795
		}, {
			"file":	"ext/standard/string.c",
			"line":	1129,
			"primary_score":	999707,
			"second_score":	121784
		}, {
			"file":	"ext/standard/string.c",
			"line":	1131,
			"primary_score":	999707,
			"second_score":	121781
		}, {
			"file":	"ext/standard/string.c",
			"line":	1132,
			"primary_score":	999707,
			"second_score":	121780
		}, {
			"file":	"ext/standard/string.c",
			"line":	1144,
			"primary_score":	999707,
			"second_score":	122930
		}, {
			"file":	"ext/standard/string.c",
			"line":	1146,
			"primary_score":	999707,
			"second_score":	122929
		}, {
			"file":	"ext/standard/string.c",
			"line":	1150,
			"primary_score":	999707,
			"second_score":	122837
		}, {
			"file":	"ext/standard/string.c",
			"line":	1163,
			"primary_score":	999707,
			"second_score":	122836
		}, {
			"file":	"ext/standard/string.c",
			"line":	1167,
			"primary_score":	999707,
			"second_score":	122835
		}, {
			"file":	"ext/standard/string.c",
			"line":	1168,
			"primary_score":	999707,
			"second_score":	122834
		}, {
			"file":	"ext/standard/string.c",
			"line":	1169,
			"primary_score":	999707,
			"second_score":	122833
		}, {
			"file":	"ext/standard/string.c",
			"line":	1170,
			"primary_score":	999707,
			"second_score":	122831
		}, {
			"file":	"ext/standard/string.c",
			"line":	1177,
			"primary_score":	999707,
			"second_score":	122830
		}, {
			"file":	"ext/standard/string.c",
			"line":	1179,
			"primary_score":	999707,
			"second_score":	121771
		}, {
			"file":	"ext/standard/string.c",
			"line":	1309,
			"primary_score":	999906,
			"second_score":	129990
		}, {
			"file":	"ext/standard/string.c",
			"line":	1311,
			"primary_score":	999906,
			"second_score":	129989
		}, {
			"file":	"ext/standard/string.c",
			"line":	1312,
			"primary_score":	999906,
			"second_score":	129988
		}, {
			"file":	"ext/standard/string.c",
			"line":	1314,
			"primary_score":	999906,
			"second_score":	129987
		}, {
			"file":	"ext/standard/string.c",
			"line":	1315,
			"primary_score":	999906,
			"second_score":	129884
		}, {
			"file":	"ext/standard/string.c",
			"line":	1316,
			"primary_score":	999906,
			"second_score":	129879
		}, {
			"file":	"ext/standard/string.c",
			"line":	1318,
			"primary_score":	999906,
			"second_score":	129878
		}, {
			"file":	"ext/standard/string.c",
			"line":	3536,
			"primary_score":	999707,
			"second_score":	120080
		}, {
			"file":	"ext/standard/string.c",
			"line":	3539,
			"primary_score":	999707,
			"second_score":	120079
		}, {
			"file":	"ext/standard/string.c",
			"line":	3540,
			"primary_score":	999707,
			"second_score":	120078
		}, {
			"file":	"ext/standard/string.c",
			"line":	3543,
			"primary_score":	999707,
			"second_score":	120077
		}, {
			"file":	"ext/standard/string.c",
			"line":	3544,
			"primary_score":	999707,
			"second_score":	120032
		}, {
			"file":	"ext/standard/string.c",
			"line":	3545,
			"primary_score":	999707,
			"second_score":	120031
		}, {
			"file":	"ext/standard/string.c",
			"line":	3546,
			"primary_score":	999707,
			"second_score":	120030
		}, {
			"file":	"ext/standard/string.c",
			"line":	3547,
			"primary_score":	999707,
			"second_score":	119996
		}, {
			"file":	"ext/standard/string.c",
			"line":	3647,
			"primary_score":	999707,
			"second_score":	120225
		}, {
			"file":	"ext/standard/string.c",
			"line":	3648,
			"primary_score":	999707,
			"second_score":	120224
		}, {
			"file":	"ext/standard/string.c",
			"line":	3649,
			"primary_score":	999707,
			"second_score":	120223
		}, {
			"file":	"ext/standard/string.c",
			"line":	3650,
			"primary_score":	999707,
			"second_score":	120222
		}, {
			"file":	"ext/standard/string.c",
			"line":	3651,
			"primary_score":	999707,
			"second_score":	120221
		}, {
			"file":	"ext/standard/string.c",
			"line":	3652,
			"primary_score":	999707,
			"second_score":	120220
		}, {
			"file":	"ext/standard/string.c",
			"line":	3653,
			"primary_score":	999707,
			"second_score":	120219
		}, {
			"file":	"ext/standard/string.c",
			"line":	3655,
			"primary_score":	999707,
			"second_score":	120218
		}, {
			"file":	"ext/standard/string.c",
			"line":	3659,
			"primary_score":	999707,
			"second_score":	120096
		}, {
			"file":	"ext/standard/string.c",
			"line":	3660,
			"primary_score":	999707,
			"second_score":	120093
		}, {
			"file":	"ext/standard/string.c",
			"line":	3661,
			"primary_score":	999707,
			"second_score":	120090
		}, {
			"file":	"ext/standard/string.c",
			"line":	3664,
			"primary_score":	999707,
			"second_score":	120087
		}, {
			"file":	"ext/standard/string.c",
			"line":	3665,
			"primary_score":	999707,
			"second_score":	120086
		}, {
			"file":	"ext/standard/string.c",
			"line":	3666,
			"primary_score":	999707,
			"second_score":	120084
		}, {
			"file":	"ext/standard/string.c",
			"line":	3672,
			"primary_score":	999707,
			"second_score":	120082
		}, {
			"file":	"ext/standard/string.c",
			"line":	3703,
			"primary_score":	999707,
			"second_score":	120081
		}, {
			"file":	"ext/standard/string.c",
			"line":	3705,
			"primary_score":	999707,
			"second_score":	119995
		}, {
			"file":	"ext/standard/string.c",
			"line":	3716,
			"primary_score":	999707,
			"second_score":	120226
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	121,
			"primary_score":	999707,
			"second_score":	97717
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	125,
			"primary_score":	999707,
			"second_score":	97716
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1083,
			"primary_score":	999707,
			"second_score":	97515
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1085,
			"primary_score":	999707,
			"second_score":	96440
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1097,
			"primary_score":	999707,
			"second_score":	126499
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1102,
			"primary_score":	999707,
			"second_score":	126498
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1103,
			"primary_score":	999707,
			"second_score":	126494
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1105,
			"primary_score":	999707,
			"second_score":	126490
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	129,
			"primary_score":	999707,
			"second_score":	126476
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	135,
			"primary_score":	999707,
			"second_score":	126475
		}, {
			"file":	"ext/standard/var.c",
			"line":	89,
			"primary_score":	999758,
			"second_score":	128009
		}, {
			"file":	"ext/standard/var.c",
			"line":	90,
			"primary_score":	999758,
			"second_score":	128008
		}, {
			"file":	"ext/standard/var.c",
			"line":	91,
			"primary_score":	999758,
			"second_score":	128007
		}, {
			"file":	"ext/standard/var.c",
			"line":	92,
			"primary_score":	999758,
			"second_score":	128006
		}, {
			"file":	"ext/standard/var.c",
			"line":	93,
			"primary_score":	999758,
			"second_score":	128005
		}, {
			"file":	"ext/standard/var.c",
			"line":	95,
			"primary_score":	999758,
			"second_score":	128004
		}, {
			"file":	"ext/standard/var.c",
			"line":	99,
			"primary_score":	999758,
			"second_score":	128003
		}, {
			"file":	"ext/standard/var.c",
			"line":	102,
			"primary_score":	999886,
			"second_score":	127724
		}, {
			"file":	"ext/standard/var.c",
			"line":	174,
			"primary_score":	999758,
			"second_score":	128100
		}, {
			"file":	"ext/standard/var.c",
			"line":	175,
			"primary_score":	999758,
			"second_score":	128099
		}, {
			"file":	"ext/standard/var.c",
			"line":	176,
			"primary_score":	999758,
			"second_score":	128098
		}, {
			"file":	"ext/standard/var.c",
			"line":	178,
			"primary_score":	999758,
			"second_score":	128097
		}, {
			"file":	"ext/standard/var.c",
			"line":	182,
			"primary_score":	999758,
			"second_score":	128011
		}, {
			"file":	"ext/standard/var.c",
			"line":	183,
			"primary_score":	999758,
			"second_score":	128010
		}, {
			"file":	"ext/standard/var.c",
			"line":	185,
			"primary_score":	999758,
			"second_score":	127723
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1378,
			"primary_score":	999707,
			"second_score":	100728
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1379,
			"primary_score":	999707,
			"second_score":	100635
		}, {
			"file":	"ext/xmlwriter/php_xmlwriter.c",
			"line":	1972,
			"primary_score":	999707,
			"second_score":	103418
		}, {
			"file":	"main/SAPI.c",
			"line":	69,
			"primary_score":	999707,
			"second_score":	3134
		}, {
			"file":	"main/SAPI.c",
			"line":	101,
			"primary_score":	999707,
			"second_score":	3135
		}, {
			"file":	"main/SAPI.c",
			"line":	104,
			"primary_score":	999707,
			"second_score":	3113
		}, {
			"file":	"main/SAPI.c",
			"line":	106,
			"primary_score":	999707,
			"second_score":	3112
		}, {
			"file":	"main/SAPI.c",
			"line":	479,
			"primary_score":	999707,
			"second_score":	113542
		}, {
			"file":	"main/SAPI.c",
			"line":	487,
			"primary_score":	999707,
			"second_score":	113583
		}, {
			"file":	"main/SAPI.c",
			"line":	488,
			"primary_score":	999707,
			"second_score":	113579
		}, {
			"file":	"main/SAPI.c",
			"line":	491,
			"primary_score":	999707,
			"second_score":	113578
		}, {
			"file":	"main/SAPI.c",
			"line":	493,
			"primary_score":	999707,
			"second_score":	113577
		}, {
			"file":	"main/SAPI.c",
			"line":	504,
			"primary_score":	999707,
			"second_score":	113576
		}, {
			"file":	"main/SAPI.c",
			"line":	507,
			"primary_score":	999707,
			"second_score":	113575
		}, {
			"file":	"main/SAPI.c",
			"line":	510,
			"primary_score":	999707,
			"second_score":	113574
		}, {
			"file":	"main/SAPI.c",
			"line":	513,
			"primary_score":	999707,
			"second_score":	113573
		}, {
			"file":	"main/SAPI.c",
			"line":	516,
			"primary_score":	999707,
			"second_score":	113572
		}, {
			"file":	"main/SAPI.c",
			"line":	519,
			"primary_score":	999707,
			"second_score":	113571
		}, {
			"file":	"main/SAPI.c",
			"line":	522,
			"primary_score":	999707,
			"second_score":	113570
		}, {
			"file":	"main/SAPI.c",
			"line":	523,
			"primary_score":	999707,
			"second_score":	113569
		}, {
			"file":	"main/SAPI.c",
			"line":	525,
			"primary_score":	999707,
			"second_score":	113565
		}, {
			"file":	"main/SAPI.c",
			"line":	528,
			"primary_score":	999707,
			"second_score":	113564
		}, {
			"file":	"main/SAPI.c",
			"line":	529,
			"primary_score":	999707,
			"second_score":	113563
		}, {
			"file":	"main/SAPI.c",
			"line":	530,
			"primary_score":	999707,
			"second_score":	113544
		}, {
			"file":	"main/SAPI.c",
			"line":	532,
			"primary_score":	999707,
			"second_score":	113543
		}, {
			"file":	"main/SAPI.c",
			"line":	533,
			"primary_score":	999707,
			"second_score":	113541
		}, {
			"file":	"main/SAPI.c",
			"line":	534,
			"primary_score":	999707,
			"second_score":	113540
		}, {
			"file":	"main/SAPI.c",
			"line":	535,
			"primary_score":	999707,
			"second_score":	113539
		}, {
			"file":	"main/SAPI.c",
			"line":	536,
			"primary_score":	999707,
			"second_score":	113538
		}, {
			"file":	"main/SAPI.c",
			"line":	809,
			"primary_score":	999707,
			"second_score":	126551
		}, {
			"file":	"main/SAPI.c",
			"line":	810,
			"primary_score":	999707,
			"second_score":	126550
		}, {
			"file":	"main/SAPI.c",
			"line":	812,
			"primary_score":	999707,
			"second_score":	126549
		}, {
			"file":	"main/SAPI.c",
			"line":	813,
			"primary_score":	999707,
			"second_score":	126548
		}, {
			"file":	"main/SAPI.c",
			"line":	950,
			"primary_score":	999707,
			"second_score":	103462
		}, {
			"file":	"main/SAPI.c",
			"line":	951,
			"primary_score":	999707,
			"second_score":	103461
		}, {
			"file":	"main/SAPI.c",
			"line":	952,
			"primary_score":	999707,
			"second_score":	103459
		}, {
			"file":	"main/getopt.c",
			"line":	174,
			"primary_score":	999707,
			"second_score":	148819
		}, {
			"file":	"main/getopt.c",
			"line":	175,
			"primary_score":	999707,
			"second_score":	148818
		}, {
			"file":	"main/getopt.c",
			"line":	177,
			"primary_score":	999707,
			"second_score":	148817
		}, {
			"file":	"main/getopt.c",
			"line":	178,
			"primary_score":	999707,
			"second_score":	148816
		}, {
			"file":	"main/getopt.c",
			"line":	185,
			"primary_score":	999707,
			"second_score":	148815
		}, {
			"file":	"main/main.c",
			"line":	516,
			"primary_score":	999918,
			"second_score":	130435
		}, {
			"file":	"main/main.c",
			"line":	523,
			"primary_score":	999918,
			"second_score":	130433
		}, {
			"file":	"main/main.c",
			"line":	591,
			"primary_score":	999741,
			"second_score":	128001
		}, {
			"file":	"main/main.c",
			"line":	592,
			"primary_score":	999741,
			"second_score":	128000
		}, {
			"file":	"main/main.c",
			"line":	593,
			"primary_score":	999741,
			"second_score":	127999
		}, {
			"file":	"main/main.c",
			"line":	594,
			"primary_score":	999741,
			"second_score":	127998
		}, {
			"file":	"main/main.c",
			"line":	595,
			"primary_score":	999741,
			"second_score":	127997
		}, {
			"file":	"main/main.c",
			"line":	597,
			"primary_score":	999741,
			"second_score":	127996
		}, {
			"file":	"main/main.c",
			"line":	598,
			"primary_score":	999741,
			"second_score":	127995
		}, {
			"file":	"main/main.c",
			"line":	599,
			"primary_score":	999741,
			"second_score":	127791
		}, {
			"file":	"main/main.c",
			"line":	600,
			"primary_score":	999741,
			"second_score":	127745
		}, {
			"file":	"main/main.c",
			"line":	601,
			"primary_score":	999741,
			"second_score":	127726
		}, {
			"file":	"main/main.c",
			"line":	603,
			"primary_score":	999741,
			"second_score":	127725
		}, {
			"file":	"main/main.c",
			"line":	615,
			"primary_score":	999918,
			"second_score":	130808
		}, {
			"file":	"main/main.c",
			"line":	616,
			"primary_score":	999918,
			"second_score":	130807
		}, {
			"file":	"main/main.c",
			"line":	617,
			"primary_score":	999918,
			"second_score":	130806
		}, {
			"file":	"main/main.c",
			"line":	618,
			"primary_score":	999918,
			"second_score":	130805
		}, {
			"file":	"main/main.c",
			"line":	619,
			"primary_score":	999918,
			"second_score":	130804
		}, {
			"file":	"main/main.c",
			"line":	620,
			"primary_score":	999918,
			"second_score":	130803
		}, {
			"file":	"main/main.c",
			"line":	621,
			"primary_score":	999918,
			"second_score":	130802
		}, {
			"file":	"main/main.c",
			"line":	622,
			"primary_score":	999918,
			"second_score":	130801
		}, {
			"file":	"main/main.c",
			"line":	623,
			"primary_score":	999918,
			"second_score":	130800
		}, {
			"file":	"main/main.c",
			"line":	624,
			"primary_score":	999918,
			"second_score":	130799
		}, {
			"file":	"main/main.c",
			"line":	625,
			"primary_score":	999918,
			"second_score":	130798
		}, {
			"file":	"main/main.c",
			"line":	628,
			"primary_score":	999918,
			"second_score":	130797
		}, {
			"file":	"main/main.c",
			"line":	630,
			"primary_score":	999918,
			"second_score":	130437
		}, {
			"file":	"main/main.c",
			"line":	639,
			"primary_score":	999918,
			"second_score":	130436
		}, {
			"file":	"main/main.c",
			"line":	641,
			"primary_score":	999918,
			"second_score":	130434
		}, {
			"file":	"main/main.c",
			"line":	643,
			"primary_score":	999918,
			"second_score":	130432
		}, {
			"file":	"main/main.c",
			"line":	672,
			"primary_score":	999918,
			"second_score":	130431
		}, {
			"file":	"main/main.c",
			"line":	673,
			"primary_score":	999918,
			"second_score":	130427
		}, {
			"file":	"main/main.c",
			"line":	676,
			"primary_score":	999918,
			"second_score":	130426
		}, {
			"file":	"main/main.c",
			"line":	677,
			"primary_score":	999918,
			"second_score":	130425
		}, {
			"file":	"main/main.c",
			"line":	682,
			"primary_score":	999918,
			"second_score":	130417
		}, {
			"file":	"main/main.c",
			"line":	683,
			"primary_score":	999918,
			"second_score":	130416
		}, {
			"file":	"main/main.c",
			"line":	688,
			"primary_score":	999918,
			"second_score":	130197
		}, {
			"file":	"main/main.c",
			"line":	696,
			"primary_score":	999918,
			"second_score":	130196
		}, {
			"file":	"main/main.c",
			"line":	702,
			"primary_score":	999918,
			"second_score":	130195
		}, {
			"file":	"main/main.c",
			"line":	703,
			"primary_score":	999918,
			"second_score":	130194
		}, {
			"file":	"main/main.c",
			"line":	704,
			"primary_score":	999918,
			"second_score":	130193
		}, {
			"file":	"main/main.c",
			"line":	705,
			"primary_score":	999920,
			"second_score":	130192
		}, {
			"file":	"main/main.c",
			"line":	709,
			"primary_score":	999918,
			"second_score":	129992
		}, {
			"file":	"main/main.c",
			"line":	712,
			"primary_score":	999918,
			"second_score":	129991
		}, {
			"file":	"main/main.c",
			"line":	719,
			"primary_score":	999918,
			"second_score":	129877
		}, {
			"file":	"main/main.c",
			"line":	758,
			"primary_score":	999918,
			"second_score":	129876
		}, {
			"file":	"main/main.c",
			"line":	760,
			"primary_score":	999918,
			"second_score":	129721
		}, {
			"file":	"main/main.c",
			"line":	761,
			"primary_score":	999918,
			"second_score":	129702
		}, {
			"file":	"main/main.c",
			"line":	762,
			"primary_score":	999918,
			"second_score":	129701
		}, {
			"file":	"main/main.c",
			"line":	765,
			"primary_score":	999918,
			"second_score":	129682
		}, {
			"file":	"main/main.c",
			"line":	767,
			"primary_score":	999920,
			"second_score":	129681
		}, {
			"file":	"main/main.c",
			"line":	768,
			"primary_score":	999995,
			"second_score":	129680
		}, {
			"file":	"main/main.c",
			"line":	770,
			"primary_score":	999920,
			"second_score":	129465
		}, {
			"file":	"main/main.c",
			"line":	771,
			"primary_score":	999920,
			"second_score":	129464
		}, {
			"file":	"main/main.c",
			"line":	772,
			"primary_score":	999920,
			"second_score":	129463
		}, {
			"file":	"main/main.c",
			"line":	773,
			"primary_score":	999920,
			"second_score":	129436
		}, {
			"file":	"main/main.c",
			"line":	774,
			"primary_score":	999920,
			"second_score":	129402
		}, {
			"file":	"main/main.c",
			"line":	777,
			"primary_score":	999918,
			"second_score":	129318
		}, {
			"file":	"main/main.c",
			"line":	779,
			"primary_score":	999918,
			"second_score":	129299
		}, {
			"file":	"main/main.c",
			"line":	780,
			"primary_score":	999919,
			"second_score":	128297
		}, {
			"file":	"main/main.c",
			"line":	788,
			"primary_score":	999943,
			"second_score":	130811
		}, {
			"file":	"main/main.c",
			"line":	790,
			"primary_score":	999943,
			"second_score":	130810
		}, {
			"file":	"main/main.c",
			"line":	791,
			"primary_score":	999943,
			"second_score":	130809
		}, {
			"file":	"main/main.c",
			"line":	792,
			"primary_score":	999944,
			"second_score":	128278
		}, {
			"file":	"main/main.c",
			"line":	857,
			"primary_score":	999872,
			"second_score":	129271
		}, {
			"file":	"main/main.c",
			"line":	858,
			"primary_score":	999872,
			"second_score":	129270
		}, {
			"file":	"main/main.c",
			"line":	859,
			"primary_score":	999872,
			"second_score":	129269
		}, {
			"file":	"main/main.c",
			"line":	861,
			"primary_score":	999872,
			"second_score":	129268
		}, {
			"file":	"main/main.c",
			"line":	864,
			"primary_score":	999872,
			"second_score":	129173
		}, {
			"file":	"main/main.c",
			"line":	876,
			"primary_score":	999872,
			"second_score":	129172
		}, {
			"file":	"main/main.c",
			"line":	880,
			"primary_score":	999872,
			"second_score":	129171
		}, {
			"file":	"main/main.c",
			"line":	881,
			"primary_score":	999872,
			"second_score":	129170
		}, {
			"file":	"main/main.c",
			"line":	882,
			"primary_score":	999905,
			"second_score":	129169
		}, {
			"file":	"main/main.c",
			"line":	884,
			"primary_score":	999872,
			"second_score":	129168
		}, {
			"file":	"main/main.c",
			"line":	885,
			"primary_score":	999905,
			"second_score":	129167
		}, {
			"file":	"main/main.c",
			"line":	887,
			"primary_score":	999872,
			"second_score":	129166
		}, {
			"file":	"main/main.c",
			"line":	890,
			"primary_score":	999872,
			"second_score":	129165
		}, {
			"file":	"main/main.c",
			"line":	891,
			"primary_score":	999872,
			"second_score":	129164
		}, {
			"file":	"main/main.c",
			"line":	892,
			"primary_score":	999872,
			"second_score":	129163
		}, {
			"file":	"main/main.c",
			"line":	893,
			"primary_score":	999872,
			"second_score":	129162
		}, {
			"file":	"main/main.c",
			"line":	897,
			"primary_score":	999872,
			"second_score":	129161
		}, {
			"file":	"main/main.c",
			"line":	928,
			"primary_score":	999872,
			"second_score":	129160
		}, {
			"file":	"main/main.c",
			"line":	930,
			"primary_score":	999890,
			"second_score":	129159
		}, {
			"file":	"main/main.c",
			"line":	932,
			"primary_score":	999890,
			"second_score":	129158
		}, {
			"file":	"main/main.c",
			"line":	947,
			"primary_score":	999901,
			"second_score":	129157
		}, {
			"file":	"main/main.c",
			"line":	967,
			"primary_score":	999890,
			"second_score":	129156
		}, {
			"file":	"main/main.c",
			"line":	979,
			"primary_score":	999890,
			"second_score":	129155
		}, {
			"file":	"main/main.c",
			"line":	980,
			"primary_score":	999890,
			"second_score":	129154
		}, {
			"file":	"main/main.c",
			"line":	983,
			"primary_score":	999890,
			"second_score":	129153
		}, {
			"file":	"main/main.c",
			"line":	984,
			"primary_score":	999890,
			"second_score":	129108
		}, {
			"file":	"main/main.c",
			"line":	986,
			"primary_score":	999890,
			"second_score":	129066
		}, {
			"file":	"main/main.c",
			"line":	997,
			"primary_score":	999890,
			"second_score":	129065
		}, {
			"file":	"main/main.c",
			"line":	1007,
			"primary_score":	999890,
			"second_score":	129053
		}, {
			"file":	"main/main.c",
			"line":	1033,
			"primary_score":	999872,
			"second_score":	128482
		}, {
			"file":	"main/main.c",
			"line":	1071,
			"primary_score":	999873,
			"second_score":	128481
		}, {
			"file":	"main/main.c",
			"line":	1076,
			"primary_score":	999873,
			"second_score":	128480
		}, {
			"file":	"main/main.c",
			"line":	1077,
			"primary_score":	999873,
			"second_score":	128479
		}, {
			"file":	"main/main.c",
			"line":	1080,
			"primary_score":	999873,
			"second_score":	128478
		}, {
			"file":	"main/main.c",
			"line":	1081,
			"primary_score":	999873,
			"second_score":	128477
		}, {
			"file":	"main/main.c",
			"line":	1082,
			"primary_score":	999873,
			"second_score":	128476
		}, {
			"file":	"main/main.c",
			"line":	1083,
			"primary_score":	999873,
			"second_score":	128449
		}, {
			"file":	"main/main.c",
			"line":	1084,
			"primary_score":	999873,
			"second_score":	128415
		}, {
			"file":	"main/main.c",
			"line":	1088,
			"primary_score":	999873,
			"second_score":	128318
		}, {
			"file":	"main/main.c",
			"line":	1599,
			"primary_score":	999707,
			"second_score":	126748
		}, {
			"file":	"main/main.c",
			"line":	1600,
			"primary_score":	999707,
			"second_score":	126747
		}, {
			"file":	"main/main.c",
			"line":	1602,
			"primary_score":	999707,
			"second_score":	126746
		}, {
			"file":	"main/main.c",
			"line":	1607,
			"primary_score":	999707,
			"second_score":	126745
		}, {
			"file":	"main/main.c",
			"line":	1608,
			"primary_score":	999707,
			"second_score":	126744
		}, {
			"file":	"main/main.c",
			"line":	1610,
			"primary_score":	999707,
			"second_score":	126743
		}, {
			"file":	"main/main.c",
			"line":	1613,
			"primary_score":	999707,
			"second_score":	126736
		}, {
			"file":	"main/main.c",
			"line":	1614,
			"primary_score":	999707,
			"second_score":	126730
		}, {
			"file":	"main/main.c",
			"line":	1615,
			"primary_score":	999707,
			"second_score":	126728
		}, {
			"file":	"main/main.c",
			"line":	1618,
			"primary_score":	999707,
			"second_score":	126726
		}, {
			"file":	"main/main.c",
			"line":	1619,
			"primary_score":	999707,
			"second_score":	126720
		}, {
			"file":	"main/main.c",
			"line":	1620,
			"primary_score":	999707,
			"second_score":	126578
		}, {
			"file":	"main/main.c",
			"line":	1623,
			"primary_score":	999707,
			"second_score":	126576
		}, {
			"file":	"main/main.c",
			"line":	1624,
			"primary_score":	999707,
			"second_score":	126570
		}, {
			"file":	"main/main.c",
			"line":	1626,
			"primary_score":	999707,
			"second_score":	126569
		}, {
			"file":	"main/main.c",
			"line":	1632,
			"primary_score":	999707,
			"second_score":	126568
		}, {
			"file":	"main/main.c",
			"line":	1635,
			"primary_score":	999707,
			"second_score":	126567
		}, {
			"file":	"main/main.c",
			"line":	1637,
			"primary_score":	999707,
			"second_score":	126565
		}, {
			"file":	"main/main.c",
			"line":	1638,
			"primary_score":	999707,
			"second_score":	126560
		}, {
			"file":	"main/main.c",
			"line":	1641,
			"primary_score":	999707,
			"second_score":	126558
		}, {
			"file":	"main/main.c",
			"line":	1642,
			"primary_score":	999707,
			"second_score":	126552
		}, {
			"file":	"main/main.c",
			"line":	1643,
			"primary_score":	999707,
			"second_score":	126547
		}, {
			"file":	"main/main.c",
			"line":	1646,
			"primary_score":	999707,
			"second_score":	126545
		}, {
			"file":	"main/main.c",
			"line":	1647,
			"primary_score":	999707,
			"second_score":	126544
		}, {
			"file":	"main/main.c",
			"line":	1648,
			"primary_score":	999707,
			"second_score":	125942
		}, {
			"file":	"main/main.c",
			"line":	1652,
			"primary_score":	999707,
			"second_score":	125939
		}, {
			"file":	"main/main.c",
			"line":	1653,
			"primary_score":	999707,
			"second_score":	125933
		}, {
			"file":	"main/main.c",
			"line":	1655,
			"primary_score":	999707,
			"second_score":	125932
		}, {
			"file":	"main/main.c",
			"line":	1656,
			"primary_score":	999707,
			"second_score":	125790
		}, {
			"file":	"main/main.c",
			"line":	1657,
			"primary_score":	999707,
			"second_score":	125789
		}, {
			"file":	"main/main.c",
			"line":	1660,
			"primary_score":	999707,
			"second_score":	125755
		}, {
			"file":	"main/main.c",
			"line":	1663,
			"primary_score":	999707,
			"second_score":	125753
		}, {
			"file":	"main/main.c",
			"line":	1664,
			"primary_score":	999872,
			"second_score":	125752
		}, {
			"file":	"main/main.c",
			"line":	1665,
			"primary_score":	999872,
			"second_score":	125751
		}, {
			"file":	"main/main.c",
			"line":	1667,
			"primary_score":	999707,
			"second_score":	125750
		}, {
			"file":	"main/main.c",
			"line":	1668,
			"primary_score":	999872,
			"second_score":	125749
		}, {
			"file":	"main/main.c",
			"line":	1669,
			"primary_score":	999872,
			"second_score":	125748
		}, {
			"file":	"main/main.c",
			"line":	1673,
			"primary_score":	999707,
			"second_score":	125747
		}, {
			"file":	"main/main.c",
			"line":	1676,
			"primary_score":	999707,
			"second_score":	113602
		}, {
			"file":	"main/main.c",
			"line":	1677,
			"primary_score":	999707,
			"second_score":	113596
		}, {
			"file":	"main/main.c",
			"line":	1678,
			"primary_score":	999707,
			"second_score":	113592
		}, {
			"file":	"main/main.c",
			"line":	1681,
			"primary_score":	999707,
			"second_score":	113590
		}, {
			"file":	"main/main.c",
			"line":	1682,
			"primary_score":	999707,
			"second_score":	113584
		}, {
			"file":	"main/main.c",
			"line":	1683,
			"primary_score":	999707,
			"second_score":	113537
		}, {
			"file":	"main/main.c",
			"line":	1686,
			"primary_score":	999707,
			"second_score":	113535
		}, {
			"file":	"main/main.c",
			"line":	1687,
			"primary_score":	999707,
			"second_score":	113529
		}, {
			"file":	"main/main.c",
			"line":	1688,
			"primary_score":	999707,
			"second_score":	113447
		}, {
			"file":	"main/main.c",
			"line":	1691,
			"primary_score":	999707,
			"second_score":	113445
		}, {
			"file":	"main/main.c",
			"line":	1692,
			"primary_score":	999707,
			"second_score":	113439
		}, {
			"file":	"main/main.c",
			"line":	1693,
			"primary_score":	999707,
			"second_score":	113020
		}, {
			"file":	"main/main.c",
			"line":	1694,
			"primary_score":	999707,
			"second_score":	113018
		}, {
			"file":	"main/main.c",
			"line":	1697,
			"primary_score":	999707,
			"second_score":	103483
		}, {
			"file":	"main/main.c",
			"line":	1698,
			"primary_score":	999707,
			"second_score":	103477
		}, {
			"file":	"main/main.c",
			"line":	1699,
			"primary_score":	999707,
			"second_score":	103475
		}, {
			"file":	"main/main.c",
			"line":	1732,
			"primary_score":	999707,
			"second_score":	131187
		}, {
			"file":	"main/main.c",
			"line":	1733,
			"primary_score":	999707,
			"second_score":	131186
		}, {
			"file":	"main/main.c",
			"line":	1753,
			"primary_score":	999707,
			"second_score":	3150
		}, {
			"file":	"main/main.c",
			"line":	1756,
			"primary_score":	999707,
			"second_score":	3149
		}, {
			"file":	"main/main.c",
			"line":	1759,
			"primary_score":	999707,
			"second_score":	3148
		}, {
			"file":	"main/main.c",
			"line":	1762,
			"primary_score":	999707,
			"second_score":	3147
		}, {
			"file":	"main/main.c",
			"line":	1766,
			"primary_score":	999707,
			"second_score":	3146
		}, {
			"file":	"main/main.c",
			"line":	2198,
			"primary_score":	999707,
			"second_score":	103466
		}, {
			"file":	"main/main.c",
			"line":	2200,
			"primary_score":	999707,
			"second_score":	103465
		}, {
			"file":	"main/main.c",
			"line":	2202,
			"primary_score":	999707,
			"second_score":	103464
		}, {
			"file":	"main/main.c",
			"line":	2215,
			"primary_score":	999707,
			"second_score":	103463
		}, {
			"file":	"main/main.c",
			"line":	2217,
			"primary_score":	999707,
			"second_score":	103458
		}, {
			"file":	"main/main.c",
			"line":	2220,
			"primary_score":	999707,
			"second_score":	6121
		}, {
			"file":	"main/main.c",
			"line":	2222,
			"primary_score":	999707,
			"second_score":	6055
		}, {
			"file":	"main/main.c",
			"line":	2223,
			"primary_score":	999707,
			"second_score":	6026
		}, {
			"file":	"main/main.c",
			"line":	2226,
			"primary_score":	999707,
			"second_score":	3567
		}, {
			"file":	"main/main.c",
			"line":	2229,
			"primary_score":	999707,
			"second_score":	3244
		}, {
			"file":	"main/main.c",
			"line":	2230,
			"primary_score":	999707,
			"second_score":	3214
		}, {
			"file":	"main/main.c",
			"line":	2235,
			"primary_score":	999707,
			"second_score":	3191
		}, {
			"file":	"main/main.c",
			"line":	2236,
			"primary_score":	999707,
			"second_score":	3154
		}, {
			"file":	"main/main.c",
			"line":	2238,
			"primary_score":	999707,
			"second_score":	3152
		}, {
			"file":	"main/main.c",
			"line":	2241,
			"primary_score":	999707,
			"second_score":	3151
		}, {
			"file":	"main/main.c",
			"line":	2242,
			"primary_score":	999707,
			"second_score":	3141
		}, {
			"file":	"main/main.c",
			"line":	2346,
			"primary_score":	999707,
			"second_score":	126760
		}, {
			"file":	"main/main.c",
			"line":	2354,
			"primary_score":	999707,
			"second_score":	126758
		}, {
			"file":	"main/main.c",
			"line":	2357,
			"primary_score":	999707,
			"second_score":	126757
		}, {
			"file":	"main/main.c",
			"line":	2359,
			"primary_score":	999707,
			"second_score":	126755
		}, {
			"file":	"main/output.c",
			"line":	103,
			"primary_score":	999707,
			"second_score":	3190
		}, {
			"file":	"main/output.c",
			"line":	104,
			"primary_score":	999707,
			"second_score":	3176
		}, {
			"file":	"main/output.c",
			"line":	105,
			"primary_score":	999707,
			"second_score":	3162
		}, {
			"file":	"main/output.c",
			"line":	129,
			"primary_score":	999707,
			"second_score":	126564
		}, {
			"file":	"main/output.c",
			"line":	131,
			"primary_score":	999707,
			"second_score":	126563
		}, {
			"file":	"main/output.c",
			"line":	132,
			"primary_score":	999707,
			"second_score":	126562
		}, {
			"file":	"main/output.c",
			"line":	135,
			"primary_score":	999707,
			"second_score":	126561
		}, {
			"file":	"main/output.c",
			"line":	198,
			"primary_score":	999707,
			"second_score":	127790
		}, {
			"file":	"main/output.c",
			"line":	201,
			"primary_score":	999707,
			"second_score":	127789
		}, {
			"file":	"main/output.c",
			"line":	202,
			"primary_score":	999707,
			"second_score":	127746
		}, {
			"file":	"main/output.c",
			"line":	281,
			"primary_score":	999707,
			"second_score":	126566
		}, {
			"file":	"main/output.c",
			"line":	697,
			"primary_score":	999707,
			"second_score":	127784
		}, {
			"file":	"main/output.c",
			"line":	703,
			"primary_score":	999707,
			"second_score":	127783
		}, {
			"file":	"main/output.c",
			"line":	711,
			"primary_score":	999707,
			"second_score":	127781
		}, {
			"file":	"main/output.c",
			"line":	715,
			"primary_score":	999707,
			"second_score":	127780
		}, {
			"file":	"main/output.c",
			"line":	716,
			"primary_score":	999707,
			"second_score":	127779
		}, {
			"file":	"main/output.c",
			"line":	717,
			"primary_score":	999707,
			"second_score":	127778
		}, {
			"file":	"main/output.c",
			"line":	719,
			"primary_score":	999707,
			"second_score":	127777
		}, {
			"file":	"main/output.c",
			"line":	785,
			"primary_score":	999707,
			"second_score":	127748
		}, {
			"file":	"main/output.c",
			"line":	789,
			"primary_score":	999707,
			"second_score":	127747
		}, {
			"file":	"main/output.c",
			"line":	975,
			"primary_score":	999707,
			"second_score":	127788
		}, {
			"file":	"main/output.c",
			"line":	976,
			"primary_score":	999707,
			"second_score":	127787
		}, {
			"file":	"main/output.c",
			"line":	977,
			"primary_score":	999707,
			"second_score":	127786
		}, {
			"file":	"main/output.c",
			"line":	979,
			"primary_score":	999707,
			"second_score":	127785
		}, {
			"file":	"main/output.c",
			"line":	983,
			"primary_score":	999707,
			"second_score":	127782
		}, {
			"file":	"main/output.c",
			"line":	990,
			"primary_score":	999707,
			"second_score":	127776
		}, {
			"file":	"main/output.c",
			"line":	1002,
			"primary_score":	999707,
			"second_score":	127775
		}, {
			"file":	"main/output.c",
			"line":	1003,
			"primary_score":	999707,
			"second_score":	127774
		}, {
			"file":	"main/output.c",
			"line":	1006,
			"primary_score":	999707,
			"second_score":	127773
		}, {
			"file":	"main/output.c",
			"line":	1010,
			"primary_score":	999707,
			"second_score":	127772
		}, {
			"file":	"main/output.c",
			"line":	1022,
			"primary_score":	999707,
			"second_score":	127771
		}, {
			"file":	"main/output.c",
			"line":	1023,
			"primary_score":	999707,
			"second_score":	127756
		}, {
			"file":	"main/output.c",
			"line":	1024,
			"primary_score":	999707,
			"second_score":	127755
		}, {
			"file":	"main/output.c",
			"line":	1026,
			"primary_score":	999707,
			"second_score":	127750
		}, {
			"file":	"main/output.c",
			"line":	1028,
			"primary_score":	999707,
			"second_score":	127749
		}, {
			"file":	"main/php_ini.c",
			"line":	194,
			"primary_score":	999707,
			"second_score":	3256
		}, {
			"file":	"main/php_ini.c",
			"line":	197,
			"primary_score":	999707,
			"second_score":	3255
		}, {
			"file":	"main/php_ini.c",
			"line":	198,
			"primary_score":	999707,
			"second_score":	3254
		}, {
			"file":	"main/php_ini.c",
			"line":	729,
			"primary_score":	999707,
			"second_score":	3566
		}, {
			"file":	"main/php_ini.c",
			"line":	730,
			"primary_score":	999707,
			"second_score":	3247
		}, {
			"file":	"main/php_ini.c",
			"line":	734,
			"primary_score":	999707,
			"second_score":	3246
		}, {
			"file":	"main/php_ini.c",
			"line":	738,
			"primary_score":	999707,
			"second_score":	3245
		}, {
			"file":	"main/php_logos.c",
			"line":	67,
			"primary_score":	999707,
			"second_score":	6054
		}, {
			"file":	"main/php_logos.c",
			"line":	68,
			"primary_score":	999707,
			"second_score":	6027
		}, {
			"file":	"main/php_open_temporary_file.c",
			"line":	183,
			"primary_score":	999707,
			"second_score":	3153
		}, {
			"file":	"main/php_ticks.c",
			"line":	32,
			"primary_score":	999707,
			"second_score":	126742
		}, {
			"file":	"main/php_ticks.c",
			"line":	37,
			"primary_score":	999707,
			"second_score":	3145
		}, {
			"file":	"main/snprintf.c",
			"line":	317,
			"primary_score":	999740,
			"second_score":	128636
		}, {
			"file":	"main/snprintf.c",
			"line":	318,
			"primary_score":	999740,
			"second_score":	128635
		}, {
			"file":	"main/snprintf.c",
			"line":	320,
			"primary_score":	999740,
			"second_score":	128634
		}, {
			"file":	"main/snprintf.c",
			"line":	324,
			"primary_score":	999741,
			"second_score":	128633
		}, {
			"file":	"main/snprintf.c",
			"line":	335,
			"primary_score":	999741,
			"second_score":	128632
		}, {
			"file":	"main/snprintf.c",
			"line":	339,
			"primary_score":	999742,
			"second_score":	128631
		}, {
			"file":	"main/snprintf.c",
			"line":	346,
			"primary_score":	999740,
			"second_score":	128630
		}, {
			"file":	"main/snprintf.c",
			"line":	347,
			"primary_score":	999740,
			"second_score":	128626
		}, {
			"file":	"main/snprintf.c",
			"line":	349,
			"primary_score":	999740,
			"second_score":	128625
		}, {
			"file":	"main/snprintf.c",
			"line":	350,
			"primary_score":	999740,
			"second_score":	128624
		}, {
			"file":	"main/snprintf.c",
			"line":	354,
			"primary_score":	999740,
			"second_score":	128623
		}, {
			"file":	"main/snprintf.c",
			"line":	355,
			"primary_score":	999740,
			"second_score":	128622
		}, {
			"file":	"main/spprintf.c",
			"line":	441,
			"primary_score":	999743,
			"second_score":	128639
		}, {
			"file":	"main/spprintf.c",
			"line":	444,
			"primary_score":	999792,
			"second_score":	128638
		}, {
			"file":	"main/spprintf.c",
			"line":	474,
			"primary_score":	999743,
			"second_score":	128637
		}, {
			"file":	"main/spprintf.c",
			"line":	476,
			"primary_score":	999743,
			"second_score":	128621
		}, {
			"file":	"main/spprintf.c",
			"line":	478,
			"primary_score":	999743,
			"second_score":	128619
		}, {
			"file":	"main/spprintf.c",
			"line":	479,
			"primary_score":	999743,
			"second_score":	128618
		}, {
			"file":	"main/spprintf.c",
			"line":	481,
			"primary_score":	999744,
			"second_score":	128617
		}, {
			"file":	"main/spprintf.c",
			"line":	483,
			"primary_score":	999744,
			"second_score":	128616
		}, {
			"file":	"main/spprintf.c",
			"line":	486,
			"primary_score":	999743,
			"second_score":	128615
		}, {
			"file":	"main/spprintf.c",
			"line":	775,
			"primary_score":	999876,
			"second_score":	128790
		}, {
			"file":	"main/streams/filter.c",
			"line":	37,
			"primary_score":	999707,
			"second_score":	6095
		}, {
			"file":	"main/streams/filter.c",
			"line":	54,
			"primary_score":	999707,
			"second_score":	62055
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	287,
			"primary_score":	999707,
			"second_score":	148249
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	371,
			"primary_score":	999707,
			"second_score":	114763
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	372,
			"primary_score":	999707,
			"second_score":	114762
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	374,
			"primary_score":	999707,
			"second_score":	114761
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	377,
			"primary_score":	999707,
			"second_score":	114760
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	392,
			"primary_score":	999707,
			"second_score":	114759
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	393,
			"primary_score":	999707,
			"second_score":	114758
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	394,
			"primary_score":	999707,
			"second_score":	114757
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	404,
			"primary_score":	999707,
			"second_score":	114756
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	405,
			"primary_score":	999707,
			"second_score":	114755
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	413,
			"primary_score":	999707,
			"second_score":	114754
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	425,
			"primary_score":	999707,
			"second_score":	114753
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	427,
			"primary_score":	999707,
			"second_score":	114734
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	432,
			"primary_score":	999707,
			"second_score":	114773
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	434,
			"primary_score":	999707,
			"second_score":	114772
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	441,
			"primary_score":	999707,
			"second_score":	114771
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	442,
			"primary_score":	999707,
			"second_score":	114770
		}, {
			"file":	"main/streams/streams.c",
			"line":	45,
			"primary_score":	999884,
			"second_score":	130865
		}, {
			"file":	"main/streams/streams.c",
			"line":	50,
			"primary_score":	999885,
			"second_score":	130864
		}, {
			"file":	"main/streams/streams.c",
			"line":	104,
			"primary_score":	999707,
			"second_score":	126488
		}, {
			"file":	"main/streams/streams.c",
			"line":	105,
			"primary_score":	999707,
			"second_score":	126479
		}, {
			"file":	"main/streams/streams.c",
			"line":	196,
			"primary_score":	999707,
			"second_score":	150965
		}, {
			"file":	"main/streams/streams.c",
			"line":	198,
			"primary_score":	999707,
			"second_score":	150964
		}, {
			"file":	"main/streams/streams.c",
			"line":	200,
			"primary_score":	999707,
			"second_score":	150963
		}, {
			"file":	"main/streams/streams.c",
			"line":	203,
			"primary_score":	999707,
			"second_score":	150962
		}, {
			"file":	"main/streams/streams.c",
			"line":	206,
			"primary_score":	999707,
			"second_score":	150961
		}, {
			"file":	"main/streams/streams.c",
			"line":	207,
			"primary_score":	999707,
			"second_score":	150960
		}, {
			"file":	"main/streams/streams.c",
			"line":	238,
			"primary_score":	999707,
			"second_score":	151589
		}, {
			"file":	"main/streams/streams.c",
			"line":	240,
			"primary_score":	999707,
			"second_score":	151588
		}, {
			"file":	"main/streams/streams.c",
			"line":	242,
			"primary_score":	999707,
			"second_score":	151484
		}, {
			"file":	"main/streams/streams.c",
			"line":	244,
			"primary_score":	999707,
			"second_score":	151483
		}, {
			"file":	"main/streams/streams.c",
			"line":	245,
			"primary_score":	999707,
			"second_score":	151482
		}, {
			"file":	"main/streams/streams.c",
			"line":	251,
			"primary_score":	999707,
			"second_score":	151481
		}, {
			"file":	"main/streams/streams.c",
			"line":	252,
			"primary_score":	999707,
			"second_score":	151480
		}, {
			"file":	"main/streams/streams.c",
			"line":	253,
			"primary_score":	999707,
			"second_score":	151479
		}, {
			"file":	"main/streams/streams.c",
			"line":	254,
			"primary_score":	999707,
			"second_score":	151478
		}, {
			"file":	"main/streams/streams.c",
			"line":	261,
			"primary_score":	999707,
			"second_score":	151477
		}, {
			"file":	"main/streams/streams.c",
			"line":	265,
			"primary_score":	999707,
			"second_score":	151476
		}, {
			"file":	"main/streams/streams.c",
			"line":	281,
			"primary_score":	999707,
			"second_score":	151475
		}, {
			"file":	"main/streams/streams.c",
			"line":	282,
			"primary_score":	999707,
			"second_score":	151290
		}, {
			"file":	"main/streams/streams.c",
			"line":	284,
			"primary_score":	999707,
			"second_score":	151279
		}, {
			"file":	"main/streams/streams.c",
			"line":	285,
			"primary_score":	999707,
			"second_score":	151278
		}, {
			"file":	"main/streams/streams.c",
			"line":	286,
			"primary_score":	999707,
			"second_score":	151277
		}, {
			"file":	"main/streams/streams.c",
			"line":	287,
			"primary_score":	999707,
			"second_score":	151276
		}, {
			"file":	"main/streams/streams.c",
			"line":	288,
			"primary_score":	999707,
			"second_score":	151275
		}, {
			"file":	"main/streams/streams.c",
			"line":	289,
			"primary_score":	999707,
			"second_score":	151274
		}, {
			"file":	"main/streams/streams.c",
			"line":	290,
			"primary_score":	999707,
			"second_score":	151273
		}, {
			"file":	"main/streams/streams.c",
			"line":	291,
			"primary_score":	999707,
			"second_score":	151272
		}, {
			"file":	"main/streams/streams.c",
			"line":	293,
			"primary_score":	999707,
			"second_score":	151271
		}, {
			"file":	"main/streams/streams.c",
			"line":	333,
			"primary_score":	999707,
			"second_score":	114788
		}, {
			"file":	"main/streams/streams.c",
			"line":	334,
			"primary_score":	999707,
			"second_score":	114787
		}, {
			"file":	"main/streams/streams.c",
			"line":	335,
			"primary_score":	999707,
			"second_score":	114786
		}, {
			"file":	"main/streams/streams.c",
			"line":	336,
			"primary_score":	999707,
			"second_score":	114785
		}, {
			"file":	"main/streams/streams.c",
			"line":	337,
			"primary_score":	999707,
			"second_score":	114784
		}, {
			"file":	"main/streams/streams.c",
			"line":	339,
			"primary_score":	999707,
			"second_score":	114783
		}, {
			"file":	"main/streams/streams.c",
			"line":	352,
			"primary_score":	999707,
			"second_score":	114782
		}, {
			"file":	"main/streams/streams.c",
			"line":	361,
			"primary_score":	999707,
			"second_score":	114781
		}, {
			"file":	"main/streams/streams.c",
			"line":	365,
			"primary_score":	999707,
			"second_score":	114780
		}, {
			"file":	"main/streams/streams.c",
			"line":	383,
			"primary_score":	999707,
			"second_score":	114779
		}, {
			"file":	"main/streams/streams.c",
			"line":	402,
			"primary_score":	999707,
			"second_score":	114778
		}, {
			"file":	"main/streams/streams.c",
			"line":	405,
			"primary_score":	999707,
			"second_score":	114768
		}, {
			"file":	"main/streams/streams.c",
			"line":	410,
			"primary_score":	999707,
			"second_score":	114767
		}, {
			"file":	"main/streams/streams.c",
			"line":	414,
			"primary_score":	999707,
			"second_score":	114766
		}, {
			"file":	"main/streams/streams.c",
			"line":	415,
			"primary_score":	999707,
			"second_score":	114765
		}, {
			"file":	"main/streams/streams.c",
			"line":	427,
			"primary_score":	999707,
			"second_score":	114764
		}, {
			"file":	"main/streams/streams.c",
			"line":	428,
			"primary_score":	999707,
			"second_score":	114733
		}, {
			"file":	"main/streams/streams.c",
			"line":	431,
			"primary_score":	999707,
			"second_score":	114732
		}, {
			"file":	"main/streams/streams.c",
			"line":	438,
			"primary_score":	999707,
			"second_score":	114731
		}, {
			"file":	"main/streams/streams.c",
			"line":	439,
			"primary_score":	999707,
			"second_score":	114730
		}, {
			"file":	"main/streams/streams.c",
			"line":	442,
			"primary_score":	999707,
			"second_score":	114729
		}, {
			"file":	"main/streams/streams.c",
			"line":	446,
			"primary_score":	999707,
			"second_score":	114728
		}, {
			"file":	"main/streams/streams.c",
			"line":	451,
			"primary_score":	999707,
			"second_score":	114727
		}, {
			"file":	"main/streams/streams.c",
			"line":	452,
			"primary_score":	999995,
			"second_score":	121557
		}, {
			"file":	"main/streams/streams.c",
			"line":	453,
			"primary_score":	999995,
			"second_score":	121286
		}, {
			"file":	"main/streams/streams.c",
			"line":	456,
			"primary_score":	999707,
			"second_score":	114726
		}, {
			"file":	"main/streams/streams.c",
			"line":	461,
			"primary_score":	999707,
			"second_score":	114725
		}, {
			"file":	"main/streams/streams.c",
			"line":	493,
			"primary_score":	999707,
			"second_score":	114724
		}, {
			"file":	"main/streams/streams.c",
			"line":	494,
			"primary_score":	999707,
			"second_score":	114723
		}, {
			"file":	"main/streams/streams.c",
			"line":	495,
			"primary_score":	999707,
			"second_score":	114704
		}, {
			"file":	"main/streams/streams.c",
			"line":	498,
			"primary_score":	999707,
			"second_score":	114703
		}, {
			"file":	"main/streams/streams.c",
			"line":	502,
			"primary_score":	999707,
			"second_score":	114684
		}, {
			"file":	"main/streams/streams.c",
			"line":	506,
			"primary_score":	999707,
			"second_score":	114683
		}, {
			"file":	"main/streams/streams.c",
			"line":	1118,
			"primary_score":	999707,
			"second_score":	114777
		}, {
			"file":	"main/streams/streams.c",
			"line":	1120,
			"primary_score":	999707,
			"second_score":	114776
		}, {
			"file":	"main/streams/streams.c",
			"line":	1124,
			"primary_score":	999707,
			"second_score":	114775
		}, {
			"file":	"main/streams/streams.c",
			"line":	1125,
			"primary_score":	999707,
			"second_score":	114774
		}, {
			"file":	"main/streams/streams.c",
			"line":	1128,
			"primary_score":	999707,
			"second_score":	114769
		}, {
			"file":	"main/streams/streams.c",
			"line":	1250,
			"primary_score":	999959,
			"second_score":	130828
		}, {
			"file":	"main/streams/streams.c",
			"line":	1252,
			"primary_score":	999959,
			"second_score":	130827
		}, {
			"file":	"main/streams/streams.c",
			"line":	1253,
			"primary_score":	999959,
			"second_score":	130826
		}, {
			"file":	"main/streams/streams.c",
			"line":	1256,
			"primary_score":	999959,
			"second_score":	130814
		}, {
			"file":	"main/streams/streams.c",
			"line":	1278,
			"primary_score":	999959,
			"second_score":	130813
		}, {
			"file":	"main/streams/streams.c",
			"line":	1502,
			"primary_score":	999707,
			"second_score":	114790
		}, {
			"file":	"main/streams/streams.c",
			"line":	1504,
			"primary_score":	999707,
			"second_score":	114789
		}, {
			"file":	"main/streams/streams.c",
			"line":	1515,
			"primary_score":	999707,
			"second_score":	113528
		}, {
			"file":	"main/streams/streams.c",
			"line":	1516,
			"primary_score":	999992,
			"second_score":	113527
		}, {
			"file":	"main/streams/streams.c",
			"line":	1517,
			"primary_score":	999992,
			"second_score":	113468
		}, {
			"file":	"main/streams/streams.c",
			"line":	1518,
			"primary_score":	999992,
			"second_score":	113449
		}, {
			"file":	"main/streams/streams.c",
			"line":	1521,
			"primary_score":	999707,
			"second_score":	113448
		}, {
			"file":	"main/streams/streams.c",
			"line":	1557,
			"primary_score":	999707,
			"second_score":	6120
		}, {
			"file":	"main/streams/streams.c",
			"line":	1558,
			"primary_score":	999707,
			"second_score":	6096
		}, {
			"file":	"main/streams/streams.c",
			"line":	1559,
			"primary_score":	999707,
			"second_score":	6086
		}, {
			"file":	"main/streams/streams.c",
			"line":	1560,
			"primary_score":	999707,
			"second_score":	6056
		}, {
			"file":	"main/streams/streams.c",
			"line":	1596,
			"primary_score":	999707,
			"second_score":	97593
		}, {
			"file":	"main/streams/streams.c",
			"line":	1601,
			"primary_score":	999992,
			"second_score":	168858
		}, {
			"file":	"main/streams/streams.c",
			"line":	1603,
			"primary_score":	999992,
			"second_score":	168857
		}, {
			"file":	"main/streams/streams.c",
			"line":	1604,
			"primary_score":	999992,
			"second_score":	168799
		}, {
			"file":	"main/streams/streams.c",
			"line":	1605,
			"primary_score":	999992,
			"second_score":	168779
		}, {
			"file":	"main/streams/streams.c",
			"line":	1611,
			"primary_score":	999992,
			"second_score":	164841
		}, {
			"file":	"main/streams/streams.c",
			"line":	1613,
			"primary_score":	999992,
			"second_score":	164840
		}, {
			"file":	"main/streams/streams.c",
			"line":	1617,
			"primary_score":	999992,
			"second_score":	164831
		}, {
			"file":	"main/streams/streams.c",
			"line":	1618,
			"primary_score":	999992,
			"second_score":	168859
		}, {
			"file":	"main/streams/streams.c",
			"line":	1621,
			"primary_score":	999992,
			"second_score":	164830
		}, {
			"file":	"main/streams/streams.c",
			"line":	1637,
			"primary_score":	999707,
			"second_score":	154407
		}, {
			"file":	"main/streams/streams.c",
			"line":	1638,
			"primary_score":	999707,
			"second_score":	154406
		}, {
			"file":	"main/streams/streams.c",
			"line":	1639,
			"primary_score":	999707,
			"second_score":	154405
		}, {
			"file":	"main/streams/streams.c",
			"line":	1640,
			"primary_score":	999707,
			"second_score":	154404
		}, {
			"file":	"main/streams/streams.c",
			"line":	1642,
			"primary_score":	999707,
			"second_score":	154403
		}, {
			"file":	"main/streams/streams.c",
			"line":	1643,
			"primary_score":	999707,
			"second_score":	154402
		}, {
			"file":	"main/streams/streams.c",
			"line":	1646,
			"primary_score":	999707,
			"second_score":	154401
		}, {
			"file":	"main/streams/streams.c",
			"line":	1650,
			"primary_score":	999707,
			"second_score":	154400
		}, {
			"file":	"main/streams/streams.c",
			"line":	1651,
			"primary_score":	999707,
			"second_score":	154395
		}, {
			"file":	"main/streams/streams.c",
			"line":	1654,
			"primary_score":	999707,
			"second_score":	154394
		}, {
			"file":	"main/streams/streams.c",
			"line":	1655,
			"primary_score":	999707,
			"second_score":	154393
		}, {
			"file":	"main/streams/streams.c",
			"line":	1663,
			"primary_score":	999707,
			"second_score":	154392
		}, {
			"file":	"main/streams/streams.c",
			"line":	1664,
			"primary_score":	999707,
			"second_score":	154391
		}, {
			"file":	"main/streams/streams.c",
			"line":	1665,
			"primary_score":	999707,
			"second_score":	154363
		}, {
			"file":	"main/streams/streams.c",
			"line":	1681,
			"primary_score":	999707,
			"second_score":	154341
		}, {
			"file":	"main/streams/streams.c",
			"line":	1684,
			"primary_score":	999707,
			"second_score":	154322
		}, {
			"file":	"main/streams/streams.c",
			"line":	1746,
			"primary_score":	999707,
			"second_score":	154321
		}, {
			"file":	"main/streams/streams.c",
			"line":	1764,
			"primary_score":	999707,
			"second_score":	154320
		}, {
			"file":	"main/streams/streams.c",
			"line":	1896,
			"primary_score":	999707,
			"second_score":	154418
		}, {
			"file":	"main/streams/streams.c",
			"line":	1897,
			"primary_score":	999707,
			"second_score":	154417
		}, {
			"file":	"main/streams/streams.c",
			"line":	1898,
			"primary_score":	999707,
			"second_score":	154416
		}, {
			"file":	"main/streams/streams.c",
			"line":	1899,
			"primary_score":	999707,
			"second_score":	154415
		}, {
			"file":	"main/streams/streams.c",
			"line":	1900,
			"primary_score":	999707,
			"second_score":	154414
		}, {
			"file":	"main/streams/streams.c",
			"line":	1901,
			"primary_score":	999707,
			"second_score":	154413
		}, {
			"file":	"main/streams/streams.c",
			"line":	1903,
			"primary_score":	999707,
			"second_score":	154412
		}, {
			"file":	"main/streams/streams.c",
			"line":	1907,
			"primary_score":	999707,
			"second_score":	154411
		}, {
			"file":	"main/streams/streams.c",
			"line":	1912,
			"primary_score":	999707,
			"second_score":	154410
		}, {
			"file":	"main/streams/streams.c",
			"line":	1922,
			"primary_score":	999707,
			"second_score":	154409
		}, {
			"file":	"main/streams/streams.c",
			"line":	1924,
			"primary_score":	999707,
			"second_score":	154408
		}, {
			"file":	"main/streams/streams.c",
			"line":	1925,
			"primary_score":	999707,
			"second_score":	154319
		}, {
			"file":	"main/streams/streams.c",
			"line":	1933,
			"primary_score":	999707,
			"second_score":	154318
		}, {
			"file":	"main/streams/streams.c",
			"line":	1934,
			"primary_score":	999707,
			"second_score":	154317
		}, {
			"file":	"main/streams/streams.c",
			"line":	1938,
			"primary_score":	999707,
			"second_score":	154316
		}, {
			"file":	"main/streams/streams.c",
			"line":	1945,
			"primary_score":	999707,
			"second_score":	151005
		}, {
			"file":	"main/streams/streams.c",
			"line":	1952,
			"primary_score":	999707,
			"second_score":	151004
		}, {
			"file":	"main/streams/streams.c",
			"line":	1953,
			"primary_score":	999707,
			"second_score":	151003
		}, {
			"file":	"main/streams/streams.c",
			"line":	1957,
			"primary_score":	999707,
			"second_score":	151002
		}, {
			"file":	"main/streams/streams.c",
			"line":	1958,
			"primary_score":	999707,
			"second_score":	151001
		}, {
			"file":	"main/streams/streams.c",
			"line":	1962,
			"primary_score":	999707,
			"second_score":	151000
		}, {
			"file":	"main/streams/streams.c",
			"line":	1965,
			"primary_score":	999707,
			"second_score":	150999
		}, {
			"file":	"main/streams/streams.c",
			"line":	1966,
			"primary_score":	999707,
			"second_score":	150970
		}, {
			"file":	"main/streams/streams.c",
			"line":	1973,
			"primary_score":	999707,
			"second_score":	150969
		}, {
			"file":	"main/streams/streams.c",
			"line":	2008,
			"primary_score":	999707,
			"second_score":	150968
		}, {
			"file":	"main/streams/streams.c",
			"line":	2017,
			"primary_score":	999707,
			"second_score":	150967
		}, {
			"file":	"main/streams/streams.c",
			"line":	2024,
			"primary_score":	999707,
			"second_score":	150966
		}, {
			"file":	"main/streams/streams.c",
			"line":	2030,
			"primary_score":	999707,
			"second_score":	150959
		}, {
			"file":	"main/streams/streams.c",
			"line":	2033,
			"primary_score":	999707,
			"second_score":	150958
		}, {
			"file":	"main/streams/streams.c",
			"line":	2064,
			"primary_score":	999863,
			"second_score":	114110
		}, {
			"file":	"main/streams/streams.c",
			"line":	2068,
			"primary_score":	999863,
			"second_score":	114109
		}, {
			"file":	"main/streams/streams.c",
			"line":	2072,
			"primary_score":	999863,
			"second_score":	114108
		}, {
			"file":	"main/streams/streams.c",
			"line":	2076,
			"primary_score":	999863,
			"second_score":	114107
		}, {
			"file":	"main/streams/streams.c",
			"line":	2081,
			"primary_score":	999863,
			"second_score":	163682
		}, {
			"file":	"main/streams/streams.c",
			"line":	2083,
			"primary_score":	999863,
			"second_score":	163681
		}, {
			"file":	"main/streams/streams.c",
			"line":	2084,
			"primary_score":	999863,
			"second_score":	163589
		}, {
			"file":	"main/streams/streams.c",
			"line":	2085,
			"primary_score":	999863,
			"second_score":	163588
		}, {
			"file":	"main/streams/streams.c",
			"line":	2086,
			"primary_score":	999863,
			"second_score":	163501
		}, {
			"file":	"main/streams/streams.c",
			"line":	2088,
			"primary_score":	999863,
			"second_score":	163399
		}, {
			"file":	"main/streams/streams.c",
			"line":	2089,
			"primary_score":	999863,
			"second_score":	163236
		}, {
			"file":	"main/streams/transports.c",
			"line":	29,
			"primary_score":	999707,
			"second_score":	6085
		}, {
			"file":	"main/streams/userspace.c",
			"line":	64,
			"primary_score":	999992,
			"second_score":	113740
		}, {
			"file":	"main/streams/userspace.c",
			"line":	66,
			"primary_score":	999992,
			"second_score":	113739
		}, {
			"file":	"main/streams/userspace.c",
			"line":	67,
			"primary_score":	999992,
			"second_score":	113720
		}, {
			"file":	"main/streams/userspace.c",
			"line":	68,
			"primary_score":	999992,
			"second_score":	113701
		}, {
			"file":	"main/streams/userspace.c",
			"line":	262,
			"primary_score":	999993,
			"second_score":	154315
		}, {
			"file":	"main/streams/userspace.c",
			"line":	263,
			"primary_score":	999993,
			"second_score":	154314
		}, {
			"file":	"main/streams/userspace.c",
			"line":	264,
			"primary_score":	999993,
			"second_score":	154313
		}, {
			"file":	"main/streams/userspace.c",
			"line":	265,
			"primary_score":	999993,
			"second_score":	154312
		}, {
			"file":	"main/streams/userspace.c",
			"line":	266,
			"primary_score":	999993,
			"second_score":	154311
		}, {
			"file":	"main/streams/userspace.c",
			"line":	267,
			"primary_score":	999993,
			"second_score":	154310
		}, {
			"file":	"main/streams/userspace.c",
			"line":	268,
			"primary_score":	999993,
			"second_score":	154309
		}, {
			"file":	"main/streams/userspace.c",
			"line":	271,
			"primary_score":	999993,
			"second_score":	154308
		}, {
			"file":	"main/streams/userspace.c",
			"line":	275,
			"primary_score":	999993,
			"second_score":	154307
		}, {
			"file":	"main/streams/userspace.c",
			"line":	281,
			"primary_score":	999993,
			"second_score":	154306
		}, {
			"file":	"main/streams/userspace.c",
			"line":	282,
			"primary_score":	999993,
			"second_score":	154305
		}, {
			"file":	"main/streams/userspace.c",
			"line":	288,
			"primary_score":	999993,
			"second_score":	154304
		}, {
			"file":	"main/streams/userspace.c",
			"line":	289,
			"primary_score":	999993,
			"second_score":	154282
		}, {
			"file":	"main/streams/userspace.c",
			"line":	292,
			"primary_score":	999993,
			"second_score":	154281
		}, {
			"file":	"main/streams/userspace.c",
			"line":	293,
			"primary_score":	999993,
			"second_score":	154257
		}, {
			"file":	"main/streams/userspace.c",
			"line":	294,
			"primary_score":	999993,
			"second_score":	154140
		}, {
			"file":	"main/streams/userspace.c",
			"line":	295,
			"primary_score":	999993,
			"second_score":	154138
		}, {
			"file":	"main/streams/userspace.c",
			"line":	297,
			"primary_score":	999993,
			"second_score":	154136
		}, {
			"file":	"main/streams/userspace.c",
			"line":	333,
			"primary_score":	999994,
			"second_score":	154135
		}, {
			"file":	"main/streams/userspace.c",
			"line":	334,
			"primary_score":	999994,
			"second_score":	154134
		}, {
			"file":	"main/streams/userspace.c",
			"line":	335,
			"primary_score":	999994,
			"second_score":	153323
		}, {
			"file":	"main/streams/userspace.c",
			"line":	341,
			"primary_score":	999994,
			"second_score":	153309
		}, {
			"file":	"main/streams/userspace.c",
			"line":	342,
			"primary_score":	999994,
			"second_score":	153281
		}, {
			"file":	"main/streams/userspace.c",
			"line":	343,
			"primary_score":	999994,
			"second_score":	153248
		}, {
			"file":	"main/streams/userspace.c",
			"line":	345,
			"primary_score":	999994,
			"second_score":	153247
		}, {
			"file":	"main/streams/userspace.c",
			"line":	346,
			"primary_score":	999994,
			"second_score":	153219
		}, {
			"file":	"main/streams/userspace.c",
			"line":	347,
			"primary_score":	999994,
			"second_score":	153104
		}, {
			"file":	"main/streams/userspace.c",
			"line":	349,
			"primary_score":	999994,
			"second_score":	153103
		}, {
			"file":	"main/streams/userspace.c",
			"line":	350,
			"primary_score":	999994,
			"second_score":	153075
		}, {
			"file":	"main/streams/userspace.c",
			"line":	351,
			"primary_score":	999994,
			"second_score":	153070
		}, {
			"file":	"main/streams/userspace.c",
			"line":	353,
			"primary_score":	999994,
			"second_score":	153069
		}, {
			"file":	"main/streams/userspace.c",
			"line":	354,
			"primary_score":	999994,
			"second_score":	153041
		}, {
			"file":	"main/streams/userspace.c",
			"line":	355,
			"primary_score":	999994,
			"second_score":	153039
		}, {
			"file":	"main/streams/userspace.c",
			"line":	356,
			"primary_score":	999994,
			"second_score":	153037
		}, {
			"file":	"main/streams/userspace.c",
			"line":	357,
			"primary_score":	999994,
			"second_score":	153034
		}, {
			"file":	"main/streams/userspace.c",
			"line":	359,
			"primary_score":	999994,
			"second_score":	153033
		}, {
			"file":	"main/streams/userspace.c",
			"line":	360,
			"primary_score":	999994,
			"second_score":	152923
		}, {
			"file":	"main/streams/userspace.c",
			"line":	362,
			"primary_score":	999994,
			"second_score":	152808
		}, {
			"file":	"main/streams/userspace.c",
			"line":	369,
			"primary_score":	999994,
			"second_score":	151596
		}, {
			"file":	"main/streams/userspace.c",
			"line":	371,
			"primary_score":	999995,
			"second_score":	151590
		}, {
			"file":	"main/streams/userspace.c",
			"line":	374,
			"primary_score":	999995,
			"second_score":	151270
		}, {
			"file":	"main/streams/userspace.c",
			"line":	379,
			"primary_score":	999995,
			"second_score":	151269
		}, {
			"file":	"main/streams/userspace.c",
			"line":	380,
			"primary_score":	999995,
			"second_score":	151268
		}, {
			"file":	"main/streams/userspace.c",
			"line":	387,
			"primary_score":	999994,
			"second_score":	151265
		}, {
			"file":	"main/streams/userspace.c",
			"line":	391,
			"primary_score":	999994,
			"second_score":	151264
		}, {
			"file":	"main/streams/userspace.c",
			"line":	392,
			"primary_score":	999995,
			"second_score":	151263
		}, {
			"file":	"main/streams/userspace.c",
			"line":	394,
			"primary_score":	999994,
			"second_score":	151232
		}, {
			"file":	"main/streams/userspace.c",
			"line":	395,
			"primary_score":	999994,
			"second_score":	151178
		}, {
			"file":	"main/streams/userspace.c",
			"line":	396,
			"primary_score":	999994,
			"second_score":	151147
		}, {
			"file":	"main/streams/userspace.c",
			"line":	397,
			"primary_score":	999994,
			"second_score":	151116
		}, {
			"file":	"main/streams/userspace.c",
			"line":	398,
			"primary_score":	999994,
			"second_score":	151062
		}, {
			"file":	"main/streams/userspace.c",
			"line":	400,
			"primary_score":	999994,
			"second_score":	151008
		}, {
			"file":	"main/streams/userspace.c",
			"line":	402,
			"primary_score":	999994,
			"second_score":	151007
		}, {
			"file":	"main/streams/userspace.c",
			"line":	403,
			"primary_score":	999994,
			"second_score":	151006
		}, {
			"file":	"main/streams/userspace.c",
			"line":	492,
			"primary_score":	999992,
			"second_score":	165501
		}, {
			"file":	"main/streams/userspace.c",
			"line":	493,
			"primary_score":	999992,
			"second_score":	165500
		}, {
			"file":	"main/streams/userspace.c",
			"line":	494,
			"primary_score":	999992,
			"second_score":	165499
		}, {
			"file":	"main/streams/userspace.c",
			"line":	495,
			"primary_score":	999992,
			"second_score":	165498
		}, {
			"file":	"main/streams/userspace.c",
			"line":	496,
			"primary_score":	999992,
			"second_score":	165497
		}, {
			"file":	"main/streams/userspace.c",
			"line":	498,
			"primary_score":	999992,
			"second_score":	165496
		}, {
			"file":	"main/streams/userspace.c",
			"line":	502,
			"primary_score":	999992,
			"second_score":	165390
		}, {
			"file":	"main/streams/userspace.c",
			"line":	503,
			"primary_score":	999992,
			"second_score":	165298
		}, {
			"file":	"main/streams/userspace.c",
			"line":	504,
			"primary_score":	999992,
			"second_score":	165270
		}, {
			"file":	"main/streams/userspace.c",
			"line":	505,
			"primary_score":	999992,
			"second_score":	165242
		}, {
			"file":	"main/streams/userspace.c",
			"line":	506,
			"primary_score":	999992,
			"second_score":	165241
		}, {
			"file":	"main/streams/userspace.c",
			"line":	507,
			"primary_score":	999992,
			"second_score":	165240
		}, {
			"file":	"main/streams/userspace.c",
			"line":	509,
			"primary_score":	999992,
			"second_score":	165239
		}, {
			"file":	"main/streams/userspace.c",
			"line":	511,
			"primary_score":	999992,
			"second_score":	165018
		}, {
			"file":	"main/streams/userspace.c",
			"line":	512,
			"primary_score":	999992,
			"second_score":	164843
		}, {
			"file":	"main/streams/userspace.c",
			"line":	513,
			"primary_score":	999992,
			"second_score":	164842
		}, {
			"file":	"main/streams/userspace.c",
			"line":	514,
			"primary_score":	999992,
			"second_score":	164772
		}, {
			"file":	"main/streams/userspace.c",
			"line":	718,
			"primary_score":	999995,
			"second_score":	122085
		}, {
			"file":	"main/streams/userspace.c",
			"line":	719,
			"primary_score":	999995,
			"second_score":	122084
		}, {
			"file":	"main/streams/userspace.c",
			"line":	720,
			"primary_score":	999995,
			"second_score":	122083
		}, {
			"file":	"main/streams/userspace.c",
			"line":	722,
			"primary_score":	999995,
			"second_score":	122082
		}, {
			"file":	"main/streams/userspace.c",
			"line":	724,
			"primary_score":	999995,
			"second_score":	122081
		}, {
			"file":	"main/streams/userspace.c",
			"line":	726,
			"primary_score":	999995,
			"second_score":	122074
		}, {
			"file":	"main/streams/userspace.c",
			"line":	732,
			"primary_score":	999995,
			"second_score":	121609
		}, {
			"file":	"main/streams/userspace.c",
			"line":	735,
			"primary_score":	999995,
			"second_score":	121608
		}, {
			"file":	"main/streams/userspace.c",
			"line":	737,
			"primary_score":	999995,
			"second_score":	121584
		}, {
			"file":	"main/streams/userspace.c",
			"line":	739,
			"primary_score":	999995,
			"second_score":	121565
		}, {
			"file":	"main/streams/userspace.c",
			"line":	744,
			"primary_score":	999995,
			"second_score":	122576
		}, {
			"file":	"main/streams/userspace.c",
			"line":	745,
			"primary_score":	999995,
			"second_score":	122575
		}, {
			"file":	"main/streams/userspace.c",
			"line":	746,
			"primary_score":	999995,
			"second_score":	122574
		}, {
			"file":	"main/streams/userspace.c",
			"line":	747,
			"primary_score":	999995,
			"second_score":	122573
		}, {
			"file":	"main/streams/userspace.c",
			"line":	749,
			"primary_score":	999995,
			"second_score":	122572
		}, {
			"file":	"main/streams/userspace.c",
			"line":	751,
			"primary_score":	999995,
			"second_score":	122571
		}, {
			"file":	"main/streams/userspace.c",
			"line":	753,
			"primary_score":	999995,
			"second_score":	122564
		}, {
			"file":	"main/streams/userspace.c",
			"line":	759,
			"primary_score":	999995,
			"second_score":	122095
		}, {
			"file":	"main/streams/userspace.c",
			"line":	762,
			"primary_score":	999995,
			"second_score":	122094
		}, {
			"file":	"main/streams/userspace.c",
			"line":	764,
			"primary_score":	999995,
			"second_score":	122093
		}, {
			"file":	"main/streams/userspace.c",
			"line":	767,
			"primary_score":	999995,
			"second_score":	122092
		}, {
			"file":	"main/streams/userspace.c",
			"line":	930,
			"primary_score":	999996,
			"second_score":	130825
		}, {
			"file":	"main/streams/userspace.c",
			"line":	931,
			"primary_score":	999996,
			"second_score":	130824
		}, {
			"file":	"main/streams/userspace.c",
			"line":	932,
			"primary_score":	999996,
			"second_score":	130823
		}, {
			"file":	"main/streams/userspace.c",
			"line":	933,
			"primary_score":	999996,
			"second_score":	130822
		}, {
			"file":	"main/streams/userspace.c",
			"line":	934,
			"primary_score":	999996,
			"second_score":	130821
		}, {
			"file":	"main/streams/userspace.c",
			"line":	935,
			"primary_score":	999996,
			"second_score":	130820
		}, {
			"file":	"main/streams/userspace.c",
			"line":	936,
			"primary_score":	999996,
			"second_score":	130819
		}, {
			"file":	"main/streams/userspace.c",
			"line":	938,
			"primary_score":	999996,
			"second_score":	130818
		}, {
			"file":	"main/streams/userspace.c",
			"line":	1067,
			"primary_score":	999996,
			"second_score":	130817
		}, {
			"file":	"main/streams/userspace.c",
			"line":	1072,
			"primary_score":	999996,
			"second_score":	130816
		}, {
			"file":	"main/streams/userspace.c",
			"line":	1076,
			"primary_score":	999996,
			"second_score":	130815
		}, {
			"file":	"main/strlcpy.c",
			"line":	71,
			"primary_score":	999707,
			"second_score":	151289
		}, {
			"file":	"main/strlcpy.c",
			"line":	72,
			"primary_score":	999707,
			"second_score":	151288
		}, {
			"file":	"main/strlcpy.c",
			"line":	73,
			"primary_score":	999707,
			"second_score":	151287
		}, {
			"file":	"main/strlcpy.c",
			"line":	76,
			"primary_score":	999707,
			"second_score":	151286
		}, {
			"file":	"main/strlcpy.c",
			"line":	77,
			"primary_score":	999707,
			"second_score":	151285
		}, {
			"file":	"main/strlcpy.c",
			"line":	78,
			"primary_score":	999707,
			"second_score":	151283
		}, {
			"file":	"main/strlcpy.c",
			"line":	79,
			"primary_score":	999707,
			"second_score":	151282
		}, {
			"file":	"main/strlcpy.c",
			"line":	84,
			"primary_score":	999707,
			"second_score":	151281
		}, {
			"file":	"main/strlcpy.c",
			"line":	91,
			"primary_score":	999707,
			"second_score":	151280
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	262,
			"primary_score":	999707,
			"second_score":	127765
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	280,
			"primary_score":	999707,
			"second_score":	127764
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	281,
			"primary_score":	999707,
			"second_score":	127763
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	284,
			"primary_score":	999707,
			"second_score":	127762
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	288,
			"primary_score":	999707,
			"second_score":	127761
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	300,
			"primary_score":	999707,
			"second_score":	127770
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	301,
			"primary_score":	999707,
			"second_score":	127769
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	302,
			"primary_score":	999707,
			"second_score":	127768
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	311,
			"primary_score":	999707,
			"second_score":	127767
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	313,
			"primary_score":	999707,
			"second_score":	127766
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	314,
			"primary_score":	999707,
			"second_score":	127760
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	320,
			"primary_score":	999707,
			"second_score":	127759
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	321,
			"primary_score":	999707,
			"second_score":	127758
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	324,
			"primary_score":	999707,
			"second_score":	127757
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	333,
			"primary_score":	999707,
			"second_score":	103460
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	386,
			"primary_score":	999707,
			"second_score":	113568
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	387,
			"primary_score":	999707,
			"second_score":	113567
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	391,
			"primary_score":	999707,
			"second_score":	113566
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	962,
			"primary_score":	999707,
			"second_score":	148734
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	966,
			"primary_score":	999707,
			"second_score":	148733
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	967,
			"primary_score":	999707,
			"second_score":	148732
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	968,
			"primary_score":	999707,
			"second_score":	148731
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1102,
			"primary_score":	999707,
			"second_score":	148720
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1103,
			"primary_score":	999707,
			"second_score":	148719
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1255,
			"primary_score":	999707,
			"second_score":	126754
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1256,
			"primary_score":	999707,
			"second_score":	126753
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1293,
			"primary_score":	999707,
			"second_score":	121850
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1296,
			"primary_score":	999707,
			"second_score":	118821
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1435,
			"primary_score":	999707,
			"second_score":	126752
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1437,
			"primary_score":	999707,
			"second_score":	126750
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1439,
			"primary_score":	999707,
			"second_score":	126749
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1441,
			"primary_score":	999707,
			"second_score":	103473
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1442,
			"primary_score":	999707,
			"second_score":	103472
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1444,
			"primary_score":	999707,
			"second_score":	103471
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1448,
			"primary_score":	999707,
			"second_score":	103470
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1449,
			"primary_score":	999707,
			"second_score":	103469
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1452,
			"primary_score":	999707,
			"second_score":	103468
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1453,
			"primary_score":	999707,
			"second_score":	103467
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1455,
			"primary_score":	999707,
			"second_score":	3136
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1460,
			"primary_score":	999707,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"main/streams/userspace.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"main/streams/userspace.c",
			"lines":	[{
					"line":	335,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [621], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], [], [], [], [571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620], [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570], [], [], [], [], [], []],
							"begin_line":	336,
							"begin_column":	1,
							"end_line":	336,
							"end_column":	1,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&context->links, 0, sizeof (*(&context->links)))", "memset(&context->notifier, 0, sizeof (*(&context->notifier)))", "memset(&context->options, 0, sizeof (*(&context->options)))", "memset(&context->rsrc_id, 0, sizeof (*(&context->rsrc_id)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(context, 0, sizeof (*(context)))", "memset(context->links, 0, sizeof (*(context->links)))", "memset(context->notifier, 0, sizeof (*(context->notifier)))", "memset(context->options, 0, sizeof (*(context->options)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L336\", 23, &(context->rsrc_id), sizeof (context->rsrc_id), &(context), sizeof (context), &(us->object), sizeof (us->object), &(us), sizeof (us), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(old_in_user_include), sizeof (old_in_user_include), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(uwrap), sizeof (uwrap), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(zretval), sizeof (zretval), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(us->wrapper), sizeof (us->wrapper), &(wrapper), sizeof (wrapper), &(context->notifier), sizeof (context->notifier), &(context->options), sizeof (context->options), &(context->links), sizeof (context->links)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	2,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	3,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	4,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	5,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	6,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	7,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	8,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	9,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	10,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	11,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	12,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	13,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	14,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	15,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	16,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	17,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	18,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	19,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	20,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	21,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	22,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	23,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	24,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	25,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	26,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	27,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	28,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	29,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	30,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	31,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	32,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	33,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	34,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	35,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	36,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	37,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	38,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	39,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	40,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	41,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	42,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	43,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	44,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	45,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	46,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	47,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	48,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	49,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	50,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	51,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	52,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	53,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	54,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	55,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	56,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	57,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	58,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	59,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	60,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	61,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	62,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	63,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	64,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	65,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	66,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	67,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	68,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	69,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	70,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	71,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	72,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	73,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	74,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	75,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	76,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	77,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	78,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	79,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	80,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	81,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	82,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	83,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	84,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	85,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	86,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	87,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	88,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	89,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	90,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	91,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	92,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	93,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	94,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	95,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	96,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	97,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	98,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	99,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	100,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	101,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	102,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	103,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	104,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	105,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	106,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	107,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	108,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	109,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	110,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	111,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	112,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	113,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	114,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	115,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	116,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	117,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	118,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	119,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	120,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	121,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	122,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	123,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	124,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	125,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	126,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	127,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	128,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	129,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	130,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	131,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	132,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	133,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	134,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	135,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	136,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	137,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	138,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	139,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	140,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	141,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	142,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	143,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	144,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	145,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	146,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	147,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	148,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	149,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	150,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	151,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	152,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	153,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	154,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	155,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	156,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	157,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	158,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	159,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	160,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	161,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	162,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	163,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	164,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	165,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	166,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	167,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	168,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	169,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	170,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	171,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	172,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	173,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	174,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	175,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	176,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	177,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	178,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	179,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	180,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	181,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	182,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	183,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	184,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	185,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	186,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	187,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	188,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	189,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	190,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	191,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	192,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	193,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	194,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	195,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	196,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	197,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	198,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	199,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	200,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	201,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	202,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	203,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	204,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	205,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	206,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	207,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	208,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	209,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	210,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	211,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	212,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	213,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	214,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	215,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	216,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	217,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	218,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	219,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	220,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	221,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	222,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	223,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	224,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	225,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	226,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	227,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	228,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	229,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	230,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	231,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	232,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	233,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	234,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	235,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	236,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	237,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	238,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	239,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	240,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	241,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	242,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	243,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	244,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	245,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	246,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	247,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	248,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	249,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	250,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	251,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	252,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	253,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	254,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	255,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	256,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	257,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	258,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	259,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	260,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	261,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	262,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	263,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	264,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	265,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	266,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	267,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	268,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	269,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	270,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	271,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	272,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	273,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	274,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	275,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	276,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	277,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	278,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	279,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	280,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	281,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	282,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	283,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	284,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	285,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	286,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	287,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	288,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	289,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	290,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	291,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	292,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	293,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	294,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	295,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	296,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	297,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	298,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	299,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	300,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	301,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	302,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	303,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	304,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	305,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	306,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	307,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	308,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	309,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	310,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	311,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	312,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	313,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	314,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	315,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	316,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	317,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	318,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	319,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	320,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	321,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	322,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	323,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	324,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	325,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	326,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	327,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	328,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	329,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	330,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	331,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	332,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	333,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	334,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	335,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	336,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	337,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	338,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	339,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	340,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	341,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	342,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	343,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	344,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	345,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	346,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	347,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	348,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	349,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	350,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	351,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	352,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	353,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	354,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	355,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	356,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	357,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	358,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	359,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	360,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	361,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	362,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	363,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	364,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	365,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	366,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	367,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	368,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	369,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	370,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	371,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	372,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	373,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	374,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	375,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	376,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	377,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	378,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	379,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	380,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	381,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	382,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	383,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	384,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	385,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	386,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	387,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	388,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	389,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	390,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	391,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	392,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	393,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	394,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	395,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	396,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	397,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	398,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	399,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	400,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	401,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	402,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	403,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	404,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	405,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	406,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	407,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	408,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	409,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	410,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	411,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	412,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	413,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	414,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	415,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	416,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	417,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	418,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	419,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	420,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	421,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	422,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	423,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	424,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	425,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	426,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	427,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	428,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	429,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	430,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	431,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	432,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	433,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	434,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	435,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	436,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	437,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	438,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	439,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	440,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	441,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	442,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	443,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	444,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	445,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	446,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	447,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	448,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	449,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	450,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	451,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	452,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	453,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	454,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	455,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	456,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	457,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	458,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	459,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	460,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	461,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	462,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	463,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	464,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	465,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	466,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	467,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	468,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	469,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	470,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	471,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	472,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	473,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	474,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	475,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	476,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	477,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	478,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	479,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	480,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	481,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	482,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	483,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	484,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	485,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	486,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	487,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	488,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	489,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	490,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	491,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	492,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	493,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	494,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	495,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	496,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	497,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	498,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	499,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	500,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	501,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	502,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	503,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	504,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	505,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	506,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	507,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	508,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	509,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	510,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	511,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	512,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	513,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	514,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	515,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	516,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	517,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	518,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	519,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	520,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	521,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	522,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	523,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	524,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	525,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	526,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	527,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	528,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	529,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	530,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	531,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	532,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	533,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	534,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	535,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	536,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	537,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	538,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	539,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	540,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	541,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	542,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	543,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	544,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	545,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	546,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	547,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	548,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	549,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	550,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	551,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	552,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	553,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	554,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	555,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	556,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	557,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	558,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	559,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	560,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	561,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	562,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	563,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	564,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	565,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	566,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	567,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	568,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	569,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	570,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	571,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	572,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	573,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	574,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	575,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	576,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	577,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	578,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	579,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	580,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	581,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	582,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	583,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	584,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	585,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	586,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	587,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	588,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	589,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	590,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	591,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	592,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	593,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	594,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	595,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	596,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	597,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	598,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	599,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	600,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	601,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	602,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	603,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	604,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	605,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	606,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	607,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	608,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	609,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	610,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	611,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	612,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	613,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	614,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	615,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	616,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	617,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	618,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	619,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	620,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	621,
									"scores":	[-11.304978768539325, -9.3138706308393253, -10.131887199639324, -10.415217513639325, -9.0800222596393247, -9.0819728628393257, -9.5809572596393249, -9.5829078628393241, -9.3349183458393252, -9.5809572596393249, -9.3720187458393251, -9.5809572596393249, -9.5809572596393249, -9.5809572596393249, -9.3349183458393252, -9.5809572596393249, -9.5809572596393249, -9.5829078628393241, -10.395103433639324, -9.6180576596393248, -10.395103433639324, -10.395103433639324, -10.395103433639324]
								}]
						}, {
							"switch":	1,
							"types":	[[], [], [1], [], [], [], [442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460], [], [368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366], [], [], [367]],
							"begin_line":	336,
							"begin_column":	3,
							"end_line":	336,
							"end_column":	36,
							"patch_codes":	["if (!__is_neg(\"\", \"L336\", 23, &(context), sizeof (context), &(context->rsrc_id), sizeof (context->rsrc_id), &(us), sizeof (us), &(us->object), sizeof (us->object), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(old_in_user_include), sizeof (old_in_user_include), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(uwrap), sizeof (uwrap), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(zretval), sizeof (zretval), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(us->wrapper), sizeof (us->wrapper), &(wrapper), sizeof (wrapper), &(context->notifier), sizeof (context->notifier), &(context->options), sizeof (context->options), &(context->links), sizeof (context->links)))\n    _zend_list_addref(context->rsrc_id);\n", "_IO_putc(context->rsrc_id, 0)", "__sysv_signal(context->rsrc_id, 0)", "__sysv_signal(context->rsrc_id, clean_module_constants)", "__sysv_signal(context->rsrc_id, php_output_set_implicit_flush)", "__sysv_signal(context->rsrc_id, php_output_set_status)", "__sysv_signal(context->rsrc_id, zend_clean_module_rsrc_dtors)", "__sysv_signal(context->rsrc_id, zend_ini_refresh_caches)", "__sysv_signal(context->rsrc_id, zend_timeout)", "__sysv_signal(context->rsrc_id, zend_unregister_ini_entries)", "__sysv_signal(context->rsrc_id, zend_vm_stack_extend)", "__tolower_l(context->rsrc_id, 0)", "__toupper_l(context->rsrc_id, 0)", "_php_stream_temp_create(context->rsrc_id, -1)", "_php_stream_temp_create(context->rsrc_id, -4)", "_php_stream_temp_create(context->rsrc_id, 0)", "_php_stream_temp_create(context->rsrc_id, 1)", "_php_stream_temp_create(context->rsrc_id, 128)", "_php_stream_temp_create(context->rsrc_id, 2)", "_php_stream_temp_create(context->rsrc_id, 3)", "_php_stream_temp_create(context->rsrc_id, 4)", "_php_stream_temp_create(context->rsrc_id, 6)", "_zend_get_parameters_array_ex(context->rsrc_id, 0)", "_zend_list_find(context->rsrc_id, 0)", "clock_getcpuclockid(context->rsrc_id, 0)", "clock_getres(context->rsrc_id, 0)", "clock_gettime(context->rsrc_id, 0)", "clock_settime(context->rsrc_id, 0)", "compile_filename(context->rsrc_id, 0)", "compile_filename(context->rsrc_id, zfilename)", "compile_filename(context->rsrc_id, zfuncname)", "compile_filename(context->rsrc_id, zmode)", "compile_filename(context->rsrc_id, zopened)", "compile_filename(context->rsrc_id, zoptions)", "compile_filename(context->rsrc_id, zretval)", "daemon(context->rsrc_id, -1)", "daemon(context->rsrc_id, -4)", "daemon(context->rsrc_id, 0)", "daemon(context->rsrc_id, 1)", "daemon(context->rsrc_id, 128)", "daemon(context->rsrc_id, 2)", "daemon(context->rsrc_id, 3)", "daemon(context->rsrc_id, 4)", "daemon(context->rsrc_id, 6)", "daemon(context->rsrc_id, call_result)", "daemon(context->rsrc_id, le_index_ptr)", "daemon(context->rsrc_id, le_protocols)", "daemon(context->rsrc_id, options)", "div(context->rsrc_id, -1)", "div(context->rsrc_id, -4)", "div(context->rsrc_id, 0)", "div(context->rsrc_id, 1)", "div(context->rsrc_id, 128)", "div(context->rsrc_id, 2)", "div(context->rsrc_id, 3)", "div(context->rsrc_id, 4)", "div(context->rsrc_id, 6)", "div(context->rsrc_id, call_result)", "div(context->rsrc_id, le_index_ptr)", "div(context->rsrc_id, le_protocols)", "div(context->rsrc_id, options)", "dup2(context->rsrc_id, -1)", "dup2(context->rsrc_id, -4)", "dup2(context->rsrc_id, 0)", "dup2(context->rsrc_id, 1)", "dup2(context->rsrc_id, 128)", "dup2(context->rsrc_id, 2)", "dup2(context->rsrc_id, 3)", "dup2(context->rsrc_id, 4)", "dup2(context->rsrc_id, 6)", "dup2(context->rsrc_id, call_result)", "dup2(context->rsrc_id, le_index_ptr)", "dup2(context->rsrc_id, le_protocols)", "dup2(context->rsrc_id, options)", "fchmod(context->rsrc_id, -1)", "fchmod(context->rsrc_id, -4)", "fchmod(context->rsrc_id, 0)", "fchmod(context->rsrc_id, 1)", "fchmod(context->rsrc_id, 128)", "fchmod(context->rsrc_id, 2)", "fchmod(context->rsrc_id, 3)", "fchmod(context->rsrc_id, 4)", "fchmod(context->rsrc_id, 6)", "fdopen(context->rsrc_id, 0)", "flock(context->rsrc_id, -1)", "flock(context->rsrc_id, -4)", "flock(context->rsrc_id, 0)", "flock(context->rsrc_id, 1)", "flock(context->rsrc_id, 128)", "flock(context->rsrc_id, 2)", "flock(context->rsrc_id, 3)", "flock(context->rsrc_id, 4)", "flock(context->rsrc_id, 6)", "flock(context->rsrc_id, call_result)", "flock(context->rsrc_id, le_index_ptr)", "flock(context->rsrc_id, le_protocols)", "flock(context->rsrc_id, options)", "fpathconf(context->rsrc_id, -1)", "fpathconf(context->rsrc_id, -4)", "fpathconf(context->rsrc_id, 0)", "fpathconf(context->rsrc_id, 1)", "fpathconf(context->rsrc_id, 128)", "fpathconf(context->rsrc_id, 2)", "fpathconf(context->rsrc_id, 3)", "fpathconf(context->rsrc_id, 4)", "fpathconf(context->rsrc_id, 6)", "fpathconf(context->rsrc_id, call_result)", "fpathconf(context->rsrc_id, le_index_ptr)", "fpathconf(context->rsrc_id, le_protocols)", "fpathconf(context->rsrc_id, options)", "fputc(context->rsrc_id, 0)", "fputc_unlocked(context->rsrc_id, 0)", "fstat(context->rsrc_id, 0)", "ftruncate(context->rsrc_id, -1)", "ftruncate(context->rsrc_id, -4)", "ftruncate(context->rsrc_id, 0)", "ftruncate(context->rsrc_id, 1)", "ftruncate(context->rsrc_id, 128)", "ftruncate(context->rsrc_id, 2)", "ftruncate(context->rsrc_id, 3)", "ftruncate(context->rsrc_id, 4)", "ftruncate(context->rsrc_id, 6)", "futimens(context->rsrc_id, 0)", "futimes(context->rsrc_id, 0)", "getgroups(context->rsrc_id, 0)", "getitimer(context->rsrc_id, 0)", "isalnum_l(context->rsrc_id, 0)", "isalpha_l(context->rsrc_id, 0)", "isblank_l(context->rsrc_id, 0)", "iscntrl_l(context->rsrc_id, 0)", "isdigit_l(context->rsrc_id, 0)", "isfdtype(context->rsrc_id, -1)", "isfdtype(context->rsrc_id, -4)", "isfdtype(context->rsrc_id, 0)", "isfdtype(context->rsrc_id, 1)", "isfdtype(context->rsrc_id, 128)", "isfdtype(context->rsrc_id, 2)", "isfdtype(context->rsrc_id, 3)", "isfdtype(context->rsrc_id, 4)", "isfdtype(context->rsrc_id, 6)", "isfdtype(context->rsrc_id, call_result)", "isfdtype(context->rsrc_id, le_index_ptr)", "isfdtype(context->rsrc_id, le_protocols)", "isfdtype(context->rsrc_id, options)", "isgraph_l(context->rsrc_id, 0)", "islower_l(context->rsrc_id, 0)", "isprint_l(context->rsrc_id, 0)", "ispunct_l(context->rsrc_id, 0)", "isspace_l(context->rsrc_id, 0)", "isupper_l(context->rsrc_id, 0)", "isxdigit_l(context->rsrc_id, 0)", "kill(context->rsrc_id, -1)", "kill(context->rsrc_id, -4)", "kill(context->rsrc_id, 0)", "kill(context->rsrc_id, 1)", "kill(context->rsrc_id, 128)", "kill(context->rsrc_id, 2)", "kill(context->rsrc_id, 3)", "kill(context->rsrc_id, 4)", "kill(context->rsrc_id, 6)", "kill(context->rsrc_id, call_result)", "kill(context->rsrc_id, le_index_ptr)", "kill(context->rsrc_id, le_protocols)", "kill(context->rsrc_id, options)", "killpg(context->rsrc_id, -1)", "killpg(context->rsrc_id, -4)", "killpg(context->rsrc_id, 0)", "killpg(context->rsrc_id, 1)", "killpg(context->rsrc_id, 128)", "killpg(context->rsrc_id, 2)", "killpg(context->rsrc_id, 3)", "killpg(context->rsrc_id, 4)", "killpg(context->rsrc_id, 6)", "killpg(context->rsrc_id, call_result)", "killpg(context->rsrc_id, le_index_ptr)", "killpg(context->rsrc_id, le_protocols)", "killpg(context->rsrc_id, options)", "listen(context->rsrc_id, -1)", "listen(context->rsrc_id, -4)", "listen(context->rsrc_id, 0)", "listen(context->rsrc_id, 1)", "listen(context->rsrc_id, 128)", "listen(context->rsrc_id, 2)", "listen(context->rsrc_id, 3)", "listen(context->rsrc_id, 4)", "listen(context->rsrc_id, 6)", "listen(context->rsrc_id, call_result)", "listen(context->rsrc_id, le_index_ptr)", "listen(context->rsrc_id, le_protocols)", "listen(context->rsrc_id, options)", "php_flock(context->rsrc_id, -1)", "php_flock(context->rsrc_id, -4)", "php_flock(context->rsrc_id, 0)", "php_flock(context->rsrc_id, 1)", "php_flock(context->rsrc_id, 128)", "php_flock(context->rsrc_id, 2)", "php_flock(context->rsrc_id, 3)", "php_flock(context->rsrc_id, 4)", "php_flock(context->rsrc_id, 6)", "php_flock(context->rsrc_id, call_result)", "php_flock(context->rsrc_id, le_index_ptr)", "php_flock(context->rsrc_id, le_protocols)", "php_flock(context->rsrc_id, options)", "php_set_sock_blocking(context->rsrc_id, -1)", "php_set_sock_blocking(context->rsrc_id, -4)", "php_set_sock_blocking(context->rsrc_id, 0)", "php_set_sock_blocking(context->rsrc_id, 1)", "php_set_sock_blocking(context->rsrc_id, 128)", "php_set_sock_blocking(context->rsrc_id, 2)", "php_set_sock_blocking(context->rsrc_id, 3)", "php_set_sock_blocking(context->rsrc_id, 4)", "php_set_sock_blocking(context->rsrc_id, 6)", "php_set_sock_blocking(context->rsrc_id, call_result)", "php_set_sock_blocking(context->rsrc_id, le_index_ptr)", "php_set_sock_blocking(context->rsrc_id, le_protocols)", "php_set_sock_blocking(context->rsrc_id, options)", "psignal(context->rsrc_id, 0)", "putc(context->rsrc_id, 0)", "putc_unlocked(context->rsrc_id, 0)", "putw(context->rsrc_id, 0)", "setpgid(context->rsrc_id, -1)", "setpgid(context->rsrc_id, -4)", "setpgid(context->rsrc_id, 0)", "setpgid(context->rsrc_id, 1)", "setpgid(context->rsrc_id, 128)", "setpgid(context->rsrc_id, 2)", "setpgid(context->rsrc_id, 3)", "setpgid(context->rsrc_id, 4)", "setpgid(context->rsrc_id, 6)", "setpgid(context->rsrc_id, call_result)", "setpgid(context->rsrc_id, le_index_ptr)", "setpgid(context->rsrc_id, le_protocols)", "setpgid(context->rsrc_id, options)", "shutdown(context->rsrc_id, -1)", "shutdown(context->rsrc_id, -4)", "shutdown(context->rsrc_id, 0)", "shutdown(context->rsrc_id, 1)", "shutdown(context->rsrc_id, 128)", "shutdown(context->rsrc_id, 2)", "shutdown(context->rsrc_id, 3)", "shutdown(context->rsrc_id, 4)", "shutdown(context->rsrc_id, 6)", "shutdown(context->rsrc_id, call_result)", "shutdown(context->rsrc_id, le_index_ptr)", "shutdown(context->rsrc_id, le_protocols)", "shutdown(context->rsrc_id, options)", "shutdown_memory_manager(context->rsrc_id, -1)", "shutdown_memory_manager(context->rsrc_id, -4)", "shutdown_memory_manager(context->rsrc_id, 0)", "shutdown_memory_manager(context->rsrc_id, 1)", "shutdown_memory_manager(context->rsrc_id, 128)", "shutdown_memory_manager(context->rsrc_id, 2)", "shutdown_memory_manager(context->rsrc_id, 3)", "shutdown_memory_manager(context->rsrc_id, 4)", "shutdown_memory_manager(context->rsrc_id, 6)", "shutdown_memory_manager(context->rsrc_id, call_result)", "shutdown_memory_manager(context->rsrc_id, le_index_ptr)", "shutdown_memory_manager(context->rsrc_id, le_protocols)", "shutdown_memory_manager(context->rsrc_id, options)", "siginterrupt(context->rsrc_id, -1)", "siginterrupt(context->rsrc_id, -4)", "siginterrupt(context->rsrc_id, 0)", "siginterrupt(context->rsrc_id, 1)", "siginterrupt(context->rsrc_id, 128)", "siginterrupt(context->rsrc_id, 2)", "siginterrupt(context->rsrc_id, 3)", "siginterrupt(context->rsrc_id, 4)", "siginterrupt(context->rsrc_id, 6)", "siginterrupt(context->rsrc_id, call_result)", "siginterrupt(context->rsrc_id, le_index_ptr)", "siginterrupt(context->rsrc_id, le_protocols)", "siginterrupt(context->rsrc_id, options)", "signal(context->rsrc_id, 0)", "signal(context->rsrc_id, clean_module_constants)", "signal(context->rsrc_id, php_output_set_implicit_flush)", "signal(context->rsrc_id, php_output_set_status)", "signal(context->rsrc_id, zend_clean_module_rsrc_dtors)", "signal(context->rsrc_id, zend_ini_refresh_caches)", "signal(context->rsrc_id, zend_timeout)", "signal(context->rsrc_id, zend_unregister_ini_entries)", "signal(context->rsrc_id, zend_vm_stack_extend)", "ssignal(context->rsrc_id, 0)", "ssignal(context->rsrc_id, clean_module_constants)", "ssignal(context->rsrc_id, php_output_set_implicit_flush)", "ssignal(context->rsrc_id, php_output_set_status)", "ssignal(context->rsrc_id, zend_clean_module_rsrc_dtors)", "ssignal(context->rsrc_id, zend_ini_refresh_caches)", "ssignal(context->rsrc_id, zend_timeout)", "ssignal(context->rsrc_id, zend_unregister_ini_entries)", "ssignal(context->rsrc_id, zend_vm_stack_extend)", "strerror_l(context->rsrc_id, 0)", "tcsetpgrp(context->rsrc_id, -1)", "tcsetpgrp(context->rsrc_id, -4)", "tcsetpgrp(context->rsrc_id, 0)", "tcsetpgrp(context->rsrc_id, 1)", "tcsetpgrp(context->rsrc_id, 128)", "tcsetpgrp(context->rsrc_id, 2)", "tcsetpgrp(context->rsrc_id, 3)", "tcsetpgrp(context->rsrc_id, 4)", "tcsetpgrp(context->rsrc_id, 6)", "tcsetpgrp(context->rsrc_id, call_result)", "tcsetpgrp(context->rsrc_id, le_index_ptr)", "tcsetpgrp(context->rsrc_id, le_protocols)", "tcsetpgrp(context->rsrc_id, options)", "tolower_l(context->rsrc_id, 0)", "toupper_l(context->rsrc_id, 0)", "ungetc(context->rsrc_id, 0)", "zend_copy_parameters_array(context->rsrc_id, 0)", "zend_copy_parameters_array(context->rsrc_id, zfilename)", "zend_copy_parameters_array(context->rsrc_id, zfuncname)", "zend_copy_parameters_array(context->rsrc_id, zmode)", "zend_copy_parameters_array(context->rsrc_id, zopened)", "zend_copy_parameters_array(context->rsrc_id, zoptions)", "zend_copy_parameters_array(context->rsrc_id, zretval)", "zm_deactivate_streams(context->rsrc_id, -1)", "zm_deactivate_streams(context->rsrc_id, -4)", "zm_deactivate_streams(context->rsrc_id, 0)", "zm_deactivate_streams(context->rsrc_id, 1)", "zm_deactivate_streams(context->rsrc_id, 128)", "zm_deactivate_streams(context->rsrc_id, 2)", "zm_deactivate_streams(context->rsrc_id, 3)", "zm_deactivate_streams(context->rsrc_id, 4)", "zm_deactivate_streams(context->rsrc_id, 6)", "zm_deactivate_streams(context->rsrc_id, call_result)", "zm_deactivate_streams(context->rsrc_id, le_index_ptr)", "zm_deactivate_streams(context->rsrc_id, le_protocols)", "zm_deactivate_streams(context->rsrc_id, options)", "zm_shutdown_file(context->rsrc_id, -1)", "zm_shutdown_file(context->rsrc_id, -4)", "zm_shutdown_file(context->rsrc_id, 0)", "zm_shutdown_file(context->rsrc_id, 1)", "zm_shutdown_file(context->rsrc_id, 128)", "zm_shutdown_file(context->rsrc_id, 2)", "zm_shutdown_file(context->rsrc_id, 3)", "zm_shutdown_file(context->rsrc_id, 4)", "zm_shutdown_file(context->rsrc_id, 6)", "zm_shutdown_file(context->rsrc_id, call_result)", "zm_shutdown_file(context->rsrc_id, le_index_ptr)", "zm_shutdown_file(context->rsrc_id, le_protocols)", "zm_shutdown_file(context->rsrc_id, options)", "zm_startup_file(context->rsrc_id, -1)", "zm_startup_file(context->rsrc_id, -4)", "zm_startup_file(context->rsrc_id, 0)", "zm_startup_file(context->rsrc_id, 1)", "zm_startup_file(context->rsrc_id, 128)", "zm_startup_file(context->rsrc_id, 2)", "zm_startup_file(context->rsrc_id, 3)", "zm_startup_file(context->rsrc_id, 4)", "zm_startup_file(context->rsrc_id, 6)", "zm_startup_file(context->rsrc_id, call_result)", "zm_startup_file(context->rsrc_id, le_index_ptr)", "zm_startup_file(context->rsrc_id, le_protocols)", "zm_startup_file(context->rsrc_id, options)", "zm_startup_user_streams(context->rsrc_id, -1)", "zm_startup_user_streams(context->rsrc_id, -4)", "zm_startup_user_streams(context->rsrc_id, 0)", "zm_startup_user_streams(context->rsrc_id, 1)", "zm_startup_user_streams(context->rsrc_id, 128)", "zm_startup_user_streams(context->rsrc_id, 2)", "zm_startup_user_streams(context->rsrc_id, 3)", "zm_startup_user_streams(context->rsrc_id, 4)", "zm_startup_user_streams(context->rsrc_id, 6)", "zm_startup_user_streams(context->rsrc_id, call_result)", "zm_startup_user_streams(context->rsrc_id, le_index_ptr)", "zm_startup_user_streams(context->rsrc_id, le_protocols)", "zm_startup_user_streams(context->rsrc_id, options)", "{\n}\n", "_Exit(context->rsrc_id)", "__getpgid(context->rsrc_id)", "_exit(context->rsrc_id)", "_php_stream_fopen_tmpfile(context->rsrc_id)", "_php_stream_memory_create(context->rsrc_id)", "_tolower(context->rsrc_id)", "_toupper(context->rsrc_id)", "_zend_list_delete(context->rsrc_id)", "abs(context->rsrc_id)", "clean_module_constants(context->rsrc_id)", "close(context->rsrc_id)", "dup(context->rsrc_id)", "dysize(context->rsrc_id)", "exit(context->rsrc_id)", "fchdir(context->rsrc_id)", "fdatasync(context->rsrc_id)", "fdopendir(context->rsrc_id)", "ffs(context->rsrc_id)", "fsync(context->rsrc_id)", "get_binary_op(context->rsrc_id)", "get_unary_op(context->rsrc_id)", "getpgid(context->rsrc_id)", "getsid(context->rsrc_id)", "gsignal(context->rsrc_id)", "isalnum(context->rsrc_id)", "isalpha(context->rsrc_id)", "isascii(context->rsrc_id)", "isatty(context->rsrc_id)", "isblank(context->rsrc_id)", "iscntrl(context->rsrc_id)", "isdigit(context->rsrc_id)", "isgraph(context->rsrc_id)", "islower(context->rsrc_id)", "isprint(context->rsrc_id)", "ispunct(context->rsrc_id)", "isspace(context->rsrc_id)", "isupper(context->rsrc_id)", "isxdigit(context->rsrc_id)", "multi_convert_to_double_ex(context->rsrc_id)", "multi_convert_to_long_ex(context->rsrc_id)", "multi_convert_to_string_ex(context->rsrc_id)", "nice(context->rsrc_id)", "php_init_stream_wrappers(context->rsrc_id)", "php_output_set_implicit_flush(context->rsrc_id)", "php_output_set_status(context->rsrc_id)", "php_shutdown_stream_wrappers(context->rsrc_id)", "putchar(context->rsrc_id)", "putchar_unlocked(context->rsrc_id)", "quick_exit(context->rsrc_id)", "raise(context->rsrc_id)", "sigblock(context->rsrc_id)", "sigsetmask(context->rsrc_id)", "sockatmark(context->rsrc_id)", "strerror(context->rsrc_id)", "strsignal(context->rsrc_id)", "sysconf(context->rsrc_id)", "tcgetpgrp(context->rsrc_id)", "toascii(context->rsrc_id)", "tolower(context->rsrc_id)", "toupper(context->rsrc_id)", "ttyname(context->rsrc_id)", "zend_clean_module_rsrc_dtors(context->rsrc_id)", "zend_get_parameters_ex(context->rsrc_id)", "zend_get_type_by_const(context->rsrc_id)", "zend_ini_refresh_caches(context->rsrc_id)", "zend_memory_peak_usage(context->rsrc_id)", "zend_memory_usage(context->rsrc_id)", "zend_rsrc_list_get_rsrc_type(context->rsrc_id)", "zend_timeout(context->rsrc_id)", "zend_unregister_ini_entries(context->rsrc_id)", "zend_vm_stack_extend(context->rsrc_id)", "zend_vm_stack_get_arg(context->rsrc_id)", "zend_vm_stack_new_page(context->rsrc_id)", "zend_vm_stack_push_args(context->rsrc_id)", "_zend_list_addref((&args)->rsrc_id)", "_zend_list_addref((&call_result)->rsrc_id)", "_zend_list_addref((&context)->rsrc_id)", "_zend_list_addref((&filename)->rsrc_id)", "_zend_list_addref((&mode)->rsrc_id)", "_zend_list_addref((&old_in_user_include)->rsrc_id)", "_zend_list_addref((&opened_path)->rsrc_id)", "_zend_list_addref((&options)->rsrc_id)", "_zend_list_addref((&stream)->rsrc_id)", "_zend_list_addref((&us)->rsrc_id)", "_zend_list_addref((&uwrap)->rsrc_id)", "_zend_list_addref((&wrapper)->rsrc_id)", "_zend_list_addref((&zfilename)->rsrc_id)", "_zend_list_addref((&zfuncname)->rsrc_id)", "_zend_list_addref((&zmode)->rsrc_id)", "_zend_list_addref((&zopened)->rsrc_id)", "_zend_list_addref((&zoptions)->rsrc_id)", "_zend_list_addref((&zretval)->rsrc_id)", "_zend_list_addref((context)->rsrc_id)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.3105031489393255, -8.3413323144393257, -9.5248893489393254, -9.8126557144393249, -8.8768170284393246, -8.8825397284393262, -9.1988280584393252, -9.2045507584393249, -8.4409399584393245, -9.1988280584393252, -8.7352907584393247, -9.1988280584393252, -9.1988280584393252, -9.1988280584393252, -8.4409399584393245, -9.1988280584393252, -9.1988280584393252, -9.2045507584393249, -9.7236728684393245, -9.4931788584393253, -9.7236728684393245, -9.7236728684393245, -9.7236728684393245]
								}, {
									"case":	2,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	3,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	4,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	5,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	6,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	7,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	8,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	9,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	10,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	11,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	12,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	13,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	14,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	15,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	16,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	17,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	18,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	19,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	20,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	21,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	22,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	23,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	24,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	25,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	26,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	27,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	28,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	29,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	30,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	31,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	32,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	33,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	34,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	35,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	36,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	37,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	38,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	39,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	40,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	41,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	42,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	43,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	44,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	45,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	46,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	47,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	48,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	49,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	50,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	51,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	52,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	53,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	54,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	55,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	56,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	57,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	58,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	59,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	60,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	61,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	62,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	63,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	64,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	65,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	66,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	67,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	68,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	69,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	70,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	71,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	72,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	73,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	74,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	75,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	76,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	77,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	78,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	79,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	80,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	81,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	82,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	83,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	84,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	85,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	86,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	87,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	88,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	89,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	90,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	91,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	92,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	93,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	94,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	95,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	96,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	97,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	98,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	99,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	100,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	101,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	102,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	103,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	104,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	105,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	106,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	107,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	108,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	109,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	110,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	111,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	112,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	113,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	114,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	115,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	116,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	117,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	118,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	119,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	120,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	121,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	122,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	123,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	124,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	125,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	126,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	127,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	128,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	129,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	130,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	131,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	132,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	133,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	134,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	135,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	136,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	137,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	138,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	139,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	140,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	141,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	142,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	143,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	144,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	145,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	146,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	147,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	148,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	149,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	150,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	151,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	152,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	153,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	154,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	155,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	156,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	157,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	158,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	159,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	160,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	161,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	162,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	163,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	164,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	165,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	166,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	167,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	168,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	169,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	170,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	171,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	172,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	173,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	174,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	175,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	176,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	177,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	178,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	179,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	180,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	181,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	182,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	183,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	184,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	185,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	186,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	187,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	188,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	189,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	190,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	191,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	192,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	193,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	194,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	195,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	196,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	197,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	198,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	199,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	200,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	201,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	202,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	203,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	204,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	205,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	206,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	207,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	208,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	209,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	210,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	211,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	212,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	213,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	214,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	215,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	216,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	217,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	218,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	219,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	220,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	221,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	222,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	223,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	224,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	225,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	226,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	227,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	228,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	229,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	230,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	231,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	232,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	233,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	234,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	235,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	236,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	237,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	238,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	239,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	240,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	241,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	242,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	243,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	244,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	245,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	246,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	247,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	248,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	249,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	250,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	251,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	252,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	253,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	254,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	255,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	256,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	257,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	258,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	259,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	260,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	261,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	262,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	263,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	264,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	265,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	266,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	267,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	268,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	269,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	270,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	271,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	272,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	273,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	274,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	275,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	276,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	277,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	278,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	279,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	280,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	281,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	282,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	283,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	284,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	285,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	286,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	287,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	288,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	289,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	290,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	291,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	292,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	293,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	294,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	295,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	296,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	297,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	298,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	299,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	300,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	301,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	302,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	303,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	304,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	305,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	306,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	307,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	308,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	309,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	310,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	311,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	312,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	313,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	314,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	315,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	316,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	317,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	318,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	319,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	320,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	321,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	322,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	323,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	324,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	325,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	326,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	327,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	328,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	329,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	330,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	331,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	332,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	333,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	334,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	335,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	336,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	337,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	338,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	339,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	340,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	341,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	342,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	343,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	344,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	345,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	346,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	347,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	348,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	349,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	350,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	351,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	352,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	353,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	354,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	355,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	356,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	357,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	358,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	359,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	360,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	361,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	362,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	363,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	364,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	365,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	366,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	367,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	368,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	369,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	370,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	371,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	372,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	373,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	374,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	375,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	376,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	377,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	378,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	379,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	380,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	381,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	382,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	383,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	384,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	385,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	386,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	387,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	388,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	389,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	390,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	391,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	392,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	393,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	394,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	395,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	396,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	397,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	398,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	399,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	400,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	401,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	402,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	403,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	404,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	405,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	406,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	407,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	408,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	409,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	410,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	411,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	412,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	413,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	414,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	415,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	416,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	417,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	418,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	419,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	420,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	421,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	422,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	423,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	424,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	425,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	426,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	427,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	428,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	429,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	430,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	431,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	432,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	433,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	434,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	435,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	436,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	437,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	438,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	439,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	440,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	441,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	442,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	443,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	444,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	445,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	446,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	447,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	448,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	449,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	450,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	451,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	452,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	453,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	454,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	455,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	456,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	457,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	458,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	459,
									"scores":	[-7.7303346884393251]
								}, {
									"case":	460,
									"scores":	[-7.7303346884393251]
								}]
						}]
				}, {
					"line":	341,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	342,
							"begin_column":	0,
							"end_line":	342,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset((zfilename), 0, sizeof (*((zfilename))))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L342\", 20, &(zfilename), sizeof (zfilename), &((zfilename)->refcount__gc), sizeof ((zfilename)->refcount__gc), &((zfilename)->is_ref__gc), sizeof ((zfilename)->is_ref__gc), &(filename), sizeof (filename), &(us), sizeof (us), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(context), sizeof (context), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zopened), sizeof (zopened), &(old_in_user_include), sizeof (old_in_user_include), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(uwrap), sizeof (uwrap), &(zretval), sizeof (zretval), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &((zfilename)->type), sizeof ((zfilename)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	3,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	4,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	5,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	6,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	7,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	8,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	9,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	10,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	11,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	12,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	13,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	14,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	15,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	16,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	17,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	18,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	19,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	20,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	21,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	22,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	23,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	24,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	25,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	26,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	27,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	28,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	29,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	30,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	31,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	32,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	33,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	34,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	35,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	36,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	37,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	38,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	39,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	40,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	41,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	42,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	43,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	44,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	45,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	46,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	47,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	48,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	49,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	50,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	51,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	52,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	53,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	54,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	55,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	56,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	57,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	58,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	59,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	60,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	61,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	62,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	63,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	64,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	65,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	66,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	67,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	68,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	69,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	70,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	71,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	72,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	73,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	74,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	75,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	76,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	77,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	78,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	79,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	80,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	81,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	82,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	83,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	84,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	85,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	86,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	87,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	88,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	89,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	90,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	91,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	92,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	93,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	94,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	95,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	96,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	97,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	98,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	99,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	100,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	101,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	102,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	103,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	104,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	105,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	106,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	107,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	108,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	109,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	110,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	111,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	112,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	113,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	114,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	115,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	116,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	117,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	118,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	119,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	120,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	121,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	122,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	123,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	124,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	125,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	126,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	127,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	128,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	129,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	130,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	131,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	132,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	133,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	134,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	135,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	136,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	137,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	138,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	139,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	140,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	141,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	142,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	143,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	144,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	145,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	146,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	147,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	148,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	149,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	150,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	151,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	152,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	153,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	154,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	155,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	156,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	157,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	158,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	159,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	160,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	161,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	162,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	163,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	164,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	165,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	166,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	167,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	168,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	169,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	170,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	171,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	172,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	173,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	174,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	175,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	176,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	177,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	178,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	179,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	180,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	181,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	182,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	183,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	184,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	185,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	186,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	187,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	188,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	189,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	190,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	191,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	192,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	193,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	194,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	195,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	196,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	197,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	198,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	199,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	200,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	201,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	202,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	203,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	204,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	205,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	206,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	207,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	208,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	209,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	210,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	211,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	212,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	213,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	214,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	215,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	216,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	217,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	218,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	219,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	220,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	221,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	222,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	223,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	224,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	225,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	226,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	227,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	228,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	229,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	230,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	231,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	232,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	233,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	234,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	235,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	236,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	237,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	238,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	239,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	240,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	241,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	242,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	243,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	244,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	245,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	246,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	247,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	248,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	249,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	250,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	251,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	252,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	253,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	254,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	255,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	256,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	257,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	258,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	259,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	260,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	261,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	262,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	263,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	264,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	265,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	266,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	267,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	268,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	269,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	270,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	271,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	272,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	273,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	274,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	275,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	276,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	277,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	278,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	279,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	280,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	281,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	282,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	283,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	284,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	285,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	286,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	287,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	288,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	289,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	290,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	291,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	292,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	293,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	294,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	295,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	296,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	297,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	298,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	299,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	300,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	301,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	302,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	303,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	304,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	305,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	306,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	307,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	308,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	309,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	310,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	311,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	312,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	313,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	314,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	315,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	316,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	317,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	318,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	319,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	320,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	321,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	322,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	323,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	324,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	325,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	326,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	327,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	328,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	329,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	330,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	331,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	332,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	333,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	334,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	335,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	336,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	337,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	338,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	339,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	340,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	341,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	342,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	343,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	344,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	345,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	346,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	347,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	348,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	349,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	350,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	351,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	352,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	353,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	354,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	355,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	356,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	357,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	358,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	359,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	360,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	361,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	362,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	363,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	364,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	365,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	366,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	367,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	368,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	369,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	370,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	371,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	372,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	373,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	374,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	375,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	376,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	377,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	378,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	379,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	380,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	381,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	382,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	383,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	384,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	385,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	386,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	387,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	388,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	389,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	390,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	391,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	392,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	393,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	394,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	395,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	396,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	397,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	398,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	399,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	400,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	401,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	402,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	403,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	404,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	405,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	406,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	407,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	408,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	409,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	410,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	411,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	412,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	413,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	414,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	415,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	416,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	417,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	418,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	419,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	420,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	421,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	422,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	423,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	424,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	425,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	426,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	427,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	428,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	429,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	430,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	431,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	432,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	433,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	434,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	435,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	436,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	437,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	438,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	439,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	440,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	441,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	442,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	443,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	444,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	445,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	446,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	447,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	448,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	449,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	450,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	451,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	452,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	453,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	454,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	455,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	456,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	457,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	458,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	459,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	460,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	461,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	462,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	463,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	464,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	465,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	466,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	467,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	468,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	469,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	470,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	471,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	472,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	473,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	474,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	475,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	476,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	477,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	478,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	479,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	480,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	481,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	482,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	483,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	484,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	485,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	486,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	487,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	488,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	489,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	490,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	491,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	492,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	493,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	494,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	495,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	496,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	497,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	498,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	499,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	500,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	501,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	502,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	503,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	504,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	505,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	506,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	507,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	508,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	509,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	510,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	511,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	512,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	513,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	514,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	515,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	516,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	517,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	518,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	519,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	520,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	521,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	522,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	523,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	524,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	525,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	526,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	527,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	528,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	529,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	530,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	531,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	532,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	533,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	534,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	535,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	536,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	537,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	538,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	539,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	540,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	541,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	542,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	543,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	544,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	545,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	546,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	547,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	548,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	549,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	550,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	551,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	552,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	553,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	554,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	555,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	556,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	557,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	558,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	559,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	560,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	561,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	562,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	563,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	564,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	565,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	566,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	567,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	568,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	569,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	570,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	571,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	572,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	573,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	574,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	575,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	576,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	577,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	578,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	579,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	580,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	581,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	582,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	583,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	584,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	585,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	586,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	587,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	588,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	589,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	590,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	591,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	592,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	593,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	594,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	595,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	596,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	597,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	598,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	599,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	600,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	601,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	602,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	603,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	604,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	605,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	606,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	607,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	608,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	609,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	610,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	611,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	612,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	613,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	614,
									"scores":	[-9.9950650668692465, -10.684675822169247, -10.687274329169249, -10.020539172169247, -10.860826068969246, -10.519523568969246, -10.521474172169247, -11.107553908969246, -10.519523568969246, -10.310585055169247, -10.519523568969246, -10.059409375169247, -10.519523568969246, -10.273484655169247, -10.856378228969247, -10.519523568969246, -10.519523568969246, -10.521474172169247, -10.556623968969246, -10.586695829169248]
								}]
						}, {
							"switch":	3,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	342,
							"begin_column":	2,
							"end_line":	342,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L342\", 20, &((zfilename)->refcount__gc), sizeof ((zfilename)->refcount__gc), &((zfilename)->is_ref__gc), sizeof ((zfilename)->is_ref__gc), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(us), sizeof (us), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(context), sizeof (context), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zopened), sizeof (zopened), &(old_in_user_include), sizeof (old_in_user_include), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(uwrap), sizeof (uwrap), &(zretval), sizeof (zretval), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &((zfilename)->type), sizeof ((zfilename)->type)))\n    do {\n        (zfilename) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(zfilename))->u.buffered = ((void *)0);\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.250457174169247, -8.47686257316925, -9.10260900806925, -8.71597589916925, -8.9924715656692467, -9.0322642291692468, -9.0379869291692465, -9.6526763196692471, -9.0322642291692468, -8.5687269291692463, -9.0322642291692468, -7.9038131291692473, -9.0322642291692468, -8.27437612916925, -8.9877625196692463, -9.0322642291692468, -9.0322642291692468, -9.0379869291692465, -9.3266150291692469, -8.4772099091692468]
								}]
						}]
				}, {
					"line":	342,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	343,
							"begin_column":	0,
							"end_line":	343,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset((zfilename), 0, sizeof (*((zfilename))))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L343\", 20, &(filename), sizeof (filename), &(zfilename), sizeof (zfilename), &((zfilename)->refcount__gc), sizeof ((zfilename)->refcount__gc), &((zfilename)->is_ref__gc), sizeof ((zfilename)->is_ref__gc), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(us), sizeof (us), &(context), sizeof (context), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(old_in_user_include), sizeof (old_in_user_include), &(call_result), sizeof (call_result), &(uwrap), sizeof (uwrap), &(zretval), sizeof (zretval), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &((zfilename)->type), sizeof ((zfilename)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.56871302989917]
								}, {
									"case":	2,
									"scores":	[-7.56871302989917]
								}, {
									"case":	3,
									"scores":	[-7.56871302989917]
								}, {
									"case":	4,
									"scores":	[-7.56871302989917]
								}, {
									"case":	5,
									"scores":	[-7.56871302989917]
								}, {
									"case":	6,
									"scores":	[-7.56871302989917]
								}, {
									"case":	7,
									"scores":	[-7.56871302989917]
								}, {
									"case":	8,
									"scores":	[-7.56871302989917]
								}, {
									"case":	9,
									"scores":	[-7.56871302989917]
								}, {
									"case":	10,
									"scores":	[-7.56871302989917]
								}, {
									"case":	11,
									"scores":	[-7.56871302989917]
								}, {
									"case":	12,
									"scores":	[-7.56871302989917]
								}, {
									"case":	13,
									"scores":	[-7.56871302989917]
								}, {
									"case":	14,
									"scores":	[-7.56871302989917]
								}, {
									"case":	15,
									"scores":	[-7.56871302989917]
								}, {
									"case":	16,
									"scores":	[-7.56871302989917]
								}, {
									"case":	17,
									"scores":	[-7.56871302989917]
								}, {
									"case":	18,
									"scores":	[-7.56871302989917]
								}, {
									"case":	19,
									"scores":	[-7.56871302989917]
								}, {
									"case":	20,
									"scores":	[-7.56871302989917]
								}, {
									"case":	21,
									"scores":	[-7.56871302989917]
								}, {
									"case":	22,
									"scores":	[-7.56871302989917]
								}, {
									"case":	23,
									"scores":	[-7.56871302989917]
								}, {
									"case":	24,
									"scores":	[-7.56871302989917]
								}, {
									"case":	25,
									"scores":	[-7.56871302989917]
								}, {
									"case":	26,
									"scores":	[-7.56871302989917]
								}, {
									"case":	27,
									"scores":	[-7.56871302989917]
								}, {
									"case":	28,
									"scores":	[-7.56871302989917]
								}, {
									"case":	29,
									"scores":	[-7.56871302989917]
								}, {
									"case":	30,
									"scores":	[-7.56871302989917]
								}, {
									"case":	31,
									"scores":	[-7.56871302989917]
								}, {
									"case":	32,
									"scores":	[-7.56871302989917]
								}, {
									"case":	33,
									"scores":	[-7.56871302989917]
								}, {
									"case":	34,
									"scores":	[-7.56871302989917]
								}, {
									"case":	35,
									"scores":	[-7.56871302989917]
								}, {
									"case":	36,
									"scores":	[-7.56871302989917]
								}, {
									"case":	37,
									"scores":	[-7.56871302989917]
								}, {
									"case":	38,
									"scores":	[-7.56871302989917]
								}, {
									"case":	39,
									"scores":	[-7.56871302989917]
								}, {
									"case":	40,
									"scores":	[-7.56871302989917]
								}, {
									"case":	41,
									"scores":	[-7.56871302989917]
								}, {
									"case":	42,
									"scores":	[-7.56871302989917]
								}, {
									"case":	43,
									"scores":	[-7.56871302989917]
								}, {
									"case":	44,
									"scores":	[-7.56871302989917]
								}, {
									"case":	45,
									"scores":	[-7.56871302989917]
								}, {
									"case":	46,
									"scores":	[-7.56871302989917]
								}, {
									"case":	47,
									"scores":	[-7.56871302989917]
								}, {
									"case":	48,
									"scores":	[-7.56871302989917]
								}, {
									"case":	49,
									"scores":	[-7.56871302989917]
								}, {
									"case":	50,
									"scores":	[-7.56871302989917]
								}, {
									"case":	51,
									"scores":	[-7.56871302989917]
								}, {
									"case":	52,
									"scores":	[-7.56871302989917]
								}, {
									"case":	53,
									"scores":	[-7.56871302989917]
								}, {
									"case":	54,
									"scores":	[-7.56871302989917]
								}, {
									"case":	55,
									"scores":	[-7.56871302989917]
								}, {
									"case":	56,
									"scores":	[-7.56871302989917]
								}, {
									"case":	57,
									"scores":	[-7.56871302989917]
								}, {
									"case":	58,
									"scores":	[-7.56871302989917]
								}, {
									"case":	59,
									"scores":	[-7.56871302989917]
								}, {
									"case":	60,
									"scores":	[-7.56871302989917]
								}, {
									"case":	61,
									"scores":	[-7.56871302989917]
								}, {
									"case":	62,
									"scores":	[-7.56871302989917]
								}, {
									"case":	63,
									"scores":	[-7.56871302989917]
								}, {
									"case":	64,
									"scores":	[-7.56871302989917]
								}, {
									"case":	65,
									"scores":	[-7.56871302989917]
								}, {
									"case":	66,
									"scores":	[-7.56871302989917]
								}, {
									"case":	67,
									"scores":	[-7.56871302989917]
								}, {
									"case":	68,
									"scores":	[-7.56871302989917]
								}, {
									"case":	69,
									"scores":	[-7.56871302989917]
								}, {
									"case":	70,
									"scores":	[-7.56871302989917]
								}, {
									"case":	71,
									"scores":	[-7.56871302989917]
								}, {
									"case":	72,
									"scores":	[-7.56871302989917]
								}, {
									"case":	73,
									"scores":	[-7.56871302989917]
								}, {
									"case":	74,
									"scores":	[-7.56871302989917]
								}, {
									"case":	75,
									"scores":	[-7.56871302989917]
								}, {
									"case":	76,
									"scores":	[-7.56871302989917]
								}, {
									"case":	77,
									"scores":	[-7.56871302989917]
								}, {
									"case":	78,
									"scores":	[-7.56871302989917]
								}, {
									"case":	79,
									"scores":	[-7.56871302989917]
								}, {
									"case":	80,
									"scores":	[-7.56871302989917]
								}, {
									"case":	81,
									"scores":	[-7.56871302989917]
								}, {
									"case":	82,
									"scores":	[-7.56871302989917]
								}, {
									"case":	83,
									"scores":	[-7.56871302989917]
								}, {
									"case":	84,
									"scores":	[-7.56871302989917]
								}, {
									"case":	85,
									"scores":	[-7.56871302989917]
								}, {
									"case":	86,
									"scores":	[-7.56871302989917]
								}, {
									"case":	87,
									"scores":	[-7.56871302989917]
								}, {
									"case":	88,
									"scores":	[-7.56871302989917]
								}, {
									"case":	89,
									"scores":	[-7.56871302989917]
								}, {
									"case":	90,
									"scores":	[-7.56871302989917]
								}, {
									"case":	91,
									"scores":	[-7.56871302989917]
								}, {
									"case":	92,
									"scores":	[-7.56871302989917]
								}, {
									"case":	93,
									"scores":	[-7.56871302989917]
								}, {
									"case":	94,
									"scores":	[-7.56871302989917]
								}, {
									"case":	95,
									"scores":	[-7.56871302989917]
								}, {
									"case":	96,
									"scores":	[-7.56871302989917]
								}, {
									"case":	97,
									"scores":	[-7.56871302989917]
								}, {
									"case":	98,
									"scores":	[-7.56871302989917]
								}, {
									"case":	99,
									"scores":	[-7.56871302989917]
								}, {
									"case":	100,
									"scores":	[-7.56871302989917]
								}, {
									"case":	101,
									"scores":	[-7.56871302989917]
								}, {
									"case":	102,
									"scores":	[-7.56871302989917]
								}, {
									"case":	103,
									"scores":	[-7.56871302989917]
								}, {
									"case":	104,
									"scores":	[-7.56871302989917]
								}, {
									"case":	105,
									"scores":	[-7.56871302989917]
								}, {
									"case":	106,
									"scores":	[-7.56871302989917]
								}, {
									"case":	107,
									"scores":	[-7.56871302989917]
								}, {
									"case":	108,
									"scores":	[-7.56871302989917]
								}, {
									"case":	109,
									"scores":	[-7.56871302989917]
								}, {
									"case":	110,
									"scores":	[-7.56871302989917]
								}, {
									"case":	111,
									"scores":	[-7.56871302989917]
								}, {
									"case":	112,
									"scores":	[-7.56871302989917]
								}, {
									"case":	113,
									"scores":	[-7.56871302989917]
								}, {
									"case":	114,
									"scores":	[-7.56871302989917]
								}, {
									"case":	115,
									"scores":	[-7.56871302989917]
								}, {
									"case":	116,
									"scores":	[-7.56871302989917]
								}, {
									"case":	117,
									"scores":	[-7.56871302989917]
								}, {
									"case":	118,
									"scores":	[-7.56871302989917]
								}, {
									"case":	119,
									"scores":	[-7.56871302989917]
								}, {
									"case":	120,
									"scores":	[-7.56871302989917]
								}, {
									"case":	121,
									"scores":	[-7.56871302989917]
								}, {
									"case":	122,
									"scores":	[-7.56871302989917]
								}, {
									"case":	123,
									"scores":	[-7.56871302989917]
								}, {
									"case":	124,
									"scores":	[-7.56871302989917]
								}, {
									"case":	125,
									"scores":	[-7.56871302989917]
								}, {
									"case":	126,
									"scores":	[-7.56871302989917]
								}, {
									"case":	127,
									"scores":	[-7.56871302989917]
								}, {
									"case":	128,
									"scores":	[-7.56871302989917]
								}, {
									"case":	129,
									"scores":	[-7.56871302989917]
								}, {
									"case":	130,
									"scores":	[-7.56871302989917]
								}, {
									"case":	131,
									"scores":	[-7.56871302989917]
								}, {
									"case":	132,
									"scores":	[-7.56871302989917]
								}, {
									"case":	133,
									"scores":	[-7.56871302989917]
								}, {
									"case":	134,
									"scores":	[-7.56871302989917]
								}, {
									"case":	135,
									"scores":	[-7.56871302989917]
								}, {
									"case":	136,
									"scores":	[-7.56871302989917]
								}, {
									"case":	137,
									"scores":	[-7.56871302989917]
								}, {
									"case":	138,
									"scores":	[-7.56871302989917]
								}, {
									"case":	139,
									"scores":	[-7.56871302989917]
								}, {
									"case":	140,
									"scores":	[-7.56871302989917]
								}, {
									"case":	141,
									"scores":	[-7.56871302989917]
								}, {
									"case":	142,
									"scores":	[-7.56871302989917]
								}, {
									"case":	143,
									"scores":	[-7.56871302989917]
								}, {
									"case":	144,
									"scores":	[-7.56871302989917]
								}, {
									"case":	145,
									"scores":	[-7.56871302989917]
								}, {
									"case":	146,
									"scores":	[-7.56871302989917]
								}, {
									"case":	147,
									"scores":	[-7.56871302989917]
								}, {
									"case":	148,
									"scores":	[-7.56871302989917]
								}, {
									"case":	149,
									"scores":	[-7.56871302989917]
								}, {
									"case":	150,
									"scores":	[-7.56871302989917]
								}, {
									"case":	151,
									"scores":	[-7.56871302989917]
								}, {
									"case":	152,
									"scores":	[-7.56871302989917]
								}, {
									"case":	153,
									"scores":	[-7.56871302989917]
								}, {
									"case":	154,
									"scores":	[-7.56871302989917]
								}, {
									"case":	155,
									"scores":	[-7.56871302989917]
								}, {
									"case":	156,
									"scores":	[-7.56871302989917]
								}, {
									"case":	157,
									"scores":	[-7.56871302989917]
								}, {
									"case":	158,
									"scores":	[-7.56871302989917]
								}, {
									"case":	159,
									"scores":	[-7.56871302989917]
								}, {
									"case":	160,
									"scores":	[-7.56871302989917]
								}, {
									"case":	161,
									"scores":	[-7.56871302989917]
								}, {
									"case":	162,
									"scores":	[-7.56871302989917]
								}, {
									"case":	163,
									"scores":	[-7.56871302989917]
								}, {
									"case":	164,
									"scores":	[-7.56871302989917]
								}, {
									"case":	165,
									"scores":	[-7.56871302989917]
								}, {
									"case":	166,
									"scores":	[-7.56871302989917]
								}, {
									"case":	167,
									"scores":	[-7.56871302989917]
								}, {
									"case":	168,
									"scores":	[-7.56871302989917]
								}, {
									"case":	169,
									"scores":	[-7.56871302989917]
								}, {
									"case":	170,
									"scores":	[-7.56871302989917]
								}, {
									"case":	171,
									"scores":	[-7.56871302989917]
								}, {
									"case":	172,
									"scores":	[-7.56871302989917]
								}, {
									"case":	173,
									"scores":	[-7.56871302989917]
								}, {
									"case":	174,
									"scores":	[-7.56871302989917]
								}, {
									"case":	175,
									"scores":	[-7.56871302989917]
								}, {
									"case":	176,
									"scores":	[-7.56871302989917]
								}, {
									"case":	177,
									"scores":	[-7.56871302989917]
								}, {
									"case":	178,
									"scores":	[-7.56871302989917]
								}, {
									"case":	179,
									"scores":	[-7.56871302989917]
								}, {
									"case":	180,
									"scores":	[-7.56871302989917]
								}, {
									"case":	181,
									"scores":	[-7.56871302989917]
								}, {
									"case":	182,
									"scores":	[-7.56871302989917]
								}, {
									"case":	183,
									"scores":	[-7.56871302989917]
								}, {
									"case":	184,
									"scores":	[-7.56871302989917]
								}, {
									"case":	185,
									"scores":	[-7.56871302989917]
								}, {
									"case":	186,
									"scores":	[-7.56871302989917]
								}, {
									"case":	187,
									"scores":	[-7.56871302989917]
								}, {
									"case":	188,
									"scores":	[-7.56871302989917]
								}, {
									"case":	189,
									"scores":	[-7.56871302989917]
								}, {
									"case":	190,
									"scores":	[-7.56871302989917]
								}, {
									"case":	191,
									"scores":	[-7.56871302989917]
								}, {
									"case":	192,
									"scores":	[-7.56871302989917]
								}, {
									"case":	193,
									"scores":	[-7.56871302989917]
								}, {
									"case":	194,
									"scores":	[-7.56871302989917]
								}, {
									"case":	195,
									"scores":	[-7.56871302989917]
								}, {
									"case":	196,
									"scores":	[-7.56871302989917]
								}, {
									"case":	197,
									"scores":	[-7.56871302989917]
								}, {
									"case":	198,
									"scores":	[-7.56871302989917]
								}, {
									"case":	199,
									"scores":	[-7.56871302989917]
								}, {
									"case":	200,
									"scores":	[-7.56871302989917]
								}, {
									"case":	201,
									"scores":	[-7.56871302989917]
								}, {
									"case":	202,
									"scores":	[-7.56871302989917]
								}, {
									"case":	203,
									"scores":	[-7.56871302989917]
								}, {
									"case":	204,
									"scores":	[-7.56871302989917]
								}, {
									"case":	205,
									"scores":	[-7.56871302989917]
								}, {
									"case":	206,
									"scores":	[-7.56871302989917]
								}, {
									"case":	207,
									"scores":	[-7.56871302989917]
								}, {
									"case":	208,
									"scores":	[-7.56871302989917]
								}, {
									"case":	209,
									"scores":	[-7.56871302989917]
								}, {
									"case":	210,
									"scores":	[-7.56871302989917]
								}, {
									"case":	211,
									"scores":	[-7.56871302989917]
								}, {
									"case":	212,
									"scores":	[-7.56871302989917]
								}, {
									"case":	213,
									"scores":	[-7.56871302989917]
								}, {
									"case":	214,
									"scores":	[-7.56871302989917]
								}, {
									"case":	215,
									"scores":	[-7.56871302989917]
								}, {
									"case":	216,
									"scores":	[-7.56871302989917]
								}, {
									"case":	217,
									"scores":	[-7.56871302989917]
								}, {
									"case":	218,
									"scores":	[-7.56871302989917]
								}, {
									"case":	219,
									"scores":	[-7.56871302989917]
								}, {
									"case":	220,
									"scores":	[-7.56871302989917]
								}, {
									"case":	221,
									"scores":	[-7.56871302989917]
								}, {
									"case":	222,
									"scores":	[-7.56871302989917]
								}, {
									"case":	223,
									"scores":	[-7.56871302989917]
								}, {
									"case":	224,
									"scores":	[-7.56871302989917]
								}, {
									"case":	225,
									"scores":	[-7.56871302989917]
								}, {
									"case":	226,
									"scores":	[-7.56871302989917]
								}, {
									"case":	227,
									"scores":	[-7.56871302989917]
								}, {
									"case":	228,
									"scores":	[-7.56871302989917]
								}, {
									"case":	229,
									"scores":	[-7.56871302989917]
								}, {
									"case":	230,
									"scores":	[-7.56871302989917]
								}, {
									"case":	231,
									"scores":	[-7.56871302989917]
								}, {
									"case":	232,
									"scores":	[-7.56871302989917]
								}, {
									"case":	233,
									"scores":	[-7.56871302989917]
								}, {
									"case":	234,
									"scores":	[-7.56871302989917]
								}, {
									"case":	235,
									"scores":	[-7.56871302989917]
								}, {
									"case":	236,
									"scores":	[-7.56871302989917]
								}, {
									"case":	237,
									"scores":	[-7.56871302989917]
								}, {
									"case":	238,
									"scores":	[-7.56871302989917]
								}, {
									"case":	239,
									"scores":	[-7.56871302989917]
								}, {
									"case":	240,
									"scores":	[-7.56871302989917]
								}, {
									"case":	241,
									"scores":	[-7.56871302989917]
								}, {
									"case":	242,
									"scores":	[-7.56871302989917]
								}, {
									"case":	243,
									"scores":	[-7.56871302989917]
								}, {
									"case":	244,
									"scores":	[-7.56871302989917]
								}, {
									"case":	245,
									"scores":	[-7.56871302989917]
								}, {
									"case":	246,
									"scores":	[-7.56871302989917]
								}, {
									"case":	247,
									"scores":	[-7.56871302989917]
								}, {
									"case":	248,
									"scores":	[-7.56871302989917]
								}, {
									"case":	249,
									"scores":	[-7.56871302989917]
								}, {
									"case":	250,
									"scores":	[-7.56871302989917]
								}, {
									"case":	251,
									"scores":	[-7.56871302989917]
								}, {
									"case":	252,
									"scores":	[-7.56871302989917]
								}, {
									"case":	253,
									"scores":	[-7.56871302989917]
								}, {
									"case":	254,
									"scores":	[-7.56871302989917]
								}, {
									"case":	255,
									"scores":	[-7.56871302989917]
								}, {
									"case":	256,
									"scores":	[-7.56871302989917]
								}, {
									"case":	257,
									"scores":	[-7.56871302989917]
								}, {
									"case":	258,
									"scores":	[-7.56871302989917]
								}, {
									"case":	259,
									"scores":	[-7.56871302989917]
								}, {
									"case":	260,
									"scores":	[-7.56871302989917]
								}, {
									"case":	261,
									"scores":	[-7.56871302989917]
								}, {
									"case":	262,
									"scores":	[-7.56871302989917]
								}, {
									"case":	263,
									"scores":	[-7.56871302989917]
								}, {
									"case":	264,
									"scores":	[-7.56871302989917]
								}, {
									"case":	265,
									"scores":	[-7.56871302989917]
								}, {
									"case":	266,
									"scores":	[-7.56871302989917]
								}, {
									"case":	267,
									"scores":	[-7.56871302989917]
								}, {
									"case":	268,
									"scores":	[-7.56871302989917]
								}, {
									"case":	269,
									"scores":	[-7.56871302989917]
								}, {
									"case":	270,
									"scores":	[-7.56871302989917]
								}, {
									"case":	271,
									"scores":	[-7.56871302989917]
								}, {
									"case":	272,
									"scores":	[-7.56871302989917]
								}, {
									"case":	273,
									"scores":	[-7.56871302989917]
								}, {
									"case":	274,
									"scores":	[-7.56871302989917]
								}, {
									"case":	275,
									"scores":	[-7.56871302989917]
								}, {
									"case":	276,
									"scores":	[-7.56871302989917]
								}, {
									"case":	277,
									"scores":	[-7.56871302989917]
								}, {
									"case":	278,
									"scores":	[-7.56871302989917]
								}, {
									"case":	279,
									"scores":	[-7.56871302989917]
								}, {
									"case":	280,
									"scores":	[-7.56871302989917]
								}, {
									"case":	281,
									"scores":	[-7.56871302989917]
								}, {
									"case":	282,
									"scores":	[-7.56871302989917]
								}, {
									"case":	283,
									"scores":	[-7.56871302989917]
								}, {
									"case":	284,
									"scores":	[-7.56871302989917]
								}, {
									"case":	285,
									"scores":	[-7.56871302989917]
								}, {
									"case":	286,
									"scores":	[-7.56871302989917]
								}, {
									"case":	287,
									"scores":	[-7.56871302989917]
								}, {
									"case":	288,
									"scores":	[-7.56871302989917]
								}, {
									"case":	289,
									"scores":	[-7.56871302989917]
								}, {
									"case":	290,
									"scores":	[-7.56871302989917]
								}, {
									"case":	291,
									"scores":	[-7.56871302989917]
								}, {
									"case":	292,
									"scores":	[-7.56871302989917]
								}, {
									"case":	293,
									"scores":	[-7.56871302989917]
								}, {
									"case":	294,
									"scores":	[-7.56871302989917]
								}, {
									"case":	295,
									"scores":	[-7.56871302989917]
								}, {
									"case":	296,
									"scores":	[-7.56871302989917]
								}, {
									"case":	297,
									"scores":	[-7.56871302989917]
								}, {
									"case":	298,
									"scores":	[-7.56871302989917]
								}, {
									"case":	299,
									"scores":	[-7.56871302989917]
								}, {
									"case":	300,
									"scores":	[-7.56871302989917]
								}, {
									"case":	301,
									"scores":	[-7.56871302989917]
								}, {
									"case":	302,
									"scores":	[-7.56871302989917]
								}, {
									"case":	303,
									"scores":	[-7.56871302989917]
								}, {
									"case":	304,
									"scores":	[-7.56871302989917]
								}, {
									"case":	305,
									"scores":	[-7.56871302989917]
								}, {
									"case":	306,
									"scores":	[-7.56871302989917]
								}, {
									"case":	307,
									"scores":	[-7.56871302989917]
								}, {
									"case":	308,
									"scores":	[-7.56871302989917]
								}, {
									"case":	309,
									"scores":	[-7.56871302989917]
								}, {
									"case":	310,
									"scores":	[-7.56871302989917]
								}, {
									"case":	311,
									"scores":	[-7.56871302989917]
								}, {
									"case":	312,
									"scores":	[-7.56871302989917]
								}, {
									"case":	313,
									"scores":	[-7.56871302989917]
								}, {
									"case":	314,
									"scores":	[-7.56871302989917]
								}, {
									"case":	315,
									"scores":	[-7.56871302989917]
								}, {
									"case":	316,
									"scores":	[-7.56871302989917]
								}, {
									"case":	317,
									"scores":	[-7.56871302989917]
								}, {
									"case":	318,
									"scores":	[-7.56871302989917]
								}, {
									"case":	319,
									"scores":	[-7.56871302989917]
								}, {
									"case":	320,
									"scores":	[-7.56871302989917]
								}, {
									"case":	321,
									"scores":	[-7.56871302989917]
								}, {
									"case":	322,
									"scores":	[-7.56871302989917]
								}, {
									"case":	323,
									"scores":	[-7.56871302989917]
								}, {
									"case":	324,
									"scores":	[-7.56871302989917]
								}, {
									"case":	325,
									"scores":	[-7.56871302989917]
								}, {
									"case":	326,
									"scores":	[-7.56871302989917]
								}, {
									"case":	327,
									"scores":	[-7.56871302989917]
								}, {
									"case":	328,
									"scores":	[-7.56871302989917]
								}, {
									"case":	329,
									"scores":	[-7.56871302989917]
								}, {
									"case":	330,
									"scores":	[-7.56871302989917]
								}, {
									"case":	331,
									"scores":	[-7.56871302989917]
								}, {
									"case":	332,
									"scores":	[-7.56871302989917]
								}, {
									"case":	333,
									"scores":	[-7.56871302989917]
								}, {
									"case":	334,
									"scores":	[-7.56871302989917]
								}, {
									"case":	335,
									"scores":	[-7.56871302989917]
								}, {
									"case":	336,
									"scores":	[-7.56871302989917]
								}, {
									"case":	337,
									"scores":	[-7.56871302989917]
								}, {
									"case":	338,
									"scores":	[-7.56871302989917]
								}, {
									"case":	339,
									"scores":	[-7.56871302989917]
								}, {
									"case":	340,
									"scores":	[-7.56871302989917]
								}, {
									"case":	341,
									"scores":	[-7.56871302989917]
								}, {
									"case":	342,
									"scores":	[-7.56871302989917]
								}, {
									"case":	343,
									"scores":	[-7.56871302989917]
								}, {
									"case":	344,
									"scores":	[-7.56871302989917]
								}, {
									"case":	345,
									"scores":	[-7.56871302989917]
								}, {
									"case":	346,
									"scores":	[-7.56871302989917]
								}, {
									"case":	347,
									"scores":	[-7.56871302989917]
								}, {
									"case":	348,
									"scores":	[-7.56871302989917]
								}, {
									"case":	349,
									"scores":	[-7.56871302989917]
								}, {
									"case":	350,
									"scores":	[-7.56871302989917]
								}, {
									"case":	351,
									"scores":	[-7.56871302989917]
								}, {
									"case":	352,
									"scores":	[-7.56871302989917]
								}, {
									"case":	353,
									"scores":	[-7.56871302989917]
								}, {
									"case":	354,
									"scores":	[-7.56871302989917]
								}, {
									"case":	355,
									"scores":	[-7.56871302989917]
								}, {
									"case":	356,
									"scores":	[-7.56871302989917]
								}, {
									"case":	357,
									"scores":	[-7.56871302989917]
								}, {
									"case":	358,
									"scores":	[-7.56871302989917]
								}, {
									"case":	359,
									"scores":	[-7.56871302989917]
								}, {
									"case":	360,
									"scores":	[-7.56871302989917]
								}, {
									"case":	361,
									"scores":	[-7.56871302989917]
								}, {
									"case":	362,
									"scores":	[-7.56871302989917]
								}, {
									"case":	363,
									"scores":	[-7.56871302989917]
								}, {
									"case":	364,
									"scores":	[-7.56871302989917]
								}, {
									"case":	365,
									"scores":	[-7.56871302989917]
								}, {
									"case":	366,
									"scores":	[-7.56871302989917]
								}, {
									"case":	367,
									"scores":	[-7.56871302989917]
								}, {
									"case":	368,
									"scores":	[-7.56871302989917]
								}, {
									"case":	369,
									"scores":	[-7.56871302989917]
								}, {
									"case":	370,
									"scores":	[-7.56871302989917]
								}, {
									"case":	371,
									"scores":	[-7.56871302989917]
								}, {
									"case":	372,
									"scores":	[-7.56871302989917]
								}, {
									"case":	373,
									"scores":	[-7.56871302989917]
								}, {
									"case":	374,
									"scores":	[-7.56871302989917]
								}, {
									"case":	375,
									"scores":	[-7.56871302989917]
								}, {
									"case":	376,
									"scores":	[-7.56871302989917]
								}, {
									"case":	377,
									"scores":	[-7.56871302989917]
								}, {
									"case":	378,
									"scores":	[-7.56871302989917]
								}, {
									"case":	379,
									"scores":	[-7.56871302989917]
								}, {
									"case":	380,
									"scores":	[-7.56871302989917]
								}, {
									"case":	381,
									"scores":	[-7.56871302989917]
								}, {
									"case":	382,
									"scores":	[-7.56871302989917]
								}, {
									"case":	383,
									"scores":	[-7.56871302989917]
								}, {
									"case":	384,
									"scores":	[-7.56871302989917]
								}, {
									"case":	385,
									"scores":	[-7.56871302989917]
								}, {
									"case":	386,
									"scores":	[-7.56871302989917]
								}, {
									"case":	387,
									"scores":	[-7.56871302989917]
								}, {
									"case":	388,
									"scores":	[-7.56871302989917]
								}, {
									"case":	389,
									"scores":	[-7.56871302989917]
								}, {
									"case":	390,
									"scores":	[-7.56871302989917]
								}, {
									"case":	391,
									"scores":	[-7.56871302989917]
								}, {
									"case":	392,
									"scores":	[-7.56871302989917]
								}, {
									"case":	393,
									"scores":	[-7.56871302989917]
								}, {
									"case":	394,
									"scores":	[-7.56871302989917]
								}, {
									"case":	395,
									"scores":	[-7.56871302989917]
								}, {
									"case":	396,
									"scores":	[-7.56871302989917]
								}, {
									"case":	397,
									"scores":	[-7.56871302989917]
								}, {
									"case":	398,
									"scores":	[-7.56871302989917]
								}, {
									"case":	399,
									"scores":	[-7.56871302989917]
								}, {
									"case":	400,
									"scores":	[-7.56871302989917]
								}, {
									"case":	401,
									"scores":	[-7.56871302989917]
								}, {
									"case":	402,
									"scores":	[-7.56871302989917]
								}, {
									"case":	403,
									"scores":	[-7.56871302989917]
								}, {
									"case":	404,
									"scores":	[-7.56871302989917]
								}, {
									"case":	405,
									"scores":	[-7.56871302989917]
								}, {
									"case":	406,
									"scores":	[-7.56871302989917]
								}, {
									"case":	407,
									"scores":	[-7.56871302989917]
								}, {
									"case":	408,
									"scores":	[-7.56871302989917]
								}, {
									"case":	409,
									"scores":	[-7.56871302989917]
								}, {
									"case":	410,
									"scores":	[-7.56871302989917]
								}, {
									"case":	411,
									"scores":	[-7.56871302989917]
								}, {
									"case":	412,
									"scores":	[-7.56871302989917]
								}, {
									"case":	413,
									"scores":	[-7.56871302989917]
								}, {
									"case":	414,
									"scores":	[-7.56871302989917]
								}, {
									"case":	415,
									"scores":	[-7.56871302989917]
								}, {
									"case":	416,
									"scores":	[-7.56871302989917]
								}, {
									"case":	417,
									"scores":	[-7.56871302989917]
								}, {
									"case":	418,
									"scores":	[-7.56871302989917]
								}, {
									"case":	419,
									"scores":	[-7.56871302989917]
								}, {
									"case":	420,
									"scores":	[-7.56871302989917]
								}, {
									"case":	421,
									"scores":	[-7.56871302989917]
								}, {
									"case":	422,
									"scores":	[-7.56871302989917]
								}, {
									"case":	423,
									"scores":	[-7.56871302989917]
								}, {
									"case":	424,
									"scores":	[-7.56871302989917]
								}, {
									"case":	425,
									"scores":	[-7.56871302989917]
								}, {
									"case":	426,
									"scores":	[-7.56871302989917]
								}, {
									"case":	427,
									"scores":	[-7.56871302989917]
								}, {
									"case":	428,
									"scores":	[-7.56871302989917]
								}, {
									"case":	429,
									"scores":	[-7.56871302989917]
								}, {
									"case":	430,
									"scores":	[-7.56871302989917]
								}, {
									"case":	431,
									"scores":	[-7.56871302989917]
								}, {
									"case":	432,
									"scores":	[-7.56871302989917]
								}, {
									"case":	433,
									"scores":	[-7.56871302989917]
								}, {
									"case":	434,
									"scores":	[-7.56871302989917]
								}, {
									"case":	435,
									"scores":	[-7.56871302989917]
								}, {
									"case":	436,
									"scores":	[-7.56871302989917]
								}, {
									"case":	437,
									"scores":	[-7.56871302989917]
								}, {
									"case":	438,
									"scores":	[-7.56871302989917]
								}, {
									"case":	439,
									"scores":	[-7.56871302989917]
								}, {
									"case":	440,
									"scores":	[-7.56871302989917]
								}, {
									"case":	441,
									"scores":	[-7.56871302989917]
								}, {
									"case":	442,
									"scores":	[-7.56871302989917]
								}, {
									"case":	443,
									"scores":	[-7.56871302989917]
								}, {
									"case":	444,
									"scores":	[-7.56871302989917]
								}, {
									"case":	445,
									"scores":	[-7.56871302989917]
								}, {
									"case":	446,
									"scores":	[-7.56871302989917]
								}, {
									"case":	447,
									"scores":	[-7.56871302989917]
								}, {
									"case":	448,
									"scores":	[-7.56871302989917]
								}, {
									"case":	449,
									"scores":	[-7.56871302989917]
								}, {
									"case":	450,
									"scores":	[-7.56871302989917]
								}, {
									"case":	451,
									"scores":	[-7.56871302989917]
								}, {
									"case":	452,
									"scores":	[-7.56871302989917]
								}, {
									"case":	453,
									"scores":	[-7.56871302989917]
								}, {
									"case":	454,
									"scores":	[-7.56871302989917]
								}, {
									"case":	455,
									"scores":	[-7.56871302989917]
								}, {
									"case":	456,
									"scores":	[-7.56871302989917]
								}, {
									"case":	457,
									"scores":	[-7.56871302989917]
								}, {
									"case":	458,
									"scores":	[-7.56871302989917]
								}, {
									"case":	459,
									"scores":	[-7.56871302989917]
								}, {
									"case":	460,
									"scores":	[-7.56871302989917]
								}, {
									"case":	461,
									"scores":	[-7.56871302989917]
								}, {
									"case":	462,
									"scores":	[-7.56871302989917]
								}, {
									"case":	463,
									"scores":	[-7.56871302989917]
								}, {
									"case":	464,
									"scores":	[-7.56871302989917]
								}, {
									"case":	465,
									"scores":	[-7.56871302989917]
								}, {
									"case":	466,
									"scores":	[-7.56871302989917]
								}, {
									"case":	467,
									"scores":	[-7.56871302989917]
								}, {
									"case":	468,
									"scores":	[-7.56871302989917]
								}, {
									"case":	469,
									"scores":	[-7.56871302989917]
								}, {
									"case":	470,
									"scores":	[-7.56871302989917]
								}, {
									"case":	471,
									"scores":	[-7.56871302989917]
								}, {
									"case":	472,
									"scores":	[-7.56871302989917]
								}, {
									"case":	473,
									"scores":	[-7.56871302989917]
								}, {
									"case":	474,
									"scores":	[-7.56871302989917]
								}, {
									"case":	475,
									"scores":	[-7.56871302989917]
								}, {
									"case":	476,
									"scores":	[-7.56871302989917]
								}, {
									"case":	477,
									"scores":	[-7.56871302989917]
								}, {
									"case":	478,
									"scores":	[-7.56871302989917]
								}, {
									"case":	479,
									"scores":	[-7.56871302989917]
								}, {
									"case":	480,
									"scores":	[-7.56871302989917]
								}, {
									"case":	481,
									"scores":	[-7.56871302989917]
								}, {
									"case":	482,
									"scores":	[-7.56871302989917]
								}, {
									"case":	483,
									"scores":	[-7.56871302989917]
								}, {
									"case":	484,
									"scores":	[-7.56871302989917]
								}, {
									"case":	485,
									"scores":	[-7.56871302989917]
								}, {
									"case":	486,
									"scores":	[-7.56871302989917]
								}, {
									"case":	487,
									"scores":	[-7.56871302989917]
								}, {
									"case":	488,
									"scores":	[-7.56871302989917]
								}, {
									"case":	489,
									"scores":	[-7.56871302989917]
								}, {
									"case":	490,
									"scores":	[-7.56871302989917]
								}, {
									"case":	491,
									"scores":	[-7.56871302989917]
								}, {
									"case":	492,
									"scores":	[-7.56871302989917]
								}, {
									"case":	493,
									"scores":	[-7.56871302989917]
								}, {
									"case":	494,
									"scores":	[-7.56871302989917]
								}, {
									"case":	495,
									"scores":	[-7.56871302989917]
								}, {
									"case":	496,
									"scores":	[-7.56871302989917]
								}, {
									"case":	497,
									"scores":	[-7.56871302989917]
								}, {
									"case":	498,
									"scores":	[-7.56871302989917]
								}, {
									"case":	499,
									"scores":	[-7.56871302989917]
								}, {
									"case":	500,
									"scores":	[-7.56871302989917]
								}, {
									"case":	501,
									"scores":	[-7.56871302989917]
								}, {
									"case":	502,
									"scores":	[-7.56871302989917]
								}, {
									"case":	503,
									"scores":	[-7.56871302989917]
								}, {
									"case":	504,
									"scores":	[-7.56871302989917]
								}, {
									"case":	505,
									"scores":	[-7.56871302989917]
								}, {
									"case":	506,
									"scores":	[-7.56871302989917]
								}, {
									"case":	507,
									"scores":	[-7.56871302989917]
								}, {
									"case":	508,
									"scores":	[-7.56871302989917]
								}, {
									"case":	509,
									"scores":	[-7.56871302989917]
								}, {
									"case":	510,
									"scores":	[-7.56871302989917]
								}, {
									"case":	511,
									"scores":	[-7.56871302989917]
								}, {
									"case":	512,
									"scores":	[-7.56871302989917]
								}, {
									"case":	513,
									"scores":	[-7.56871302989917]
								}, {
									"case":	514,
									"scores":	[-7.56871302989917]
								}, {
									"case":	515,
									"scores":	[-7.56871302989917]
								}, {
									"case":	516,
									"scores":	[-7.56871302989917]
								}, {
									"case":	517,
									"scores":	[-7.56871302989917]
								}, {
									"case":	518,
									"scores":	[-7.56871302989917]
								}, {
									"case":	519,
									"scores":	[-7.56871302989917]
								}, {
									"case":	520,
									"scores":	[-7.56871302989917]
								}, {
									"case":	521,
									"scores":	[-7.56871302989917]
								}, {
									"case":	522,
									"scores":	[-7.56871302989917]
								}, {
									"case":	523,
									"scores":	[-7.56871302989917]
								}, {
									"case":	524,
									"scores":	[-7.56871302989917]
								}, {
									"case":	525,
									"scores":	[-7.56871302989917]
								}, {
									"case":	526,
									"scores":	[-7.56871302989917]
								}, {
									"case":	527,
									"scores":	[-7.56871302989917]
								}, {
									"case":	528,
									"scores":	[-7.56871302989917]
								}, {
									"case":	529,
									"scores":	[-7.56871302989917]
								}, {
									"case":	530,
									"scores":	[-7.56871302989917]
								}, {
									"case":	531,
									"scores":	[-7.56871302989917]
								}, {
									"case":	532,
									"scores":	[-7.56871302989917]
								}, {
									"case":	533,
									"scores":	[-7.56871302989917]
								}, {
									"case":	534,
									"scores":	[-7.56871302989917]
								}, {
									"case":	535,
									"scores":	[-7.56871302989917]
								}, {
									"case":	536,
									"scores":	[-7.56871302989917]
								}, {
									"case":	537,
									"scores":	[-7.56871302989917]
								}, {
									"case":	538,
									"scores":	[-7.56871302989917]
								}, {
									"case":	539,
									"scores":	[-7.56871302989917]
								}, {
									"case":	540,
									"scores":	[-7.56871302989917]
								}, {
									"case":	541,
									"scores":	[-7.56871302989917]
								}, {
									"case":	542,
									"scores":	[-7.56871302989917]
								}, {
									"case":	543,
									"scores":	[-7.56871302989917]
								}, {
									"case":	544,
									"scores":	[-7.56871302989917]
								}, {
									"case":	545,
									"scores":	[-7.56871302989917]
								}, {
									"case":	546,
									"scores":	[-7.56871302989917]
								}, {
									"case":	547,
									"scores":	[-7.56871302989917]
								}, {
									"case":	548,
									"scores":	[-7.56871302989917]
								}, {
									"case":	549,
									"scores":	[-7.56871302989917]
								}, {
									"case":	550,
									"scores":	[-7.56871302989917]
								}, {
									"case":	551,
									"scores":	[-7.56871302989917]
								}, {
									"case":	552,
									"scores":	[-7.56871302989917]
								}, {
									"case":	553,
									"scores":	[-7.56871302989917]
								}, {
									"case":	554,
									"scores":	[-7.56871302989917]
								}, {
									"case":	555,
									"scores":	[-7.56871302989917]
								}, {
									"case":	556,
									"scores":	[-7.56871302989917]
								}, {
									"case":	557,
									"scores":	[-7.56871302989917]
								}, {
									"case":	558,
									"scores":	[-7.56871302989917]
								}, {
									"case":	559,
									"scores":	[-7.56871302989917]
								}, {
									"case":	560,
									"scores":	[-7.56871302989917]
								}, {
									"case":	561,
									"scores":	[-7.56871302989917]
								}, {
									"case":	562,
									"scores":	[-7.56871302989917]
								}, {
									"case":	563,
									"scores":	[-7.56871302989917]
								}, {
									"case":	564,
									"scores":	[-7.56871302989917]
								}, {
									"case":	565,
									"scores":	[-7.56871302989917]
								}, {
									"case":	566,
									"scores":	[-7.56871302989917]
								}, {
									"case":	567,
									"scores":	[-7.56871302989917]
								}, {
									"case":	568,
									"scores":	[-7.56871302989917]
								}, {
									"case":	569,
									"scores":	[-7.56871302989917]
								}, {
									"case":	570,
									"scores":	[-7.56871302989917]
								}, {
									"case":	571,
									"scores":	[-7.56871302989917]
								}, {
									"case":	572,
									"scores":	[-7.56871302989917]
								}, {
									"case":	573,
									"scores":	[-7.56871302989917]
								}, {
									"case":	574,
									"scores":	[-7.56871302989917]
								}, {
									"case":	575,
									"scores":	[-7.56871302989917]
								}, {
									"case":	576,
									"scores":	[-7.56871302989917]
								}, {
									"case":	577,
									"scores":	[-7.56871302989917]
								}, {
									"case":	578,
									"scores":	[-7.56871302989917]
								}, {
									"case":	579,
									"scores":	[-7.56871302989917]
								}, {
									"case":	580,
									"scores":	[-7.56871302989917]
								}, {
									"case":	581,
									"scores":	[-7.56871302989917]
								}, {
									"case":	582,
									"scores":	[-7.56871302989917]
								}, {
									"case":	583,
									"scores":	[-7.56871302989917]
								}, {
									"case":	584,
									"scores":	[-7.56871302989917]
								}, {
									"case":	585,
									"scores":	[-7.56871302989917]
								}, {
									"case":	586,
									"scores":	[-7.56871302989917]
								}, {
									"case":	587,
									"scores":	[-7.56871302989917]
								}, {
									"case":	588,
									"scores":	[-7.56871302989917]
								}, {
									"case":	589,
									"scores":	[-7.56871302989917]
								}, {
									"case":	590,
									"scores":	[-7.56871302989917]
								}, {
									"case":	591,
									"scores":	[-7.56871302989917]
								}, {
									"case":	592,
									"scores":	[-7.56871302989917]
								}, {
									"case":	593,
									"scores":	[-7.56871302989917]
								}, {
									"case":	594,
									"scores":	[-7.56871302989917]
								}, {
									"case":	595,
									"scores":	[-7.56871302989917]
								}, {
									"case":	596,
									"scores":	[-7.56871302989917]
								}, {
									"case":	597,
									"scores":	[-7.56871302989917]
								}, {
									"case":	598,
									"scores":	[-7.56871302989917]
								}, {
									"case":	599,
									"scores":	[-7.56871302989917]
								}, {
									"case":	600,
									"scores":	[-7.56871302989917]
								}, {
									"case":	601,
									"scores":	[-7.56871302989917]
								}, {
									"case":	602,
									"scores":	[-7.56871302989917]
								}, {
									"case":	603,
									"scores":	[-7.56871302989917]
								}, {
									"case":	604,
									"scores":	[-7.56871302989917]
								}, {
									"case":	605,
									"scores":	[-7.56871302989917]
								}, {
									"case":	606,
									"scores":	[-7.56871302989917]
								}, {
									"case":	607,
									"scores":	[-7.56871302989917]
								}, {
									"case":	608,
									"scores":	[-7.56871302989917]
								}, {
									"case":	609,
									"scores":	[-7.56871302989917]
								}, {
									"case":	610,
									"scores":	[-7.56871302989917]
								}, {
									"case":	611,
									"scores":	[-7.56871302989917]
								}, {
									"case":	612,
									"scores":	[-7.56871302989917]
								}, {
									"case":	613,
									"scores":	[-7.56871302989917]
								}, {
									"case":	614,
									"scores":	[-9.87207534289917, -9.89034816969917, -10.43823199989917, -9.30201985489917, -11.206164516599168, -10.373010342899169, -10.371059739699168, -10.408160139699168, -10.371059739699168, -10.162121225899169, -10.371059739699168, -10.371059739699168, -10.125020825899169, -10.125020825899169, -10.371059739699168, -10.371059739699168, -10.371059739699168, -10.373010342899169, -10.408160139699168, -10.43823199989917]
								}]
						}, {
							"switch":	5,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	343,
							"begin_column":	2,
							"end_line":	343,
							"end_column":	36,
							"patch_codes":	["if (!__is_neg(\"\", \"L343\", 20, &(filename), sizeof (filename), &(zfilename), sizeof (zfilename), &((zfilename)->refcount__gc), sizeof ((zfilename)->refcount__gc), &((zfilename)->is_ref__gc), sizeof ((zfilename)->is_ref__gc), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(us), sizeof (us), &(context), sizeof (context), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(old_in_user_include), sizeof (old_in_user_include), &(call_result), sizeof (call_result), &(uwrap), sizeof (uwrap), &(zretval), sizeof (zretval), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &((zfilename)->type), sizeof ((zfilename)->type)))\n    do {\n        const char *__s = (filename);\n        zval *__z = (zfilename);\n        (*__z).value.str.len = strlen(__s);\n        (*__z).value.str.val = (1 ? _estrndup((__s), ((*__z).value.str.len)) : (char *)__s);\n        (*__z).type = 6;\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.66240906989917, -8.38909062039917, -8.42364307989917, -8.68931321989917, -9.38241255779917, -8.98442009989917, -8.97869739989917, -9.27304819989917, -8.97869739989917, -8.51516009989917, -8.97869739989917, -8.97869739989917, -8.22080929989917, -8.22080929989917, -8.97869739989917, -8.97869739989917, -8.97869739989917, -8.98442009989917, -9.27304819989917, -8.42364307989917]
								}]
						}]
				}, {
					"line":	343,
					"switches":	[{
							"switch":	6,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	344,
							"begin_column":	0,
							"end_line":	344,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L344\", 20, &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zmode), sizeof (zmode), &((zfilename)->refcount__gc), sizeof ((zfilename)->refcount__gc), &((zfilename)->is_ref__gc), sizeof ((zfilename)->is_ref__gc), &(mode), sizeof (mode), &(us), sizeof (us), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(context), sizeof (context), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(old_in_user_include), sizeof (old_in_user_include), &(zretval), sizeof (zretval), &(uwrap), sizeof (uwrap), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &((zfilename)->type), sizeof ((zfilename)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	2,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	3,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	4,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	5,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	6,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	7,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	8,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	9,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	10,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	11,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	12,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	13,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	14,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	15,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	16,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	17,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	18,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	19,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	20,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	21,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	22,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	23,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	24,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	25,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	26,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	27,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	28,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	29,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	30,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	31,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	32,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	33,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	34,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	35,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	36,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	37,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	38,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	39,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	40,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	41,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	42,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	43,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	44,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	45,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	46,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	47,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	48,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	49,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	50,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	51,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	52,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	53,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	54,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	55,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	56,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	57,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	58,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	59,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	60,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	61,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	62,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	63,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	64,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	65,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	66,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	67,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	68,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	69,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	70,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	71,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	72,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	73,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	74,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	75,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	76,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	77,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	78,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	79,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	80,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	81,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	82,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	83,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	84,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	85,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	86,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	87,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	88,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	89,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	90,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	91,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	92,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	93,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	94,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	95,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	96,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	97,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	98,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	99,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	100,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	101,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	102,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	103,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	104,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	105,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	106,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	107,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	108,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	109,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	110,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	111,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	112,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	113,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	114,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	115,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	116,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	117,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	118,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	119,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	120,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	121,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	122,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	123,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	124,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	125,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	126,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	127,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	128,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	129,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	130,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	131,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	132,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	133,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	134,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	135,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	136,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	137,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	138,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	139,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	140,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	141,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	142,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	143,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	144,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	145,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	146,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	147,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	148,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	149,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	150,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	151,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	152,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	153,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	154,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	155,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	156,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	157,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	158,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	159,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	160,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	161,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	162,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	163,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	164,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	165,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	166,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	167,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	168,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	169,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	170,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	171,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	172,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	173,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	174,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	175,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	176,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	177,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	178,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	179,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	180,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	181,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	182,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	183,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	184,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	185,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	186,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	187,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	188,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	189,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	190,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	191,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	192,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	193,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	194,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	195,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	196,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	197,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	198,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	199,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	200,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	201,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	202,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	203,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	204,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	205,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	206,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	207,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	208,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	209,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	210,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	211,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	212,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	213,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	214,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	215,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	216,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	217,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	218,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	219,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	220,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	221,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	222,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	223,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	224,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	225,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	226,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	227,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	228,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	229,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	230,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	231,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	232,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	233,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	234,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	235,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	236,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	237,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	238,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	239,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	240,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	241,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	242,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	243,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	244,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	245,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	246,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	247,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	248,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	249,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	250,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	251,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	252,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	253,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	254,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	255,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	256,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	257,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	258,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	259,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	260,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	261,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	262,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	263,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	264,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	265,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	266,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	267,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	268,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	269,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	270,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	271,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	272,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	273,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	274,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	275,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	276,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	277,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	278,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	279,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	280,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	281,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	282,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	283,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	284,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	285,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	286,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	287,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	288,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	289,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	290,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	291,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	292,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	293,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	294,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	295,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	296,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	297,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	298,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	299,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	300,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	301,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	302,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	303,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	304,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	305,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	306,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	307,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	308,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	309,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	310,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	311,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	312,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	313,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	314,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	315,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	316,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	317,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	318,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	319,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	320,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	321,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	322,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	323,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	324,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	325,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	326,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	327,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	328,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	329,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	330,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	331,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	332,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	333,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	334,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	335,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	336,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	337,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	338,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	339,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	340,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	341,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	342,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	343,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	344,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	345,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	346,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	347,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	348,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	349,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	350,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	351,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	352,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	353,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	354,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	355,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	356,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	357,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	358,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	359,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	360,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	361,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	362,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	363,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	364,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	365,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	366,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	367,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	368,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	369,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	370,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	371,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	372,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	373,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	374,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	375,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	376,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	377,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	378,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	379,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	380,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	381,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	382,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	383,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	384,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	385,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	386,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	387,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	388,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	389,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	390,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	391,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	392,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	393,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	394,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	395,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	396,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	397,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	398,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	399,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	400,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	401,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	402,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	403,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	404,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	405,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	406,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	407,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	408,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	409,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	410,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	411,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	412,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	413,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	414,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	415,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	416,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	417,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	418,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	419,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	420,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	421,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	422,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	423,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	424,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	425,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	426,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	427,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	428,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	429,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	430,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	431,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	432,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	433,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	434,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	435,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	436,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	437,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	438,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	439,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	440,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	441,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	442,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	443,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	444,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	445,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	446,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	447,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	448,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	449,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	450,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	451,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	452,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	453,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	454,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	455,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	456,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	457,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	458,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	459,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	460,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	461,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	462,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	463,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	464,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	465,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	466,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	467,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	468,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	469,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	470,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	471,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	472,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	473,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	474,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	475,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	476,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	477,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	478,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	479,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	480,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	481,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	482,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	483,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	484,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	485,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	486,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	487,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	488,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	489,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	490,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	491,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	492,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	493,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	494,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	495,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	496,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	497,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	498,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	499,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	500,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	501,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	502,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	503,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	504,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	505,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	506,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	507,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	508,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	509,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	510,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	511,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	512,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	513,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	514,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	515,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	516,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	517,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	518,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	519,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	520,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	521,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	522,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	523,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	524,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	525,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	526,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	527,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	528,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	529,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	530,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	531,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	532,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	533,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	534,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	535,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	536,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	537,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	538,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	539,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	540,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	541,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	542,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	543,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	544,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	545,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	546,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	547,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	548,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	549,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	550,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	551,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	552,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	553,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	554,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	555,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	556,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	557,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	558,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	559,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	560,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	561,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	562,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	563,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	564,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	565,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	566,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	567,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	568,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	569,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	570,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	571,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	572,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	573,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	574,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	575,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	576,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	577,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	578,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	579,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	580,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	581,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	582,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	583,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	584,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	585,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	586,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	587,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	588,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	589,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	590,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	591,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	592,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	593,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	594,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	595,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	596,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	597,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	598,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	599,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	600,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	601,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	602,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	603,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	604,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	605,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	606,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	607,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	608,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	609,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	610,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	611,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	612,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	613,
									"scores":	[-8.41165744779405, -9.75085909899405, -11.084948272694053, -10.317015755994053, -10.317015755994053, -10.251794098994052, -10.249843495794053, -10.249843495794053, -10.040904981994053, -10.286943895794053, -10.249843495794053, -10.249843495794053, -10.003804581994052, -10.003804581994052, -10.249843495794053, -10.249843495794053, -10.249843495794053, -10.251794098994052, -10.286943895794053, -10.317015755994053]
								}]
						}, {
							"switch":	7,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	344,
							"begin_column":	2,
							"end_line":	344,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L344\", 20, &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zmode), sizeof (zmode), &((zfilename)->refcount__gc), sizeof ((zfilename)->refcount__gc), &((zfilename)->is_ref__gc), sizeof ((zfilename)->is_ref__gc), &(mode), sizeof (mode), &(us), sizeof (us), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(context), sizeof (context), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(old_in_user_include), sizeof (old_in_user_include), &(zretval), sizeof (zretval), &(uwrap), sizeof (uwrap), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &((zfilename)->type), sizeof ((zfilename)->type)))\n    args[0] = &zfilename;\n", "{\n}\n", "args[0] = &(&args)", "args[0] = &(&call_result)", "args[0] = &(&context)", "args[0] = &(&filename)", "args[0] = &(&mode)", "args[0] = &(&old_in_user_include)", "args[0] = &(&opened_path)", "args[0] = &(&options)", "args[0] = &(&stream)", "args[0] = &(&us)", "args[0] = &(&uwrap)", "args[0] = &(&wrapper)", "args[0] = &(&zfilename)", "args[0] = &(&zfuncname)", "args[0] = &(&zmode)", "args[0] = &(&zopened)", "args[0] = &(&zoptions)", "args[0] = &(&zretval)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.2013132359940535, -8.54119282599405, -9.12813883489405, -8.3024268359940532, -8.3024268359940532, -8.8632038559940529, -8.8574811559940532, -8.8574811559940532, -8.3939438559940527, -9.1518319559940533, -8.8574811559940532, -8.8574811559940532, -8.09959305599405, -8.09959305599405, -8.8574811559940532, -8.8574811559940532, -8.8574811559940532, -8.8632038559940529, -9.1518319559940533, -8.3024268359940532]
								}, {
									"case":	2,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	3,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	4,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	5,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	6,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	7,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	8,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	9,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	10,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	11,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	12,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	13,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	14,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	15,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	16,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	17,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	18,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	19,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	20,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	21,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	22,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	23,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	24,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	25,
									"scores":	[-7.4474967859940531]
								}, {
									"case":	26,
									"scores":	[-7.4474967859940531]
								}]
						}]
				}, {
					"line":	345,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	346,
							"begin_column":	0,
							"end_line":	346,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset((zmode), 0, sizeof (*((zmode))))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L346\", 20, &(zmode), sizeof (zmode), &((zmode)->refcount__gc), sizeof ((zmode)->refcount__gc), &((zmode)->is_ref__gc), sizeof ((zmode)->is_ref__gc), &(mode), sizeof (mode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(us), sizeof (us), &(zopened), sizeof (zopened), &(context), sizeof (context), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(zretval), sizeof (zretval), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &((zmode)->type), sizeof ((zmode)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	2,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	3,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	4,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	5,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	6,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	7,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	8,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	9,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	10,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	11,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	12,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	13,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	14,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	15,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	16,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	17,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	18,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	19,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	20,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	21,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	22,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	23,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	24,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	25,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	26,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	27,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	28,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	29,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	30,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	31,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	32,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	33,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	34,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	35,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	36,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	37,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	38,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	39,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	40,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	41,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	42,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	43,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	44,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	45,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	46,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	47,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	48,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	49,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	50,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	51,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	52,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	53,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	54,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	55,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	56,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	57,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	58,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	59,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	60,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	61,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	62,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	63,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	64,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	65,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	66,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	67,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	68,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	69,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	70,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	71,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	72,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	73,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	74,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	75,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	76,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	77,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	78,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	79,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	80,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	81,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	82,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	83,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	84,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	85,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	86,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	87,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	88,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	89,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	90,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	91,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	92,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	93,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	94,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	95,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	96,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	97,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	98,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	99,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	100,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	101,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	102,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	103,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	104,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	105,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	106,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	107,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	108,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	109,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	110,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	111,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	112,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	113,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	114,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	115,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	116,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	117,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	118,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	119,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	120,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	121,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	122,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	123,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	124,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	125,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	126,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	127,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	128,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	129,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	130,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	131,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	132,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	133,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	134,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	135,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	136,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	137,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	138,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	139,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	140,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	141,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	142,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	143,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	144,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	145,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	146,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	147,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	148,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	149,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	150,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	151,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	152,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	153,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	154,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	155,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	156,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	157,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	158,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	159,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	160,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	161,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	162,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	163,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	164,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	165,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	166,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	167,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	168,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	169,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	170,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	171,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	172,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	173,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	174,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	175,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	176,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	177,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	178,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	179,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	180,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	181,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	182,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	183,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	184,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	185,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	186,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	187,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	188,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	189,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	190,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	191,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	192,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	193,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	194,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	195,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	196,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	197,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	198,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	199,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	200,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	201,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	202,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	203,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	204,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	205,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	206,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	207,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	208,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	209,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	210,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	211,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	212,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	213,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	214,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	215,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	216,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	217,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	218,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	219,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	220,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	221,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	222,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	223,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	224,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	225,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	226,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	227,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	228,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	229,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	230,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	231,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	232,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	233,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	234,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	235,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	236,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	237,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	238,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	239,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	240,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	241,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	242,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	243,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	244,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	245,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	246,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	247,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	248,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	249,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	250,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	251,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	252,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	253,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	254,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	255,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	256,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	257,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	258,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	259,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	260,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	261,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	262,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	263,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	264,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	265,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	266,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	267,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	268,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	269,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	270,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	271,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	272,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	273,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	274,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	275,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	276,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	277,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	278,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	279,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	280,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	281,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	282,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	283,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	284,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	285,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	286,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	287,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	288,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	289,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	290,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	291,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	292,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	293,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	294,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	295,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	296,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	297,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	298,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	299,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	300,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	301,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	302,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	303,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	304,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	305,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	306,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	307,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	308,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	309,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	310,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	311,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	312,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	313,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	314,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	315,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	316,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	317,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	318,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	319,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	320,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	321,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	322,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	323,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	324,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	325,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	326,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	327,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	328,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	329,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	330,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	331,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	332,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	333,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	334,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	335,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	336,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	337,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	338,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	339,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	340,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	341,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	342,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	343,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	344,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	345,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	346,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	347,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	348,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	349,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	350,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	351,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	352,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	353,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	354,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	355,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	356,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	357,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	358,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	359,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	360,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	361,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	362,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	363,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	364,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	365,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	366,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	367,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	368,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	369,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	370,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	371,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	372,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	373,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	374,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	375,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	376,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	377,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	378,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	379,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	380,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	381,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	382,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	383,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	384,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	385,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	386,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	387,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	388,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	389,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	390,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	391,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	392,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	393,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	394,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	395,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	396,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	397,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	398,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	399,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	400,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	401,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	402,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	403,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	404,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	405,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	406,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	407,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	408,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	409,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	410,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	411,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	412,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	413,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	414,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	415,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	416,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	417,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	418,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	419,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	420,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	421,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	422,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	423,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	424,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	425,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	426,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	427,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	428,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	429,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	430,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	431,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	432,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	433,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	434,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	435,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	436,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	437,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	438,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	439,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	440,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	441,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	442,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	443,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	444,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	445,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	446,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	447,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	448,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	449,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	450,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	451,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	452,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	453,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	454,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	455,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	456,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	457,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	458,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	459,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	460,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	461,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	462,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	463,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	464,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	465,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	466,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	467,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	468,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	469,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	470,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	471,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	472,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	473,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	474,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	475,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	476,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	477,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	478,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	479,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	480,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	481,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	482,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	483,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	484,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	485,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	486,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	487,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	488,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	489,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	490,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	491,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	492,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	493,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	494,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	495,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	496,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	497,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	498,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	499,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	500,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	501,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	502,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	503,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	504,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	505,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	506,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	507,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	508,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	509,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	510,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	511,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	512,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	513,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	514,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	515,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	516,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	517,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	518,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	519,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	520,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	521,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	522,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	523,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	524,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	525,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	526,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	527,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	528,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	529,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	530,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	531,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	532,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	533,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	534,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	535,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	536,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	537,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	538,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	539,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	540,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	541,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	542,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	543,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	544,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	545,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	546,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	547,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	548,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	549,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	550,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	551,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	552,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	553,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	554,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	555,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	556,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	557,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	558,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	559,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	560,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	561,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	562,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	563,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	564,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	565,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	566,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	567,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	568,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	569,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	570,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	571,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	572,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	573,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	574,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	575,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	576,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	577,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	578,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	579,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	580,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	581,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	582,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	583,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	584,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	585,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	586,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	587,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	588,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	589,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	590,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	591,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	592,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	593,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	594,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	595,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	596,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	597,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	598,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	599,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	600,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	601,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	602,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	603,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	604,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	605,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	606,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	607,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	608,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	609,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	610,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	611,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	612,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	613,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	614,
									"scores":	[-10.145509164423974, -10.835119919723976, -10.837718426723974, -10.170983269723974, -9.0966717865239755, -9.6700482697239742, -10.169032666523975, -9.9600941527239755, -10.169032666523975, -10.169032666523975, -10.206133066523975, -10.169032666523975, -9.9229937527239738, -10.169032666523975, -9.9229937527239738, -10.169032666523975, -10.169032666523975, -10.170983269723974, -10.206133066523975, -10.737139926723975]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	346,
							"begin_column":	2,
							"end_line":	346,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L346\", 20, &(zmode), sizeof (zmode), &((zmode)->refcount__gc), sizeof ((zmode)->refcount__gc), &((zmode)->is_ref__gc), sizeof ((zmode)->is_ref__gc), &(mode), sizeof (mode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(us), sizeof (us), &(zopened), sizeof (zopened), &(context), sizeof (context), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(zretval), sizeof (zretval), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &((zmode)->type), sizeof ((zmode)->type)))\n    do {\n        (zmode) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(zmode))->u.buffered = ((void *)0);\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.1690261356239748, -9.3168743017239741, -8.5432797007239749, -8.7823930267239749, -7.8038497207239752, -8.4603819967239744, -8.7766703267239752, -8.3131330267239747, -8.7766703267239752, -8.7766703267239752, -9.0710211267239753, -8.7766703267239752, -8.0187822267239746, -8.7766703267239752, -8.0187822267239746, -8.7766703267239752, -8.7766703267239752, -8.7823930267239749, -9.0710211267239753, -8.5436270367239757]
								}]
						}]
				}, {
					"line":	346,
					"switches":	[{
							"switch":	10,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	347,
							"begin_column":	0,
							"end_line":	347,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset((zmode), 0, sizeof (*((zmode))))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L347\", 20, &(mode), sizeof (mode), &(zmode), sizeof (zmode), &((zmode)->refcount__gc), sizeof ((zmode)->refcount__gc), &((zmode)->is_ref__gc), sizeof ((zmode)->is_ref__gc), &(zfilename), sizeof (zfilename), &(zoptions), sizeof (zoptions), &(filename), sizeof (filename), &(options), sizeof (options), &(zopened), sizeof (zopened), &(us), sizeof (us), &(context), sizeof (context), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(zretval), sizeof (zretval), &(old_in_user_include), sizeof (old_in_user_include), &(stream), sizeof (stream), &(uwrap), sizeof (uwrap), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &((zmode)->type), sizeof ((zmode)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	2,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	3,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	4,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	5,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	6,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	7,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	8,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	9,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	10,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	11,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	12,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	13,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	14,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	15,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	16,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	17,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	18,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	19,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	20,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	21,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	22,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	23,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	24,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	25,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	26,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	27,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	28,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	29,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	30,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	31,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	32,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	33,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	34,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	35,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	36,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	37,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	38,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	39,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	40,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	41,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	42,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	43,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	44,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	45,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	46,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	47,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	48,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	49,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	50,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	51,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	52,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	53,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	54,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	55,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	56,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	57,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	58,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	59,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	60,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	61,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	62,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	63,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	64,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	65,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	66,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	67,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	68,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	69,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	70,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	71,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	72,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	73,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	74,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	75,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	76,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	77,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	78,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	79,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	80,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	81,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	82,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	83,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	84,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	85,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	86,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	87,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	88,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	89,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	90,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	91,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	92,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	93,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	94,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	95,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	96,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	97,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	98,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	99,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	100,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	101,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	102,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	103,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	104,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	105,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	106,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	107,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	108,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	109,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	110,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	111,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	112,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	113,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	114,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	115,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	116,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	117,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	118,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	119,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	120,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	121,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	122,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	123,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	124,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	125,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	126,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	127,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	128,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	129,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	130,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	131,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	132,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	133,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	134,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	135,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	136,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	137,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	138,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	139,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	140,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	141,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	142,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	143,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	144,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	145,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	146,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	147,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	148,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	149,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	150,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	151,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	152,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	153,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	154,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	155,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	156,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	157,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	158,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	159,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	160,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	161,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	162,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	163,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	164,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	165,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	166,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	167,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	168,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	169,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	170,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	171,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	172,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	173,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	174,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	175,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	176,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	177,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	178,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	179,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	180,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	181,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	182,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	183,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	184,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	185,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	186,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	187,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	188,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	189,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	190,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	191,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	192,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	193,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	194,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	195,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	196,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	197,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	198,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	199,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	200,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	201,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	202,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	203,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	204,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	205,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	206,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	207,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	208,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	209,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	210,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	211,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	212,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	213,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	214,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	215,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	216,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	217,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	218,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	219,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	220,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	221,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	222,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	223,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	224,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	225,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	226,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	227,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	228,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	229,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	230,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	231,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	232,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	233,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	234,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	235,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	236,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	237,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	238,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	239,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	240,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	241,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	242,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	243,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	244,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	245,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	246,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	247,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	248,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	249,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	250,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	251,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	252,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	253,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	254,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	255,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	256,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	257,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	258,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	259,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	260,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	261,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	262,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	263,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	264,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	265,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	266,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	267,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	268,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	269,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	270,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	271,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	272,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	273,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	274,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	275,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	276,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	277,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	278,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	279,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	280,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	281,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	282,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	283,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	284,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	285,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	286,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	287,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	288,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	289,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	290,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	291,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	292,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	293,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	294,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	295,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	296,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	297,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	298,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	299,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	300,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	301,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	302,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	303,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	304,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	305,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	306,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	307,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	308,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	309,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	310,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	311,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	312,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	313,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	314,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	315,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	316,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	317,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	318,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	319,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	320,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	321,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	322,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	323,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	324,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	325,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	326,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	327,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	328,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	329,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	330,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	331,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	332,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	333,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	334,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	335,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	336,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	337,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	338,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	339,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	340,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	341,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	342,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	343,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	344,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	345,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	346,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	347,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	348,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	349,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	350,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	351,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	352,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	353,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	354,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	355,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	356,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	357,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	358,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	359,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	360,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	361,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	362,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	363,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	364,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	365,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	366,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	367,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	368,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	369,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	370,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	371,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	372,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	373,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	374,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	375,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	376,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	377,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	378,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	379,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	380,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	381,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	382,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	383,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	384,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	385,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	386,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	387,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	388,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	389,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	390,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	391,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	392,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	393,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	394,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	395,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	396,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	397,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	398,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	399,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	400,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	401,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	402,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	403,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	404,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	405,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	406,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	407,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	408,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	409,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	410,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	411,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	412,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	413,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	414,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	415,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	416,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	417,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	418,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	419,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	420,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	421,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	422,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	423,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	424,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	425,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	426,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	427,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	428,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	429,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	430,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	431,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	432,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	433,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	434,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	435,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	436,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	437,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	438,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	439,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	440,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	441,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	442,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	443,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	444,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	445,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	446,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	447,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	448,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	449,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	450,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	451,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	452,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	453,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	454,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	455,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	456,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	457,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	458,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	459,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	460,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	461,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	462,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	463,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	464,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	465,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	466,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	467,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	468,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	469,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	470,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	471,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	472,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	473,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	474,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	475,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	476,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	477,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	478,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	479,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	480,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	481,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	482,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	483,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	484,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	485,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	486,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	487,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	488,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	489,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	490,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	491,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	492,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	493,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	494,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	495,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	496,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	497,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	498,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	499,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	500,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	501,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	502,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	503,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	504,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	505,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	506,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	507,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	508,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	509,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	510,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	511,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	512,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	513,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	514,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	515,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	516,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	517,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	518,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	519,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	520,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	521,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	522,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	523,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	524,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	525,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	526,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	527,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	528,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	529,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	530,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	531,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	532,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	533,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	534,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	535,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	536,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	537,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	538,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	539,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	540,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	541,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	542,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	543,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	544,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	545,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	546,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	547,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	548,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	549,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	550,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	551,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	552,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	553,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	554,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	555,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	556,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	557,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	558,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	559,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	560,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	561,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	562,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	563,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	564,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	565,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	566,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	567,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	568,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	569,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	570,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	571,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	572,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	573,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	574,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	575,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	576,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	577,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	578,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	579,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	580,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	581,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	582,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	583,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	584,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	585,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	586,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	587,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	588,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	589,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	590,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	591,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	592,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	593,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	594,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	595,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	596,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	597,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	598,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	599,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	600,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	601,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	602,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	603,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	604,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	605,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	606,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	607,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	608,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	609,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	610,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	611,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	612,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	613,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	614,
									"scores":	[-10.090172440453896, -10.108445267253897, -10.656329097453897, -9.5201169524538969, -9.5872868372538953, -10.923326614153897, -9.5892374404538963, -9.8792833234539, -10.088221837253897, -10.088221837253897, -10.125322237253897, -10.088221837253897, -9.8421829234538958, -10.088221837253897, -9.8421829234538958, -10.088221837253897, -10.088221837253897, -10.090172440453896, -10.125322237253897, -10.656329097453897]
								}]
						}, {
							"switch":	11,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	347,
							"begin_column":	2,
							"end_line":	347,
							"end_column":	28,
							"patch_codes":	["if (!__is_neg(\"\", \"L347\", 20, &(mode), sizeof (mode), &(zmode), sizeof (zmode), &((zmode)->refcount__gc), sizeof ((zmode)->refcount__gc), &((zmode)->is_ref__gc), sizeof ((zmode)->is_ref__gc), &(zfilename), sizeof (zfilename), &(zoptions), sizeof (zoptions), &(filename), sizeof (filename), &(options), sizeof (options), &(zopened), sizeof (zopened), &(us), sizeof (us), &(context), sizeof (context), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(zretval), sizeof (zretval), &(old_in_user_include), sizeof (old_in_user_include), &(stream), sizeof (stream), &(uwrap), sizeof (uwrap), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &((zmode)->type), sizeof ((zmode)->type)))\n    do {\n        const char *__s = (mode);\n        zval *__z = (zmode);\n        (*__z).value.str.len = strlen(__s);\n        (*__z).value.str.val = (1 ? _estrndup((__s), ((*__z).value.str.len)) : (char *)__s);\n        (*__z).type = 6;\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.7015821974538969, -8.4282637479538973, -8.4628162074539, -8.728486347453897, -8.3738484674538967, -9.0995746553539, -8.3795711674538964, -8.2323221974538967, -8.6958594974538972, -8.6958594974538972, -8.9902102974538973, -8.6958594974538972, -7.9379713974538975, -8.6958594974538972, -7.9379713974538975, -8.6958594974538972, -8.6958594974538972, -8.7015821974538969, -8.9902102974538973, -8.4628162074539]
								}]
						}]
				}, {
					"line":	347,
					"switches":	[{
							"switch":	12,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	348,
							"begin_column":	0,
							"end_line":	348,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L348\", 20, &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(zoptions), sizeof (zoptions), &((zmode)->refcount__gc), sizeof ((zmode)->refcount__gc), &((zmode)->is_ref__gc), sizeof ((zmode)->is_ref__gc), &(options), sizeof (options), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zopened), sizeof (zopened), &(us), sizeof (us), &(context), sizeof (context), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(zretval), sizeof (zretval), &(old_in_user_include), sizeof (old_in_user_include), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(uwrap), sizeof (uwrap), &(wrapper), sizeof (wrapper), &((zmode)->type), sizeof ((zmode)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.16465888354878]
								}, {
									"case":	2,
									"scores":	[-7.16465888354878]
								}, {
									"case":	3,
									"scores":	[-7.16465888354878]
								}, {
									"case":	4,
									"scores":	[-7.16465888354878]
								}, {
									"case":	5,
									"scores":	[-7.16465888354878]
								}, {
									"case":	6,
									"scores":	[-7.16465888354878]
								}, {
									"case":	7,
									"scores":	[-7.16465888354878]
								}, {
									"case":	8,
									"scores":	[-7.16465888354878]
								}, {
									"case":	9,
									"scores":	[-7.16465888354878]
								}, {
									"case":	10,
									"scores":	[-7.16465888354878]
								}, {
									"case":	11,
									"scores":	[-7.16465888354878]
								}, {
									"case":	12,
									"scores":	[-7.16465888354878]
								}, {
									"case":	13,
									"scores":	[-7.16465888354878]
								}, {
									"case":	14,
									"scores":	[-7.16465888354878]
								}, {
									"case":	15,
									"scores":	[-7.16465888354878]
								}, {
									"case":	16,
									"scores":	[-7.16465888354878]
								}, {
									"case":	17,
									"scores":	[-7.16465888354878]
								}, {
									"case":	18,
									"scores":	[-7.16465888354878]
								}, {
									"case":	19,
									"scores":	[-7.16465888354878]
								}, {
									"case":	20,
									"scores":	[-7.16465888354878]
								}, {
									"case":	21,
									"scores":	[-7.16465888354878]
								}, {
									"case":	22,
									"scores":	[-7.16465888354878]
								}, {
									"case":	23,
									"scores":	[-7.16465888354878]
								}, {
									"case":	24,
									"scores":	[-7.16465888354878]
								}, {
									"case":	25,
									"scores":	[-7.16465888354878]
								}, {
									"case":	26,
									"scores":	[-7.16465888354878]
								}, {
									"case":	27,
									"scores":	[-7.16465888354878]
								}, {
									"case":	28,
									"scores":	[-7.16465888354878]
								}, {
									"case":	29,
									"scores":	[-7.16465888354878]
								}, {
									"case":	30,
									"scores":	[-7.16465888354878]
								}, {
									"case":	31,
									"scores":	[-7.16465888354878]
								}, {
									"case":	32,
									"scores":	[-7.16465888354878]
								}, {
									"case":	33,
									"scores":	[-7.16465888354878]
								}, {
									"case":	34,
									"scores":	[-7.16465888354878]
								}, {
									"case":	35,
									"scores":	[-7.16465888354878]
								}, {
									"case":	36,
									"scores":	[-7.16465888354878]
								}, {
									"case":	37,
									"scores":	[-7.16465888354878]
								}, {
									"case":	38,
									"scores":	[-7.16465888354878]
								}, {
									"case":	39,
									"scores":	[-7.16465888354878]
								}, {
									"case":	40,
									"scores":	[-7.16465888354878]
								}, {
									"case":	41,
									"scores":	[-7.16465888354878]
								}, {
									"case":	42,
									"scores":	[-7.16465888354878]
								}, {
									"case":	43,
									"scores":	[-7.16465888354878]
								}, {
									"case":	44,
									"scores":	[-7.16465888354878]
								}, {
									"case":	45,
									"scores":	[-7.16465888354878]
								}, {
									"case":	46,
									"scores":	[-7.16465888354878]
								}, {
									"case":	47,
									"scores":	[-7.16465888354878]
								}, {
									"case":	48,
									"scores":	[-7.16465888354878]
								}, {
									"case":	49,
									"scores":	[-7.16465888354878]
								}, {
									"case":	50,
									"scores":	[-7.16465888354878]
								}, {
									"case":	51,
									"scores":	[-7.16465888354878]
								}, {
									"case":	52,
									"scores":	[-7.16465888354878]
								}, {
									"case":	53,
									"scores":	[-7.16465888354878]
								}, {
									"case":	54,
									"scores":	[-7.16465888354878]
								}, {
									"case":	55,
									"scores":	[-7.16465888354878]
								}, {
									"case":	56,
									"scores":	[-7.16465888354878]
								}, {
									"case":	57,
									"scores":	[-7.16465888354878]
								}, {
									"case":	58,
									"scores":	[-7.16465888354878]
								}, {
									"case":	59,
									"scores":	[-7.16465888354878]
								}, {
									"case":	60,
									"scores":	[-7.16465888354878]
								}, {
									"case":	61,
									"scores":	[-7.16465888354878]
								}, {
									"case":	62,
									"scores":	[-7.16465888354878]
								}, {
									"case":	63,
									"scores":	[-7.16465888354878]
								}, {
									"case":	64,
									"scores":	[-7.16465888354878]
								}, {
									"case":	65,
									"scores":	[-7.16465888354878]
								}, {
									"case":	66,
									"scores":	[-7.16465888354878]
								}, {
									"case":	67,
									"scores":	[-7.16465888354878]
								}, {
									"case":	68,
									"scores":	[-7.16465888354878]
								}, {
									"case":	69,
									"scores":	[-7.16465888354878]
								}, {
									"case":	70,
									"scores":	[-7.16465888354878]
								}, {
									"case":	71,
									"scores":	[-7.16465888354878]
								}, {
									"case":	72,
									"scores":	[-7.16465888354878]
								}, {
									"case":	73,
									"scores":	[-7.16465888354878]
								}, {
									"case":	74,
									"scores":	[-7.16465888354878]
								}, {
									"case":	75,
									"scores":	[-7.16465888354878]
								}, {
									"case":	76,
									"scores":	[-7.16465888354878]
								}, {
									"case":	77,
									"scores":	[-7.16465888354878]
								}, {
									"case":	78,
									"scores":	[-7.16465888354878]
								}, {
									"case":	79,
									"scores":	[-7.16465888354878]
								}, {
									"case":	80,
									"scores":	[-7.16465888354878]
								}, {
									"case":	81,
									"scores":	[-7.16465888354878]
								}, {
									"case":	82,
									"scores":	[-7.16465888354878]
								}, {
									"case":	83,
									"scores":	[-7.16465888354878]
								}, {
									"case":	84,
									"scores":	[-7.16465888354878]
								}, {
									"case":	85,
									"scores":	[-7.16465888354878]
								}, {
									"case":	86,
									"scores":	[-7.16465888354878]
								}, {
									"case":	87,
									"scores":	[-7.16465888354878]
								}, {
									"case":	88,
									"scores":	[-7.16465888354878]
								}, {
									"case":	89,
									"scores":	[-7.16465888354878]
								}, {
									"case":	90,
									"scores":	[-7.16465888354878]
								}, {
									"case":	91,
									"scores":	[-7.16465888354878]
								}, {
									"case":	92,
									"scores":	[-7.16465888354878]
								}, {
									"case":	93,
									"scores":	[-7.16465888354878]
								}, {
									"case":	94,
									"scores":	[-7.16465888354878]
								}, {
									"case":	95,
									"scores":	[-7.16465888354878]
								}, {
									"case":	96,
									"scores":	[-7.16465888354878]
								}, {
									"case":	97,
									"scores":	[-7.16465888354878]
								}, {
									"case":	98,
									"scores":	[-7.16465888354878]
								}, {
									"case":	99,
									"scores":	[-7.16465888354878]
								}, {
									"case":	100,
									"scores":	[-7.16465888354878]
								}, {
									"case":	101,
									"scores":	[-7.16465888354878]
								}, {
									"case":	102,
									"scores":	[-7.16465888354878]
								}, {
									"case":	103,
									"scores":	[-7.16465888354878]
								}, {
									"case":	104,
									"scores":	[-7.16465888354878]
								}, {
									"case":	105,
									"scores":	[-7.16465888354878]
								}, {
									"case":	106,
									"scores":	[-7.16465888354878]
								}, {
									"case":	107,
									"scores":	[-7.16465888354878]
								}, {
									"case":	108,
									"scores":	[-7.16465888354878]
								}, {
									"case":	109,
									"scores":	[-7.16465888354878]
								}, {
									"case":	110,
									"scores":	[-7.16465888354878]
								}, {
									"case":	111,
									"scores":	[-7.16465888354878]
								}, {
									"case":	112,
									"scores":	[-7.16465888354878]
								}, {
									"case":	113,
									"scores":	[-7.16465888354878]
								}, {
									"case":	114,
									"scores":	[-7.16465888354878]
								}, {
									"case":	115,
									"scores":	[-7.16465888354878]
								}, {
									"case":	116,
									"scores":	[-7.16465888354878]
								}, {
									"case":	117,
									"scores":	[-7.16465888354878]
								}, {
									"case":	118,
									"scores":	[-7.16465888354878]
								}, {
									"case":	119,
									"scores":	[-7.16465888354878]
								}, {
									"case":	120,
									"scores":	[-7.16465888354878]
								}, {
									"case":	121,
									"scores":	[-7.16465888354878]
								}, {
									"case":	122,
									"scores":	[-7.16465888354878]
								}, {
									"case":	123,
									"scores":	[-7.16465888354878]
								}, {
									"case":	124,
									"scores":	[-7.16465888354878]
								}, {
									"case":	125,
									"scores":	[-7.16465888354878]
								}, {
									"case":	126,
									"scores":	[-7.16465888354878]
								}, {
									"case":	127,
									"scores":	[-7.16465888354878]
								}, {
									"case":	128,
									"scores":	[-7.16465888354878]
								}, {
									"case":	129,
									"scores":	[-7.16465888354878]
								}, {
									"case":	130,
									"scores":	[-7.16465888354878]
								}, {
									"case":	131,
									"scores":	[-7.16465888354878]
								}, {
									"case":	132,
									"scores":	[-7.16465888354878]
								}, {
									"case":	133,
									"scores":	[-7.16465888354878]
								}, {
									"case":	134,
									"scores":	[-7.16465888354878]
								}, {
									"case":	135,
									"scores":	[-7.16465888354878]
								}, {
									"case":	136,
									"scores":	[-7.16465888354878]
								}, {
									"case":	137,
									"scores":	[-7.16465888354878]
								}, {
									"case":	138,
									"scores":	[-7.16465888354878]
								}, {
									"case":	139,
									"scores":	[-7.16465888354878]
								}, {
									"case":	140,
									"scores":	[-7.16465888354878]
								}, {
									"case":	141,
									"scores":	[-7.16465888354878]
								}, {
									"case":	142,
									"scores":	[-7.16465888354878]
								}, {
									"case":	143,
									"scores":	[-7.16465888354878]
								}, {
									"case":	144,
									"scores":	[-7.16465888354878]
								}, {
									"case":	145,
									"scores":	[-7.16465888354878]
								}, {
									"case":	146,
									"scores":	[-7.16465888354878]
								}, {
									"case":	147,
									"scores":	[-7.16465888354878]
								}, {
									"case":	148,
									"scores":	[-7.16465888354878]
								}, {
									"case":	149,
									"scores":	[-7.16465888354878]
								}, {
									"case":	150,
									"scores":	[-7.16465888354878]
								}, {
									"case":	151,
									"scores":	[-7.16465888354878]
								}, {
									"case":	152,
									"scores":	[-7.16465888354878]
								}, {
									"case":	153,
									"scores":	[-7.16465888354878]
								}, {
									"case":	154,
									"scores":	[-7.16465888354878]
								}, {
									"case":	155,
									"scores":	[-7.16465888354878]
								}, {
									"case":	156,
									"scores":	[-7.16465888354878]
								}, {
									"case":	157,
									"scores":	[-7.16465888354878]
								}, {
									"case":	158,
									"scores":	[-7.16465888354878]
								}, {
									"case":	159,
									"scores":	[-7.16465888354878]
								}, {
									"case":	160,
									"scores":	[-7.16465888354878]
								}, {
									"case":	161,
									"scores":	[-7.16465888354878]
								}, {
									"case":	162,
									"scores":	[-7.16465888354878]
								}, {
									"case":	163,
									"scores":	[-7.16465888354878]
								}, {
									"case":	164,
									"scores":	[-7.16465888354878]
								}, {
									"case":	165,
									"scores":	[-7.16465888354878]
								}, {
									"case":	166,
									"scores":	[-7.16465888354878]
								}, {
									"case":	167,
									"scores":	[-7.16465888354878]
								}, {
									"case":	168,
									"scores":	[-7.16465888354878]
								}, {
									"case":	169,
									"scores":	[-7.16465888354878]
								}, {
									"case":	170,
									"scores":	[-7.16465888354878]
								}, {
									"case":	171,
									"scores":	[-7.16465888354878]
								}, {
									"case":	172,
									"scores":	[-7.16465888354878]
								}, {
									"case":	173,
									"scores":	[-7.16465888354878]
								}, {
									"case":	174,
									"scores":	[-7.16465888354878]
								}, {
									"case":	175,
									"scores":	[-7.16465888354878]
								}, {
									"case":	176,
									"scores":	[-7.16465888354878]
								}, {
									"case":	177,
									"scores":	[-7.16465888354878]
								}, {
									"case":	178,
									"scores":	[-7.16465888354878]
								}, {
									"case":	179,
									"scores":	[-7.16465888354878]
								}, {
									"case":	180,
									"scores":	[-7.16465888354878]
								}, {
									"case":	181,
									"scores":	[-7.16465888354878]
								}, {
									"case":	182,
									"scores":	[-7.16465888354878]
								}, {
									"case":	183,
									"scores":	[-7.16465888354878]
								}, {
									"case":	184,
									"scores":	[-7.16465888354878]
								}, {
									"case":	185,
									"scores":	[-7.16465888354878]
								}, {
									"case":	186,
									"scores":	[-7.16465888354878]
								}, {
									"case":	187,
									"scores":	[-7.16465888354878]
								}, {
									"case":	188,
									"scores":	[-7.16465888354878]
								}, {
									"case":	189,
									"scores":	[-7.16465888354878]
								}, {
									"case":	190,
									"scores":	[-7.16465888354878]
								}, {
									"case":	191,
									"scores":	[-7.16465888354878]
								}, {
									"case":	192,
									"scores":	[-7.16465888354878]
								}, {
									"case":	193,
									"scores":	[-7.16465888354878]
								}, {
									"case":	194,
									"scores":	[-7.16465888354878]
								}, {
									"case":	195,
									"scores":	[-7.16465888354878]
								}, {
									"case":	196,
									"scores":	[-7.16465888354878]
								}, {
									"case":	197,
									"scores":	[-7.16465888354878]
								}, {
									"case":	198,
									"scores":	[-7.16465888354878]
								}, {
									"case":	199,
									"scores":	[-7.16465888354878]
								}, {
									"case":	200,
									"scores":	[-7.16465888354878]
								}, {
									"case":	201,
									"scores":	[-7.16465888354878]
								}, {
									"case":	202,
									"scores":	[-7.16465888354878]
								}, {
									"case":	203,
									"scores":	[-7.16465888354878]
								}, {
									"case":	204,
									"scores":	[-7.16465888354878]
								}, {
									"case":	205,
									"scores":	[-7.16465888354878]
								}, {
									"case":	206,
									"scores":	[-7.16465888354878]
								}, {
									"case":	207,
									"scores":	[-7.16465888354878]
								}, {
									"case":	208,
									"scores":	[-7.16465888354878]
								}, {
									"case":	209,
									"scores":	[-7.16465888354878]
								}, {
									"case":	210,
									"scores":	[-7.16465888354878]
								}, {
									"case":	211,
									"scores":	[-7.16465888354878]
								}, {
									"case":	212,
									"scores":	[-7.16465888354878]
								}, {
									"case":	213,
									"scores":	[-7.16465888354878]
								}, {
									"case":	214,
									"scores":	[-7.16465888354878]
								}, {
									"case":	215,
									"scores":	[-7.16465888354878]
								}, {
									"case":	216,
									"scores":	[-7.16465888354878]
								}, {
									"case":	217,
									"scores":	[-7.16465888354878]
								}, {
									"case":	218,
									"scores":	[-7.16465888354878]
								}, {
									"case":	219,
									"scores":	[-7.16465888354878]
								}, {
									"case":	220,
									"scores":	[-7.16465888354878]
								}, {
									"case":	221,
									"scores":	[-7.16465888354878]
								}, {
									"case":	222,
									"scores":	[-7.16465888354878]
								}, {
									"case":	223,
									"scores":	[-7.16465888354878]
								}, {
									"case":	224,
									"scores":	[-7.16465888354878]
								}, {
									"case":	225,
									"scores":	[-7.16465888354878]
								}, {
									"case":	226,
									"scores":	[-7.16465888354878]
								}, {
									"case":	227,
									"scores":	[-7.16465888354878]
								}, {
									"case":	228,
									"scores":	[-7.16465888354878]
								}, {
									"case":	229,
									"scores":	[-7.16465888354878]
								}, {
									"case":	230,
									"scores":	[-7.16465888354878]
								}, {
									"case":	231,
									"scores":	[-7.16465888354878]
								}, {
									"case":	232,
									"scores":	[-7.16465888354878]
								}, {
									"case":	233,
									"scores":	[-7.16465888354878]
								}, {
									"case":	234,
									"scores":	[-7.16465888354878]
								}, {
									"case":	235,
									"scores":	[-7.16465888354878]
								}, {
									"case":	236,
									"scores":	[-7.16465888354878]
								}, {
									"case":	237,
									"scores":	[-7.16465888354878]
								}, {
									"case":	238,
									"scores":	[-7.16465888354878]
								}, {
									"case":	239,
									"scores":	[-7.16465888354878]
								}, {
									"case":	240,
									"scores":	[-7.16465888354878]
								}, {
									"case":	241,
									"scores":	[-7.16465888354878]
								}, {
									"case":	242,
									"scores":	[-7.16465888354878]
								}, {
									"case":	243,
									"scores":	[-7.16465888354878]
								}, {
									"case":	244,
									"scores":	[-7.16465888354878]
								}, {
									"case":	245,
									"scores":	[-7.16465888354878]
								}, {
									"case":	246,
									"scores":	[-7.16465888354878]
								}, {
									"case":	247,
									"scores":	[-7.16465888354878]
								}, {
									"case":	248,
									"scores":	[-7.16465888354878]
								}, {
									"case":	249,
									"scores":	[-7.16465888354878]
								}, {
									"case":	250,
									"scores":	[-7.16465888354878]
								}, {
									"case":	251,
									"scores":	[-7.16465888354878]
								}, {
									"case":	252,
									"scores":	[-7.16465888354878]
								}, {
									"case":	253,
									"scores":	[-7.16465888354878]
								}, {
									"case":	254,
									"scores":	[-7.16465888354878]
								}, {
									"case":	255,
									"scores":	[-7.16465888354878]
								}, {
									"case":	256,
									"scores":	[-7.16465888354878]
								}, {
									"case":	257,
									"scores":	[-7.16465888354878]
								}, {
									"case":	258,
									"scores":	[-7.16465888354878]
								}, {
									"case":	259,
									"scores":	[-7.16465888354878]
								}, {
									"case":	260,
									"scores":	[-7.16465888354878]
								}, {
									"case":	261,
									"scores":	[-7.16465888354878]
								}, {
									"case":	262,
									"scores":	[-7.16465888354878]
								}, {
									"case":	263,
									"scores":	[-7.16465888354878]
								}, {
									"case":	264,
									"scores":	[-7.16465888354878]
								}, {
									"case":	265,
									"scores":	[-7.16465888354878]
								}, {
									"case":	266,
									"scores":	[-7.16465888354878]
								}, {
									"case":	267,
									"scores":	[-7.16465888354878]
								}, {
									"case":	268,
									"scores":	[-7.16465888354878]
								}, {
									"case":	269,
									"scores":	[-7.16465888354878]
								}, {
									"case":	270,
									"scores":	[-7.16465888354878]
								}, {
									"case":	271,
									"scores":	[-7.16465888354878]
								}, {
									"case":	272,
									"scores":	[-7.16465888354878]
								}, {
									"case":	273,
									"scores":	[-7.16465888354878]
								}, {
									"case":	274,
									"scores":	[-7.16465888354878]
								}, {
									"case":	275,
									"scores":	[-7.16465888354878]
								}, {
									"case":	276,
									"scores":	[-7.16465888354878]
								}, {
									"case":	277,
									"scores":	[-7.16465888354878]
								}, {
									"case":	278,
									"scores":	[-7.16465888354878]
								}, {
									"case":	279,
									"scores":	[-7.16465888354878]
								}, {
									"case":	280,
									"scores":	[-7.16465888354878]
								}, {
									"case":	281,
									"scores":	[-7.16465888354878]
								}, {
									"case":	282,
									"scores":	[-7.16465888354878]
								}, {
									"case":	283,
									"scores":	[-7.16465888354878]
								}, {
									"case":	284,
									"scores":	[-7.16465888354878]
								}, {
									"case":	285,
									"scores":	[-7.16465888354878]
								}, {
									"case":	286,
									"scores":	[-7.16465888354878]
								}, {
									"case":	287,
									"scores":	[-7.16465888354878]
								}, {
									"case":	288,
									"scores":	[-7.16465888354878]
								}, {
									"case":	289,
									"scores":	[-7.16465888354878]
								}, {
									"case":	290,
									"scores":	[-7.16465888354878]
								}, {
									"case":	291,
									"scores":	[-7.16465888354878]
								}, {
									"case":	292,
									"scores":	[-7.16465888354878]
								}, {
									"case":	293,
									"scores":	[-7.16465888354878]
								}, {
									"case":	294,
									"scores":	[-7.16465888354878]
								}, {
									"case":	295,
									"scores":	[-7.16465888354878]
								}, {
									"case":	296,
									"scores":	[-7.16465888354878]
								}, {
									"case":	297,
									"scores":	[-7.16465888354878]
								}, {
									"case":	298,
									"scores":	[-7.16465888354878]
								}, {
									"case":	299,
									"scores":	[-7.16465888354878]
								}, {
									"case":	300,
									"scores":	[-7.16465888354878]
								}, {
									"case":	301,
									"scores":	[-7.16465888354878]
								}, {
									"case":	302,
									"scores":	[-7.16465888354878]
								}, {
									"case":	303,
									"scores":	[-7.16465888354878]
								}, {
									"case":	304,
									"scores":	[-7.16465888354878]
								}, {
									"case":	305,
									"scores":	[-7.16465888354878]
								}, {
									"case":	306,
									"scores":	[-7.16465888354878]
								}, {
									"case":	307,
									"scores":	[-7.16465888354878]
								}, {
									"case":	308,
									"scores":	[-7.16465888354878]
								}, {
									"case":	309,
									"scores":	[-7.16465888354878]
								}, {
									"case":	310,
									"scores":	[-7.16465888354878]
								}, {
									"case":	311,
									"scores":	[-7.16465888354878]
								}, {
									"case":	312,
									"scores":	[-7.16465888354878]
								}, {
									"case":	313,
									"scores":	[-7.16465888354878]
								}, {
									"case":	314,
									"scores":	[-7.16465888354878]
								}, {
									"case":	315,
									"scores":	[-7.16465888354878]
								}, {
									"case":	316,
									"scores":	[-7.16465888354878]
								}, {
									"case":	317,
									"scores":	[-7.16465888354878]
								}, {
									"case":	318,
									"scores":	[-7.16465888354878]
								}, {
									"case":	319,
									"scores":	[-7.16465888354878]
								}, {
									"case":	320,
									"scores":	[-7.16465888354878]
								}, {
									"case":	321,
									"scores":	[-7.16465888354878]
								}, {
									"case":	322,
									"scores":	[-7.16465888354878]
								}, {
									"case":	323,
									"scores":	[-7.16465888354878]
								}, {
									"case":	324,
									"scores":	[-7.16465888354878]
								}, {
									"case":	325,
									"scores":	[-7.16465888354878]
								}, {
									"case":	326,
									"scores":	[-7.16465888354878]
								}, {
									"case":	327,
									"scores":	[-7.16465888354878]
								}, {
									"case":	328,
									"scores":	[-7.16465888354878]
								}, {
									"case":	329,
									"scores":	[-7.16465888354878]
								}, {
									"case":	330,
									"scores":	[-7.16465888354878]
								}, {
									"case":	331,
									"scores":	[-7.16465888354878]
								}, {
									"case":	332,
									"scores":	[-7.16465888354878]
								}, {
									"case":	333,
									"scores":	[-7.16465888354878]
								}, {
									"case":	334,
									"scores":	[-7.16465888354878]
								}, {
									"case":	335,
									"scores":	[-7.16465888354878]
								}, {
									"case":	336,
									"scores":	[-7.16465888354878]
								}, {
									"case":	337,
									"scores":	[-7.16465888354878]
								}, {
									"case":	338,
									"scores":	[-7.16465888354878]
								}, {
									"case":	339,
									"scores":	[-7.16465888354878]
								}, {
									"case":	340,
									"scores":	[-7.16465888354878]
								}, {
									"case":	341,
									"scores":	[-7.16465888354878]
								}, {
									"case":	342,
									"scores":	[-7.16465888354878]
								}, {
									"case":	343,
									"scores":	[-7.16465888354878]
								}, {
									"case":	344,
									"scores":	[-7.16465888354878]
								}, {
									"case":	345,
									"scores":	[-7.16465888354878]
								}, {
									"case":	346,
									"scores":	[-7.16465888354878]
								}, {
									"case":	347,
									"scores":	[-7.16465888354878]
								}, {
									"case":	348,
									"scores":	[-7.16465888354878]
								}, {
									"case":	349,
									"scores":	[-7.16465888354878]
								}, {
									"case":	350,
									"scores":	[-7.16465888354878]
								}, {
									"case":	351,
									"scores":	[-7.16465888354878]
								}, {
									"case":	352,
									"scores":	[-7.16465888354878]
								}, {
									"case":	353,
									"scores":	[-7.16465888354878]
								}, {
									"case":	354,
									"scores":	[-7.16465888354878]
								}, {
									"case":	355,
									"scores":	[-7.16465888354878]
								}, {
									"case":	356,
									"scores":	[-7.16465888354878]
								}, {
									"case":	357,
									"scores":	[-7.16465888354878]
								}, {
									"case":	358,
									"scores":	[-7.16465888354878]
								}, {
									"case":	359,
									"scores":	[-7.16465888354878]
								}, {
									"case":	360,
									"scores":	[-7.16465888354878]
								}, {
									"case":	361,
									"scores":	[-7.16465888354878]
								}, {
									"case":	362,
									"scores":	[-7.16465888354878]
								}, {
									"case":	363,
									"scores":	[-7.16465888354878]
								}, {
									"case":	364,
									"scores":	[-7.16465888354878]
								}, {
									"case":	365,
									"scores":	[-7.16465888354878]
								}, {
									"case":	366,
									"scores":	[-7.16465888354878]
								}, {
									"case":	367,
									"scores":	[-7.16465888354878]
								}, {
									"case":	368,
									"scores":	[-7.16465888354878]
								}, {
									"case":	369,
									"scores":	[-7.16465888354878]
								}, {
									"case":	370,
									"scores":	[-7.16465888354878]
								}, {
									"case":	371,
									"scores":	[-7.16465888354878]
								}, {
									"case":	372,
									"scores":	[-7.16465888354878]
								}, {
									"case":	373,
									"scores":	[-7.16465888354878]
								}, {
									"case":	374,
									"scores":	[-7.16465888354878]
								}, {
									"case":	375,
									"scores":	[-7.16465888354878]
								}, {
									"case":	376,
									"scores":	[-7.16465888354878]
								}, {
									"case":	377,
									"scores":	[-7.16465888354878]
								}, {
									"case":	378,
									"scores":	[-7.16465888354878]
								}, {
									"case":	379,
									"scores":	[-7.16465888354878]
								}, {
									"case":	380,
									"scores":	[-7.16465888354878]
								}, {
									"case":	381,
									"scores":	[-7.16465888354878]
								}, {
									"case":	382,
									"scores":	[-7.16465888354878]
								}, {
									"case":	383,
									"scores":	[-7.16465888354878]
								}, {
									"case":	384,
									"scores":	[-7.16465888354878]
								}, {
									"case":	385,
									"scores":	[-7.16465888354878]
								}, {
									"case":	386,
									"scores":	[-7.16465888354878]
								}, {
									"case":	387,
									"scores":	[-7.16465888354878]
								}, {
									"case":	388,
									"scores":	[-7.16465888354878]
								}, {
									"case":	389,
									"scores":	[-7.16465888354878]
								}, {
									"case":	390,
									"scores":	[-7.16465888354878]
								}, {
									"case":	391,
									"scores":	[-7.16465888354878]
								}, {
									"case":	392,
									"scores":	[-7.16465888354878]
								}, {
									"case":	393,
									"scores":	[-7.16465888354878]
								}, {
									"case":	394,
									"scores":	[-7.16465888354878]
								}, {
									"case":	395,
									"scores":	[-7.16465888354878]
								}, {
									"case":	396,
									"scores":	[-7.16465888354878]
								}, {
									"case":	397,
									"scores":	[-7.16465888354878]
								}, {
									"case":	398,
									"scores":	[-7.16465888354878]
								}, {
									"case":	399,
									"scores":	[-7.16465888354878]
								}, {
									"case":	400,
									"scores":	[-7.16465888354878]
								}, {
									"case":	401,
									"scores":	[-7.16465888354878]
								}, {
									"case":	402,
									"scores":	[-7.16465888354878]
								}, {
									"case":	403,
									"scores":	[-7.16465888354878]
								}, {
									"case":	404,
									"scores":	[-7.16465888354878]
								}, {
									"case":	405,
									"scores":	[-7.16465888354878]
								}, {
									"case":	406,
									"scores":	[-7.16465888354878]
								}, {
									"case":	407,
									"scores":	[-7.16465888354878]
								}, {
									"case":	408,
									"scores":	[-7.16465888354878]
								}, {
									"case":	409,
									"scores":	[-7.16465888354878]
								}, {
									"case":	410,
									"scores":	[-7.16465888354878]
								}, {
									"case":	411,
									"scores":	[-7.16465888354878]
								}, {
									"case":	412,
									"scores":	[-7.16465888354878]
								}, {
									"case":	413,
									"scores":	[-7.16465888354878]
								}, {
									"case":	414,
									"scores":	[-7.16465888354878]
								}, {
									"case":	415,
									"scores":	[-7.16465888354878]
								}, {
									"case":	416,
									"scores":	[-7.16465888354878]
								}, {
									"case":	417,
									"scores":	[-7.16465888354878]
								}, {
									"case":	418,
									"scores":	[-7.16465888354878]
								}, {
									"case":	419,
									"scores":	[-7.16465888354878]
								}, {
									"case":	420,
									"scores":	[-7.16465888354878]
								}, {
									"case":	421,
									"scores":	[-7.16465888354878]
								}, {
									"case":	422,
									"scores":	[-7.16465888354878]
								}, {
									"case":	423,
									"scores":	[-7.16465888354878]
								}, {
									"case":	424,
									"scores":	[-7.16465888354878]
								}, {
									"case":	425,
									"scores":	[-7.16465888354878]
								}, {
									"case":	426,
									"scores":	[-7.16465888354878]
								}, {
									"case":	427,
									"scores":	[-7.16465888354878]
								}, {
									"case":	428,
									"scores":	[-7.16465888354878]
								}, {
									"case":	429,
									"scores":	[-7.16465888354878]
								}, {
									"case":	430,
									"scores":	[-7.16465888354878]
								}, {
									"case":	431,
									"scores":	[-7.16465888354878]
								}, {
									"case":	432,
									"scores":	[-7.16465888354878]
								}, {
									"case":	433,
									"scores":	[-7.16465888354878]
								}, {
									"case":	434,
									"scores":	[-7.16465888354878]
								}, {
									"case":	435,
									"scores":	[-7.16465888354878]
								}, {
									"case":	436,
									"scores":	[-7.16465888354878]
								}, {
									"case":	437,
									"scores":	[-7.16465888354878]
								}, {
									"case":	438,
									"scores":	[-7.16465888354878]
								}, {
									"case":	439,
									"scores":	[-7.16465888354878]
								}, {
									"case":	440,
									"scores":	[-7.16465888354878]
								}, {
									"case":	441,
									"scores":	[-7.16465888354878]
								}, {
									"case":	442,
									"scores":	[-7.16465888354878]
								}, {
									"case":	443,
									"scores":	[-7.16465888354878]
								}, {
									"case":	444,
									"scores":	[-7.16465888354878]
								}, {
									"case":	445,
									"scores":	[-7.16465888354878]
								}, {
									"case":	446,
									"scores":	[-7.16465888354878]
								}, {
									"case":	447,
									"scores":	[-7.16465888354878]
								}, {
									"case":	448,
									"scores":	[-7.16465888354878]
								}, {
									"case":	449,
									"scores":	[-7.16465888354878]
								}, {
									"case":	450,
									"scores":	[-7.16465888354878]
								}, {
									"case":	451,
									"scores":	[-7.16465888354878]
								}, {
									"case":	452,
									"scores":	[-7.16465888354878]
								}, {
									"case":	453,
									"scores":	[-7.16465888354878]
								}, {
									"case":	454,
									"scores":	[-7.16465888354878]
								}, {
									"case":	455,
									"scores":	[-7.16465888354878]
								}, {
									"case":	456,
									"scores":	[-7.16465888354878]
								}, {
									"case":	457,
									"scores":	[-7.16465888354878]
								}, {
									"case":	458,
									"scores":	[-7.16465888354878]
								}, {
									"case":	459,
									"scores":	[-7.16465888354878]
								}, {
									"case":	460,
									"scores":	[-7.16465888354878]
								}, {
									"case":	461,
									"scores":	[-7.16465888354878]
								}, {
									"case":	462,
									"scores":	[-7.16465888354878]
								}, {
									"case":	463,
									"scores":	[-7.16465888354878]
								}, {
									"case":	464,
									"scores":	[-7.16465888354878]
								}, {
									"case":	465,
									"scores":	[-7.16465888354878]
								}, {
									"case":	466,
									"scores":	[-7.16465888354878]
								}, {
									"case":	467,
									"scores":	[-7.16465888354878]
								}, {
									"case":	468,
									"scores":	[-7.16465888354878]
								}, {
									"case":	469,
									"scores":	[-7.16465888354878]
								}, {
									"case":	470,
									"scores":	[-7.16465888354878]
								}, {
									"case":	471,
									"scores":	[-7.16465888354878]
								}, {
									"case":	472,
									"scores":	[-7.16465888354878]
								}, {
									"case":	473,
									"scores":	[-7.16465888354878]
								}, {
									"case":	474,
									"scores":	[-7.16465888354878]
								}, {
									"case":	475,
									"scores":	[-7.16465888354878]
								}, {
									"case":	476,
									"scores":	[-7.16465888354878]
								}, {
									"case":	477,
									"scores":	[-7.16465888354878]
								}, {
									"case":	478,
									"scores":	[-7.16465888354878]
								}, {
									"case":	479,
									"scores":	[-7.16465888354878]
								}, {
									"case":	480,
									"scores":	[-7.16465888354878]
								}, {
									"case":	481,
									"scores":	[-7.16465888354878]
								}, {
									"case":	482,
									"scores":	[-7.16465888354878]
								}, {
									"case":	483,
									"scores":	[-7.16465888354878]
								}, {
									"case":	484,
									"scores":	[-7.16465888354878]
								}, {
									"case":	485,
									"scores":	[-7.16465888354878]
								}, {
									"case":	486,
									"scores":	[-7.16465888354878]
								}, {
									"case":	487,
									"scores":	[-7.16465888354878]
								}, {
									"case":	488,
									"scores":	[-7.16465888354878]
								}, {
									"case":	489,
									"scores":	[-7.16465888354878]
								}, {
									"case":	490,
									"scores":	[-7.16465888354878]
								}, {
									"case":	491,
									"scores":	[-7.16465888354878]
								}, {
									"case":	492,
									"scores":	[-7.16465888354878]
								}, {
									"case":	493,
									"scores":	[-7.16465888354878]
								}, {
									"case":	494,
									"scores":	[-7.16465888354878]
								}, {
									"case":	495,
									"scores":	[-7.16465888354878]
								}, {
									"case":	496,
									"scores":	[-7.16465888354878]
								}, {
									"case":	497,
									"scores":	[-7.16465888354878]
								}, {
									"case":	498,
									"scores":	[-7.16465888354878]
								}, {
									"case":	499,
									"scores":	[-7.16465888354878]
								}, {
									"case":	500,
									"scores":	[-7.16465888354878]
								}, {
									"case":	501,
									"scores":	[-7.16465888354878]
								}, {
									"case":	502,
									"scores":	[-7.16465888354878]
								}, {
									"case":	503,
									"scores":	[-7.16465888354878]
								}, {
									"case":	504,
									"scores":	[-7.16465888354878]
								}, {
									"case":	505,
									"scores":	[-7.16465888354878]
								}, {
									"case":	506,
									"scores":	[-7.16465888354878]
								}, {
									"case":	507,
									"scores":	[-7.16465888354878]
								}, {
									"case":	508,
									"scores":	[-7.16465888354878]
								}, {
									"case":	509,
									"scores":	[-7.16465888354878]
								}, {
									"case":	510,
									"scores":	[-7.16465888354878]
								}, {
									"case":	511,
									"scores":	[-7.16465888354878]
								}, {
									"case":	512,
									"scores":	[-7.16465888354878]
								}, {
									"case":	513,
									"scores":	[-7.16465888354878]
								}, {
									"case":	514,
									"scores":	[-7.16465888354878]
								}, {
									"case":	515,
									"scores":	[-7.16465888354878]
								}, {
									"case":	516,
									"scores":	[-7.16465888354878]
								}, {
									"case":	517,
									"scores":	[-7.16465888354878]
								}, {
									"case":	518,
									"scores":	[-7.16465888354878]
								}, {
									"case":	519,
									"scores":	[-7.16465888354878]
								}, {
									"case":	520,
									"scores":	[-7.16465888354878]
								}, {
									"case":	521,
									"scores":	[-7.16465888354878]
								}, {
									"case":	522,
									"scores":	[-7.16465888354878]
								}, {
									"case":	523,
									"scores":	[-7.16465888354878]
								}, {
									"case":	524,
									"scores":	[-7.16465888354878]
								}, {
									"case":	525,
									"scores":	[-7.16465888354878]
								}, {
									"case":	526,
									"scores":	[-7.16465888354878]
								}, {
									"case":	527,
									"scores":	[-7.16465888354878]
								}, {
									"case":	528,
									"scores":	[-7.16465888354878]
								}, {
									"case":	529,
									"scores":	[-7.16465888354878]
								}, {
									"case":	530,
									"scores":	[-7.16465888354878]
								}, {
									"case":	531,
									"scores":	[-7.16465888354878]
								}, {
									"case":	532,
									"scores":	[-7.16465888354878]
								}, {
									"case":	533,
									"scores":	[-7.16465888354878]
								}, {
									"case":	534,
									"scores":	[-7.16465888354878]
								}, {
									"case":	535,
									"scores":	[-7.16465888354878]
								}, {
									"case":	536,
									"scores":	[-7.16465888354878]
								}, {
									"case":	537,
									"scores":	[-7.16465888354878]
								}, {
									"case":	538,
									"scores":	[-7.16465888354878]
								}, {
									"case":	539,
									"scores":	[-7.16465888354878]
								}, {
									"case":	540,
									"scores":	[-7.16465888354878]
								}, {
									"case":	541,
									"scores":	[-7.16465888354878]
								}, {
									"case":	542,
									"scores":	[-7.16465888354878]
								}, {
									"case":	543,
									"scores":	[-7.16465888354878]
								}, {
									"case":	544,
									"scores":	[-7.16465888354878]
								}, {
									"case":	545,
									"scores":	[-7.16465888354878]
								}, {
									"case":	546,
									"scores":	[-7.16465888354878]
								}, {
									"case":	547,
									"scores":	[-7.16465888354878]
								}, {
									"case":	548,
									"scores":	[-7.16465888354878]
								}, {
									"case":	549,
									"scores":	[-7.16465888354878]
								}, {
									"case":	550,
									"scores":	[-7.16465888354878]
								}, {
									"case":	551,
									"scores":	[-7.16465888354878]
								}, {
									"case":	552,
									"scores":	[-7.16465888354878]
								}, {
									"case":	553,
									"scores":	[-7.16465888354878]
								}, {
									"case":	554,
									"scores":	[-7.16465888354878]
								}, {
									"case":	555,
									"scores":	[-7.16465888354878]
								}, {
									"case":	556,
									"scores":	[-7.16465888354878]
								}, {
									"case":	557,
									"scores":	[-7.16465888354878]
								}, {
									"case":	558,
									"scores":	[-7.16465888354878]
								}, {
									"case":	559,
									"scores":	[-7.16465888354878]
								}, {
									"case":	560,
									"scores":	[-7.16465888354878]
								}, {
									"case":	561,
									"scores":	[-7.16465888354878]
								}, {
									"case":	562,
									"scores":	[-7.16465888354878]
								}, {
									"case":	563,
									"scores":	[-7.16465888354878]
								}, {
									"case":	564,
									"scores":	[-7.16465888354878]
								}, {
									"case":	565,
									"scores":	[-7.16465888354878]
								}, {
									"case":	566,
									"scores":	[-7.16465888354878]
								}, {
									"case":	567,
									"scores":	[-7.16465888354878]
								}, {
									"case":	568,
									"scores":	[-7.16465888354878]
								}, {
									"case":	569,
									"scores":	[-7.16465888354878]
								}, {
									"case":	570,
									"scores":	[-7.16465888354878]
								}, {
									"case":	571,
									"scores":	[-7.16465888354878]
								}, {
									"case":	572,
									"scores":	[-7.16465888354878]
								}, {
									"case":	573,
									"scores":	[-7.16465888354878]
								}, {
									"case":	574,
									"scores":	[-7.16465888354878]
								}, {
									"case":	575,
									"scores":	[-7.16465888354878]
								}, {
									"case":	576,
									"scores":	[-7.16465888354878]
								}, {
									"case":	577,
									"scores":	[-7.16465888354878]
								}, {
									"case":	578,
									"scores":	[-7.16465888354878]
								}, {
									"case":	579,
									"scores":	[-7.16465888354878]
								}, {
									"case":	580,
									"scores":	[-7.16465888354878]
								}, {
									"case":	581,
									"scores":	[-7.16465888354878]
								}, {
									"case":	582,
									"scores":	[-7.16465888354878]
								}, {
									"case":	583,
									"scores":	[-7.16465888354878]
								}, {
									"case":	584,
									"scores":	[-7.16465888354878]
								}, {
									"case":	585,
									"scores":	[-7.16465888354878]
								}, {
									"case":	586,
									"scores":	[-7.16465888354878]
								}, {
									"case":	587,
									"scores":	[-7.16465888354878]
								}, {
									"case":	588,
									"scores":	[-7.16465888354878]
								}, {
									"case":	589,
									"scores":	[-7.16465888354878]
								}, {
									"case":	590,
									"scores":	[-7.16465888354878]
								}, {
									"case":	591,
									"scores":	[-7.16465888354878]
								}, {
									"case":	592,
									"scores":	[-7.16465888354878]
								}, {
									"case":	593,
									"scores":	[-7.16465888354878]
								}, {
									"case":	594,
									"scores":	[-7.16465888354878]
								}, {
									"case":	595,
									"scores":	[-7.16465888354878]
								}, {
									"case":	596,
									"scores":	[-7.16465888354878]
								}, {
									"case":	597,
									"scores":	[-7.16465888354878]
								}, {
									"case":	598,
									"scores":	[-7.16465888354878]
								}, {
									"case":	599,
									"scores":	[-7.16465888354878]
								}, {
									"case":	600,
									"scores":	[-7.16465888354878]
								}, {
									"case":	601,
									"scores":	[-7.16465888354878]
								}, {
									"case":	602,
									"scores":	[-7.16465888354878]
								}, {
									"case":	603,
									"scores":	[-7.16465888354878]
								}, {
									"case":	604,
									"scores":	[-7.16465888354878]
								}, {
									"case":	605,
									"scores":	[-7.16465888354878]
								}, {
									"case":	606,
									"scores":	[-7.16465888354878]
								}, {
									"case":	607,
									"scores":	[-7.16465888354878]
								}, {
									"case":	608,
									"scores":	[-7.16465888354878]
								}, {
									"case":	609,
									"scores":	[-7.16465888354878]
								}, {
									"case":	610,
									"scores":	[-7.16465888354878]
								}, {
									"case":	611,
									"scores":	[-7.16465888354878]
								}, {
									"case":	612,
									"scores":	[-7.16465888354878]
								}, {
									"case":	613,
									"scores":	[-8.62975454534878, -9.96895619654878, -10.80211037024878, -10.53511285354878, -10.53511285354878, -9.75806707954878, -9.46607059334878, -9.46802119654878, -9.96700559334878, -9.96700559334878, -10.00410599334878, -9.96700559334878, -9.72096667954878, -9.96700559334878, -9.72096667954878, -9.96700559334878, -9.96895619654878, -9.96700559334878, -10.00410599334878, -10.53511285354878]
								}]
						}, {
							"switch":	13,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	348,
							"begin_column":	2,
							"end_line":	348,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L348\", 20, &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(zoptions), sizeof (zoptions), &((zmode)->refcount__gc), sizeof ((zmode)->refcount__gc), &((zmode)->is_ref__gc), sizeof ((zmode)->is_ref__gc), &(options), sizeof (options), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zopened), sizeof (zopened), &(us), sizeof (us), &(context), sizeof (context), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(zretval), sizeof (zretval), &(old_in_user_include), sizeof (old_in_user_include), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(uwrap), sizeof (uwrap), &(wrapper), sizeof (wrapper), &((zmode)->type), sizeof ((zmode)->type)))\n    args[1] = &zmode;\n", "{\n}\n", "args[1] = &(&args)", "args[1] = &(&call_result)", "args[1] = &(&context)", "args[1] = &(&filename)", "args[1] = &(&mode)", "args[1] = &(&old_in_user_include)", "args[1] = &(&opened_path)", "args[1] = &(&options)", "args[1] = &(&stream)", "args[1] = &(&us)", "args[1] = &(&uwrap)", "args[1] = &(&wrapper)", "args[1] = &(&zfilename)", "args[1] = &(&zfuncname)", "args[1] = &(&zmode)", "args[1] = &(&zopened)", "args[1] = &(&zoptions)", "args[1] = &(&zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.24048636354878, -8.58036595354878, -8.84530093244878, -8.34159996354878, -8.34159996354878, -8.11110595354878, -8.25263222354878, -8.25835492354878, -8.57464325354878, -8.57464325354878, -8.86899405354878, -8.57464325354878, -7.81675515354878, -8.57464325354878, -7.81675515354878, -8.57464325354878, -8.58036595354878, -8.57464325354878, -8.86899405354878, -8.34159996354878]
								}, {
									"case":	2,
									"scores":	[-7.16465888354878]
								}, {
									"case":	3,
									"scores":	[-7.16465888354878]
								}, {
									"case":	4,
									"scores":	[-7.16465888354878]
								}, {
									"case":	5,
									"scores":	[-7.16465888354878]
								}, {
									"case":	6,
									"scores":	[-7.16465888354878]
								}, {
									"case":	7,
									"scores":	[-7.16465888354878]
								}, {
									"case":	8,
									"scores":	[-7.16465888354878]
								}, {
									"case":	9,
									"scores":	[-7.16465888354878]
								}, {
									"case":	10,
									"scores":	[-7.16465888354878]
								}, {
									"case":	11,
									"scores":	[-7.16465888354878]
								}, {
									"case":	12,
									"scores":	[-7.16465888354878]
								}, {
									"case":	13,
									"scores":	[-7.16465888354878]
								}, {
									"case":	14,
									"scores":	[-7.16465888354878]
								}, {
									"case":	15,
									"scores":	[-7.16465888354878]
								}, {
									"case":	16,
									"scores":	[-7.16465888354878]
								}, {
									"case":	17,
									"scores":	[-7.16465888354878]
								}, {
									"case":	18,
									"scores":	[-7.16465888354878]
								}, {
									"case":	19,
									"scores":	[-7.16465888354878]
								}, {
									"case":	20,
									"scores":	[-7.16465888354878]
								}, {
									"case":	21,
									"scores":	[-7.16465888354878]
								}, {
									"case":	22,
									"scores":	[-7.16465888354878]
								}, {
									"case":	23,
									"scores":	[-7.16465888354878]
								}, {
									"case":	24,
									"scores":	[-7.16465888354878]
								}, {
									"case":	25,
									"scores":	[-7.16465888354878]
								}, {
									"case":	26,
									"scores":	[-7.16465888354878]
								}]
						}]
				}, {
					"line":	349,
					"switches":	[{
							"switch":	14,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	350,
							"begin_column":	0,
							"end_line":	350,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset((zoptions), 0, sizeof (*((zoptions))))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L350\", 20, &(zoptions), sizeof (zoptions), &((zoptions)->refcount__gc), sizeof ((zoptions)->refcount__gc), &((zoptions)->is_ref__gc), sizeof ((zoptions)->is_ref__gc), &(options), sizeof (options), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(zopened), sizeof (zopened), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zfuncname), sizeof (zfuncname), &(us), sizeof (us), &(call_result), sizeof (call_result), &(context), sizeof (context), &(zretval), sizeof (zretval), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &(wrapper), sizeof (wrapper), &((zoptions)->type), sizeof ((zoptions)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	2,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	3,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	4,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	5,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	6,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	7,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	8,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	9,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	10,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	11,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	12,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	13,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	14,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	15,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	16,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	17,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	18,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	19,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	20,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	21,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	22,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	23,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	24,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	25,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	26,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	27,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	28,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	29,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	30,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	31,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	32,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	33,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	34,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	35,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	36,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	37,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	38,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	39,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	40,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	41,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	42,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	43,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	44,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	45,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	46,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	47,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	48,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	49,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	50,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	51,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	52,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	53,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	54,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	55,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	56,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	57,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	58,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	59,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	60,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	61,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	62,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	63,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	64,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	65,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	66,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	67,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	68,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	69,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	70,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	71,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	72,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	73,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	74,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	75,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	76,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	77,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	78,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	79,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	80,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	81,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	82,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	83,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	84,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	85,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	86,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	87,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	88,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	89,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	90,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	91,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	92,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	93,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	94,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	95,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	96,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	97,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	98,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	99,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	100,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	101,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	102,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	103,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	104,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	105,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	106,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	107,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	108,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	109,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	110,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	111,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	112,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	113,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	114,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	115,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	116,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	117,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	118,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	119,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	120,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	121,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	122,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	123,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	124,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	125,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	126,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	127,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	128,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	129,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	130,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	131,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	132,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	133,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	134,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	135,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	136,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	137,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	138,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	139,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	140,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	141,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	142,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	143,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	144,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	145,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	146,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	147,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	148,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	149,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	150,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	151,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	152,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	153,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	154,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	155,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	156,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	157,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	158,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	159,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	160,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	161,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	162,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	163,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	164,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	165,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	166,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	167,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	168,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	169,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	170,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	171,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	172,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	173,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	174,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	175,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	176,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	177,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	178,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	179,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	180,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	181,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	182,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	183,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	184,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	185,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	186,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	187,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	188,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	189,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	190,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	191,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	192,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	193,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	194,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	195,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	196,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	197,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	198,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	199,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	200,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	201,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	202,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	203,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	204,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	205,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	206,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	207,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	208,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	209,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	210,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	211,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	212,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	213,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	214,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	215,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	216,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	217,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	218,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	219,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	220,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	221,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	222,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	223,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	224,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	225,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	226,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	227,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	228,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	229,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	230,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	231,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	232,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	233,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	234,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	235,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	236,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	237,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	238,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	239,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	240,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	241,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	242,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	243,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	244,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	245,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	246,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	247,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	248,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	249,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	250,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	251,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	252,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	253,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	254,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	255,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	256,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	257,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	258,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	259,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	260,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	261,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	262,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	263,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	264,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	265,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	266,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	267,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	268,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	269,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	270,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	271,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	272,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	273,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	274,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	275,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	276,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	277,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	278,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	279,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	280,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	281,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	282,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	283,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	284,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	285,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	286,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	287,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	288,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	289,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	290,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	291,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	292,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	293,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	294,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	295,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	296,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	297,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	298,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	299,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	300,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	301,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	302,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	303,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	304,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	305,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	306,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	307,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	308,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	309,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	310,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	311,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	312,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	313,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	314,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	315,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	316,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	317,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	318,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	319,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	320,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	321,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	322,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	323,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	324,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	325,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	326,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	327,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	328,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	329,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	330,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	331,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	332,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	333,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	334,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	335,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	336,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	337,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	338,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	339,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	340,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	341,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	342,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	343,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	344,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	345,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	346,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	347,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	348,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	349,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	350,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	351,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	352,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	353,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	354,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	355,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	356,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	357,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	358,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	359,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	360,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	361,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	362,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	363,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	364,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	365,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	366,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	367,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	368,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	369,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	370,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	371,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	372,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	373,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	374,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	375,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	376,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	377,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	378,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	379,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	380,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	381,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	382,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	383,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	384,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	385,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	386,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	387,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	388,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	389,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	390,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	391,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	392,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	393,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	394,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	395,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	396,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	397,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	398,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	399,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	400,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	401,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	402,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	403,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	404,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	405,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	406,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	407,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	408,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	409,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	410,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	411,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	412,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	413,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	414,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	415,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	416,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	417,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	418,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	419,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	420,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	421,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	422,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	423,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	424,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	425,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	426,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	427,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	428,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	429,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	430,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	431,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	432,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	433,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	434,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	435,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	436,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	437,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	438,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	439,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	440,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	441,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	442,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	443,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	444,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	445,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	446,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	447,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	448,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	449,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	450,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	451,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	452,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	453,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	454,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	455,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	456,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	457,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	458,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	459,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	460,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	461,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	462,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	463,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	464,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	465,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	466,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	467,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	468,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	469,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	470,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	471,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	472,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	473,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	474,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	475,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	476,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	477,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	478,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	479,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	480,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	481,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	482,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	483,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	484,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	485,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	486,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	487,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	488,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	489,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	490,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	491,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	492,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	493,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	494,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	495,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	496,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	497,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	498,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	499,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	500,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	501,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	502,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	503,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	504,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	505,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	506,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	507,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	508,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	509,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	510,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	511,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	512,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	513,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	514,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	515,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	516,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	517,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	518,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	519,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	520,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	521,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	522,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	523,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	524,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	525,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	526,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	527,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	528,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	529,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	530,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	531,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	532,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	533,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	534,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	535,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	536,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	537,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	538,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	539,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	540,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	541,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	542,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	543,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	544,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	545,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	546,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	547,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	548,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	549,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	550,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	551,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	552,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	553,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	554,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	555,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	556,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	557,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	558,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	559,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	560,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	561,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	562,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	563,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	564,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	565,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	566,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	567,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	568,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	569,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	570,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	571,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	572,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	573,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	574,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	575,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	576,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	577,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	578,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	579,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	580,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	581,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	582,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	583,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	584,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	585,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	586,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	587,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	588,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	589,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	590,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	591,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	592,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	593,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	594,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	595,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	596,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	597,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	598,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	599,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	600,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	601,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	602,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	603,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	604,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	605,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	606,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	607,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	608,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	609,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	610,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	611,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	612,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	613,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	614,
									"scores":	[-9.8626712619787, -10.552282017278703, -10.5548805242787, -9.6772562502787, -9.3147688840787, -9.8881453672787, -9.8861947640787, -9.3852597640787, -9.3872103672787, -9.8861947640787, -9.8861947640787, -9.6401558502787, -9.9232951640787, -9.8861947640787, -9.8861947640787, -9.8881453672787, -9.6401558502787, -9.8861947640787, -9.9232951640787, -10.4543020242787]
								}]
						}, {
							"switch":	15,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	350,
							"begin_column":	2,
							"end_line":	350,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L350\", 20, &(zoptions), sizeof (zoptions), &((zoptions)->refcount__gc), sizeof ((zoptions)->refcount__gc), &((zoptions)->is_ref__gc), sizeof ((zoptions)->is_ref__gc), &(options), sizeof (options), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(zopened), sizeof (zopened), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zfuncname), sizeof (zfuncname), &(us), sizeof (us), &(call_result), sizeof (call_result), &(context), sizeof (context), &(zretval), sizeof (zretval), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &(wrapper), sizeof (wrapper), &((zoptions)->type), sizeof ((zoptions)->type)))\n    do {\n        (zoptions) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(zoptions))->u.buffered = ((void *)0);\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8861882331787, -9.0340363992787, -8.2604417982787, -8.0302951242787, -7.8430228482787019, -8.4995551242787, -8.4938324242787, -8.1718213942787, -8.1775440942787, -8.4938324242787, -8.4938324242787, -7.7359443242787025, -8.7881832242787, -8.4938324242787, -8.4938324242787, -8.4995551242787, -7.7359443242787025, -8.4938324242787, -8.7881832242787, -8.2607891342787028]
								}]
						}]
				}, {
					"line":	351,
					"switches":	[{
							"switch":	16,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	352,
							"begin_column":	0,
							"end_line":	352,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L352\", 20, &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zopened), sizeof (zopened), &((zoptions)->refcount__gc), sizeof ((zoptions)->refcount__gc), &((zoptions)->is_ref__gc), sizeof ((zoptions)->is_ref__gc), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(zfilename), sizeof (zfilename), &(zfuncname), sizeof (zfuncname), &(filename), sizeof (filename), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zretval), sizeof (zretval), &(context), sizeof (context), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(old_in_user_include), sizeof (old_in_user_include), &(wrapper), sizeof (wrapper), &(uwrap), sizeof (uwrap), &((zoptions)->type), sizeof ((zoptions)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	2,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	3,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	4,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	5,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	6,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	7,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	8,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	9,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	10,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	11,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	12,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	13,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	14,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	15,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	16,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	17,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	18,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	19,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	20,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	21,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	22,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	23,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	24,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	25,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	26,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	27,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	28,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	29,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	30,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	31,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	32,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	33,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	34,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	35,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	36,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	37,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	38,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	39,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	40,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	41,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	42,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	43,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	44,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	45,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	46,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	47,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	48,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	49,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	50,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	51,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	52,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	53,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	54,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	55,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	56,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	57,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	58,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	59,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	60,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	61,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	62,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	63,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	64,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	65,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	66,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	67,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	68,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	69,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	70,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	71,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	72,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	73,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	74,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	75,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	76,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	77,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	78,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	79,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	80,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	81,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	82,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	83,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	84,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	85,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	86,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	87,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	88,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	89,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	90,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	91,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	92,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	93,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	94,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	95,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	96,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	97,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	98,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	99,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	100,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	101,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	102,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	103,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	104,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	105,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	106,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	107,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	108,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	109,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	110,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	111,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	112,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	113,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	114,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	115,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	116,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	117,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	118,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	119,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	120,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	121,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	122,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	123,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	124,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	125,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	126,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	127,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	128,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	129,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	130,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	131,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	132,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	133,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	134,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	135,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	136,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	137,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	138,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	139,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	140,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	141,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	142,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	143,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	144,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	145,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	146,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	147,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	148,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	149,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	150,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	151,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	152,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	153,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	154,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	155,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	156,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	157,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	158,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	159,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	160,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	161,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	162,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	163,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	164,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	165,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	166,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	167,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	168,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	169,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	170,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	171,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	172,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	173,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	174,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	175,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	176,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	177,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	178,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	179,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	180,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	181,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	182,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	183,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	184,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	185,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	186,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	187,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	188,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	189,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	190,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	191,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	192,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	193,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	194,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	195,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	196,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	197,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	198,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	199,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	200,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	201,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	202,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	203,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	204,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	205,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	206,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	207,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	208,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	209,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	210,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	211,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	212,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	213,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	214,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	215,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	216,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	217,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	218,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	219,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	220,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	221,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	222,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	223,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	224,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	225,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	226,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	227,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	228,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	229,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	230,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	231,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	232,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	233,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	234,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	235,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	236,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	237,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	238,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	239,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	240,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	241,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	242,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	243,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	244,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	245,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	246,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	247,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	248,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	249,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	250,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	251,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	252,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	253,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	254,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	255,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	256,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	257,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	258,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	259,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	260,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	261,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	262,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	263,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	264,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	265,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	266,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	267,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	268,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	269,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	270,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	271,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	272,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	273,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	274,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	275,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	276,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	277,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	278,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	279,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	280,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	281,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	282,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	283,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	284,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	285,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	286,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	287,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	288,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	289,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	290,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	291,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	292,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	293,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	294,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	295,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	296,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	297,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	298,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	299,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	300,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	301,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	302,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	303,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	304,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	305,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	306,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	307,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	308,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	309,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	310,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	311,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	312,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	313,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	314,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	315,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	316,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	317,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	318,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	319,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	320,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	321,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	322,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	323,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	324,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	325,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	326,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	327,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	328,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	329,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	330,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	331,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	332,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	333,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	334,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	335,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	336,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	337,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	338,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	339,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	340,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	341,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	342,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	343,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	344,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	345,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	346,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	347,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	348,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	349,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	350,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	351,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	352,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	353,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	354,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	355,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	356,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	357,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	358,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	359,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	360,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	361,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	362,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	363,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	364,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	365,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	366,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	367,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	368,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	369,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	370,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	371,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	372,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	373,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	374,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	375,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	376,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	377,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	378,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	379,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	380,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	381,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	382,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	383,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	384,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	385,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	386,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	387,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	388,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	389,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	390,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	391,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	392,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	393,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	394,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	395,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	396,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	397,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	398,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	399,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	400,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	401,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	402,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	403,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	404,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	405,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	406,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	407,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	408,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	409,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	410,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	411,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	412,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	413,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	414,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	415,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	416,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	417,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	418,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	419,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	420,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	421,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	422,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	423,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	424,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	425,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	426,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	427,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	428,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	429,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	430,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	431,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	432,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	433,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	434,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	435,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	436,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	437,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	438,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	439,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	440,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	441,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	442,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	443,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	444,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	445,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	446,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	447,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	448,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	449,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	450,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	451,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	452,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	453,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	454,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	455,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	456,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	457,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	458,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	459,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	460,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	461,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	462,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	463,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	464,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	465,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	466,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	467,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	468,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	469,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	470,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	471,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	472,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	473,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	474,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	475,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	476,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	477,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	478,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	479,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	480,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	481,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	482,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	483,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	484,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	485,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	486,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	487,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	488,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	489,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	490,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	491,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	492,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	493,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	494,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	495,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	496,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	497,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	498,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	499,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	500,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	501,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	502,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	503,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	504,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	505,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	506,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	507,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	508,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	509,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	510,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	511,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	512,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	513,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	514,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	515,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	516,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	517,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	518,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	519,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	520,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	521,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	522,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	523,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	524,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	525,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	526,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	527,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	528,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	529,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	530,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	531,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	532,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	533,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	534,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	535,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	536,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	537,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	538,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	539,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	540,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	541,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	542,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	543,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	544,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	545,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	546,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	547,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	548,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	549,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	550,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	551,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	552,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	553,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	554,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	555,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	556,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	557,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	558,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	559,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	560,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	561,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	562,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	563,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	564,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	565,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	566,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	567,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	568,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	569,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	570,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	571,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	572,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	573,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	574,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	575,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	576,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	577,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	578,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	579,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	580,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	581,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	582,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	583,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	584,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	585,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	586,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	587,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	588,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	589,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	590,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	591,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	592,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	593,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	594,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	595,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	596,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	597,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	598,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	599,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	600,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	601,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	602,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	603,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	604,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	605,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	606,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	607,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	608,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	609,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	610,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	611,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	612,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	613,
									"scores":	[-8.3671193502210262, -9.2813566044210258, -10.539475175121026, -10.272477658421026, -10.272477658421026, -9.7043703982210268, -9.7063210014210259, -9.2034353982210249, -9.7043703982210268, -9.2053860014210258, -9.4583314844210253, -9.7043703982210268, -9.7043703982210268, -9.7414707982210267, -9.7043703982210268, -9.7063210014210259, -9.4583314844210253, -9.7414707982210267, -9.7043703982210268, -10.272477658421026]
								}]
						}, {
							"switch":	17,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	352,
							"begin_column":	2,
							"end_line":	352,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L352\", 20, &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zopened), sizeof (zopened), &((zoptions)->refcount__gc), sizeof ((zoptions)->refcount__gc), &((zoptions)->is_ref__gc), sizeof ((zoptions)->is_ref__gc), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(zfilename), sizeof (zfilename), &(zfuncname), sizeof (zfuncname), &(filename), sizeof (filename), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zretval), sizeof (zretval), &(context), sizeof (context), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(old_in_user_include), sizeof (old_in_user_include), &(wrapper), sizeof (wrapper), &(uwrap), sizeof (uwrap), &((zoptions)->type), sizeof ((zoptions)->type)))\n    args[2] = &zoptions;\n", "{\n}\n", "args[2] = &(&args)", "args[2] = &(&call_result)", "args[2] = &(&context)", "args[2] = &(&filename)", "args[2] = &(&mode)", "args[2] = &(&old_in_user_include)", "args[2] = &(&opened_path)", "args[2] = &(&options)", "args[2] = &(&stream)", "args[2] = &(&us)", "args[2] = &(&uwrap)", "args[2] = &(&wrapper)", "args[2] = &(&zfilename)", "args[2] = &(&zfuncname)", "args[2] = &(&zmode)", "args[2] = &(&zopened)", "args[2] = &(&zoptions)", "args[2] = &(&zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.9778511684210267, -7.4779077584210265, -8.582665737321026, -8.0789647684210273, -8.0789647684210273, -8.3120080584210267, -8.3177307584210265, -7.9899970284210262, -8.3120080584210267, -7.9957197284210269, -7.554119958421027, -8.3120080584210267, -8.3120080584210267, -8.6063588584210269, -8.3120080584210267, -8.3177307584210265, -7.554119958421027, -8.6063588584210269, -8.3120080584210267, -8.0789647684210273]
								}, {
									"case":	2,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	3,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	4,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	5,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	6,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	7,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	8,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	9,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	10,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	11,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	12,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	13,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	14,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	15,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	16,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	17,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	18,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	19,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	20,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	21,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	22,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	23,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	24,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	25,
									"scores":	[-6.9020236884210266]
								}, {
									"case":	26,
									"scores":	[-6.9020236884210266]
								}]
						}]
				}, {
					"line":	353,
					"switches":	[{
							"switch":	18,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	354,
							"begin_column":	0,
							"end_line":	354,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset((zopened), 0, sizeof (*((zopened))))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L354\", 20, &(zopened), sizeof (zopened), &((zopened)->refcount__gc), sizeof ((zopened)->refcount__gc), &((zopened)->is_ref__gc), sizeof ((zopened)->is_ref__gc), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zmode), sizeof (zmode), &(zfuncname), sizeof (zfuncname), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zretval), sizeof (zretval), &(context), sizeof (context), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &((zopened)->type), sizeof ((zopened)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	2,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	3,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	4,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	5,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	6,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	7,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	8,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	9,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	10,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	11,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	12,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	13,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	14,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	15,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	16,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	17,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	18,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	19,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	20,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	21,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	22,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	23,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	24,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	25,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	26,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	27,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	28,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	29,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	30,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	31,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	32,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	33,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	34,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	35,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	36,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	37,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	38,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	39,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	40,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	41,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	42,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	43,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	44,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	45,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	46,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	47,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	48,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	49,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	50,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	51,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	52,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	53,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	54,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	55,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	56,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	57,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	58,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	59,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	60,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	61,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	62,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	63,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	64,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	65,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	66,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	67,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	68,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	69,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	70,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	71,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	72,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	73,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	74,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	75,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	76,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	77,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	78,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	79,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	80,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	81,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	82,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	83,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	84,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	85,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	86,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	87,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	88,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	89,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	90,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	91,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	92,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	93,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	94,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	95,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	96,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	97,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	98,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	99,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	100,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	101,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	102,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	103,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	104,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	105,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	106,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	107,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	108,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	109,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	110,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	111,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	112,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	113,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	114,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	115,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	116,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	117,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	118,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	119,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	120,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	121,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	122,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	123,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	124,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	125,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	126,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	127,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	128,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	129,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	130,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	131,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	132,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	133,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	134,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	135,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	136,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	137,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	138,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	139,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	140,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	141,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	142,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	143,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	144,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	145,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	146,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	147,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	148,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	149,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	150,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	151,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	152,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	153,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	154,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	155,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	156,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	157,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	158,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	159,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	160,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	161,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	162,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	163,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	164,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	165,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	166,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	167,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	168,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	169,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	170,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	171,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	172,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	173,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	174,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	175,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	176,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	177,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	178,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	179,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	180,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	181,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	182,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	183,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	184,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	185,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	186,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	187,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	188,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	189,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	190,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	191,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	192,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	193,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	194,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	195,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	196,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	197,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	198,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	199,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	200,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	201,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	202,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	203,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	204,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	205,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	206,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	207,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	208,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	209,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	210,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	211,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	212,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	213,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	214,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	215,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	216,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	217,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	218,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	219,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	220,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	221,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	222,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	223,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	224,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	225,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	226,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	227,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	228,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	229,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	230,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	231,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	232,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	233,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	234,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	235,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	236,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	237,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	238,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	239,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	240,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	241,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	242,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	243,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	244,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	245,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	246,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	247,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	248,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	249,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	250,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	251,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	252,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	253,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	254,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	255,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	256,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	257,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	258,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	259,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	260,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	261,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	262,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	263,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	264,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	265,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	266,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	267,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	268,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	269,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	270,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	271,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	272,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	273,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	274,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	275,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	276,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	277,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	278,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	279,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	280,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	281,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	282,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	283,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	284,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	285,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	286,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	287,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	288,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	289,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	290,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	291,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	292,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	293,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	294,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	295,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	296,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	297,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	298,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	299,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	300,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	301,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	302,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	303,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	304,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	305,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	306,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	307,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	308,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	309,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	310,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	311,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	312,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	313,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	314,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	315,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	316,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	317,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	318,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	319,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	320,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	321,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	322,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	323,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	324,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	325,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	326,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	327,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	328,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	329,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	330,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	331,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	332,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	333,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	334,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	335,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	336,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	337,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	338,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	339,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	340,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	341,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	342,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	343,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	344,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	345,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	346,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	347,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	348,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	349,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	350,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	351,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	352,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	353,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	354,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	355,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	356,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	357,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	358,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	359,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	360,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	361,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	362,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	363,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	364,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	365,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	366,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	367,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	368,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	369,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	370,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	371,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	372,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	373,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	374,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	375,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	376,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	377,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	378,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	379,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	380,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	381,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	382,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	383,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	384,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	385,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	386,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	387,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	388,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	389,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	390,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	391,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	392,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	393,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	394,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	395,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	396,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	397,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	398,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	399,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	400,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	401,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	402,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	403,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	404,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	405,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	406,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	407,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	408,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	409,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	410,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	411,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	412,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	413,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	414,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	415,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	416,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	417,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	418,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	419,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	420,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	421,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	422,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	423,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	424,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	425,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	426,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	427,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	428,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	429,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	430,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	431,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	432,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	433,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	434,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	435,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	436,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	437,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	438,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	439,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	440,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	441,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	442,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	443,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	444,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	445,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	446,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	447,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	448,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	449,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	450,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	451,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	452,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	453,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	454,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	455,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	456,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	457,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	458,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	459,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	460,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	461,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	462,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	463,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	464,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	465,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	466,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	467,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	468,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	469,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	470,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	471,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	472,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	473,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	474,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	475,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	476,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	477,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	478,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	479,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	480,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	481,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	482,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	483,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	484,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	485,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	486,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	487,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	488,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	489,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	490,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	491,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	492,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	493,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	494,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	495,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	496,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	497,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	498,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	499,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	500,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	501,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	502,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	503,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	504,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	505,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	506,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	507,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	508,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	509,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	510,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	511,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	512,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	513,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	514,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	515,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	516,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	517,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	518,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	519,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	520,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	521,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	522,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	523,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	524,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	525,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	526,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	527,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	528,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	529,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	530,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	531,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	532,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	533,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	534,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	535,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	536,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	537,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	538,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	539,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	540,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	541,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	542,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	543,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	544,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	545,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	546,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	547,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	548,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	549,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	550,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	551,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	552,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	553,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	554,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	555,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	556,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	557,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	558,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	559,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	560,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	561,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	562,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	563,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	564,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	565,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	566,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	567,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	568,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	569,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	570,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	571,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	572,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	573,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	574,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	575,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	576,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	577,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	578,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	579,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	580,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	581,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	582,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	583,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	584,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	585,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	586,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	587,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	588,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	589,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	590,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	591,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	592,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	593,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	594,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	595,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	596,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	597,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	598,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	599,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	600,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	601,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	602,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	603,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	604,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	605,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	606,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	607,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	608,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	609,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	610,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	611,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	612,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	613,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	614,
									"scores":	[-9.6000360668509472, -10.289646822150949, -10.292245329150948, -9.05213368895095, -9.20054577515095, -9.62355956895095, -9.62355956895095, -9.62551017215095, -9.37752065515095, -9.62355956895095, -9.1226245689509469, -9.12457517215095, -9.62355956895095, -9.66065996895095, -9.62355956895095, -9.62551017215095, -9.66065996895095, -9.37752065515095, -9.62355956895095, -10.191666829150948]
								}]
						}, {
							"switch":	19,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	354,
							"begin_column":	2,
							"end_line":	354,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L354\", 20, &(zopened), sizeof (zopened), &((zopened)->refcount__gc), sizeof ((zopened)->refcount__gc), &((zopened)->is_ref__gc), sizeof ((zopened)->is_ref__gc), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zmode), sizeof (zmode), &(zfuncname), sizeof (zfuncname), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(zretval), sizeof (zretval), &(context), sizeof (context), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &((zopened)->type), sizeof ((zopened)->type)))\n    do {\n        (zopened) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(zopened))->u.buffered = ((void *)0);\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.62355303805095, -8.77140120415095, -7.9978066031509485, -7.5803876531509484, -7.3970969291509485, -8.23119722915095, -8.23119722915095, -8.23691992915095, -7.47330912915095, -8.23119722915095, -7.9091861991509482, -7.91490889915095, -8.23119722915095, -8.52554802915095, -8.23119722915095, -8.23691992915095, -8.52554802915095, -7.47330912915095, -8.23119722915095, -7.9981539391509484]
								}]
						}]
				}, {
					"line":	354,
					"switches":	[{
							"switch":	20,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	355,
							"begin_column":	0,
							"end_line":	355,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L355\", 20, &(zopened), sizeof (zopened), &((zopened)->refcount__gc), sizeof ((zopened)->refcount__gc), &((zopened)->is_ref__gc), sizeof ((zopened)->is_ref__gc), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zfilename), sizeof (zfilename), &(zretval), sizeof (zretval), &(filename), sizeof (filename), &(stream), sizeof (stream), &(context), sizeof (context), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &((zopened)->type), sizeof ((zopened)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.74040202988087]
								}, {
									"case":	2,
									"scores":	[-6.74040202988087]
								}, {
									"case":	3,
									"scores":	[-6.74040202988087]
								}, {
									"case":	4,
									"scores":	[-6.74040202988087]
								}, {
									"case":	5,
									"scores":	[-6.74040202988087]
								}, {
									"case":	6,
									"scores":	[-6.74040202988087]
								}, {
									"case":	7,
									"scores":	[-6.74040202988087]
								}, {
									"case":	8,
									"scores":	[-6.74040202988087]
								}, {
									"case":	9,
									"scores":	[-6.74040202988087]
								}, {
									"case":	10,
									"scores":	[-6.74040202988087]
								}, {
									"case":	11,
									"scores":	[-6.74040202988087]
								}, {
									"case":	12,
									"scores":	[-6.74040202988087]
								}, {
									"case":	13,
									"scores":	[-6.74040202988087]
								}, {
									"case":	14,
									"scores":	[-6.74040202988087]
								}, {
									"case":	15,
									"scores":	[-6.74040202988087]
								}, {
									"case":	16,
									"scores":	[-6.74040202988087]
								}, {
									"case":	17,
									"scores":	[-6.74040202988087]
								}, {
									"case":	18,
									"scores":	[-6.74040202988087]
								}, {
									"case":	19,
									"scores":	[-6.74040202988087]
								}, {
									"case":	20,
									"scores":	[-6.74040202988087]
								}, {
									"case":	21,
									"scores":	[-6.74040202988087]
								}, {
									"case":	22,
									"scores":	[-6.74040202988087]
								}, {
									"case":	23,
									"scores":	[-6.74040202988087]
								}, {
									"case":	24,
									"scores":	[-6.74040202988087]
								}, {
									"case":	25,
									"scores":	[-6.74040202988087]
								}, {
									"case":	26,
									"scores":	[-6.74040202988087]
								}, {
									"case":	27,
									"scores":	[-6.74040202988087]
								}, {
									"case":	28,
									"scores":	[-6.74040202988087]
								}, {
									"case":	29,
									"scores":	[-6.74040202988087]
								}, {
									"case":	30,
									"scores":	[-6.74040202988087]
								}, {
									"case":	31,
									"scores":	[-6.74040202988087]
								}, {
									"case":	32,
									"scores":	[-6.74040202988087]
								}, {
									"case":	33,
									"scores":	[-6.74040202988087]
								}, {
									"case":	34,
									"scores":	[-6.74040202988087]
								}, {
									"case":	35,
									"scores":	[-6.74040202988087]
								}, {
									"case":	36,
									"scores":	[-6.74040202988087]
								}, {
									"case":	37,
									"scores":	[-6.74040202988087]
								}, {
									"case":	38,
									"scores":	[-6.74040202988087]
								}, {
									"case":	39,
									"scores":	[-6.74040202988087]
								}, {
									"case":	40,
									"scores":	[-6.74040202988087]
								}, {
									"case":	41,
									"scores":	[-6.74040202988087]
								}, {
									"case":	42,
									"scores":	[-6.74040202988087]
								}, {
									"case":	43,
									"scores":	[-6.74040202988087]
								}, {
									"case":	44,
									"scores":	[-6.74040202988087]
								}, {
									"case":	45,
									"scores":	[-6.74040202988087]
								}, {
									"case":	46,
									"scores":	[-6.74040202988087]
								}, {
									"case":	47,
									"scores":	[-6.74040202988087]
								}, {
									"case":	48,
									"scores":	[-6.74040202988087]
								}, {
									"case":	49,
									"scores":	[-6.74040202988087]
								}, {
									"case":	50,
									"scores":	[-6.74040202988087]
								}, {
									"case":	51,
									"scores":	[-6.74040202988087]
								}, {
									"case":	52,
									"scores":	[-6.74040202988087]
								}, {
									"case":	53,
									"scores":	[-6.74040202988087]
								}, {
									"case":	54,
									"scores":	[-6.74040202988087]
								}, {
									"case":	55,
									"scores":	[-6.74040202988087]
								}, {
									"case":	56,
									"scores":	[-6.74040202988087]
								}, {
									"case":	57,
									"scores":	[-6.74040202988087]
								}, {
									"case":	58,
									"scores":	[-6.74040202988087]
								}, {
									"case":	59,
									"scores":	[-6.74040202988087]
								}, {
									"case":	60,
									"scores":	[-6.74040202988087]
								}, {
									"case":	61,
									"scores":	[-6.74040202988087]
								}, {
									"case":	62,
									"scores":	[-6.74040202988087]
								}, {
									"case":	63,
									"scores":	[-6.74040202988087]
								}, {
									"case":	64,
									"scores":	[-6.74040202988087]
								}, {
									"case":	65,
									"scores":	[-6.74040202988087]
								}, {
									"case":	66,
									"scores":	[-6.74040202988087]
								}, {
									"case":	67,
									"scores":	[-6.74040202988087]
								}, {
									"case":	68,
									"scores":	[-6.74040202988087]
								}, {
									"case":	69,
									"scores":	[-6.74040202988087]
								}, {
									"case":	70,
									"scores":	[-6.74040202988087]
								}, {
									"case":	71,
									"scores":	[-6.74040202988087]
								}, {
									"case":	72,
									"scores":	[-6.74040202988087]
								}, {
									"case":	73,
									"scores":	[-6.74040202988087]
								}, {
									"case":	74,
									"scores":	[-6.74040202988087]
								}, {
									"case":	75,
									"scores":	[-6.74040202988087]
								}, {
									"case":	76,
									"scores":	[-6.74040202988087]
								}, {
									"case":	77,
									"scores":	[-6.74040202988087]
								}, {
									"case":	78,
									"scores":	[-6.74040202988087]
								}, {
									"case":	79,
									"scores":	[-6.74040202988087]
								}, {
									"case":	80,
									"scores":	[-6.74040202988087]
								}, {
									"case":	81,
									"scores":	[-6.74040202988087]
								}, {
									"case":	82,
									"scores":	[-6.74040202988087]
								}, {
									"case":	83,
									"scores":	[-6.74040202988087]
								}, {
									"case":	84,
									"scores":	[-6.74040202988087]
								}, {
									"case":	85,
									"scores":	[-6.74040202988087]
								}, {
									"case":	86,
									"scores":	[-6.74040202988087]
								}, {
									"case":	87,
									"scores":	[-6.74040202988087]
								}, {
									"case":	88,
									"scores":	[-6.74040202988087]
								}, {
									"case":	89,
									"scores":	[-6.74040202988087]
								}, {
									"case":	90,
									"scores":	[-6.74040202988087]
								}, {
									"case":	91,
									"scores":	[-6.74040202988087]
								}, {
									"case":	92,
									"scores":	[-6.74040202988087]
								}, {
									"case":	93,
									"scores":	[-6.74040202988087]
								}, {
									"case":	94,
									"scores":	[-6.74040202988087]
								}, {
									"case":	95,
									"scores":	[-6.74040202988087]
								}, {
									"case":	96,
									"scores":	[-6.74040202988087]
								}, {
									"case":	97,
									"scores":	[-6.74040202988087]
								}, {
									"case":	98,
									"scores":	[-6.74040202988087]
								}, {
									"case":	99,
									"scores":	[-6.74040202988087]
								}, {
									"case":	100,
									"scores":	[-6.74040202988087]
								}, {
									"case":	101,
									"scores":	[-6.74040202988087]
								}, {
									"case":	102,
									"scores":	[-6.74040202988087]
								}, {
									"case":	103,
									"scores":	[-6.74040202988087]
								}, {
									"case":	104,
									"scores":	[-6.74040202988087]
								}, {
									"case":	105,
									"scores":	[-6.74040202988087]
								}, {
									"case":	106,
									"scores":	[-6.74040202988087]
								}, {
									"case":	107,
									"scores":	[-6.74040202988087]
								}, {
									"case":	108,
									"scores":	[-6.74040202988087]
								}, {
									"case":	109,
									"scores":	[-6.74040202988087]
								}, {
									"case":	110,
									"scores":	[-6.74040202988087]
								}, {
									"case":	111,
									"scores":	[-6.74040202988087]
								}, {
									"case":	112,
									"scores":	[-6.74040202988087]
								}, {
									"case":	113,
									"scores":	[-6.74040202988087]
								}, {
									"case":	114,
									"scores":	[-6.74040202988087]
								}, {
									"case":	115,
									"scores":	[-6.74040202988087]
								}, {
									"case":	116,
									"scores":	[-6.74040202988087]
								}, {
									"case":	117,
									"scores":	[-6.74040202988087]
								}, {
									"case":	118,
									"scores":	[-6.74040202988087]
								}, {
									"case":	119,
									"scores":	[-6.74040202988087]
								}, {
									"case":	120,
									"scores":	[-6.74040202988087]
								}, {
									"case":	121,
									"scores":	[-6.74040202988087]
								}, {
									"case":	122,
									"scores":	[-6.74040202988087]
								}, {
									"case":	123,
									"scores":	[-6.74040202988087]
								}, {
									"case":	124,
									"scores":	[-6.74040202988087]
								}, {
									"case":	125,
									"scores":	[-6.74040202988087]
								}, {
									"case":	126,
									"scores":	[-6.74040202988087]
								}, {
									"case":	127,
									"scores":	[-6.74040202988087]
								}, {
									"case":	128,
									"scores":	[-6.74040202988087]
								}, {
									"case":	129,
									"scores":	[-6.74040202988087]
								}, {
									"case":	130,
									"scores":	[-6.74040202988087]
								}, {
									"case":	131,
									"scores":	[-6.74040202988087]
								}, {
									"case":	132,
									"scores":	[-6.74040202988087]
								}, {
									"case":	133,
									"scores":	[-6.74040202988087]
								}, {
									"case":	134,
									"scores":	[-6.74040202988087]
								}, {
									"case":	135,
									"scores":	[-6.74040202988087]
								}, {
									"case":	136,
									"scores":	[-6.74040202988087]
								}, {
									"case":	137,
									"scores":	[-6.74040202988087]
								}, {
									"case":	138,
									"scores":	[-6.74040202988087]
								}, {
									"case":	139,
									"scores":	[-6.74040202988087]
								}, {
									"case":	140,
									"scores":	[-6.74040202988087]
								}, {
									"case":	141,
									"scores":	[-6.74040202988087]
								}, {
									"case":	142,
									"scores":	[-6.74040202988087]
								}, {
									"case":	143,
									"scores":	[-6.74040202988087]
								}, {
									"case":	144,
									"scores":	[-6.74040202988087]
								}, {
									"case":	145,
									"scores":	[-6.74040202988087]
								}, {
									"case":	146,
									"scores":	[-6.74040202988087]
								}, {
									"case":	147,
									"scores":	[-6.74040202988087]
								}, {
									"case":	148,
									"scores":	[-6.74040202988087]
								}, {
									"case":	149,
									"scores":	[-6.74040202988087]
								}, {
									"case":	150,
									"scores":	[-6.74040202988087]
								}, {
									"case":	151,
									"scores":	[-6.74040202988087]
								}, {
									"case":	152,
									"scores":	[-6.74040202988087]
								}, {
									"case":	153,
									"scores":	[-6.74040202988087]
								}, {
									"case":	154,
									"scores":	[-6.74040202988087]
								}, {
									"case":	155,
									"scores":	[-6.74040202988087]
								}, {
									"case":	156,
									"scores":	[-6.74040202988087]
								}, {
									"case":	157,
									"scores":	[-6.74040202988087]
								}, {
									"case":	158,
									"scores":	[-6.74040202988087]
								}, {
									"case":	159,
									"scores":	[-6.74040202988087]
								}, {
									"case":	160,
									"scores":	[-6.74040202988087]
								}, {
									"case":	161,
									"scores":	[-6.74040202988087]
								}, {
									"case":	162,
									"scores":	[-6.74040202988087]
								}, {
									"case":	163,
									"scores":	[-6.74040202988087]
								}, {
									"case":	164,
									"scores":	[-6.74040202988087]
								}, {
									"case":	165,
									"scores":	[-6.74040202988087]
								}, {
									"case":	166,
									"scores":	[-6.74040202988087]
								}, {
									"case":	167,
									"scores":	[-6.74040202988087]
								}, {
									"case":	168,
									"scores":	[-6.74040202988087]
								}, {
									"case":	169,
									"scores":	[-6.74040202988087]
								}, {
									"case":	170,
									"scores":	[-6.74040202988087]
								}, {
									"case":	171,
									"scores":	[-6.74040202988087]
								}, {
									"case":	172,
									"scores":	[-6.74040202988087]
								}, {
									"case":	173,
									"scores":	[-6.74040202988087]
								}, {
									"case":	174,
									"scores":	[-6.74040202988087]
								}, {
									"case":	175,
									"scores":	[-6.74040202988087]
								}, {
									"case":	176,
									"scores":	[-6.74040202988087]
								}, {
									"case":	177,
									"scores":	[-6.74040202988087]
								}, {
									"case":	178,
									"scores":	[-6.74040202988087]
								}, {
									"case":	179,
									"scores":	[-6.74040202988087]
								}, {
									"case":	180,
									"scores":	[-6.74040202988087]
								}, {
									"case":	181,
									"scores":	[-6.74040202988087]
								}, {
									"case":	182,
									"scores":	[-6.74040202988087]
								}, {
									"case":	183,
									"scores":	[-6.74040202988087]
								}, {
									"case":	184,
									"scores":	[-6.74040202988087]
								}, {
									"case":	185,
									"scores":	[-6.74040202988087]
								}, {
									"case":	186,
									"scores":	[-6.74040202988087]
								}, {
									"case":	187,
									"scores":	[-6.74040202988087]
								}, {
									"case":	188,
									"scores":	[-6.74040202988087]
								}, {
									"case":	189,
									"scores":	[-6.74040202988087]
								}, {
									"case":	190,
									"scores":	[-6.74040202988087]
								}, {
									"case":	191,
									"scores":	[-6.74040202988087]
								}, {
									"case":	192,
									"scores":	[-6.74040202988087]
								}, {
									"case":	193,
									"scores":	[-6.74040202988087]
								}, {
									"case":	194,
									"scores":	[-6.74040202988087]
								}, {
									"case":	195,
									"scores":	[-6.74040202988087]
								}, {
									"case":	196,
									"scores":	[-6.74040202988087]
								}, {
									"case":	197,
									"scores":	[-6.74040202988087]
								}, {
									"case":	198,
									"scores":	[-6.74040202988087]
								}, {
									"case":	199,
									"scores":	[-6.74040202988087]
								}, {
									"case":	200,
									"scores":	[-6.74040202988087]
								}, {
									"case":	201,
									"scores":	[-6.74040202988087]
								}, {
									"case":	202,
									"scores":	[-6.74040202988087]
								}, {
									"case":	203,
									"scores":	[-6.74040202988087]
								}, {
									"case":	204,
									"scores":	[-6.74040202988087]
								}, {
									"case":	205,
									"scores":	[-6.74040202988087]
								}, {
									"case":	206,
									"scores":	[-6.74040202988087]
								}, {
									"case":	207,
									"scores":	[-6.74040202988087]
								}, {
									"case":	208,
									"scores":	[-6.74040202988087]
								}, {
									"case":	209,
									"scores":	[-6.74040202988087]
								}, {
									"case":	210,
									"scores":	[-6.74040202988087]
								}, {
									"case":	211,
									"scores":	[-6.74040202988087]
								}, {
									"case":	212,
									"scores":	[-6.74040202988087]
								}, {
									"case":	213,
									"scores":	[-6.74040202988087]
								}, {
									"case":	214,
									"scores":	[-6.74040202988087]
								}, {
									"case":	215,
									"scores":	[-6.74040202988087]
								}, {
									"case":	216,
									"scores":	[-6.74040202988087]
								}, {
									"case":	217,
									"scores":	[-6.74040202988087]
								}, {
									"case":	218,
									"scores":	[-6.74040202988087]
								}, {
									"case":	219,
									"scores":	[-6.74040202988087]
								}, {
									"case":	220,
									"scores":	[-6.74040202988087]
								}, {
									"case":	221,
									"scores":	[-6.74040202988087]
								}, {
									"case":	222,
									"scores":	[-6.74040202988087]
								}, {
									"case":	223,
									"scores":	[-6.74040202988087]
								}, {
									"case":	224,
									"scores":	[-6.74040202988087]
								}, {
									"case":	225,
									"scores":	[-6.74040202988087]
								}, {
									"case":	226,
									"scores":	[-6.74040202988087]
								}, {
									"case":	227,
									"scores":	[-6.74040202988087]
								}, {
									"case":	228,
									"scores":	[-6.74040202988087]
								}, {
									"case":	229,
									"scores":	[-6.74040202988087]
								}, {
									"case":	230,
									"scores":	[-6.74040202988087]
								}, {
									"case":	231,
									"scores":	[-6.74040202988087]
								}, {
									"case":	232,
									"scores":	[-6.74040202988087]
								}, {
									"case":	233,
									"scores":	[-6.74040202988087]
								}, {
									"case":	234,
									"scores":	[-6.74040202988087]
								}, {
									"case":	235,
									"scores":	[-6.74040202988087]
								}, {
									"case":	236,
									"scores":	[-6.74040202988087]
								}, {
									"case":	237,
									"scores":	[-6.74040202988087]
								}, {
									"case":	238,
									"scores":	[-6.74040202988087]
								}, {
									"case":	239,
									"scores":	[-6.74040202988087]
								}, {
									"case":	240,
									"scores":	[-6.74040202988087]
								}, {
									"case":	241,
									"scores":	[-6.74040202988087]
								}, {
									"case":	242,
									"scores":	[-6.74040202988087]
								}, {
									"case":	243,
									"scores":	[-6.74040202988087]
								}, {
									"case":	244,
									"scores":	[-6.74040202988087]
								}, {
									"case":	245,
									"scores":	[-6.74040202988087]
								}, {
									"case":	246,
									"scores":	[-6.74040202988087]
								}, {
									"case":	247,
									"scores":	[-6.74040202988087]
								}, {
									"case":	248,
									"scores":	[-6.74040202988087]
								}, {
									"case":	249,
									"scores":	[-6.74040202988087]
								}, {
									"case":	250,
									"scores":	[-6.74040202988087]
								}, {
									"case":	251,
									"scores":	[-6.74040202988087]
								}, {
									"case":	252,
									"scores":	[-6.74040202988087]
								}, {
									"case":	253,
									"scores":	[-6.74040202988087]
								}, {
									"case":	254,
									"scores":	[-6.74040202988087]
								}, {
									"case":	255,
									"scores":	[-6.74040202988087]
								}, {
									"case":	256,
									"scores":	[-6.74040202988087]
								}, {
									"case":	257,
									"scores":	[-6.74040202988087]
								}, {
									"case":	258,
									"scores":	[-6.74040202988087]
								}, {
									"case":	259,
									"scores":	[-6.74040202988087]
								}, {
									"case":	260,
									"scores":	[-6.74040202988087]
								}, {
									"case":	261,
									"scores":	[-6.74040202988087]
								}, {
									"case":	262,
									"scores":	[-6.74040202988087]
								}, {
									"case":	263,
									"scores":	[-6.74040202988087]
								}, {
									"case":	264,
									"scores":	[-6.74040202988087]
								}, {
									"case":	265,
									"scores":	[-6.74040202988087]
								}, {
									"case":	266,
									"scores":	[-6.74040202988087]
								}, {
									"case":	267,
									"scores":	[-6.74040202988087]
								}, {
									"case":	268,
									"scores":	[-6.74040202988087]
								}, {
									"case":	269,
									"scores":	[-6.74040202988087]
								}, {
									"case":	270,
									"scores":	[-6.74040202988087]
								}, {
									"case":	271,
									"scores":	[-6.74040202988087]
								}, {
									"case":	272,
									"scores":	[-6.74040202988087]
								}, {
									"case":	273,
									"scores":	[-6.74040202988087]
								}, {
									"case":	274,
									"scores":	[-6.74040202988087]
								}, {
									"case":	275,
									"scores":	[-6.74040202988087]
								}, {
									"case":	276,
									"scores":	[-6.74040202988087]
								}, {
									"case":	277,
									"scores":	[-6.74040202988087]
								}, {
									"case":	278,
									"scores":	[-6.74040202988087]
								}, {
									"case":	279,
									"scores":	[-6.74040202988087]
								}, {
									"case":	280,
									"scores":	[-6.74040202988087]
								}, {
									"case":	281,
									"scores":	[-6.74040202988087]
								}, {
									"case":	282,
									"scores":	[-6.74040202988087]
								}, {
									"case":	283,
									"scores":	[-6.74040202988087]
								}, {
									"case":	284,
									"scores":	[-6.74040202988087]
								}, {
									"case":	285,
									"scores":	[-6.74040202988087]
								}, {
									"case":	286,
									"scores":	[-6.74040202988087]
								}, {
									"case":	287,
									"scores":	[-6.74040202988087]
								}, {
									"case":	288,
									"scores":	[-6.74040202988087]
								}, {
									"case":	289,
									"scores":	[-6.74040202988087]
								}, {
									"case":	290,
									"scores":	[-6.74040202988087]
								}, {
									"case":	291,
									"scores":	[-6.74040202988087]
								}, {
									"case":	292,
									"scores":	[-6.74040202988087]
								}, {
									"case":	293,
									"scores":	[-6.74040202988087]
								}, {
									"case":	294,
									"scores":	[-6.74040202988087]
								}, {
									"case":	295,
									"scores":	[-6.74040202988087]
								}, {
									"case":	296,
									"scores":	[-6.74040202988087]
								}, {
									"case":	297,
									"scores":	[-6.74040202988087]
								}, {
									"case":	298,
									"scores":	[-6.74040202988087]
								}, {
									"case":	299,
									"scores":	[-6.74040202988087]
								}, {
									"case":	300,
									"scores":	[-6.74040202988087]
								}, {
									"case":	301,
									"scores":	[-6.74040202988087]
								}, {
									"case":	302,
									"scores":	[-6.74040202988087]
								}, {
									"case":	303,
									"scores":	[-6.74040202988087]
								}, {
									"case":	304,
									"scores":	[-6.74040202988087]
								}, {
									"case":	305,
									"scores":	[-6.74040202988087]
								}, {
									"case":	306,
									"scores":	[-6.74040202988087]
								}, {
									"case":	307,
									"scores":	[-6.74040202988087]
								}, {
									"case":	308,
									"scores":	[-6.74040202988087]
								}, {
									"case":	309,
									"scores":	[-6.74040202988087]
								}, {
									"case":	310,
									"scores":	[-6.74040202988087]
								}, {
									"case":	311,
									"scores":	[-6.74040202988087]
								}, {
									"case":	312,
									"scores":	[-6.74040202988087]
								}, {
									"case":	313,
									"scores":	[-6.74040202988087]
								}, {
									"case":	314,
									"scores":	[-6.74040202988087]
								}, {
									"case":	315,
									"scores":	[-6.74040202988087]
								}, {
									"case":	316,
									"scores":	[-6.74040202988087]
								}, {
									"case":	317,
									"scores":	[-6.74040202988087]
								}, {
									"case":	318,
									"scores":	[-6.74040202988087]
								}, {
									"case":	319,
									"scores":	[-6.74040202988087]
								}, {
									"case":	320,
									"scores":	[-6.74040202988087]
								}, {
									"case":	321,
									"scores":	[-6.74040202988087]
								}, {
									"case":	322,
									"scores":	[-6.74040202988087]
								}, {
									"case":	323,
									"scores":	[-6.74040202988087]
								}, {
									"case":	324,
									"scores":	[-6.74040202988087]
								}, {
									"case":	325,
									"scores":	[-6.74040202988087]
								}, {
									"case":	326,
									"scores":	[-6.74040202988087]
								}, {
									"case":	327,
									"scores":	[-6.74040202988087]
								}, {
									"case":	328,
									"scores":	[-6.74040202988087]
								}, {
									"case":	329,
									"scores":	[-6.74040202988087]
								}, {
									"case":	330,
									"scores":	[-6.74040202988087]
								}, {
									"case":	331,
									"scores":	[-6.74040202988087]
								}, {
									"case":	332,
									"scores":	[-6.74040202988087]
								}, {
									"case":	333,
									"scores":	[-6.74040202988087]
								}, {
									"case":	334,
									"scores":	[-6.74040202988087]
								}, {
									"case":	335,
									"scores":	[-6.74040202988087]
								}, {
									"case":	336,
									"scores":	[-6.74040202988087]
								}, {
									"case":	337,
									"scores":	[-6.74040202988087]
								}, {
									"case":	338,
									"scores":	[-6.74040202988087]
								}, {
									"case":	339,
									"scores":	[-6.74040202988087]
								}, {
									"case":	340,
									"scores":	[-6.74040202988087]
								}, {
									"case":	341,
									"scores":	[-6.74040202988087]
								}, {
									"case":	342,
									"scores":	[-6.74040202988087]
								}, {
									"case":	343,
									"scores":	[-6.74040202988087]
								}, {
									"case":	344,
									"scores":	[-6.74040202988087]
								}, {
									"case":	345,
									"scores":	[-6.74040202988087]
								}, {
									"case":	346,
									"scores":	[-6.74040202988087]
								}, {
									"case":	347,
									"scores":	[-6.74040202988087]
								}, {
									"case":	348,
									"scores":	[-6.74040202988087]
								}, {
									"case":	349,
									"scores":	[-6.74040202988087]
								}, {
									"case":	350,
									"scores":	[-6.74040202988087]
								}, {
									"case":	351,
									"scores":	[-6.74040202988087]
								}, {
									"case":	352,
									"scores":	[-6.74040202988087]
								}, {
									"case":	353,
									"scores":	[-6.74040202988087]
								}, {
									"case":	354,
									"scores":	[-6.74040202988087]
								}, {
									"case":	355,
									"scores":	[-6.74040202988087]
								}, {
									"case":	356,
									"scores":	[-6.74040202988087]
								}, {
									"case":	357,
									"scores":	[-6.74040202988087]
								}, {
									"case":	358,
									"scores":	[-6.74040202988087]
								}, {
									"case":	359,
									"scores":	[-6.74040202988087]
								}, {
									"case":	360,
									"scores":	[-6.74040202988087]
								}, {
									"case":	361,
									"scores":	[-6.74040202988087]
								}, {
									"case":	362,
									"scores":	[-6.74040202988087]
								}, {
									"case":	363,
									"scores":	[-6.74040202988087]
								}, {
									"case":	364,
									"scores":	[-6.74040202988087]
								}, {
									"case":	365,
									"scores":	[-6.74040202988087]
								}, {
									"case":	366,
									"scores":	[-6.74040202988087]
								}, {
									"case":	367,
									"scores":	[-6.74040202988087]
								}, {
									"case":	368,
									"scores":	[-6.74040202988087]
								}, {
									"case":	369,
									"scores":	[-6.74040202988087]
								}, {
									"case":	370,
									"scores":	[-6.74040202988087]
								}, {
									"case":	371,
									"scores":	[-6.74040202988087]
								}, {
									"case":	372,
									"scores":	[-6.74040202988087]
								}, {
									"case":	373,
									"scores":	[-6.74040202988087]
								}, {
									"case":	374,
									"scores":	[-6.74040202988087]
								}, {
									"case":	375,
									"scores":	[-6.74040202988087]
								}, {
									"case":	376,
									"scores":	[-6.74040202988087]
								}, {
									"case":	377,
									"scores":	[-6.74040202988087]
								}, {
									"case":	378,
									"scores":	[-6.74040202988087]
								}, {
									"case":	379,
									"scores":	[-6.74040202988087]
								}, {
									"case":	380,
									"scores":	[-6.74040202988087]
								}, {
									"case":	381,
									"scores":	[-6.74040202988087]
								}, {
									"case":	382,
									"scores":	[-6.74040202988087]
								}, {
									"case":	383,
									"scores":	[-6.74040202988087]
								}, {
									"case":	384,
									"scores":	[-6.74040202988087]
								}, {
									"case":	385,
									"scores":	[-6.74040202988087]
								}, {
									"case":	386,
									"scores":	[-6.74040202988087]
								}, {
									"case":	387,
									"scores":	[-6.74040202988087]
								}, {
									"case":	388,
									"scores":	[-6.74040202988087]
								}, {
									"case":	389,
									"scores":	[-6.74040202988087]
								}, {
									"case":	390,
									"scores":	[-6.74040202988087]
								}, {
									"case":	391,
									"scores":	[-6.74040202988087]
								}, {
									"case":	392,
									"scores":	[-6.74040202988087]
								}, {
									"case":	393,
									"scores":	[-6.74040202988087]
								}, {
									"case":	394,
									"scores":	[-6.74040202988087]
								}, {
									"case":	395,
									"scores":	[-6.74040202988087]
								}, {
									"case":	396,
									"scores":	[-6.74040202988087]
								}, {
									"case":	397,
									"scores":	[-6.74040202988087]
								}, {
									"case":	398,
									"scores":	[-6.74040202988087]
								}, {
									"case":	399,
									"scores":	[-6.74040202988087]
								}, {
									"case":	400,
									"scores":	[-6.74040202988087]
								}, {
									"case":	401,
									"scores":	[-6.74040202988087]
								}, {
									"case":	402,
									"scores":	[-6.74040202988087]
								}, {
									"case":	403,
									"scores":	[-6.74040202988087]
								}, {
									"case":	404,
									"scores":	[-6.74040202988087]
								}, {
									"case":	405,
									"scores":	[-6.74040202988087]
								}, {
									"case":	406,
									"scores":	[-6.74040202988087]
								}, {
									"case":	407,
									"scores":	[-6.74040202988087]
								}, {
									"case":	408,
									"scores":	[-6.74040202988087]
								}, {
									"case":	409,
									"scores":	[-6.74040202988087]
								}, {
									"case":	410,
									"scores":	[-6.74040202988087]
								}, {
									"case":	411,
									"scores":	[-6.74040202988087]
								}, {
									"case":	412,
									"scores":	[-6.74040202988087]
								}, {
									"case":	413,
									"scores":	[-6.74040202988087]
								}, {
									"case":	414,
									"scores":	[-6.74040202988087]
								}, {
									"case":	415,
									"scores":	[-6.74040202988087]
								}, {
									"case":	416,
									"scores":	[-6.74040202988087]
								}, {
									"case":	417,
									"scores":	[-6.74040202988087]
								}, {
									"case":	418,
									"scores":	[-6.74040202988087]
								}, {
									"case":	419,
									"scores":	[-6.74040202988087]
								}, {
									"case":	420,
									"scores":	[-6.74040202988087]
								}, {
									"case":	421,
									"scores":	[-6.74040202988087]
								}, {
									"case":	422,
									"scores":	[-6.74040202988087]
								}, {
									"case":	423,
									"scores":	[-6.74040202988087]
								}, {
									"case":	424,
									"scores":	[-6.74040202988087]
								}, {
									"case":	425,
									"scores":	[-6.74040202988087]
								}, {
									"case":	426,
									"scores":	[-6.74040202988087]
								}, {
									"case":	427,
									"scores":	[-6.74040202988087]
								}, {
									"case":	428,
									"scores":	[-6.74040202988087]
								}, {
									"case":	429,
									"scores":	[-6.74040202988087]
								}, {
									"case":	430,
									"scores":	[-6.74040202988087]
								}, {
									"case":	431,
									"scores":	[-6.74040202988087]
								}, {
									"case":	432,
									"scores":	[-6.74040202988087]
								}, {
									"case":	433,
									"scores":	[-6.74040202988087]
								}, {
									"case":	434,
									"scores":	[-6.74040202988087]
								}, {
									"case":	435,
									"scores":	[-6.74040202988087]
								}, {
									"case":	436,
									"scores":	[-6.74040202988087]
								}, {
									"case":	437,
									"scores":	[-6.74040202988087]
								}, {
									"case":	438,
									"scores":	[-6.74040202988087]
								}, {
									"case":	439,
									"scores":	[-6.74040202988087]
								}, {
									"case":	440,
									"scores":	[-6.74040202988087]
								}, {
									"case":	441,
									"scores":	[-6.74040202988087]
								}, {
									"case":	442,
									"scores":	[-6.74040202988087]
								}, {
									"case":	443,
									"scores":	[-6.74040202988087]
								}, {
									"case":	444,
									"scores":	[-6.74040202988087]
								}, {
									"case":	445,
									"scores":	[-6.74040202988087]
								}, {
									"case":	446,
									"scores":	[-6.74040202988087]
								}, {
									"case":	447,
									"scores":	[-6.74040202988087]
								}, {
									"case":	448,
									"scores":	[-6.74040202988087]
								}, {
									"case":	449,
									"scores":	[-6.74040202988087]
								}, {
									"case":	450,
									"scores":	[-6.74040202988087]
								}, {
									"case":	451,
									"scores":	[-6.74040202988087]
								}, {
									"case":	452,
									"scores":	[-6.74040202988087]
								}, {
									"case":	453,
									"scores":	[-6.74040202988087]
								}, {
									"case":	454,
									"scores":	[-6.74040202988087]
								}, {
									"case":	455,
									"scores":	[-6.74040202988087]
								}, {
									"case":	456,
									"scores":	[-6.74040202988087]
								}, {
									"case":	457,
									"scores":	[-6.74040202988087]
								}, {
									"case":	458,
									"scores":	[-6.74040202988087]
								}, {
									"case":	459,
									"scores":	[-6.74040202988087]
								}, {
									"case":	460,
									"scores":	[-6.74040202988087]
								}, {
									"case":	461,
									"scores":	[-6.74040202988087]
								}, {
									"case":	462,
									"scores":	[-6.74040202988087]
								}, {
									"case":	463,
									"scores":	[-6.74040202988087]
								}, {
									"case":	464,
									"scores":	[-6.74040202988087]
								}, {
									"case":	465,
									"scores":	[-6.74040202988087]
								}, {
									"case":	466,
									"scores":	[-6.74040202988087]
								}, {
									"case":	467,
									"scores":	[-6.74040202988087]
								}, {
									"case":	468,
									"scores":	[-6.74040202988087]
								}, {
									"case":	469,
									"scores":	[-6.74040202988087]
								}, {
									"case":	470,
									"scores":	[-6.74040202988087]
								}, {
									"case":	471,
									"scores":	[-6.74040202988087]
								}, {
									"case":	472,
									"scores":	[-6.74040202988087]
								}, {
									"case":	473,
									"scores":	[-6.74040202988087]
								}, {
									"case":	474,
									"scores":	[-6.74040202988087]
								}, {
									"case":	475,
									"scores":	[-6.74040202988087]
								}, {
									"case":	476,
									"scores":	[-6.74040202988087]
								}, {
									"case":	477,
									"scores":	[-6.74040202988087]
								}, {
									"case":	478,
									"scores":	[-6.74040202988087]
								}, {
									"case":	479,
									"scores":	[-6.74040202988087]
								}, {
									"case":	480,
									"scores":	[-6.74040202988087]
								}, {
									"case":	481,
									"scores":	[-6.74040202988087]
								}, {
									"case":	482,
									"scores":	[-6.74040202988087]
								}, {
									"case":	483,
									"scores":	[-6.74040202988087]
								}, {
									"case":	484,
									"scores":	[-6.74040202988087]
								}, {
									"case":	485,
									"scores":	[-6.74040202988087]
								}, {
									"case":	486,
									"scores":	[-6.74040202988087]
								}, {
									"case":	487,
									"scores":	[-6.74040202988087]
								}, {
									"case":	488,
									"scores":	[-6.74040202988087]
								}, {
									"case":	489,
									"scores":	[-6.74040202988087]
								}, {
									"case":	490,
									"scores":	[-6.74040202988087]
								}, {
									"case":	491,
									"scores":	[-6.74040202988087]
								}, {
									"case":	492,
									"scores":	[-6.74040202988087]
								}, {
									"case":	493,
									"scores":	[-6.74040202988087]
								}, {
									"case":	494,
									"scores":	[-6.74040202988087]
								}, {
									"case":	495,
									"scores":	[-6.74040202988087]
								}, {
									"case":	496,
									"scores":	[-6.74040202988087]
								}, {
									"case":	497,
									"scores":	[-6.74040202988087]
								}, {
									"case":	498,
									"scores":	[-6.74040202988087]
								}, {
									"case":	499,
									"scores":	[-6.74040202988087]
								}, {
									"case":	500,
									"scores":	[-6.74040202988087]
								}, {
									"case":	501,
									"scores":	[-6.74040202988087]
								}, {
									"case":	502,
									"scores":	[-6.74040202988087]
								}, {
									"case":	503,
									"scores":	[-6.74040202988087]
								}, {
									"case":	504,
									"scores":	[-6.74040202988087]
								}, {
									"case":	505,
									"scores":	[-6.74040202988087]
								}, {
									"case":	506,
									"scores":	[-6.74040202988087]
								}, {
									"case":	507,
									"scores":	[-6.74040202988087]
								}, {
									"case":	508,
									"scores":	[-6.74040202988087]
								}, {
									"case":	509,
									"scores":	[-6.74040202988087]
								}, {
									"case":	510,
									"scores":	[-6.74040202988087]
								}, {
									"case":	511,
									"scores":	[-6.74040202988087]
								}, {
									"case":	512,
									"scores":	[-6.74040202988087]
								}, {
									"case":	513,
									"scores":	[-6.74040202988087]
								}, {
									"case":	514,
									"scores":	[-6.74040202988087]
								}, {
									"case":	515,
									"scores":	[-6.74040202988087]
								}, {
									"case":	516,
									"scores":	[-6.74040202988087]
								}, {
									"case":	517,
									"scores":	[-6.74040202988087]
								}, {
									"case":	518,
									"scores":	[-6.74040202988087]
								}, {
									"case":	519,
									"scores":	[-6.74040202988087]
								}, {
									"case":	520,
									"scores":	[-6.74040202988087]
								}, {
									"case":	521,
									"scores":	[-6.74040202988087]
								}, {
									"case":	522,
									"scores":	[-6.74040202988087]
								}, {
									"case":	523,
									"scores":	[-6.74040202988087]
								}, {
									"case":	524,
									"scores":	[-6.74040202988087]
								}, {
									"case":	525,
									"scores":	[-6.74040202988087]
								}, {
									"case":	526,
									"scores":	[-6.74040202988087]
								}, {
									"case":	527,
									"scores":	[-6.74040202988087]
								}, {
									"case":	528,
									"scores":	[-6.74040202988087]
								}, {
									"case":	529,
									"scores":	[-6.74040202988087]
								}, {
									"case":	530,
									"scores":	[-6.74040202988087]
								}, {
									"case":	531,
									"scores":	[-6.74040202988087]
								}, {
									"case":	532,
									"scores":	[-6.74040202988087]
								}, {
									"case":	533,
									"scores":	[-6.74040202988087]
								}, {
									"case":	534,
									"scores":	[-6.74040202988087]
								}, {
									"case":	535,
									"scores":	[-6.74040202988087]
								}, {
									"case":	536,
									"scores":	[-6.74040202988087]
								}, {
									"case":	537,
									"scores":	[-6.74040202988087]
								}, {
									"case":	538,
									"scores":	[-6.74040202988087]
								}, {
									"case":	539,
									"scores":	[-6.74040202988087]
								}, {
									"case":	540,
									"scores":	[-6.74040202988087]
								}, {
									"case":	541,
									"scores":	[-6.74040202988087]
								}, {
									"case":	542,
									"scores":	[-6.74040202988087]
								}, {
									"case":	543,
									"scores":	[-6.74040202988087]
								}, {
									"case":	544,
									"scores":	[-6.74040202988087]
								}, {
									"case":	545,
									"scores":	[-6.74040202988087]
								}, {
									"case":	546,
									"scores":	[-6.74040202988087]
								}, {
									"case":	547,
									"scores":	[-6.74040202988087]
								}, {
									"case":	548,
									"scores":	[-6.74040202988087]
								}, {
									"case":	549,
									"scores":	[-6.74040202988087]
								}, {
									"case":	550,
									"scores":	[-6.74040202988087]
								}, {
									"case":	551,
									"scores":	[-6.74040202988087]
								}, {
									"case":	552,
									"scores":	[-6.74040202988087]
								}, {
									"case":	553,
									"scores":	[-6.74040202988087]
								}, {
									"case":	554,
									"scores":	[-6.74040202988087]
								}, {
									"case":	555,
									"scores":	[-6.74040202988087]
								}, {
									"case":	556,
									"scores":	[-6.74040202988087]
								}, {
									"case":	557,
									"scores":	[-6.74040202988087]
								}, {
									"case":	558,
									"scores":	[-6.74040202988087]
								}, {
									"case":	559,
									"scores":	[-6.74040202988087]
								}, {
									"case":	560,
									"scores":	[-6.74040202988087]
								}, {
									"case":	561,
									"scores":	[-6.74040202988087]
								}, {
									"case":	562,
									"scores":	[-6.74040202988087]
								}, {
									"case":	563,
									"scores":	[-6.74040202988087]
								}, {
									"case":	564,
									"scores":	[-6.74040202988087]
								}, {
									"case":	565,
									"scores":	[-6.74040202988087]
								}, {
									"case":	566,
									"scores":	[-6.74040202988087]
								}, {
									"case":	567,
									"scores":	[-6.74040202988087]
								}, {
									"case":	568,
									"scores":	[-6.74040202988087]
								}, {
									"case":	569,
									"scores":	[-6.74040202988087]
								}, {
									"case":	570,
									"scores":	[-6.74040202988087]
								}, {
									"case":	571,
									"scores":	[-6.74040202988087]
								}, {
									"case":	572,
									"scores":	[-6.74040202988087]
								}, {
									"case":	573,
									"scores":	[-6.74040202988087]
								}, {
									"case":	574,
									"scores":	[-6.74040202988087]
								}, {
									"case":	575,
									"scores":	[-6.74040202988087]
								}, {
									"case":	576,
									"scores":	[-6.74040202988087]
								}, {
									"case":	577,
									"scores":	[-6.74040202988087]
								}, {
									"case":	578,
									"scores":	[-6.74040202988087]
								}, {
									"case":	579,
									"scores":	[-6.74040202988087]
								}, {
									"case":	580,
									"scores":	[-6.74040202988087]
								}, {
									"case":	581,
									"scores":	[-6.74040202988087]
								}, {
									"case":	582,
									"scores":	[-6.74040202988087]
								}, {
									"case":	583,
									"scores":	[-6.74040202988087]
								}, {
									"case":	584,
									"scores":	[-6.74040202988087]
								}, {
									"case":	585,
									"scores":	[-6.74040202988087]
								}, {
									"case":	586,
									"scores":	[-6.74040202988087]
								}, {
									"case":	587,
									"scores":	[-6.74040202988087]
								}, {
									"case":	588,
									"scores":	[-6.74040202988087]
								}, {
									"case":	589,
									"scores":	[-6.74040202988087]
								}, {
									"case":	590,
									"scores":	[-6.74040202988087]
								}, {
									"case":	591,
									"scores":	[-6.74040202988087]
								}, {
									"case":	592,
									"scores":	[-6.74040202988087]
								}, {
									"case":	593,
									"scores":	[-6.74040202988087]
								}, {
									"case":	594,
									"scores":	[-6.74040202988087]
								}, {
									"case":	595,
									"scores":	[-6.74040202988087]
								}, {
									"case":	596,
									"scores":	[-6.74040202988087]
								}, {
									"case":	597,
									"scores":	[-6.74040202988087]
								}, {
									"case":	598,
									"scores":	[-6.74040202988087]
								}, {
									"case":	599,
									"scores":	[-6.74040202988087]
								}, {
									"case":	600,
									"scores":	[-6.74040202988087]
								}, {
									"case":	601,
									"scores":	[-6.74040202988087]
								}, {
									"case":	602,
									"scores":	[-6.74040202988087]
								}, {
									"case":	603,
									"scores":	[-6.74040202988087]
								}, {
									"case":	604,
									"scores":	[-6.74040202988087]
								}, {
									"case":	605,
									"scores":	[-6.74040202988087]
								}, {
									"case":	606,
									"scores":	[-6.74040202988087]
								}, {
									"case":	607,
									"scores":	[-6.74040202988087]
								}, {
									"case":	608,
									"scores":	[-6.74040202988087]
								}, {
									"case":	609,
									"scores":	[-6.74040202988087]
								}, {
									"case":	610,
									"scores":	[-6.74040202988087]
								}, {
									"case":	611,
									"scores":	[-6.74040202988087]
								}, {
									"case":	612,
									"scores":	[-6.74040202988087]
								}, {
									"case":	613,
									"scores":	[-9.49691505208087, -10.27607286128087, -9.13986071628087, -9.70796560108087, -9.49902708728087, -9.70796560108087, -9.70796560108087, -9.70991620428087, -9.46192668728087, -9.70796560108087, -9.20703060108087, -9.70796560108087, -9.20898120428087, -9.70796560108087, -9.74506600108087, -9.70991620428087, -9.74506600108087, -9.46192668728087, -9.70796560108087, -10.27607286128087]
								}]
						}, {
							"switch":	21,
							"types":	[[], [], [1], [], [], [], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269], [], [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], [], [], [116]],
							"begin_line":	355,
							"begin_column":	2,
							"end_line":	355,
							"end_column":	29,
							"patch_codes":	["if (!__is_neg(\"\", \"L355\", 20, &(zopened), sizeof (zopened), &((zopened)->refcount__gc), sizeof ((zopened)->refcount__gc), &((zopened)->is_ref__gc), sizeof ((zopened)->is_ref__gc), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zfilename), sizeof (zfilename), &(zretval), sizeof (zretval), &(filename), sizeof (filename), &(stream), sizeof (stream), &(context), sizeof (context), &(opened_path), sizeof (opened_path), &(wrapper), sizeof (wrapper), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &((zopened)->type), sizeof ((zopened)->type)))\n    zval_set_refcount_p(zopened, 1);\n", "chown(zopened, 1, -1)", "chown(zopened, 1, -4)", "chown(zopened, 1, 0)", "chown(zopened, 1, 1)", "chown(zopened, 1, 128)", "chown(zopened, 1, 2)", "chown(zopened, 1, 3)", "chown(zopened, 1, 4)", "chown(zopened, 1, 6)", "lchown(zopened, 1, -1)", "lchown(zopened, 1, -4)", "lchown(zopened, 1, 0)", "lchown(zopened, 1, 1)", "lchown(zopened, 1, 128)", "lchown(zopened, 1, 2)", "lchown(zopened, 1, 3)", "lchown(zopened, 1, 4)", "lchown(zopened, 1, 6)", "mknod(zopened, 1, -1)", "mknod(zopened, 1, -4)", "mknod(zopened, 1, 0)", "mknod(zopened, 1, 1)", "mknod(zopened, 1, 128)", "mknod(zopened, 1, 2)", "mknod(zopened, 1, 3)", "mknod(zopened, 1, 4)", "mknod(zopened, 1, 6)", "zend_fetch_class(zopened, 1, -1)", "zend_fetch_class(zopened, 1, -4)", "zend_fetch_class(zopened, 1, 0)", "zend_fetch_class(zopened, 1, 1)", "zend_fetch_class(zopened, 1, 128)", "zend_fetch_class(zopened, 1, 2)", "zend_fetch_class(zopened, 1, 3)", "zend_fetch_class(zopened, 1, 4)", "zend_fetch_class(zopened, 1, 6)", "zend_fetch_class(zopened, 1, call_result)", "zend_fetch_class(zopened, 1, le_index_ptr)", "zend_fetch_class(zopened, 1, le_protocols)", "zend_fetch_class(zopened, 1, options)", "zend_get_compiled_variable_name(zopened, 1, 0)", "zend_get_configuration_directive(zopened, 1, 0)", "zend_get_configuration_directive(zopened, 1, zfilename)", "zend_get_configuration_directive(zopened, 1, zfuncname)", "zend_get_configuration_directive(zopened, 1, zmode)", "zend_get_configuration_directive(zopened, 1, zopened)", "zend_get_configuration_directive(zopened, 1, zoptions)", "zend_get_configuration_directive(zopened, 1, zretval)", "zend_get_constant(zopened, 1, 0)", "zend_get_constant(zopened, 1, zfilename)", "zend_get_constant(zopened, 1, zfuncname)", "zend_get_constant(zopened, 1, zmode)", "zend_get_constant(zopened, 1, zopened)", "zend_get_constant(zopened, 1, zoptions)", "zend_get_constant(zopened, 1, zretval)", "zend_ini_double(zopened, 1, -1)", "zend_ini_double(zopened, 1, -4)", "zend_ini_double(zopened, 1, 0)", "zend_ini_double(zopened, 1, 1)", "zend_ini_double(zopened, 1, 128)", "zend_ini_double(zopened, 1, 2)", "zend_ini_double(zopened, 1, 3)", "zend_ini_double(zopened, 1, 4)", "zend_ini_double(zopened, 1, 6)", "zend_ini_double(zopened, 1, call_result)", "zend_ini_double(zopened, 1, le_index_ptr)", "zend_ini_double(zopened, 1, le_protocols)", "zend_ini_double(zopened, 1, options)", "zend_ini_long(zopened, 1, -1)", "zend_ini_long(zopened, 1, -4)", "zend_ini_long(zopened, 1, 0)", "zend_ini_long(zopened, 1, 1)", "zend_ini_long(zopened, 1, 128)", "zend_ini_long(zopened, 1, 2)", "zend_ini_long(zopened, 1, 3)", "zend_ini_long(zopened, 1, 4)", "zend_ini_long(zopened, 1, 6)", "zend_ini_long(zopened, 1, call_result)", "zend_ini_long(zopened, 1, le_index_ptr)", "zend_ini_long(zopened, 1, le_protocols)", "zend_ini_long(zopened, 1, options)", "zend_ini_register_displayer(zopened, 1, 0)", "zend_ini_register_displayer(zopened, 1, display_link_numbers)", "zend_ini_register_displayer(zopened, 1, zend_ini_boolean_displayer_cb)", "zend_ini_register_displayer(zopened, 1, zend_ini_color_displayer_cb)", "zend_ini_string(zopened, 1, -1)", "zend_ini_string(zopened, 1, -4)", "zend_ini_string(zopened, 1, 0)", "zend_ini_string(zopened, 1, 1)", "zend_ini_string(zopened, 1, 128)", "zend_ini_string(zopened, 1, 2)", "zend_ini_string(zopened, 1, 3)", "zend_ini_string(zopened, 1, 4)", "zend_ini_string(zopened, 1, 6)", "zend_ini_string(zopened, 1, call_result)", "zend_ini_string(zopened, 1, le_index_ptr)", "zend_ini_string(zopened, 1, le_protocols)", "zend_ini_string(zopened, 1, options)", "zend_is_callable(zopened, 1, 0)", "zend_is_callable(zopened, 1, environ)", "zend_is_callable(zopened, 1, opened_path)", "zend_restore_ini_entry(zopened, 1, -1)", "zend_restore_ini_entry(zopened, 1, -4)", "zend_restore_ini_entry(zopened, 1, 0)", "zend_restore_ini_entry(zopened, 1, 1)", "zend_restore_ini_entry(zopened, 1, 128)", "zend_restore_ini_entry(zopened, 1, 2)", "zend_restore_ini_entry(zopened, 1, 3)", "zend_restore_ini_entry(zopened, 1, 4)", "zend_restore_ini_entry(zopened, 1, 6)", "zend_restore_ini_entry(zopened, 1, call_result)", "zend_restore_ini_entry(zopened, 1, le_index_ptr)", "zend_restore_ini_entry(zopened, 1, le_protocols)", "zend_restore_ini_entry(zopened, 1, options)", "{\n}\n", "Debug(zopened, 1)", "_array_init(zopened, 1)", "_estrndup(zopened, 1)", "_zend_bailout(zopened, 1)", "cfg_get_entry(zopened, 1)", "chmod(zopened, 1)", "creat(zopened, 1)", "lchmod(zopened, 1)", "mkdir(zopened, 1)", "mkfifo(zopened, 1)", "php_ini_activate_per_dir_config(zopened, 1)", "php_ini_activate_per_host_config(zopened, 1)", "php_printf(zopened, 1)", "php_write(zopened, 1)", "printf(zopened, 1)", "virtual_chmod(zopened, 1)", "virtual_creat(zopened, 1)", "virtual_mkdir(zopened, 1)", "zend_disable_class(zopened, 1)", "zend_disable_function(zopened, 1)", "zend_get_class_fetch_type(zopened, 1)", "zend_get_compiled_variable_value(zopened, 1)", "zend_get_hash_value(zopened, 1)", "zend_hash_func(zopened, 1)", "zend_inline_hash_func(zopened, 1)", "zend_is_auto_global(zopened, 1)", "zend_objects_destroy_object(zopened, 1)", "zend_objects_store_init(zopened, 1)", "zend_str_tolower(zopened, 1)", "zend_str_tolower_dup(zopened, 1)", "zend_string_to_double(zopened, 1)", "zend_strndup(zopened, 1)", "zend_ts_hash_func(zopened, 1)", "zval_set_refcount_p((&args), 1)", "zval_set_refcount_p((&call_result), 1)", "zval_set_refcount_p((&context), 1)", "zval_set_refcount_p((&filename), 1)", "zval_set_refcount_p((&mode), 1)", "zval_set_refcount_p((&old_in_user_include), 1)", "zval_set_refcount_p((&opened_path), 1)", "zval_set_refcount_p((&options), 1)", "zval_set_refcount_p((&stream), 1)", "zval_set_refcount_p((&us), 1)", "zval_set_refcount_p((&uwrap), 1)", "zval_set_refcount_p((&wrapper), 1)", "zval_set_refcount_p((&zfilename), 1)", "zval_set_refcount_p((&zfuncname), 1)", "zval_set_refcount_p((&zmode), 1)", "zval_set_refcount_p((&zopened), 1)", "zval_set_refcount_p((&zoptions), 1)", "zval_set_refcount_p((&zretval), 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_set_refcount_p(zopened, (0 * call_result))", "zval_set_refcount_p(zopened, (0 * old_in_user_include))", "zval_set_refcount_p(zopened, (0 * options))", "zval_set_refcount_p(zopened, (0))", "zval_set_refcount_p(zopened, (args != 0))", "zval_set_refcount_p(zopened, (args == 0))", "zval_set_refcount_p(zopened, (call_result != 0))", "zval_set_refcount_p(zopened, (call_result != old_in_user_include))", "zval_set_refcount_p(zopened, (call_result * old_in_user_include))", "zval_set_refcount_p(zopened, (call_result * options))", "zval_set_refcount_p(zopened, (call_result + 0))", "zval_set_refcount_p(zopened, (call_result + old_in_user_include))", "zval_set_refcount_p(zopened, (call_result - 0))", "zval_set_refcount_p(zopened, (call_result - old_in_user_include))", "zval_set_refcount_p(zopened, (call_result == 0))", "zval_set_refcount_p(zopened, (call_result == old_in_user_include))", "zval_set_refcount_p(zopened, (context != 0))", "zval_set_refcount_p(zopened, (context == 0))", "zval_set_refcount_p(zopened, (filename != 0))", "zval_set_refcount_p(zopened, (filename != mode))", "zval_set_refcount_p(zopened, (filename == 0))", "zval_set_refcount_p(zopened, (filename == mode))", "zval_set_refcount_p(zopened, (mode != 0))", "zval_set_refcount_p(zopened, (mode == 0))", "zval_set_refcount_p(zopened, (old_in_user_include != 0))", "zval_set_refcount_p(zopened, (old_in_user_include * call_result))", "zval_set_refcount_p(zopened, (old_in_user_include * options))", "zval_set_refcount_p(zopened, (old_in_user_include + 0))", "zval_set_refcount_p(zopened, (old_in_user_include - 0))", "zval_set_refcount_p(zopened, (old_in_user_include == 0))", "zval_set_refcount_p(zopened, (opened_path != 0))", "zval_set_refcount_p(zopened, (opened_path == 0))", "zval_set_refcount_p(zopened, (options != 0))", "zval_set_refcount_p(zopened, (options != call_result))", "zval_set_refcount_p(zopened, (options != old_in_user_include))", "zval_set_refcount_p(zopened, (options * call_result))", "zval_set_refcount_p(zopened, (options * old_in_user_include))", "zval_set_refcount_p(zopened, (options + 0))", "zval_set_refcount_p(zopened, (options + call_result))", "zval_set_refcount_p(zopened, (options + old_in_user_include))", "zval_set_refcount_p(zopened, (options - 0))", "zval_set_refcount_p(zopened, (options - call_result))", "zval_set_refcount_p(zopened, (options - old_in_user_include))", "zval_set_refcount_p(zopened, (options == 0))", "zval_set_refcount_p(zopened, (options == call_result))", "zval_set_refcount_p(zopened, (options == old_in_user_include))", "zval_set_refcount_p(zopened, (stream != 0))", "zval_set_refcount_p(zopened, (stream == 0))", "zval_set_refcount_p(zopened, (us != 0))", "zval_set_refcount_p(zopened, (us == 0))", "zval_set_refcount_p(zopened, (uwrap != 0))", "zval_set_refcount_p(zopened, (uwrap == 0))", "zval_set_refcount_p(zopened, (wrapper != 0))", "zval_set_refcount_p(zopened, (wrapper == 0))", "zval_set_refcount_p(zopened, (zfilename != 0))", "zval_set_refcount_p(zopened, (zfilename != zfuncname))", "zval_set_refcount_p(zopened, (zfilename != zmode))", "zval_set_refcount_p(zopened, (zfilename != zopened))", "zval_set_refcount_p(zopened, (zfilename != zoptions))", "zval_set_refcount_p(zopened, (zfilename != zretval))", "zval_set_refcount_p(zopened, (zfilename == 0))", "zval_set_refcount_p(zopened, (zfilename == zfuncname))", "zval_set_refcount_p(zopened, (zfilename == zmode))", "zval_set_refcount_p(zopened, (zfilename == zopened))", "zval_set_refcount_p(zopened, (zfilename == zoptions))", "zval_set_refcount_p(zopened, (zfilename == zretval))", "zval_set_refcount_p(zopened, (zfuncname != 0))", "zval_set_refcount_p(zopened, (zfuncname == 0))", "zval_set_refcount_p(zopened, (zmode != 0))", "zval_set_refcount_p(zopened, (zmode != zfuncname))", "zval_set_refcount_p(zopened, (zmode != zopened))", "zval_set_refcount_p(zopened, (zmode != zoptions))", "zval_set_refcount_p(zopened, (zmode != zretval))", "zval_set_refcount_p(zopened, (zmode == 0))", "zval_set_refcount_p(zopened, (zmode == zfuncname))", "zval_set_refcount_p(zopened, (zmode == zopened))", "zval_set_refcount_p(zopened, (zmode == zoptions))", "zval_set_refcount_p(zopened, (zmode == zretval))", "zval_set_refcount_p(zopened, (zopened != 0))", "zval_set_refcount_p(zopened, (zopened != zfuncname))", "zval_set_refcount_p(zopened, (zopened != zoptions))", "zval_set_refcount_p(zopened, (zopened != zretval))", "zval_set_refcount_p(zopened, (zopened == 0))", "zval_set_refcount_p(zopened, (zopened == zfuncname))", "zval_set_refcount_p(zopened, (zopened == zoptions))", "zval_set_refcount_p(zopened, (zopened == zretval))", "zval_set_refcount_p(zopened, (zoptions != 0))", "zval_set_refcount_p(zopened, (zoptions != zfuncname))", "zval_set_refcount_p(zopened, (zoptions != zretval))", "zval_set_refcount_p(zopened, (zoptions == 0))", "zval_set_refcount_p(zopened, (zoptions == zfuncname))", "zval_set_refcount_p(zopened, (zoptions == zretval))", "zval_set_refcount_p(zopened, (zretval != 0))", "zval_set_refcount_p(zopened, (zretval != zfuncname))", "zval_set_refcount_p(zopened, (zretval == 0))", "zval_set_refcount_p(zopened, (zretval == zfuncname))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6584444493808714, -7.66804810988087, -7.93371824988087, -7.90109139988087, -7.43755409988087, -7.90109139988087, -7.90109139988087, -7.90681409988087, -7.14320329988087, -7.90109139988087, -7.57908036988087, -7.90109139988087, -7.58480306988087, -7.90109139988087, -8.19544219988087, -7.90681409988087, -8.19544219988087, -7.14320329988087, -7.90109139988087, -7.66804810988087]
								}, {
									"case":	2,
									"scores":	[-6.74040202988087]
								}, {
									"case":	3,
									"scores":	[-6.74040202988087]
								}, {
									"case":	4,
									"scores":	[-6.74040202988087]
								}, {
									"case":	5,
									"scores":	[-6.74040202988087]
								}, {
									"case":	6,
									"scores":	[-6.74040202988087]
								}, {
									"case":	7,
									"scores":	[-6.74040202988087]
								}, {
									"case":	8,
									"scores":	[-6.74040202988087]
								}, {
									"case":	9,
									"scores":	[-6.74040202988087]
								}, {
									"case":	10,
									"scores":	[-6.74040202988087]
								}, {
									"case":	11,
									"scores":	[-6.74040202988087]
								}, {
									"case":	12,
									"scores":	[-6.74040202988087]
								}, {
									"case":	13,
									"scores":	[-6.74040202988087]
								}, {
									"case":	14,
									"scores":	[-6.74040202988087]
								}, {
									"case":	15,
									"scores":	[-6.74040202988087]
								}, {
									"case":	16,
									"scores":	[-6.74040202988087]
								}, {
									"case":	17,
									"scores":	[-6.74040202988087]
								}, {
									"case":	18,
									"scores":	[-6.74040202988087]
								}, {
									"case":	19,
									"scores":	[-6.74040202988087]
								}, {
									"case":	20,
									"scores":	[-6.74040202988087]
								}, {
									"case":	21,
									"scores":	[-6.74040202988087]
								}, {
									"case":	22,
									"scores":	[-6.74040202988087]
								}, {
									"case":	23,
									"scores":	[-6.74040202988087]
								}, {
									"case":	24,
									"scores":	[-6.74040202988087]
								}, {
									"case":	25,
									"scores":	[-6.74040202988087]
								}, {
									"case":	26,
									"scores":	[-6.74040202988087]
								}, {
									"case":	27,
									"scores":	[-6.74040202988087]
								}, {
									"case":	28,
									"scores":	[-6.74040202988087]
								}, {
									"case":	29,
									"scores":	[-6.74040202988087]
								}, {
									"case":	30,
									"scores":	[-6.74040202988087]
								}, {
									"case":	31,
									"scores":	[-6.74040202988087]
								}, {
									"case":	32,
									"scores":	[-6.74040202988087]
								}, {
									"case":	33,
									"scores":	[-6.74040202988087]
								}, {
									"case":	34,
									"scores":	[-6.74040202988087]
								}, {
									"case":	35,
									"scores":	[-6.74040202988087]
								}, {
									"case":	36,
									"scores":	[-6.74040202988087]
								}, {
									"case":	37,
									"scores":	[-6.74040202988087]
								}, {
									"case":	38,
									"scores":	[-6.74040202988087]
								}, {
									"case":	39,
									"scores":	[-6.74040202988087]
								}, {
									"case":	40,
									"scores":	[-6.74040202988087]
								}, {
									"case":	41,
									"scores":	[-6.74040202988087]
								}, {
									"case":	42,
									"scores":	[-6.74040202988087]
								}, {
									"case":	43,
									"scores":	[-6.74040202988087]
								}, {
									"case":	44,
									"scores":	[-6.74040202988087]
								}, {
									"case":	45,
									"scores":	[-6.74040202988087]
								}, {
									"case":	46,
									"scores":	[-6.74040202988087]
								}, {
									"case":	47,
									"scores":	[-6.74040202988087]
								}, {
									"case":	48,
									"scores":	[-6.74040202988087]
								}, {
									"case":	49,
									"scores":	[-6.74040202988087]
								}, {
									"case":	50,
									"scores":	[-6.74040202988087]
								}, {
									"case":	51,
									"scores":	[-6.74040202988087]
								}, {
									"case":	52,
									"scores":	[-6.74040202988087]
								}, {
									"case":	53,
									"scores":	[-6.74040202988087]
								}, {
									"case":	54,
									"scores":	[-6.74040202988087]
								}, {
									"case":	55,
									"scores":	[-6.74040202988087]
								}, {
									"case":	56,
									"scores":	[-6.74040202988087]
								}, {
									"case":	57,
									"scores":	[-6.74040202988087]
								}, {
									"case":	58,
									"scores":	[-6.74040202988087]
								}, {
									"case":	59,
									"scores":	[-6.74040202988087]
								}, {
									"case":	60,
									"scores":	[-6.74040202988087]
								}, {
									"case":	61,
									"scores":	[-6.74040202988087]
								}, {
									"case":	62,
									"scores":	[-6.74040202988087]
								}, {
									"case":	63,
									"scores":	[-6.74040202988087]
								}, {
									"case":	64,
									"scores":	[-6.74040202988087]
								}, {
									"case":	65,
									"scores":	[-6.74040202988087]
								}, {
									"case":	66,
									"scores":	[-6.74040202988087]
								}, {
									"case":	67,
									"scores":	[-6.74040202988087]
								}, {
									"case":	68,
									"scores":	[-6.74040202988087]
								}, {
									"case":	69,
									"scores":	[-6.74040202988087]
								}, {
									"case":	70,
									"scores":	[-6.74040202988087]
								}, {
									"case":	71,
									"scores":	[-6.74040202988087]
								}, {
									"case":	72,
									"scores":	[-6.74040202988087]
								}, {
									"case":	73,
									"scores":	[-6.74040202988087]
								}, {
									"case":	74,
									"scores":	[-6.74040202988087]
								}, {
									"case":	75,
									"scores":	[-6.74040202988087]
								}, {
									"case":	76,
									"scores":	[-6.74040202988087]
								}, {
									"case":	77,
									"scores":	[-6.74040202988087]
								}, {
									"case":	78,
									"scores":	[-6.74040202988087]
								}, {
									"case":	79,
									"scores":	[-6.74040202988087]
								}, {
									"case":	80,
									"scores":	[-6.74040202988087]
								}, {
									"case":	81,
									"scores":	[-6.74040202988087]
								}, {
									"case":	82,
									"scores":	[-6.74040202988087]
								}, {
									"case":	83,
									"scores":	[-6.74040202988087]
								}, {
									"case":	84,
									"scores":	[-6.74040202988087]
								}, {
									"case":	85,
									"scores":	[-6.74040202988087]
								}, {
									"case":	86,
									"scores":	[-6.74040202988087]
								}, {
									"case":	87,
									"scores":	[-6.74040202988087]
								}, {
									"case":	88,
									"scores":	[-6.74040202988087]
								}, {
									"case":	89,
									"scores":	[-6.74040202988087]
								}, {
									"case":	90,
									"scores":	[-6.74040202988087]
								}, {
									"case":	91,
									"scores":	[-6.74040202988087]
								}, {
									"case":	92,
									"scores":	[-6.74040202988087]
								}, {
									"case":	93,
									"scores":	[-6.74040202988087]
								}, {
									"case":	94,
									"scores":	[-6.74040202988087]
								}, {
									"case":	95,
									"scores":	[-6.74040202988087]
								}, {
									"case":	96,
									"scores":	[-6.74040202988087]
								}, {
									"case":	97,
									"scores":	[-6.74040202988087]
								}, {
									"case":	98,
									"scores":	[-6.74040202988087]
								}, {
									"case":	99,
									"scores":	[-6.74040202988087]
								}, {
									"case":	100,
									"scores":	[-6.74040202988087]
								}, {
									"case":	101,
									"scores":	[-6.74040202988087]
								}, {
									"case":	102,
									"scores":	[-6.74040202988087]
								}, {
									"case":	103,
									"scores":	[-6.74040202988087]
								}, {
									"case":	104,
									"scores":	[-6.74040202988087]
								}, {
									"case":	105,
									"scores":	[-6.74040202988087]
								}, {
									"case":	106,
									"scores":	[-6.74040202988087]
								}, {
									"case":	107,
									"scores":	[-6.74040202988087]
								}, {
									"case":	108,
									"scores":	[-6.74040202988087]
								}, {
									"case":	109,
									"scores":	[-6.74040202988087]
								}, {
									"case":	110,
									"scores":	[-6.74040202988087]
								}, {
									"case":	111,
									"scores":	[-6.74040202988087]
								}, {
									"case":	112,
									"scores":	[-6.74040202988087]
								}, {
									"case":	113,
									"scores":	[-6.74040202988087]
								}, {
									"case":	114,
									"scores":	[-6.74040202988087]
								}, {
									"case":	115,
									"scores":	[-6.74040202988087]
								}, {
									"case":	116,
									"scores":	[-6.74040202988087]
								}, {
									"case":	117,
									"scores":	[-6.74040202988087]
								}, {
									"case":	118,
									"scores":	[-6.74040202988087]
								}, {
									"case":	119,
									"scores":	[-6.74040202988087]
								}, {
									"case":	120,
									"scores":	[-6.74040202988087]
								}, {
									"case":	121,
									"scores":	[-6.74040202988087]
								}, {
									"case":	122,
									"scores":	[-6.74040202988087]
								}, {
									"case":	123,
									"scores":	[-6.74040202988087]
								}, {
									"case":	124,
									"scores":	[-6.74040202988087]
								}, {
									"case":	125,
									"scores":	[-6.74040202988087]
								}, {
									"case":	126,
									"scores":	[-6.74040202988087]
								}, {
									"case":	127,
									"scores":	[-6.74040202988087]
								}, {
									"case":	128,
									"scores":	[-6.74040202988087]
								}, {
									"case":	129,
									"scores":	[-6.74040202988087]
								}, {
									"case":	130,
									"scores":	[-6.74040202988087]
								}, {
									"case":	131,
									"scores":	[-6.74040202988087]
								}, {
									"case":	132,
									"scores":	[-6.74040202988087]
								}, {
									"case":	133,
									"scores":	[-6.74040202988087]
								}, {
									"case":	134,
									"scores":	[-6.74040202988087]
								}, {
									"case":	135,
									"scores":	[-6.74040202988087]
								}, {
									"case":	136,
									"scores":	[-6.74040202988087]
								}, {
									"case":	137,
									"scores":	[-6.74040202988087]
								}, {
									"case":	138,
									"scores":	[-6.74040202988087]
								}, {
									"case":	139,
									"scores":	[-6.74040202988087]
								}, {
									"case":	140,
									"scores":	[-6.74040202988087]
								}, {
									"case":	141,
									"scores":	[-6.74040202988087]
								}, {
									"case":	142,
									"scores":	[-6.74040202988087]
								}, {
									"case":	143,
									"scores":	[-6.74040202988087]
								}, {
									"case":	144,
									"scores":	[-6.74040202988087]
								}, {
									"case":	145,
									"scores":	[-6.74040202988087]
								}, {
									"case":	146,
									"scores":	[-6.74040202988087]
								}, {
									"case":	147,
									"scores":	[-6.74040202988087]
								}, {
									"case":	148,
									"scores":	[-6.74040202988087]
								}, {
									"case":	149,
									"scores":	[-6.74040202988087]
								}, {
									"case":	150,
									"scores":	[-6.74040202988087]
								}, {
									"case":	151,
									"scores":	[-6.74040202988087]
								}, {
									"case":	152,
									"scores":	[-6.74040202988087]
								}, {
									"case":	153,
									"scores":	[-6.74040202988087]
								}, {
									"case":	154,
									"scores":	[-6.74040202988087]
								}, {
									"case":	155,
									"scores":	[-6.74040202988087]
								}, {
									"case":	156,
									"scores":	[-6.74040202988087]
								}, {
									"case":	157,
									"scores":	[-6.74040202988087]
								}, {
									"case":	158,
									"scores":	[-6.74040202988087]
								}, {
									"case":	159,
									"scores":	[-6.74040202988087]
								}, {
									"case":	160,
									"scores":	[-6.74040202988087]
								}, {
									"case":	161,
									"scores":	[-6.74040202988087]
								}, {
									"case":	162,
									"scores":	[-6.74040202988087]
								}, {
									"case":	163,
									"scores":	[-6.74040202988087]
								}, {
									"case":	164,
									"scores":	[-6.74040202988087]
								}, {
									"case":	165,
									"scores":	[-6.74040202988087]
								}, {
									"case":	166,
									"scores":	[-6.74040202988087]
								}, {
									"case":	167,
									"scores":	[-6.74040202988087]
								}, {
									"case":	168,
									"scores":	[-6.74040202988087]
								}, {
									"case":	169,
									"scores":	[-6.74040202988087]
								}, {
									"case":	170,
									"scores":	[-6.74040202988087]
								}, {
									"case":	171,
									"scores":	[-6.74040202988087]
								}, {
									"case":	172,
									"scores":	[-6.74040202988087]
								}, {
									"case":	173,
									"scores":	[-6.74040202988087]
								}, {
									"case":	174,
									"scores":	[-6.74040202988087]
								}, {
									"case":	175,
									"scores":	[-6.74040202988087]
								}, {
									"case":	176,
									"scores":	[-6.74040202988087]
								}, {
									"case":	177,
									"scores":	[-6.74040202988087]
								}, {
									"case":	178,
									"scores":	[-6.74040202988087]
								}, {
									"case":	179,
									"scores":	[-6.74040202988087]
								}, {
									"case":	180,
									"scores":	[-6.74040202988087]
								}, {
									"case":	181,
									"scores":	[-6.74040202988087]
								}, {
									"case":	182,
									"scores":	[-6.74040202988087]
								}, {
									"case":	183,
									"scores":	[-6.74040202988087]
								}, {
									"case":	184,
									"scores":	[-6.74040202988087]
								}, {
									"case":	185,
									"scores":	[-6.74040202988087]
								}, {
									"case":	186,
									"scores":	[-6.74040202988087]
								}, {
									"case":	187,
									"scores":	[-6.74040202988087]
								}, {
									"case":	188,
									"scores":	[-6.74040202988087]
								}, {
									"case":	189,
									"scores":	[-6.74040202988087]
								}, {
									"case":	190,
									"scores":	[-6.74040202988087]
								}, {
									"case":	191,
									"scores":	[-6.74040202988087]
								}, {
									"case":	192,
									"scores":	[-6.74040202988087]
								}, {
									"case":	193,
									"scores":	[-6.74040202988087]
								}, {
									"case":	194,
									"scores":	[-6.74040202988087]
								}, {
									"case":	195,
									"scores":	[-6.74040202988087]
								}, {
									"case":	196,
									"scores":	[-6.74040202988087]
								}, {
									"case":	197,
									"scores":	[-6.74040202988087]
								}, {
									"case":	198,
									"scores":	[-6.74040202988087]
								}, {
									"case":	199,
									"scores":	[-6.74040202988087]
								}, {
									"case":	200,
									"scores":	[-6.74040202988087]
								}, {
									"case":	201,
									"scores":	[-6.74040202988087]
								}, {
									"case":	202,
									"scores":	[-6.74040202988087]
								}, {
									"case":	203,
									"scores":	[-6.74040202988087]
								}, {
									"case":	204,
									"scores":	[-6.74040202988087]
								}, {
									"case":	205,
									"scores":	[-6.74040202988087]
								}, {
									"case":	206,
									"scores":	[-6.74040202988087]
								}, {
									"case":	207,
									"scores":	[-6.74040202988087]
								}, {
									"case":	208,
									"scores":	[-6.74040202988087]
								}, {
									"case":	209,
									"scores":	[-6.74040202988087]
								}, {
									"case":	210,
									"scores":	[-6.74040202988087]
								}, {
									"case":	211,
									"scores":	[-6.74040202988087]
								}, {
									"case":	212,
									"scores":	[-6.74040202988087]
								}, {
									"case":	213,
									"scores":	[-6.74040202988087]
								}, {
									"case":	214,
									"scores":	[-6.74040202988087]
								}, {
									"case":	215,
									"scores":	[-6.74040202988087]
								}, {
									"case":	216,
									"scores":	[-6.74040202988087]
								}, {
									"case":	217,
									"scores":	[-6.74040202988087]
								}, {
									"case":	218,
									"scores":	[-6.74040202988087]
								}, {
									"case":	219,
									"scores":	[-6.74040202988087]
								}, {
									"case":	220,
									"scores":	[-6.74040202988087]
								}, {
									"case":	221,
									"scores":	[-6.74040202988087]
								}, {
									"case":	222,
									"scores":	[-6.74040202988087]
								}, {
									"case":	223,
									"scores":	[-6.74040202988087]
								}, {
									"case":	224,
									"scores":	[-6.74040202988087]
								}, {
									"case":	225,
									"scores":	[-6.74040202988087]
								}, {
									"case":	226,
									"scores":	[-6.74040202988087]
								}, {
									"case":	227,
									"scores":	[-6.74040202988087]
								}, {
									"case":	228,
									"scores":	[-6.74040202988087]
								}, {
									"case":	229,
									"scores":	[-6.74040202988087]
								}, {
									"case":	230,
									"scores":	[-6.74040202988087]
								}, {
									"case":	231,
									"scores":	[-6.74040202988087]
								}, {
									"case":	232,
									"scores":	[-6.74040202988087]
								}, {
									"case":	233,
									"scores":	[-6.74040202988087]
								}, {
									"case":	234,
									"scores":	[-6.74040202988087]
								}, {
									"case":	235,
									"scores":	[-6.74040202988087]
								}, {
									"case":	236,
									"scores":	[-6.74040202988087]
								}, {
									"case":	237,
									"scores":	[-6.74040202988087]
								}, {
									"case":	238,
									"scores":	[-6.74040202988087]
								}, {
									"case":	239,
									"scores":	[-6.74040202988087]
								}, {
									"case":	240,
									"scores":	[-6.74040202988087]
								}, {
									"case":	241,
									"scores":	[-6.74040202988087]
								}, {
									"case":	242,
									"scores":	[-6.74040202988087]
								}, {
									"case":	243,
									"scores":	[-6.74040202988087]
								}, {
									"case":	244,
									"scores":	[-6.74040202988087]
								}, {
									"case":	245,
									"scores":	[-6.74040202988087]
								}, {
									"case":	246,
									"scores":	[-6.74040202988087]
								}, {
									"case":	247,
									"scores":	[-6.74040202988087]
								}, {
									"case":	248,
									"scores":	[-6.74040202988087]
								}, {
									"case":	249,
									"scores":	[-6.74040202988087]
								}, {
									"case":	250,
									"scores":	[-6.74040202988087]
								}, {
									"case":	251,
									"scores":	[-6.74040202988087]
								}, {
									"case":	252,
									"scores":	[-6.74040202988087]
								}, {
									"case":	253,
									"scores":	[-6.74040202988087]
								}, {
									"case":	254,
									"scores":	[-6.74040202988087]
								}, {
									"case":	255,
									"scores":	[-6.74040202988087]
								}, {
									"case":	256,
									"scores":	[-6.74040202988087]
								}, {
									"case":	257,
									"scores":	[-6.74040202988087]
								}, {
									"case":	258,
									"scores":	[-6.74040202988087]
								}, {
									"case":	259,
									"scores":	[-6.74040202988087]
								}, {
									"case":	260,
									"scores":	[-6.74040202988087]
								}, {
									"case":	261,
									"scores":	[-6.74040202988087]
								}, {
									"case":	262,
									"scores":	[-6.74040202988087]
								}, {
									"case":	263,
									"scores":	[-6.74040202988087]
								}, {
									"case":	264,
									"scores":	[-6.74040202988087]
								}, {
									"case":	265,
									"scores":	[-6.74040202988087]
								}, {
									"case":	266,
									"scores":	[-6.74040202988087]
								}, {
									"case":	267,
									"scores":	[-6.74040202988087]
								}, {
									"case":	268,
									"scores":	[-6.74040202988087]
								}, {
									"case":	269,
									"scores":	[-6.74040202988087]
								}]
						}]
				}, {
					"line":	355,
					"switches":	[{
							"switch":	22,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	356,
							"begin_column":	0,
							"end_line":	356,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L356\", 17, &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zfuncname), sizeof (zfuncname), &(options), sizeof (options), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(zretval), sizeof (zretval), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(context), sizeof (context), &(wrapper), sizeof (wrapper), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.72019932256335]
								}, {
									"case":	2,
									"scores":	[-6.72019932256335]
								}, {
									"case":	3,
									"scores":	[-6.72019932256335]
								}, {
									"case":	4,
									"scores":	[-6.72019932256335]
								}, {
									"case":	5,
									"scores":	[-6.72019932256335]
								}, {
									"case":	6,
									"scores":	[-6.72019932256335]
								}, {
									"case":	7,
									"scores":	[-6.72019932256335]
								}, {
									"case":	8,
									"scores":	[-6.72019932256335]
								}, {
									"case":	9,
									"scores":	[-6.72019932256335]
								}, {
									"case":	10,
									"scores":	[-6.72019932256335]
								}, {
									"case":	11,
									"scores":	[-6.72019932256335]
								}, {
									"case":	12,
									"scores":	[-6.72019932256335]
								}, {
									"case":	13,
									"scores":	[-6.72019932256335]
								}, {
									"case":	14,
									"scores":	[-6.72019932256335]
								}, {
									"case":	15,
									"scores":	[-6.72019932256335]
								}, {
									"case":	16,
									"scores":	[-6.72019932256335]
								}, {
									"case":	17,
									"scores":	[-6.72019932256335]
								}, {
									"case":	18,
									"scores":	[-6.72019932256335]
								}, {
									"case":	19,
									"scores":	[-6.72019932256335]
								}, {
									"case":	20,
									"scores":	[-6.72019932256335]
								}, {
									"case":	21,
									"scores":	[-6.72019932256335]
								}, {
									"case":	22,
									"scores":	[-6.72019932256335]
								}, {
									"case":	23,
									"scores":	[-6.72019932256335]
								}, {
									"case":	24,
									"scores":	[-6.72019932256335]
								}, {
									"case":	25,
									"scores":	[-6.72019932256335]
								}, {
									"case":	26,
									"scores":	[-6.72019932256335]
								}, {
									"case":	27,
									"scores":	[-6.72019932256335]
								}, {
									"case":	28,
									"scores":	[-6.72019932256335]
								}, {
									"case":	29,
									"scores":	[-6.72019932256335]
								}, {
									"case":	30,
									"scores":	[-6.72019932256335]
								}, {
									"case":	31,
									"scores":	[-6.72019932256335]
								}, {
									"case":	32,
									"scores":	[-6.72019932256335]
								}, {
									"case":	33,
									"scores":	[-6.72019932256335]
								}, {
									"case":	34,
									"scores":	[-6.72019932256335]
								}, {
									"case":	35,
									"scores":	[-6.72019932256335]
								}, {
									"case":	36,
									"scores":	[-6.72019932256335]
								}, {
									"case":	37,
									"scores":	[-6.72019932256335]
								}, {
									"case":	38,
									"scores":	[-6.72019932256335]
								}, {
									"case":	39,
									"scores":	[-6.72019932256335]
								}, {
									"case":	40,
									"scores":	[-6.72019932256335]
								}, {
									"case":	41,
									"scores":	[-6.72019932256335]
								}, {
									"case":	42,
									"scores":	[-6.72019932256335]
								}, {
									"case":	43,
									"scores":	[-6.72019932256335]
								}, {
									"case":	44,
									"scores":	[-6.72019932256335]
								}, {
									"case":	45,
									"scores":	[-6.72019932256335]
								}, {
									"case":	46,
									"scores":	[-6.72019932256335]
								}, {
									"case":	47,
									"scores":	[-6.72019932256335]
								}, {
									"case":	48,
									"scores":	[-6.72019932256335]
								}, {
									"case":	49,
									"scores":	[-6.72019932256335]
								}, {
									"case":	50,
									"scores":	[-6.72019932256335]
								}, {
									"case":	51,
									"scores":	[-6.72019932256335]
								}, {
									"case":	52,
									"scores":	[-6.72019932256335]
								}, {
									"case":	53,
									"scores":	[-6.72019932256335]
								}, {
									"case":	54,
									"scores":	[-6.72019932256335]
								}, {
									"case":	55,
									"scores":	[-6.72019932256335]
								}, {
									"case":	56,
									"scores":	[-6.72019932256335]
								}, {
									"case":	57,
									"scores":	[-6.72019932256335]
								}, {
									"case":	58,
									"scores":	[-6.72019932256335]
								}, {
									"case":	59,
									"scores":	[-6.72019932256335]
								}, {
									"case":	60,
									"scores":	[-6.72019932256335]
								}, {
									"case":	61,
									"scores":	[-6.72019932256335]
								}, {
									"case":	62,
									"scores":	[-6.72019932256335]
								}, {
									"case":	63,
									"scores":	[-6.72019932256335]
								}, {
									"case":	64,
									"scores":	[-6.72019932256335]
								}, {
									"case":	65,
									"scores":	[-6.72019932256335]
								}, {
									"case":	66,
									"scores":	[-6.72019932256335]
								}, {
									"case":	67,
									"scores":	[-6.72019932256335]
								}, {
									"case":	68,
									"scores":	[-6.72019932256335]
								}, {
									"case":	69,
									"scores":	[-6.72019932256335]
								}, {
									"case":	70,
									"scores":	[-6.72019932256335]
								}, {
									"case":	71,
									"scores":	[-6.72019932256335]
								}, {
									"case":	72,
									"scores":	[-6.72019932256335]
								}, {
									"case":	73,
									"scores":	[-6.72019932256335]
								}, {
									"case":	74,
									"scores":	[-6.72019932256335]
								}, {
									"case":	75,
									"scores":	[-6.72019932256335]
								}, {
									"case":	76,
									"scores":	[-6.72019932256335]
								}, {
									"case":	77,
									"scores":	[-6.72019932256335]
								}, {
									"case":	78,
									"scores":	[-6.72019932256335]
								}, {
									"case":	79,
									"scores":	[-6.72019932256335]
								}, {
									"case":	80,
									"scores":	[-6.72019932256335]
								}, {
									"case":	81,
									"scores":	[-6.72019932256335]
								}, {
									"case":	82,
									"scores":	[-6.72019932256335]
								}, {
									"case":	83,
									"scores":	[-6.72019932256335]
								}, {
									"case":	84,
									"scores":	[-6.72019932256335]
								}, {
									"case":	85,
									"scores":	[-6.72019932256335]
								}, {
									"case":	86,
									"scores":	[-6.72019932256335]
								}, {
									"case":	87,
									"scores":	[-6.72019932256335]
								}, {
									"case":	88,
									"scores":	[-6.72019932256335]
								}, {
									"case":	89,
									"scores":	[-6.72019932256335]
								}, {
									"case":	90,
									"scores":	[-6.72019932256335]
								}, {
									"case":	91,
									"scores":	[-6.72019932256335]
								}, {
									"case":	92,
									"scores":	[-6.72019932256335]
								}, {
									"case":	93,
									"scores":	[-6.72019932256335]
								}, {
									"case":	94,
									"scores":	[-6.72019932256335]
								}, {
									"case":	95,
									"scores":	[-6.72019932256335]
								}, {
									"case":	96,
									"scores":	[-6.72019932256335]
								}, {
									"case":	97,
									"scores":	[-6.72019932256335]
								}, {
									"case":	98,
									"scores":	[-6.72019932256335]
								}, {
									"case":	99,
									"scores":	[-6.72019932256335]
								}, {
									"case":	100,
									"scores":	[-6.72019932256335]
								}, {
									"case":	101,
									"scores":	[-6.72019932256335]
								}, {
									"case":	102,
									"scores":	[-6.72019932256335]
								}, {
									"case":	103,
									"scores":	[-6.72019932256335]
								}, {
									"case":	104,
									"scores":	[-6.72019932256335]
								}, {
									"case":	105,
									"scores":	[-6.72019932256335]
								}, {
									"case":	106,
									"scores":	[-6.72019932256335]
								}, {
									"case":	107,
									"scores":	[-6.72019932256335]
								}, {
									"case":	108,
									"scores":	[-6.72019932256335]
								}, {
									"case":	109,
									"scores":	[-6.72019932256335]
								}, {
									"case":	110,
									"scores":	[-6.72019932256335]
								}, {
									"case":	111,
									"scores":	[-6.72019932256335]
								}, {
									"case":	112,
									"scores":	[-6.72019932256335]
								}, {
									"case":	113,
									"scores":	[-6.72019932256335]
								}, {
									"case":	114,
									"scores":	[-6.72019932256335]
								}, {
									"case":	115,
									"scores":	[-6.72019932256335]
								}, {
									"case":	116,
									"scores":	[-6.72019932256335]
								}, {
									"case":	117,
									"scores":	[-6.72019932256335]
								}, {
									"case":	118,
									"scores":	[-6.72019932256335]
								}, {
									"case":	119,
									"scores":	[-6.72019932256335]
								}, {
									"case":	120,
									"scores":	[-6.72019932256335]
								}, {
									"case":	121,
									"scores":	[-6.72019932256335]
								}, {
									"case":	122,
									"scores":	[-6.72019932256335]
								}, {
									"case":	123,
									"scores":	[-6.72019932256335]
								}, {
									"case":	124,
									"scores":	[-6.72019932256335]
								}, {
									"case":	125,
									"scores":	[-6.72019932256335]
								}, {
									"case":	126,
									"scores":	[-6.72019932256335]
								}, {
									"case":	127,
									"scores":	[-6.72019932256335]
								}, {
									"case":	128,
									"scores":	[-6.72019932256335]
								}, {
									"case":	129,
									"scores":	[-6.72019932256335]
								}, {
									"case":	130,
									"scores":	[-6.72019932256335]
								}, {
									"case":	131,
									"scores":	[-6.72019932256335]
								}, {
									"case":	132,
									"scores":	[-6.72019932256335]
								}, {
									"case":	133,
									"scores":	[-6.72019932256335]
								}, {
									"case":	134,
									"scores":	[-6.72019932256335]
								}, {
									"case":	135,
									"scores":	[-6.72019932256335]
								}, {
									"case":	136,
									"scores":	[-6.72019932256335]
								}, {
									"case":	137,
									"scores":	[-6.72019932256335]
								}, {
									"case":	138,
									"scores":	[-6.72019932256335]
								}, {
									"case":	139,
									"scores":	[-6.72019932256335]
								}, {
									"case":	140,
									"scores":	[-6.72019932256335]
								}, {
									"case":	141,
									"scores":	[-6.72019932256335]
								}, {
									"case":	142,
									"scores":	[-6.72019932256335]
								}, {
									"case":	143,
									"scores":	[-6.72019932256335]
								}, {
									"case":	144,
									"scores":	[-6.72019932256335]
								}, {
									"case":	145,
									"scores":	[-6.72019932256335]
								}, {
									"case":	146,
									"scores":	[-6.72019932256335]
								}, {
									"case":	147,
									"scores":	[-6.72019932256335]
								}, {
									"case":	148,
									"scores":	[-6.72019932256335]
								}, {
									"case":	149,
									"scores":	[-6.72019932256335]
								}, {
									"case":	150,
									"scores":	[-6.72019932256335]
								}, {
									"case":	151,
									"scores":	[-6.72019932256335]
								}, {
									"case":	152,
									"scores":	[-6.72019932256335]
								}, {
									"case":	153,
									"scores":	[-6.72019932256335]
								}, {
									"case":	154,
									"scores":	[-6.72019932256335]
								}, {
									"case":	155,
									"scores":	[-6.72019932256335]
								}, {
									"case":	156,
									"scores":	[-6.72019932256335]
								}, {
									"case":	157,
									"scores":	[-6.72019932256335]
								}, {
									"case":	158,
									"scores":	[-6.72019932256335]
								}, {
									"case":	159,
									"scores":	[-6.72019932256335]
								}, {
									"case":	160,
									"scores":	[-6.72019932256335]
								}, {
									"case":	161,
									"scores":	[-6.72019932256335]
								}, {
									"case":	162,
									"scores":	[-6.72019932256335]
								}, {
									"case":	163,
									"scores":	[-6.72019932256335]
								}, {
									"case":	164,
									"scores":	[-6.72019932256335]
								}, {
									"case":	165,
									"scores":	[-6.72019932256335]
								}, {
									"case":	166,
									"scores":	[-6.72019932256335]
								}, {
									"case":	167,
									"scores":	[-6.72019932256335]
								}, {
									"case":	168,
									"scores":	[-6.72019932256335]
								}, {
									"case":	169,
									"scores":	[-6.72019932256335]
								}, {
									"case":	170,
									"scores":	[-6.72019932256335]
								}, {
									"case":	171,
									"scores":	[-6.72019932256335]
								}, {
									"case":	172,
									"scores":	[-6.72019932256335]
								}, {
									"case":	173,
									"scores":	[-6.72019932256335]
								}, {
									"case":	174,
									"scores":	[-6.72019932256335]
								}, {
									"case":	175,
									"scores":	[-6.72019932256335]
								}, {
									"case":	176,
									"scores":	[-6.72019932256335]
								}, {
									"case":	177,
									"scores":	[-6.72019932256335]
								}, {
									"case":	178,
									"scores":	[-6.72019932256335]
								}, {
									"case":	179,
									"scores":	[-6.72019932256335]
								}, {
									"case":	180,
									"scores":	[-6.72019932256335]
								}, {
									"case":	181,
									"scores":	[-6.72019932256335]
								}, {
									"case":	182,
									"scores":	[-6.72019932256335]
								}, {
									"case":	183,
									"scores":	[-6.72019932256335]
								}, {
									"case":	184,
									"scores":	[-6.72019932256335]
								}, {
									"case":	185,
									"scores":	[-6.72019932256335]
								}, {
									"case":	186,
									"scores":	[-6.72019932256335]
								}, {
									"case":	187,
									"scores":	[-6.72019932256335]
								}, {
									"case":	188,
									"scores":	[-6.72019932256335]
								}, {
									"case":	189,
									"scores":	[-6.72019932256335]
								}, {
									"case":	190,
									"scores":	[-6.72019932256335]
								}, {
									"case":	191,
									"scores":	[-6.72019932256335]
								}, {
									"case":	192,
									"scores":	[-6.72019932256335]
								}, {
									"case":	193,
									"scores":	[-6.72019932256335]
								}, {
									"case":	194,
									"scores":	[-6.72019932256335]
								}, {
									"case":	195,
									"scores":	[-6.72019932256335]
								}, {
									"case":	196,
									"scores":	[-6.72019932256335]
								}, {
									"case":	197,
									"scores":	[-6.72019932256335]
								}, {
									"case":	198,
									"scores":	[-6.72019932256335]
								}, {
									"case":	199,
									"scores":	[-6.72019932256335]
								}, {
									"case":	200,
									"scores":	[-6.72019932256335]
								}, {
									"case":	201,
									"scores":	[-6.72019932256335]
								}, {
									"case":	202,
									"scores":	[-6.72019932256335]
								}, {
									"case":	203,
									"scores":	[-6.72019932256335]
								}, {
									"case":	204,
									"scores":	[-6.72019932256335]
								}, {
									"case":	205,
									"scores":	[-6.72019932256335]
								}, {
									"case":	206,
									"scores":	[-6.72019932256335]
								}, {
									"case":	207,
									"scores":	[-6.72019932256335]
								}, {
									"case":	208,
									"scores":	[-6.72019932256335]
								}, {
									"case":	209,
									"scores":	[-6.72019932256335]
								}, {
									"case":	210,
									"scores":	[-6.72019932256335]
								}, {
									"case":	211,
									"scores":	[-6.72019932256335]
								}, {
									"case":	212,
									"scores":	[-6.72019932256335]
								}, {
									"case":	213,
									"scores":	[-6.72019932256335]
								}, {
									"case":	214,
									"scores":	[-6.72019932256335]
								}, {
									"case":	215,
									"scores":	[-6.72019932256335]
								}, {
									"case":	216,
									"scores":	[-6.72019932256335]
								}, {
									"case":	217,
									"scores":	[-6.72019932256335]
								}, {
									"case":	218,
									"scores":	[-6.72019932256335]
								}, {
									"case":	219,
									"scores":	[-6.72019932256335]
								}, {
									"case":	220,
									"scores":	[-6.72019932256335]
								}, {
									"case":	221,
									"scores":	[-6.72019932256335]
								}, {
									"case":	222,
									"scores":	[-6.72019932256335]
								}, {
									"case":	223,
									"scores":	[-6.72019932256335]
								}, {
									"case":	224,
									"scores":	[-6.72019932256335]
								}, {
									"case":	225,
									"scores":	[-6.72019932256335]
								}, {
									"case":	226,
									"scores":	[-6.72019932256335]
								}, {
									"case":	227,
									"scores":	[-6.72019932256335]
								}, {
									"case":	228,
									"scores":	[-6.72019932256335]
								}, {
									"case":	229,
									"scores":	[-6.72019932256335]
								}, {
									"case":	230,
									"scores":	[-6.72019932256335]
								}, {
									"case":	231,
									"scores":	[-6.72019932256335]
								}, {
									"case":	232,
									"scores":	[-6.72019932256335]
								}, {
									"case":	233,
									"scores":	[-6.72019932256335]
								}, {
									"case":	234,
									"scores":	[-6.72019932256335]
								}, {
									"case":	235,
									"scores":	[-6.72019932256335]
								}, {
									"case":	236,
									"scores":	[-6.72019932256335]
								}, {
									"case":	237,
									"scores":	[-6.72019932256335]
								}, {
									"case":	238,
									"scores":	[-6.72019932256335]
								}, {
									"case":	239,
									"scores":	[-6.72019932256335]
								}, {
									"case":	240,
									"scores":	[-6.72019932256335]
								}, {
									"case":	241,
									"scores":	[-6.72019932256335]
								}, {
									"case":	242,
									"scores":	[-6.72019932256335]
								}, {
									"case":	243,
									"scores":	[-6.72019932256335]
								}, {
									"case":	244,
									"scores":	[-6.72019932256335]
								}, {
									"case":	245,
									"scores":	[-6.72019932256335]
								}, {
									"case":	246,
									"scores":	[-6.72019932256335]
								}, {
									"case":	247,
									"scores":	[-6.72019932256335]
								}, {
									"case":	248,
									"scores":	[-6.72019932256335]
								}, {
									"case":	249,
									"scores":	[-6.72019932256335]
								}, {
									"case":	250,
									"scores":	[-6.72019932256335]
								}, {
									"case":	251,
									"scores":	[-6.72019932256335]
								}, {
									"case":	252,
									"scores":	[-6.72019932256335]
								}, {
									"case":	253,
									"scores":	[-6.72019932256335]
								}, {
									"case":	254,
									"scores":	[-6.72019932256335]
								}, {
									"case":	255,
									"scores":	[-6.72019932256335]
								}, {
									"case":	256,
									"scores":	[-6.72019932256335]
								}, {
									"case":	257,
									"scores":	[-6.72019932256335]
								}, {
									"case":	258,
									"scores":	[-6.72019932256335]
								}, {
									"case":	259,
									"scores":	[-6.72019932256335]
								}, {
									"case":	260,
									"scores":	[-6.72019932256335]
								}, {
									"case":	261,
									"scores":	[-6.72019932256335]
								}, {
									"case":	262,
									"scores":	[-6.72019932256335]
								}, {
									"case":	263,
									"scores":	[-6.72019932256335]
								}, {
									"case":	264,
									"scores":	[-6.72019932256335]
								}, {
									"case":	265,
									"scores":	[-6.72019932256335]
								}, {
									"case":	266,
									"scores":	[-6.72019932256335]
								}, {
									"case":	267,
									"scores":	[-6.72019932256335]
								}, {
									"case":	268,
									"scores":	[-6.72019932256335]
								}, {
									"case":	269,
									"scores":	[-6.72019932256335]
								}, {
									"case":	270,
									"scores":	[-6.72019932256335]
								}, {
									"case":	271,
									"scores":	[-6.72019932256335]
								}, {
									"case":	272,
									"scores":	[-6.72019932256335]
								}, {
									"case":	273,
									"scores":	[-6.72019932256335]
								}, {
									"case":	274,
									"scores":	[-6.72019932256335]
								}, {
									"case":	275,
									"scores":	[-6.72019932256335]
								}, {
									"case":	276,
									"scores":	[-6.72019932256335]
								}, {
									"case":	277,
									"scores":	[-6.72019932256335]
								}, {
									"case":	278,
									"scores":	[-6.72019932256335]
								}, {
									"case":	279,
									"scores":	[-6.72019932256335]
								}, {
									"case":	280,
									"scores":	[-6.72019932256335]
								}, {
									"case":	281,
									"scores":	[-6.72019932256335]
								}, {
									"case":	282,
									"scores":	[-6.72019932256335]
								}, {
									"case":	283,
									"scores":	[-6.72019932256335]
								}, {
									"case":	284,
									"scores":	[-6.72019932256335]
								}, {
									"case":	285,
									"scores":	[-6.72019932256335]
								}, {
									"case":	286,
									"scores":	[-6.72019932256335]
								}, {
									"case":	287,
									"scores":	[-6.72019932256335]
								}, {
									"case":	288,
									"scores":	[-6.72019932256335]
								}, {
									"case":	289,
									"scores":	[-6.72019932256335]
								}, {
									"case":	290,
									"scores":	[-6.72019932256335]
								}, {
									"case":	291,
									"scores":	[-6.72019932256335]
								}, {
									"case":	292,
									"scores":	[-6.72019932256335]
								}, {
									"case":	293,
									"scores":	[-6.72019932256335]
								}, {
									"case":	294,
									"scores":	[-6.72019932256335]
								}, {
									"case":	295,
									"scores":	[-6.72019932256335]
								}, {
									"case":	296,
									"scores":	[-6.72019932256335]
								}, {
									"case":	297,
									"scores":	[-6.72019932256335]
								}, {
									"case":	298,
									"scores":	[-6.72019932256335]
								}, {
									"case":	299,
									"scores":	[-6.72019932256335]
								}, {
									"case":	300,
									"scores":	[-6.72019932256335]
								}, {
									"case":	301,
									"scores":	[-6.72019932256335]
								}, {
									"case":	302,
									"scores":	[-6.72019932256335]
								}, {
									"case":	303,
									"scores":	[-6.72019932256335]
								}, {
									"case":	304,
									"scores":	[-6.72019932256335]
								}, {
									"case":	305,
									"scores":	[-6.72019932256335]
								}, {
									"case":	306,
									"scores":	[-6.72019932256335]
								}, {
									"case":	307,
									"scores":	[-6.72019932256335]
								}, {
									"case":	308,
									"scores":	[-6.72019932256335]
								}, {
									"case":	309,
									"scores":	[-6.72019932256335]
								}, {
									"case":	310,
									"scores":	[-6.72019932256335]
								}, {
									"case":	311,
									"scores":	[-6.72019932256335]
								}, {
									"case":	312,
									"scores":	[-6.72019932256335]
								}, {
									"case":	313,
									"scores":	[-6.72019932256335]
								}, {
									"case":	314,
									"scores":	[-6.72019932256335]
								}, {
									"case":	315,
									"scores":	[-6.72019932256335]
								}, {
									"case":	316,
									"scores":	[-6.72019932256335]
								}, {
									"case":	317,
									"scores":	[-6.72019932256335]
								}, {
									"case":	318,
									"scores":	[-6.72019932256335]
								}, {
									"case":	319,
									"scores":	[-6.72019932256335]
								}, {
									"case":	320,
									"scores":	[-6.72019932256335]
								}, {
									"case":	321,
									"scores":	[-6.72019932256335]
								}, {
									"case":	322,
									"scores":	[-6.72019932256335]
								}, {
									"case":	323,
									"scores":	[-6.72019932256335]
								}, {
									"case":	324,
									"scores":	[-6.72019932256335]
								}, {
									"case":	325,
									"scores":	[-6.72019932256335]
								}, {
									"case":	326,
									"scores":	[-6.72019932256335]
								}, {
									"case":	327,
									"scores":	[-6.72019932256335]
								}, {
									"case":	328,
									"scores":	[-6.72019932256335]
								}, {
									"case":	329,
									"scores":	[-6.72019932256335]
								}, {
									"case":	330,
									"scores":	[-6.72019932256335]
								}, {
									"case":	331,
									"scores":	[-6.72019932256335]
								}, {
									"case":	332,
									"scores":	[-6.72019932256335]
								}, {
									"case":	333,
									"scores":	[-6.72019932256335]
								}, {
									"case":	334,
									"scores":	[-6.72019932256335]
								}, {
									"case":	335,
									"scores":	[-6.72019932256335]
								}, {
									"case":	336,
									"scores":	[-6.72019932256335]
								}, {
									"case":	337,
									"scores":	[-6.72019932256335]
								}, {
									"case":	338,
									"scores":	[-6.72019932256335]
								}, {
									"case":	339,
									"scores":	[-6.72019932256335]
								}, {
									"case":	340,
									"scores":	[-6.72019932256335]
								}, {
									"case":	341,
									"scores":	[-6.72019932256335]
								}, {
									"case":	342,
									"scores":	[-6.72019932256335]
								}, {
									"case":	343,
									"scores":	[-6.72019932256335]
								}, {
									"case":	344,
									"scores":	[-6.72019932256335]
								}, {
									"case":	345,
									"scores":	[-6.72019932256335]
								}, {
									"case":	346,
									"scores":	[-6.72019932256335]
								}, {
									"case":	347,
									"scores":	[-6.72019932256335]
								}, {
									"case":	348,
									"scores":	[-6.72019932256335]
								}, {
									"case":	349,
									"scores":	[-6.72019932256335]
								}, {
									"case":	350,
									"scores":	[-6.72019932256335]
								}, {
									"case":	351,
									"scores":	[-6.72019932256335]
								}, {
									"case":	352,
									"scores":	[-6.72019932256335]
								}, {
									"case":	353,
									"scores":	[-6.72019932256335]
								}, {
									"case":	354,
									"scores":	[-6.72019932256335]
								}, {
									"case":	355,
									"scores":	[-6.72019932256335]
								}, {
									"case":	356,
									"scores":	[-6.72019932256335]
								}, {
									"case":	357,
									"scores":	[-6.72019932256335]
								}, {
									"case":	358,
									"scores":	[-6.72019932256335]
								}, {
									"case":	359,
									"scores":	[-6.72019932256335]
								}, {
									"case":	360,
									"scores":	[-6.72019932256335]
								}, {
									"case":	361,
									"scores":	[-6.72019932256335]
								}, {
									"case":	362,
									"scores":	[-6.72019932256335]
								}, {
									"case":	363,
									"scores":	[-6.72019932256335]
								}, {
									"case":	364,
									"scores":	[-6.72019932256335]
								}, {
									"case":	365,
									"scores":	[-6.72019932256335]
								}, {
									"case":	366,
									"scores":	[-6.72019932256335]
								}, {
									"case":	367,
									"scores":	[-6.72019932256335]
								}, {
									"case":	368,
									"scores":	[-6.72019932256335]
								}, {
									"case":	369,
									"scores":	[-6.72019932256335]
								}, {
									"case":	370,
									"scores":	[-6.72019932256335]
								}, {
									"case":	371,
									"scores":	[-6.72019932256335]
								}, {
									"case":	372,
									"scores":	[-6.72019932256335]
								}, {
									"case":	373,
									"scores":	[-6.72019932256335]
								}, {
									"case":	374,
									"scores":	[-6.72019932256335]
								}, {
									"case":	375,
									"scores":	[-6.72019932256335]
								}, {
									"case":	376,
									"scores":	[-6.72019932256335]
								}, {
									"case":	377,
									"scores":	[-6.72019932256335]
								}, {
									"case":	378,
									"scores":	[-6.72019932256335]
								}, {
									"case":	379,
									"scores":	[-6.72019932256335]
								}, {
									"case":	380,
									"scores":	[-6.72019932256335]
								}, {
									"case":	381,
									"scores":	[-6.72019932256335]
								}, {
									"case":	382,
									"scores":	[-6.72019932256335]
								}, {
									"case":	383,
									"scores":	[-6.72019932256335]
								}, {
									"case":	384,
									"scores":	[-6.72019932256335]
								}, {
									"case":	385,
									"scores":	[-6.72019932256335]
								}, {
									"case":	386,
									"scores":	[-6.72019932256335]
								}, {
									"case":	387,
									"scores":	[-6.72019932256335]
								}, {
									"case":	388,
									"scores":	[-6.72019932256335]
								}, {
									"case":	389,
									"scores":	[-6.72019932256335]
								}, {
									"case":	390,
									"scores":	[-6.72019932256335]
								}, {
									"case":	391,
									"scores":	[-6.72019932256335]
								}, {
									"case":	392,
									"scores":	[-6.72019932256335]
								}, {
									"case":	393,
									"scores":	[-6.72019932256335]
								}, {
									"case":	394,
									"scores":	[-6.72019932256335]
								}, {
									"case":	395,
									"scores":	[-6.72019932256335]
								}, {
									"case":	396,
									"scores":	[-6.72019932256335]
								}, {
									"case":	397,
									"scores":	[-6.72019932256335]
								}, {
									"case":	398,
									"scores":	[-6.72019932256335]
								}, {
									"case":	399,
									"scores":	[-6.72019932256335]
								}, {
									"case":	400,
									"scores":	[-6.72019932256335]
								}, {
									"case":	401,
									"scores":	[-6.72019932256335]
								}, {
									"case":	402,
									"scores":	[-6.72019932256335]
								}, {
									"case":	403,
									"scores":	[-6.72019932256335]
								}, {
									"case":	404,
									"scores":	[-6.72019932256335]
								}, {
									"case":	405,
									"scores":	[-6.72019932256335]
								}, {
									"case":	406,
									"scores":	[-6.72019932256335]
								}, {
									"case":	407,
									"scores":	[-6.72019932256335]
								}, {
									"case":	408,
									"scores":	[-6.72019932256335]
								}, {
									"case":	409,
									"scores":	[-6.72019932256335]
								}, {
									"case":	410,
									"scores":	[-6.72019932256335]
								}, {
									"case":	411,
									"scores":	[-6.72019932256335]
								}, {
									"case":	412,
									"scores":	[-6.72019932256335]
								}, {
									"case":	413,
									"scores":	[-6.72019932256335]
								}, {
									"case":	414,
									"scores":	[-6.72019932256335]
								}, {
									"case":	415,
									"scores":	[-6.72019932256335]
								}, {
									"case":	416,
									"scores":	[-6.72019932256335]
								}, {
									"case":	417,
									"scores":	[-6.72019932256335]
								}, {
									"case":	418,
									"scores":	[-6.72019932256335]
								}, {
									"case":	419,
									"scores":	[-6.72019932256335]
								}, {
									"case":	420,
									"scores":	[-6.72019932256335]
								}, {
									"case":	421,
									"scores":	[-6.72019932256335]
								}, {
									"case":	422,
									"scores":	[-6.72019932256335]
								}, {
									"case":	423,
									"scores":	[-6.72019932256335]
								}, {
									"case":	424,
									"scores":	[-6.72019932256335]
								}, {
									"case":	425,
									"scores":	[-6.72019932256335]
								}, {
									"case":	426,
									"scores":	[-6.72019932256335]
								}, {
									"case":	427,
									"scores":	[-6.72019932256335]
								}, {
									"case":	428,
									"scores":	[-6.72019932256335]
								}, {
									"case":	429,
									"scores":	[-6.72019932256335]
								}, {
									"case":	430,
									"scores":	[-6.72019932256335]
								}, {
									"case":	431,
									"scores":	[-6.72019932256335]
								}, {
									"case":	432,
									"scores":	[-6.72019932256335]
								}, {
									"case":	433,
									"scores":	[-6.72019932256335]
								}, {
									"case":	434,
									"scores":	[-6.72019932256335]
								}, {
									"case":	435,
									"scores":	[-6.72019932256335]
								}, {
									"case":	436,
									"scores":	[-6.72019932256335]
								}, {
									"case":	437,
									"scores":	[-6.72019932256335]
								}, {
									"case":	438,
									"scores":	[-6.72019932256335]
								}, {
									"case":	439,
									"scores":	[-6.72019932256335]
								}, {
									"case":	440,
									"scores":	[-6.72019932256335]
								}, {
									"case":	441,
									"scores":	[-6.72019932256335]
								}, {
									"case":	442,
									"scores":	[-6.72019932256335]
								}, {
									"case":	443,
									"scores":	[-6.72019932256335]
								}, {
									"case":	444,
									"scores":	[-6.72019932256335]
								}, {
									"case":	445,
									"scores":	[-6.72019932256335]
								}, {
									"case":	446,
									"scores":	[-6.72019932256335]
								}, {
									"case":	447,
									"scores":	[-6.72019932256335]
								}, {
									"case":	448,
									"scores":	[-6.72019932256335]
								}, {
									"case":	449,
									"scores":	[-6.72019932256335]
								}, {
									"case":	450,
									"scores":	[-6.72019932256335]
								}, {
									"case":	451,
									"scores":	[-6.72019932256335]
								}, {
									"case":	452,
									"scores":	[-6.72019932256335]
								}, {
									"case":	453,
									"scores":	[-6.72019932256335]
								}, {
									"case":	454,
									"scores":	[-6.72019932256335]
								}, {
									"case":	455,
									"scores":	[-6.72019932256335]
								}, {
									"case":	456,
									"scores":	[-6.72019932256335]
								}, {
									"case":	457,
									"scores":	[-6.72019932256335]
								}, {
									"case":	458,
									"scores":	[-6.72019932256335]
								}, {
									"case":	459,
									"scores":	[-6.72019932256335]
								}, {
									"case":	460,
									"scores":	[-6.72019932256335]
								}, {
									"case":	461,
									"scores":	[-6.72019932256335]
								}, {
									"case":	462,
									"scores":	[-6.72019932256335]
								}, {
									"case":	463,
									"scores":	[-6.72019932256335]
								}, {
									"case":	464,
									"scores":	[-6.72019932256335]
								}, {
									"case":	465,
									"scores":	[-6.72019932256335]
								}, {
									"case":	466,
									"scores":	[-6.72019932256335]
								}, {
									"case":	467,
									"scores":	[-6.72019932256335]
								}, {
									"case":	468,
									"scores":	[-6.72019932256335]
								}, {
									"case":	469,
									"scores":	[-6.72019932256335]
								}, {
									"case":	470,
									"scores":	[-6.72019932256335]
								}, {
									"case":	471,
									"scores":	[-6.72019932256335]
								}, {
									"case":	472,
									"scores":	[-6.72019932256335]
								}, {
									"case":	473,
									"scores":	[-6.72019932256335]
								}, {
									"case":	474,
									"scores":	[-6.72019932256335]
								}, {
									"case":	475,
									"scores":	[-6.72019932256335]
								}, {
									"case":	476,
									"scores":	[-6.72019932256335]
								}, {
									"case":	477,
									"scores":	[-6.72019932256335]
								}, {
									"case":	478,
									"scores":	[-6.72019932256335]
								}, {
									"case":	479,
									"scores":	[-6.72019932256335]
								}, {
									"case":	480,
									"scores":	[-6.72019932256335]
								}, {
									"case":	481,
									"scores":	[-6.72019932256335]
								}, {
									"case":	482,
									"scores":	[-6.72019932256335]
								}, {
									"case":	483,
									"scores":	[-6.72019932256335]
								}, {
									"case":	484,
									"scores":	[-6.72019932256335]
								}, {
									"case":	485,
									"scores":	[-6.72019932256335]
								}, {
									"case":	486,
									"scores":	[-6.72019932256335]
								}, {
									"case":	487,
									"scores":	[-6.72019932256335]
								}, {
									"case":	488,
									"scores":	[-6.72019932256335]
								}, {
									"case":	489,
									"scores":	[-6.72019932256335]
								}, {
									"case":	490,
									"scores":	[-6.72019932256335]
								}, {
									"case":	491,
									"scores":	[-6.72019932256335]
								}, {
									"case":	492,
									"scores":	[-6.72019932256335]
								}, {
									"case":	493,
									"scores":	[-6.72019932256335]
								}, {
									"case":	494,
									"scores":	[-6.72019932256335]
								}, {
									"case":	495,
									"scores":	[-6.72019932256335]
								}, {
									"case":	496,
									"scores":	[-6.72019932256335]
								}, {
									"case":	497,
									"scores":	[-6.72019932256335]
								}, {
									"case":	498,
									"scores":	[-6.72019932256335]
								}, {
									"case":	499,
									"scores":	[-6.72019932256335]
								}, {
									"case":	500,
									"scores":	[-6.72019932256335]
								}, {
									"case":	501,
									"scores":	[-6.72019932256335]
								}, {
									"case":	502,
									"scores":	[-6.72019932256335]
								}, {
									"case":	503,
									"scores":	[-6.72019932256335]
								}, {
									"case":	504,
									"scores":	[-6.72019932256335]
								}, {
									"case":	505,
									"scores":	[-6.72019932256335]
								}, {
									"case":	506,
									"scores":	[-6.72019932256335]
								}, {
									"case":	507,
									"scores":	[-6.72019932256335]
								}, {
									"case":	508,
									"scores":	[-6.72019932256335]
								}, {
									"case":	509,
									"scores":	[-6.72019932256335]
								}, {
									"case":	510,
									"scores":	[-6.72019932256335]
								}, {
									"case":	511,
									"scores":	[-6.72019932256335]
								}, {
									"case":	512,
									"scores":	[-6.72019932256335]
								}, {
									"case":	513,
									"scores":	[-6.72019932256335]
								}, {
									"case":	514,
									"scores":	[-6.72019932256335]
								}, {
									"case":	515,
									"scores":	[-6.72019932256335]
								}, {
									"case":	516,
									"scores":	[-6.72019932256335]
								}, {
									"case":	517,
									"scores":	[-6.72019932256335]
								}, {
									"case":	518,
									"scores":	[-6.72019932256335]
								}, {
									"case":	519,
									"scores":	[-6.72019932256335]
								}, {
									"case":	520,
									"scores":	[-6.72019932256335]
								}, {
									"case":	521,
									"scores":	[-6.72019932256335]
								}, {
									"case":	522,
									"scores":	[-6.72019932256335]
								}, {
									"case":	523,
									"scores":	[-6.72019932256335]
								}, {
									"case":	524,
									"scores":	[-6.72019932256335]
								}, {
									"case":	525,
									"scores":	[-6.72019932256335]
								}, {
									"case":	526,
									"scores":	[-6.72019932256335]
								}, {
									"case":	527,
									"scores":	[-6.72019932256335]
								}, {
									"case":	528,
									"scores":	[-6.72019932256335]
								}, {
									"case":	529,
									"scores":	[-6.72019932256335]
								}, {
									"case":	530,
									"scores":	[-6.72019932256335]
								}, {
									"case":	531,
									"scores":	[-6.72019932256335]
								}, {
									"case":	532,
									"scores":	[-6.72019932256335]
								}, {
									"case":	533,
									"scores":	[-6.72019932256335]
								}, {
									"case":	534,
									"scores":	[-6.72019932256335]
								}, {
									"case":	535,
									"scores":	[-6.72019932256335]
								}, {
									"case":	536,
									"scores":	[-6.72019932256335]
								}, {
									"case":	537,
									"scores":	[-6.72019932256335]
								}, {
									"case":	538,
									"scores":	[-6.72019932256335]
								}, {
									"case":	539,
									"scores":	[-6.72019932256335]
								}, {
									"case":	540,
									"scores":	[-6.72019932256335]
								}, {
									"case":	541,
									"scores":	[-6.72019932256335]
								}, {
									"case":	542,
									"scores":	[-6.72019932256335]
								}, {
									"case":	543,
									"scores":	[-6.72019932256335]
								}, {
									"case":	544,
									"scores":	[-6.72019932256335]
								}, {
									"case":	545,
									"scores":	[-6.72019932256335]
								}, {
									"case":	546,
									"scores":	[-6.72019932256335]
								}, {
									"case":	547,
									"scores":	[-6.72019932256335]
								}, {
									"case":	548,
									"scores":	[-6.72019932256335]
								}, {
									"case":	549,
									"scores":	[-6.72019932256335]
								}, {
									"case":	550,
									"scores":	[-6.72019932256335]
								}, {
									"case":	551,
									"scores":	[-6.72019932256335]
								}, {
									"case":	552,
									"scores":	[-6.72019932256335]
								}, {
									"case":	553,
									"scores":	[-6.72019932256335]
								}, {
									"case":	554,
									"scores":	[-6.72019932256335]
								}, {
									"case":	555,
									"scores":	[-6.72019932256335]
								}, {
									"case":	556,
									"scores":	[-6.72019932256335]
								}, {
									"case":	557,
									"scores":	[-6.72019932256335]
								}, {
									"case":	558,
									"scores":	[-6.72019932256335]
								}, {
									"case":	559,
									"scores":	[-6.72019932256335]
								}, {
									"case":	560,
									"scores":	[-6.72019932256335]
								}, {
									"case":	561,
									"scores":	[-6.72019932256335]
								}, {
									"case":	562,
									"scores":	[-6.72019932256335]
								}, {
									"case":	563,
									"scores":	[-6.72019932256335]
								}, {
									"case":	564,
									"scores":	[-6.72019932256335]
								}, {
									"case":	565,
									"scores":	[-6.72019932256335]
								}, {
									"case":	566,
									"scores":	[-6.72019932256335]
								}, {
									"case":	567,
									"scores":	[-6.72019932256335]
								}, {
									"case":	568,
									"scores":	[-6.72019932256335]
								}, {
									"case":	569,
									"scores":	[-6.72019932256335]
								}, {
									"case":	570,
									"scores":	[-6.72019932256335]
								}, {
									"case":	571,
									"scores":	[-6.72019932256335]
								}, {
									"case":	572,
									"scores":	[-6.72019932256335]
								}, {
									"case":	573,
									"scores":	[-6.72019932256335]
								}, {
									"case":	574,
									"scores":	[-6.72019932256335]
								}, {
									"case":	575,
									"scores":	[-6.72019932256335]
								}, {
									"case":	576,
									"scores":	[-6.72019932256335]
								}, {
									"case":	577,
									"scores":	[-6.72019932256335]
								}, {
									"case":	578,
									"scores":	[-6.72019932256335]
								}, {
									"case":	579,
									"scores":	[-6.72019932256335]
								}, {
									"case":	580,
									"scores":	[-6.72019932256335]
								}, {
									"case":	581,
									"scores":	[-6.72019932256335]
								}, {
									"case":	582,
									"scores":	[-6.72019932256335]
								}, {
									"case":	583,
									"scores":	[-6.72019932256335]
								}, {
									"case":	584,
									"scores":	[-6.72019932256335]
								}, {
									"case":	585,
									"scores":	[-6.72019932256335]
								}, {
									"case":	586,
									"scores":	[-6.72019932256335]
								}, {
									"case":	587,
									"scores":	[-6.72019932256335]
								}, {
									"case":	588,
									"scores":	[-6.72019932256335]
								}, {
									"case":	589,
									"scores":	[-6.72019932256335]
								}, {
									"case":	590,
									"scores":	[-6.72019932256335]
								}, {
									"case":	591,
									"scores":	[-6.72019932256335]
								}, {
									"case":	592,
									"scores":	[-6.72019932256335]
								}, {
									"case":	593,
									"scores":	[-6.72019932256335]
								}, {
									"case":	594,
									"scores":	[-6.72019932256335]
								}, {
									"case":	595,
									"scores":	[-6.72019932256335]
								}, {
									"case":	596,
									"scores":	[-6.72019932256335]
								}, {
									"case":	597,
									"scores":	[-6.72019932256335]
								}, {
									"case":	598,
									"scores":	[-6.72019932256335]
								}, {
									"case":	599,
									"scores":	[-6.72019932256335]
								}, {
									"case":	600,
									"scores":	[-6.72019932256335]
								}, {
									"case":	601,
									"scores":	[-6.72019932256335]
								}, {
									"case":	602,
									"scores":	[-6.72019932256335]
								}, {
									"case":	603,
									"scores":	[-6.72019932256335]
								}, {
									"case":	604,
									"scores":	[-6.72019932256335]
								}, {
									"case":	605,
									"scores":	[-6.72019932256335]
								}, {
									"case":	606,
									"scores":	[-6.72019932256335]
								}, {
									"case":	607,
									"scores":	[-6.72019932256335]
								}, {
									"case":	608,
									"scores":	[-6.72019932256335]
								}, {
									"case":	609,
									"scores":	[-6.72019932256335]
								}, {
									"case":	610,
									"scores":	[-6.72019932256335]
								}, {
									"case":	611,
									"scores":	[-6.72019932256335]
								}, {
									"case":	612,
									"scores":	[-6.72019932256335]
								}, {
									"case":	613,
									"scores":	[-8.96607371476335, -9.23612659376335, -9.23612659376335, -9.02718807996335, -8.99008767996335, -9.23612659376335, -9.23612659376335, -9.23807719696335, -9.23612659376335, -8.73519159376335, -8.73714219696335, -9.23612659376335, -9.23807719696335, -9.27322699376335, -9.27322699376335, -8.99008767996335, -9.23612659376335]
								}]
						}, {
							"switch":	23,
							"types":	[[], [], [1], [], [], [], [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], [], [167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [], [], [166]],
							"begin_line":	356,
							"begin_column":	2,
							"end_line":	356,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L356\", 17, &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zfuncname), sizeof (zfuncname), &(options), sizeof (options), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(zretval), sizeof (zretval), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(context), sizeof (context), &(wrapper), sizeof (wrapper), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap)))\n    zval_set_isref_p(zopened);\n", "_array_init(zopened, -1)", "_array_init(zopened, -4)", "_array_init(zopened, 0)", "_array_init(zopened, 1)", "_array_init(zopened, 128)", "_array_init(zopened, 2)", "_array_init(zopened, 3)", "_array_init(zopened, 4)", "_array_init(zopened, 6)", "_object_init_ex(zopened, 0)", "add_index_null(zopened, -1)", "add_index_null(zopened, -4)", "add_index_null(zopened, 0)", "add_index_null(zopened, 1)", "add_index_null(zopened, 128)", "add_index_null(zopened, 2)", "add_index_null(zopened, 3)", "add_index_null(zopened, 4)", "add_index_null(zopened, 6)", "add_next_index_bool(zopened, -1)", "add_next_index_bool(zopened, -4)", "add_next_index_bool(zopened, 0)", "add_next_index_bool(zopened, 1)", "add_next_index_bool(zopened, 128)", "add_next_index_bool(zopened, 2)", "add_next_index_bool(zopened, 3)", "add_next_index_bool(zopened, 4)", "add_next_index_bool(zopened, 6)", "add_next_index_bool(zopened, call_result)", "add_next_index_bool(zopened, le_index_ptr)", "add_next_index_bool(zopened, le_protocols)", "add_next_index_bool(zopened, options)", "add_next_index_long(zopened, -1)", "add_next_index_long(zopened, -4)", "add_next_index_long(zopened, 0)", "add_next_index_long(zopened, 1)", "add_next_index_long(zopened, 128)", "add_next_index_long(zopened, 2)", "add_next_index_long(zopened, 3)", "add_next_index_long(zopened, 4)", "add_next_index_long(zopened, 6)", "add_next_index_resource(zopened, -1)", "add_next_index_resource(zopened, -4)", "add_next_index_resource(zopened, 0)", "add_next_index_resource(zopened, 1)", "add_next_index_resource(zopened, 128)", "add_next_index_resource(zopened, 2)", "add_next_index_resource(zopened, 3)", "add_next_index_resource(zopened, 4)", "add_next_index_resource(zopened, 6)", "add_next_index_resource(zopened, call_result)", "add_next_index_resource(zopened, le_index_ptr)", "add_next_index_resource(zopened, le_protocols)", "add_next_index_resource(zopened, options)", "add_next_index_zval(zopened, 0)", "add_next_index_zval(zopened, zfilename)", "add_next_index_zval(zopened, zfuncname)", "add_next_index_zval(zopened, zmode)", "add_next_index_zval(zopened, zopened)", "add_next_index_zval(zopened, zoptions)", "add_next_index_zval(zopened, zretval)", "bitwise_not_function(zopened, 0)", "bitwise_not_function(zopened, zfilename)", "bitwise_not_function(zopened, zfuncname)", "bitwise_not_function(zopened, zmode)", "bitwise_not_function(zopened, zopened)", "bitwise_not_function(zopened, zoptions)", "bitwise_not_function(zopened, zretval)", "boolean_not_function(zopened, 0)", "boolean_not_function(zopened, zfilename)", "boolean_not_function(zopened, zfuncname)", "boolean_not_function(zopened, zmode)", "boolean_not_function(zopened, zopened)", "boolean_not_function(zopened, zoptions)", "boolean_not_function(zopened, zretval)", "compile_string(zopened, 0)", "compile_string(zopened, filename)", "compile_string(zopened, mode)", "convert_to_long_base(zopened, -1)", "convert_to_long_base(zopened, -4)", "convert_to_long_base(zopened, 0)", "convert_to_long_base(zopened, 1)", "convert_to_long_base(zopened, 128)", "convert_to_long_base(zopened, 2)", "convert_to_long_base(zopened, 3)", "convert_to_long_base(zopened, 4)", "convert_to_long_base(zopened, 6)", "convert_to_long_base(zopened, call_result)", "convert_to_long_base(zopened, le_index_ptr)", "convert_to_long_base(zopened, le_protocols)", "convert_to_long_base(zopened, options)", "statbuf_from_array(zopened, 0)", "zend_binary_zval_strcasecmp(zopened, 0)", "zend_binary_zval_strcasecmp(zopened, zfilename)", "zend_binary_zval_strcasecmp(zopened, zfuncname)", "zend_binary_zval_strcasecmp(zopened, zmode)", "zend_binary_zval_strcasecmp(zopened, zopened)", "zend_binary_zval_strcasecmp(zopened, zoptions)", "zend_binary_zval_strcasecmp(zopened, zretval)", "zend_binary_zval_strcmp(zopened, 0)", "zend_binary_zval_strcmp(zopened, zfilename)", "zend_binary_zval_strcmp(zopened, zfuncname)", "zend_binary_zval_strcmp(zopened, zmode)", "zend_binary_zval_strcmp(zopened, zopened)", "zend_binary_zval_strcmp(zopened, zoptions)", "zend_binary_zval_strcmp(zopened, zretval)", "zend_iterator_unwrap(zopened, 0)", "zend_make_callable(zopened, 0)", "zend_make_callable(zopened, environ)", "zend_make_callable(zopened, opened_path)", "zend_object_create_proxy(zopened, 0)", "zend_object_create_proxy(zopened, zfilename)", "zend_object_create_proxy(zopened, zfuncname)", "zend_object_create_proxy(zopened, zmode)", "zend_object_create_proxy(zopened, zopened)", "zend_object_create_proxy(zopened, zoptions)", "zend_object_create_proxy(zopened, zretval)", "zend_object_store_set_object(zopened, 0)", "zend_print_zval(zopened, -1)", "zend_print_zval(zopened, -4)", "zend_print_zval(zopened, 0)", "zend_print_zval(zopened, 1)", "zend_print_zval(zopened, 128)", "zend_print_zval(zopened, 2)", "zend_print_zval(zopened, 3)", "zend_print_zval(zopened, 4)", "zend_print_zval(zopened, 6)", "zend_print_zval(zopened, call_result)", "zend_print_zval(zopened, le_index_ptr)", "zend_print_zval(zopened, le_protocols)", "zend_print_zval(zopened, options)", "zend_print_zval_r(zopened, -1)", "zend_print_zval_r(zopened, -4)", "zend_print_zval_r(zopened, 0)", "zend_print_zval_r(zopened, 1)", "zend_print_zval_r(zopened, 128)", "zend_print_zval_r(zopened, 2)", "zend_print_zval_r(zopened, 3)", "zend_print_zval_r(zopened, 4)", "zend_print_zval_r(zopened, 6)", "zend_print_zval_r(zopened, call_result)", "zend_print_zval_r(zopened, le_index_ptr)", "zend_print_zval_r(zopened, le_protocols)", "zend_print_zval_r(zopened, options)", "zend_std_get_debug_info(zopened, 0)", "zval_set_isref_to_p(zopened, -1)", "zval_set_isref_to_p(zopened, -4)", "zval_set_isref_to_p(zopened, 0)", "zval_set_isref_to_p(zopened, 1)", "zval_set_isref_to_p(zopened, 128)", "zval_set_isref_to_p(zopened, 2)", "zval_set_isref_to_p(zopened, 3)", "zval_set_isref_to_p(zopened, 4)", "zval_set_isref_to_p(zopened, 6)", "zval_set_isref_to_p(zopened, old_in_user_include)", "zval_set_refcount_p(zopened, -1)", "zval_set_refcount_p(zopened, -4)", "zval_set_refcount_p(zopened, 0)", "zval_set_refcount_p(zopened, 1)", "zval_set_refcount_p(zopened, 128)", "zval_set_refcount_p(zopened, 2)", "zval_set_refcount_p(zopened, 3)", "zval_set_refcount_p(zopened, 4)", "zval_set_refcount_p(zopened, 6)", "{\n}\n", "_convert_to_string(zopened)", "_object_init(zopened)", "_zval_copy_ctor(zopened)", "_zval_copy_ctor_func(zopened)", "_zval_dtor(zopened)", "_zval_dtor_func(zopened)", "_zval_dtor_wrapper(zopened)", "_zval_internal_dtor(zopened)", "add_next_index_null(zopened)", "config_zval_dtor(zopened)", "convert_scalar_to_number(zopened)", "convert_to_array(zopened)", "convert_to_boolean(zopened)", "convert_to_double(zopened)", "convert_to_long(zopened)", "convert_to_null(zopened)", "convert_to_object(zopened)", "decrement_function(zopened)", "gc_remove_zval_from_buffer(zopened)", "gc_zobj_possible_root(zopened)", "gc_zval_check_possible_root(zopened)", "gc_zval_possible_root(zopened)", "i_zend_is_true(zopened)", "i_zval_ptr_dtor(zopened)", "increment_function(zopened)", "lex_scan(zopened)", "php_output_get_contents(zopened)", "php_output_get_length(zopened)", "safe_free_zval_ptr_rel(zopened)", "zend_is_true(zopened)", "zend_locale_sprintf_double(zopened)", "zend_object_store_ctor_failed(zopened)", "zend_objects_clone_obj(zopened)", "zend_objects_store_add_ref(zopened)", "zend_objects_store_clone_obj(zopened)", "zend_objects_store_del_ref(zopened)", "zend_objects_store_get_refcount(zopened)", "zend_print_flat_zval_r(zopened)", "zend_print_variable(zopened)", "zend_std_get_constructor(zopened)", "zend_std_get_properties(zopened)", "zval_addref_p(zopened)", "zval_delref_p(zopened)", "zval_is_true(zopened)", "zval_isref_p(zopened)", "zval_refcount_p(zopened)", "zval_unset_isref_p(zopened)", "zval_set_isref_p((&args))", "zval_set_isref_p((&call_result))", "zval_set_isref_p((&context))", "zval_set_isref_p((&filename))", "zval_set_isref_p((&mode))", "zval_set_isref_p((&old_in_user_include))", "zval_set_isref_p((&opened_path))", "zval_set_isref_p((&options))", "zval_set_isref_p((&stream))", "zval_set_isref_p((&us))", "zval_set_isref_p((&uwrap))", "zval_set_isref_p((&wrapper))", "zval_set_isref_p((&zfilename))", "zval_set_isref_p((&zfuncname))", "zval_set_isref_p((&zmode))", "zval_set_isref_p((&zopened))", "zval_set_isref_p((&zoptions))", "zval_set_isref_p((&zretval))", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.27772339856335, -7.71497139256335, -7.71497139256335, -7.2514340925633514, -6.95708329256335, -7.71497139256335, -7.71497139256335, -7.72069409256335, -7.71497139256335, -7.39296036256335, -7.39868306256335, -7.71497139256335, -7.72069409256335, -8.00932219256335, -8.00932219256335, -6.95708329256335, -7.71497139256335]
								}, {
									"case":	2,
									"scores":	[-6.72019932256335]
								}, {
									"case":	3,
									"scores":	[-6.72019932256335]
								}, {
									"case":	4,
									"scores":	[-6.72019932256335]
								}, {
									"case":	5,
									"scores":	[-6.72019932256335]
								}, {
									"case":	6,
									"scores":	[-6.72019932256335]
								}, {
									"case":	7,
									"scores":	[-6.72019932256335]
								}, {
									"case":	8,
									"scores":	[-6.72019932256335]
								}, {
									"case":	9,
									"scores":	[-6.72019932256335]
								}, {
									"case":	10,
									"scores":	[-6.72019932256335]
								}, {
									"case":	11,
									"scores":	[-6.72019932256335]
								}, {
									"case":	12,
									"scores":	[-6.72019932256335]
								}, {
									"case":	13,
									"scores":	[-6.72019932256335]
								}, {
									"case":	14,
									"scores":	[-6.72019932256335]
								}, {
									"case":	15,
									"scores":	[-6.72019932256335]
								}, {
									"case":	16,
									"scores":	[-6.72019932256335]
								}, {
									"case":	17,
									"scores":	[-6.72019932256335]
								}, {
									"case":	18,
									"scores":	[-6.72019932256335]
								}, {
									"case":	19,
									"scores":	[-6.72019932256335]
								}, {
									"case":	20,
									"scores":	[-6.72019932256335]
								}, {
									"case":	21,
									"scores":	[-6.72019932256335]
								}, {
									"case":	22,
									"scores":	[-6.72019932256335]
								}, {
									"case":	23,
									"scores":	[-6.72019932256335]
								}, {
									"case":	24,
									"scores":	[-6.72019932256335]
								}, {
									"case":	25,
									"scores":	[-6.72019932256335]
								}, {
									"case":	26,
									"scores":	[-6.72019932256335]
								}, {
									"case":	27,
									"scores":	[-6.72019932256335]
								}, {
									"case":	28,
									"scores":	[-6.72019932256335]
								}, {
									"case":	29,
									"scores":	[-6.72019932256335]
								}, {
									"case":	30,
									"scores":	[-6.72019932256335]
								}, {
									"case":	31,
									"scores":	[-6.72019932256335]
								}, {
									"case":	32,
									"scores":	[-6.72019932256335]
								}, {
									"case":	33,
									"scores":	[-6.72019932256335]
								}, {
									"case":	34,
									"scores":	[-6.72019932256335]
								}, {
									"case":	35,
									"scores":	[-6.72019932256335]
								}, {
									"case":	36,
									"scores":	[-6.72019932256335]
								}, {
									"case":	37,
									"scores":	[-6.72019932256335]
								}, {
									"case":	38,
									"scores":	[-6.72019932256335]
								}, {
									"case":	39,
									"scores":	[-6.72019932256335]
								}, {
									"case":	40,
									"scores":	[-6.72019932256335]
								}, {
									"case":	41,
									"scores":	[-6.72019932256335]
								}, {
									"case":	42,
									"scores":	[-6.72019932256335]
								}, {
									"case":	43,
									"scores":	[-6.72019932256335]
								}, {
									"case":	44,
									"scores":	[-6.72019932256335]
								}, {
									"case":	45,
									"scores":	[-6.72019932256335]
								}, {
									"case":	46,
									"scores":	[-6.72019932256335]
								}, {
									"case":	47,
									"scores":	[-6.72019932256335]
								}, {
									"case":	48,
									"scores":	[-6.72019932256335]
								}, {
									"case":	49,
									"scores":	[-6.72019932256335]
								}, {
									"case":	50,
									"scores":	[-6.72019932256335]
								}, {
									"case":	51,
									"scores":	[-6.72019932256335]
								}, {
									"case":	52,
									"scores":	[-6.72019932256335]
								}, {
									"case":	53,
									"scores":	[-6.72019932256335]
								}, {
									"case":	54,
									"scores":	[-6.72019932256335]
								}, {
									"case":	55,
									"scores":	[-6.72019932256335]
								}, {
									"case":	56,
									"scores":	[-6.72019932256335]
								}, {
									"case":	57,
									"scores":	[-6.72019932256335]
								}, {
									"case":	58,
									"scores":	[-6.72019932256335]
								}, {
									"case":	59,
									"scores":	[-6.72019932256335]
								}, {
									"case":	60,
									"scores":	[-6.72019932256335]
								}, {
									"case":	61,
									"scores":	[-6.72019932256335]
								}, {
									"case":	62,
									"scores":	[-6.72019932256335]
								}, {
									"case":	63,
									"scores":	[-6.72019932256335]
								}, {
									"case":	64,
									"scores":	[-6.72019932256335]
								}, {
									"case":	65,
									"scores":	[-6.72019932256335]
								}, {
									"case":	66,
									"scores":	[-6.72019932256335]
								}, {
									"case":	67,
									"scores":	[-6.72019932256335]
								}, {
									"case":	68,
									"scores":	[-6.72019932256335]
								}, {
									"case":	69,
									"scores":	[-6.72019932256335]
								}, {
									"case":	70,
									"scores":	[-6.72019932256335]
								}, {
									"case":	71,
									"scores":	[-6.72019932256335]
								}, {
									"case":	72,
									"scores":	[-6.72019932256335]
								}, {
									"case":	73,
									"scores":	[-6.72019932256335]
								}, {
									"case":	74,
									"scores":	[-6.72019932256335]
								}, {
									"case":	75,
									"scores":	[-6.72019932256335]
								}, {
									"case":	76,
									"scores":	[-6.72019932256335]
								}, {
									"case":	77,
									"scores":	[-6.72019932256335]
								}, {
									"case":	78,
									"scores":	[-6.72019932256335]
								}, {
									"case":	79,
									"scores":	[-6.72019932256335]
								}, {
									"case":	80,
									"scores":	[-6.72019932256335]
								}, {
									"case":	81,
									"scores":	[-6.72019932256335]
								}, {
									"case":	82,
									"scores":	[-6.72019932256335]
								}, {
									"case":	83,
									"scores":	[-6.72019932256335]
								}, {
									"case":	84,
									"scores":	[-6.72019932256335]
								}, {
									"case":	85,
									"scores":	[-6.72019932256335]
								}, {
									"case":	86,
									"scores":	[-6.72019932256335]
								}, {
									"case":	87,
									"scores":	[-6.72019932256335]
								}, {
									"case":	88,
									"scores":	[-6.72019932256335]
								}, {
									"case":	89,
									"scores":	[-6.72019932256335]
								}, {
									"case":	90,
									"scores":	[-6.72019932256335]
								}, {
									"case":	91,
									"scores":	[-6.72019932256335]
								}, {
									"case":	92,
									"scores":	[-6.72019932256335]
								}, {
									"case":	93,
									"scores":	[-6.72019932256335]
								}, {
									"case":	94,
									"scores":	[-6.72019932256335]
								}, {
									"case":	95,
									"scores":	[-6.72019932256335]
								}, {
									"case":	96,
									"scores":	[-6.72019932256335]
								}, {
									"case":	97,
									"scores":	[-6.72019932256335]
								}, {
									"case":	98,
									"scores":	[-6.72019932256335]
								}, {
									"case":	99,
									"scores":	[-6.72019932256335]
								}, {
									"case":	100,
									"scores":	[-6.72019932256335]
								}, {
									"case":	101,
									"scores":	[-6.72019932256335]
								}, {
									"case":	102,
									"scores":	[-6.72019932256335]
								}, {
									"case":	103,
									"scores":	[-6.72019932256335]
								}, {
									"case":	104,
									"scores":	[-6.72019932256335]
								}, {
									"case":	105,
									"scores":	[-6.72019932256335]
								}, {
									"case":	106,
									"scores":	[-6.72019932256335]
								}, {
									"case":	107,
									"scores":	[-6.72019932256335]
								}, {
									"case":	108,
									"scores":	[-6.72019932256335]
								}, {
									"case":	109,
									"scores":	[-6.72019932256335]
								}, {
									"case":	110,
									"scores":	[-6.72019932256335]
								}, {
									"case":	111,
									"scores":	[-6.72019932256335]
								}, {
									"case":	112,
									"scores":	[-6.72019932256335]
								}, {
									"case":	113,
									"scores":	[-6.72019932256335]
								}, {
									"case":	114,
									"scores":	[-6.72019932256335]
								}, {
									"case":	115,
									"scores":	[-6.72019932256335]
								}, {
									"case":	116,
									"scores":	[-6.72019932256335]
								}, {
									"case":	117,
									"scores":	[-6.72019932256335]
								}, {
									"case":	118,
									"scores":	[-6.72019932256335]
								}, {
									"case":	119,
									"scores":	[-6.72019932256335]
								}, {
									"case":	120,
									"scores":	[-6.72019932256335]
								}, {
									"case":	121,
									"scores":	[-6.72019932256335]
								}, {
									"case":	122,
									"scores":	[-6.72019932256335]
								}, {
									"case":	123,
									"scores":	[-6.72019932256335]
								}, {
									"case":	124,
									"scores":	[-6.72019932256335]
								}, {
									"case":	125,
									"scores":	[-6.72019932256335]
								}, {
									"case":	126,
									"scores":	[-6.72019932256335]
								}, {
									"case":	127,
									"scores":	[-6.72019932256335]
								}, {
									"case":	128,
									"scores":	[-6.72019932256335]
								}, {
									"case":	129,
									"scores":	[-6.72019932256335]
								}, {
									"case":	130,
									"scores":	[-6.72019932256335]
								}, {
									"case":	131,
									"scores":	[-6.72019932256335]
								}, {
									"case":	132,
									"scores":	[-6.72019932256335]
								}, {
									"case":	133,
									"scores":	[-6.72019932256335]
								}, {
									"case":	134,
									"scores":	[-6.72019932256335]
								}, {
									"case":	135,
									"scores":	[-6.72019932256335]
								}, {
									"case":	136,
									"scores":	[-6.72019932256335]
								}, {
									"case":	137,
									"scores":	[-6.72019932256335]
								}, {
									"case":	138,
									"scores":	[-6.72019932256335]
								}, {
									"case":	139,
									"scores":	[-6.72019932256335]
								}, {
									"case":	140,
									"scores":	[-6.72019932256335]
								}, {
									"case":	141,
									"scores":	[-6.72019932256335]
								}, {
									"case":	142,
									"scores":	[-6.72019932256335]
								}, {
									"case":	143,
									"scores":	[-6.72019932256335]
								}, {
									"case":	144,
									"scores":	[-6.72019932256335]
								}, {
									"case":	145,
									"scores":	[-6.72019932256335]
								}, {
									"case":	146,
									"scores":	[-6.72019932256335]
								}, {
									"case":	147,
									"scores":	[-6.72019932256335]
								}, {
									"case":	148,
									"scores":	[-6.72019932256335]
								}, {
									"case":	149,
									"scores":	[-6.72019932256335]
								}, {
									"case":	150,
									"scores":	[-6.72019932256335]
								}, {
									"case":	151,
									"scores":	[-6.72019932256335]
								}, {
									"case":	152,
									"scores":	[-6.72019932256335]
								}, {
									"case":	153,
									"scores":	[-6.72019932256335]
								}, {
									"case":	154,
									"scores":	[-6.72019932256335]
								}, {
									"case":	155,
									"scores":	[-6.72019932256335]
								}, {
									"case":	156,
									"scores":	[-6.72019932256335]
								}, {
									"case":	157,
									"scores":	[-6.72019932256335]
								}, {
									"case":	158,
									"scores":	[-6.72019932256335]
								}, {
									"case":	159,
									"scores":	[-6.72019932256335]
								}, {
									"case":	160,
									"scores":	[-6.72019932256335]
								}, {
									"case":	161,
									"scores":	[-6.72019932256335]
								}, {
									"case":	162,
									"scores":	[-6.72019932256335]
								}, {
									"case":	163,
									"scores":	[-6.72019932256335]
								}, {
									"case":	164,
									"scores":	[-6.72019932256335]
								}, {
									"case":	165,
									"scores":	[-6.72019932256335]
								}, {
									"case":	166,
									"scores":	[-6.72019932256335]
								}, {
									"case":	167,
									"scores":	[-6.72019932256335]
								}, {
									"case":	168,
									"scores":	[-6.72019932256335]
								}, {
									"case":	169,
									"scores":	[-6.72019932256335]
								}, {
									"case":	170,
									"scores":	[-6.72019932256335]
								}, {
									"case":	171,
									"scores":	[-6.72019932256335]
								}, {
									"case":	172,
									"scores":	[-6.72019932256335]
								}, {
									"case":	173,
									"scores":	[-6.72019932256335]
								}, {
									"case":	174,
									"scores":	[-6.72019932256335]
								}, {
									"case":	175,
									"scores":	[-6.72019932256335]
								}, {
									"case":	176,
									"scores":	[-6.72019932256335]
								}, {
									"case":	177,
									"scores":	[-6.72019932256335]
								}, {
									"case":	178,
									"scores":	[-6.72019932256335]
								}, {
									"case":	179,
									"scores":	[-6.72019932256335]
								}, {
									"case":	180,
									"scores":	[-6.72019932256335]
								}, {
									"case":	181,
									"scores":	[-6.72019932256335]
								}, {
									"case":	182,
									"scores":	[-6.72019932256335]
								}, {
									"case":	183,
									"scores":	[-6.72019932256335]
								}, {
									"case":	184,
									"scores":	[-6.72019932256335]
								}, {
									"case":	185,
									"scores":	[-6.72019932256335]
								}, {
									"case":	186,
									"scores":	[-6.72019932256335]
								}, {
									"case":	187,
									"scores":	[-6.72019932256335]
								}, {
									"case":	188,
									"scores":	[-6.72019932256335]
								}, {
									"case":	189,
									"scores":	[-6.72019932256335]
								}, {
									"case":	190,
									"scores":	[-6.72019932256335]
								}, {
									"case":	191,
									"scores":	[-6.72019932256335]
								}, {
									"case":	192,
									"scores":	[-6.72019932256335]
								}, {
									"case":	193,
									"scores":	[-6.72019932256335]
								}, {
									"case":	194,
									"scores":	[-6.72019932256335]
								}, {
									"case":	195,
									"scores":	[-6.72019932256335]
								}, {
									"case":	196,
									"scores":	[-6.72019932256335]
								}, {
									"case":	197,
									"scores":	[-6.72019932256335]
								}, {
									"case":	198,
									"scores":	[-6.72019932256335]
								}, {
									"case":	199,
									"scores":	[-6.72019932256335]
								}, {
									"case":	200,
									"scores":	[-6.72019932256335]
								}, {
									"case":	201,
									"scores":	[-6.72019932256335]
								}, {
									"case":	202,
									"scores":	[-6.72019932256335]
								}, {
									"case":	203,
									"scores":	[-6.72019932256335]
								}, {
									"case":	204,
									"scores":	[-6.72019932256335]
								}, {
									"case":	205,
									"scores":	[-6.72019932256335]
								}, {
									"case":	206,
									"scores":	[-6.72019932256335]
								}, {
									"case":	207,
									"scores":	[-6.72019932256335]
								}, {
									"case":	208,
									"scores":	[-6.72019932256335]
								}, {
									"case":	209,
									"scores":	[-6.72019932256335]
								}, {
									"case":	210,
									"scores":	[-6.72019932256335]
								}, {
									"case":	211,
									"scores":	[-6.72019932256335]
								}, {
									"case":	212,
									"scores":	[-6.72019932256335]
								}, {
									"case":	213,
									"scores":	[-6.72019932256335]
								}, {
									"case":	214,
									"scores":	[-6.72019932256335]
								}, {
									"case":	215,
									"scores":	[-6.72019932256335]
								}, {
									"case":	216,
									"scores":	[-6.72019932256335]
								}, {
									"case":	217,
									"scores":	[-6.72019932256335]
								}, {
									"case":	218,
									"scores":	[-6.72019932256335]
								}, {
									"case":	219,
									"scores":	[-6.72019932256335]
								}, {
									"case":	220,
									"scores":	[-6.72019932256335]
								}, {
									"case":	221,
									"scores":	[-6.72019932256335]
								}, {
									"case":	222,
									"scores":	[-6.72019932256335]
								}, {
									"case":	223,
									"scores":	[-6.72019932256335]
								}, {
									"case":	224,
									"scores":	[-6.72019932256335]
								}, {
									"case":	225,
									"scores":	[-6.72019932256335]
								}, {
									"case":	226,
									"scores":	[-6.72019932256335]
								}, {
									"case":	227,
									"scores":	[-6.72019932256335]
								}, {
									"case":	228,
									"scores":	[-6.72019932256335]
								}, {
									"case":	229,
									"scores":	[-6.72019932256335]
								}, {
									"case":	230,
									"scores":	[-6.72019932256335]
								}, {
									"case":	231,
									"scores":	[-6.72019932256335]
								}, {
									"case":	232,
									"scores":	[-6.72019932256335]
								}, {
									"case":	233,
									"scores":	[-6.72019932256335]
								}, {
									"case":	234,
									"scores":	[-6.72019932256335]
								}, {
									"case":	235,
									"scores":	[-6.72019932256335]
								}, {
									"case":	236,
									"scores":	[-6.72019932256335]
								}, {
									"case":	237,
									"scores":	[-6.72019932256335]
								}]
						}]
				}, {
					"line":	357,
					"switches":	[{
							"switch":	24,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	358,
							"begin_column":	0,
							"end_line":	358,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L358\", 17, &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zretval), sizeof (zretval), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(zfilename), sizeof (zfilename), &(stream), sizeof (stream), &(filename), sizeof (filename), &(opened_path), sizeof (opened_path), &(context), sizeof (context), &(wrapper), sizeof (wrapper), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	2,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	3,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	4,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	5,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	6,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	7,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	8,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	9,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	10,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	11,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	12,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	13,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	14,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	15,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	16,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	17,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	18,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	19,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	20,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	21,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	22,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	23,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	24,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	25,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	26,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	27,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	28,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	29,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	30,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	31,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	32,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	33,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	34,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	35,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	36,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	37,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	38,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	39,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	40,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	41,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	42,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	43,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	44,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	45,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	46,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	47,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	48,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	49,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	50,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	51,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	52,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	53,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	54,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	55,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	56,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	57,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	58,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	59,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	60,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	61,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	62,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	63,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	64,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	65,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	66,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	67,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	68,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	69,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	70,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	71,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	72,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	73,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	74,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	75,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	76,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	77,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	78,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	79,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	80,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	81,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	82,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	83,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	84,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	85,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	86,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	87,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	88,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	89,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	90,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	91,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	92,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	93,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	94,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	95,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	96,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	97,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	98,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	99,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	100,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	101,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	102,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	103,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	104,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	105,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	106,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	107,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	108,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	109,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	110,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	111,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	112,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	113,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	114,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	115,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	116,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	117,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	118,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	119,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	120,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	121,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	122,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	123,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	124,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	125,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	126,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	127,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	128,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	129,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	130,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	131,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	132,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	133,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	134,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	135,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	136,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	137,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	138,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	139,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	140,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	141,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	142,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	143,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	144,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	145,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	146,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	147,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	148,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	149,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	150,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	151,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	152,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	153,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	154,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	155,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	156,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	157,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	158,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	159,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	160,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	161,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	162,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	163,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	164,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	165,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	166,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	167,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	168,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	169,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	170,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	171,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	172,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	173,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	174,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	175,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	176,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	177,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	178,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	179,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	180,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	181,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	182,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	183,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	184,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	185,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	186,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	187,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	188,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	189,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	190,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	191,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	192,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	193,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	194,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	195,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	196,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	197,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	198,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	199,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	200,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	201,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	202,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	203,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	204,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	205,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	206,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	207,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	208,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	209,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	210,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	211,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	212,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	213,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	214,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	215,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	216,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	217,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	218,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	219,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	220,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	221,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	222,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	223,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	224,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	225,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	226,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	227,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	228,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	229,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	230,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	231,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	232,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	233,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	234,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	235,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	236,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	237,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	238,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	239,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	240,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	241,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	242,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	243,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	244,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	245,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	246,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	247,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	248,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	249,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	250,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	251,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	252,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	253,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	254,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	255,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	256,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	257,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	258,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	259,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	260,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	261,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	262,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	263,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	264,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	265,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	266,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	267,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	268,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	269,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	270,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	271,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	272,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	273,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	274,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	275,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	276,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	277,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	278,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	279,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	280,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	281,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	282,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	283,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	284,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	285,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	286,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	287,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	288,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	289,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	290,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	291,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	292,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	293,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	294,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	295,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	296,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	297,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	298,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	299,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	300,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	301,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	302,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	303,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	304,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	305,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	306,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	307,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	308,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	309,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	310,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	311,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	312,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	313,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	314,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	315,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	316,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	317,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	318,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	319,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	320,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	321,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	322,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	323,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	324,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	325,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	326,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	327,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	328,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	329,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	330,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	331,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	332,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	333,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	334,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	335,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	336,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	337,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	338,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	339,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	340,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	341,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	342,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	343,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	344,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	345,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	346,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	347,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	348,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	349,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	350,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	351,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	352,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	353,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	354,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	355,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	356,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	357,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	358,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	359,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	360,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	361,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	362,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	363,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	364,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	365,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	366,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	367,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	368,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	369,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	370,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	371,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	372,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	373,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	374,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	375,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	376,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	377,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	378,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	379,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	380,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	381,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	382,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	383,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	384,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	385,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	386,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	387,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	388,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	389,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	390,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	391,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	392,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	393,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	394,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	395,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	396,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	397,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	398,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	399,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	400,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	401,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	402,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	403,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	404,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	405,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	406,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	407,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	408,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	409,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	410,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	411,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	412,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	413,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	414,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	415,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	416,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	417,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	418,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	419,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	420,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	421,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	422,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	423,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	424,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	425,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	426,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	427,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	428,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	429,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	430,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	431,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	432,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	433,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	434,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	435,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	436,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	437,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	438,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	439,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	440,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	441,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	442,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	443,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	444,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	445,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	446,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	447,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	448,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	449,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	450,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	451,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	452,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	453,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	454,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	455,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	456,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	457,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	458,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	459,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	460,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	461,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	462,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	463,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	464,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	465,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	466,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	467,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	468,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	469,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	470,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	471,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	472,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	473,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	474,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	475,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	476,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	477,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	478,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	479,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	480,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	481,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	482,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	483,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	484,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	485,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	486,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	487,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	488,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	489,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	490,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	491,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	492,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	493,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	494,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	495,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	496,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	497,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	498,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	499,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	500,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	501,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	502,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	503,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	504,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	505,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	506,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	507,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	508,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	509,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	510,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	511,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	512,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	513,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	514,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	515,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	516,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	517,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	518,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	519,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	520,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	521,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	522,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	523,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	524,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	525,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	526,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	527,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	528,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	529,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	530,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	531,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	532,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	533,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	534,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	535,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	536,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	537,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	538,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	539,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	540,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	541,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	542,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	543,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	544,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	545,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	546,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	547,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	548,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	549,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	550,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	551,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	552,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	553,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	554,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	555,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	556,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	557,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	558,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	559,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	560,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	561,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	562,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	563,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	564,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	565,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	566,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	567,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	568,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	569,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	570,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	571,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	572,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	573,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	574,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	575,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	576,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	577,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	578,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	579,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	580,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	581,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	582,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	583,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	584,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	585,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	586,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	587,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	588,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	589,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	590,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	591,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	592,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	593,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	594,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	595,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	596,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	597,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	598,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	599,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	600,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	601,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	602,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	603,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	604,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	605,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	606,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	607,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	608,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	609,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	610,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	611,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	612,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	613,
									"scores":	[-8.3751940550932744, -10.432457679993274, -9.3513139892932742, -9.5973529030932738, -9.5973529030932738, -9.3884143892932741, -9.5973529030932738, -9.5973529030932738, -9.5993035062932748, -9.0964179030932737, -9.5973529030932738, -9.0983685062932729, -9.5993035062932748, -9.6344533030932737, -9.6344533030932737, -9.3513139892932742, -9.5973529030932738]
								}]
						}, {
							"switch":	25,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	358,
							"begin_column":	2,
							"end_line":	358,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L358\", 17, &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(zretval), sizeof (zretval), &(zmode), sizeof (zmode), &(mode), sizeof (mode), &(zfilename), sizeof (zfilename), &(stream), sizeof (stream), &(filename), sizeof (filename), &(opened_path), sizeof (opened_path), &(context), sizeof (context), &(wrapper), sizeof (wrapper), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap)))\n    args[3] = &zopened;\n", "{\n}\n", "args[3] = &(&args)", "args[3] = &(&call_result)", "args[3] = &(&context)", "args[3] = &(&filename)", "args[3] = &(&mode)", "args[3] = &(&old_in_user_include)", "args[3] = &(&opened_path)", "args[3] = &(&options)", "args[3] = &(&stream)", "args[3] = &(&us)", "args[3] = &(&uwrap)", "args[3] = &(&wrapper)", "args[3] = &(&zfilename)", "args[3] = &(&zfuncname)", "args[3] = &(&zmode)", "args[3] = &(&zopened)", "args[3] = &(&zoptions)", "args[3] = &(&zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6899562297932746, -8.4998472421932743, -7.4713014632932744, -8.229189563293275, -8.229189563293275, -7.7656522632932745, -8.229189563293275, -8.229189563293275, -8.2349122632932747, -7.9071785332932745, -8.229189563293275, -7.9129012332932742, -8.2349122632932747, -8.5235403632932734, -8.5235403632932734, -7.4713014632932744, -8.229189563293275]
								}, {
									"case":	2,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	3,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	4,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	5,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	6,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	7,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	8,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	9,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	10,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	11,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	12,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	13,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	14,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	15,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	16,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	17,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	18,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	19,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	20,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	21,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	22,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	23,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	24,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	25,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	26,
									"scores":	[-6.6393884932932741]
								}]
						}]
				}, {
					"line":	359,
					"switches":	[{
							"switch":	26,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	360,
							"begin_column":	0,
							"end_line":	360,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset((zfuncname), 0, sizeof (*((zfuncname))))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L360\", 20, &(zfuncname), sizeof (zfuncname), &((zfuncname)->refcount__gc), sizeof ((zfuncname)->refcount__gc), &((zfuncname)->is_ref__gc), sizeof ((zfuncname)->is_ref__gc), &(zopened), sizeof (zopened), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zretval), sizeof (zretval), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(mode), sizeof (mode), &(zmode), sizeof (zmode), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(wrapper), sizeof (wrapper), &(context), sizeof (context), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &((zfuncname)->type), sizeof ((zfuncname)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	2,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	3,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	4,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	5,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	6,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	7,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	8,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	9,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	10,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	11,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	12,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	13,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	14,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	15,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	16,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	17,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	18,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	19,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	20,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	21,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	22,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	23,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	24,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	25,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	26,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	27,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	28,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	29,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	30,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	31,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	32,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	33,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	34,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	35,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	36,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	37,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	38,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	39,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	40,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	41,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	42,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	43,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	44,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	45,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	46,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	47,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	48,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	49,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	50,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	51,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	52,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	53,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	54,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	55,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	56,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	57,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	58,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	59,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	60,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	61,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	62,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	63,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	64,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	65,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	66,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	67,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	68,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	69,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	70,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	71,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	72,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	73,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	74,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	75,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	76,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	77,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	78,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	79,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	80,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	81,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	82,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	83,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	84,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	85,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	86,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	87,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	88,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	89,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	90,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	91,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	92,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	93,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	94,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	95,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	96,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	97,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	98,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	99,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	100,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	101,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	102,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	103,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	104,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	105,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	106,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	107,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	108,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	109,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	110,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	111,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	112,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	113,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	114,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	115,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	116,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	117,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	118,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	119,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	120,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	121,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	122,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	123,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	124,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	125,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	126,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	127,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	128,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	129,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	130,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	131,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	132,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	133,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	134,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	135,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	136,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	137,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	138,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	139,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	140,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	141,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	142,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	143,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	144,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	145,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	146,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	147,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	148,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	149,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	150,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	151,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	152,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	153,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	154,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	155,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	156,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	157,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	158,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	159,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	160,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	161,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	162,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	163,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	164,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	165,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	166,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	167,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	168,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	169,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	170,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	171,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	172,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	173,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	174,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	175,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	176,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	177,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	178,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	179,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	180,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	181,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	182,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	183,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	184,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	185,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	186,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	187,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	188,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	189,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	190,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	191,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	192,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	193,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	194,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	195,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	196,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	197,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	198,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	199,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	200,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	201,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	202,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	203,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	204,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	205,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	206,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	207,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	208,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	209,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	210,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	211,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	212,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	213,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	214,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	215,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	216,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	217,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	218,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	219,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	220,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	221,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	222,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	223,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	224,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	225,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	226,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	227,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	228,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	229,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	230,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	231,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	232,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	233,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	234,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	235,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	236,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	237,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	238,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	239,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	240,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	241,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	242,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	243,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	244,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	245,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	246,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	247,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	248,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	249,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	250,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	251,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	252,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	253,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	254,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	255,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	256,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	257,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	258,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	259,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	260,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	261,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	262,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	263,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	264,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	265,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	266,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	267,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	268,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	269,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	270,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	271,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	272,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	273,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	274,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	275,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	276,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	277,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	278,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	279,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	280,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	281,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	282,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	283,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	284,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	285,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	286,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	287,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	288,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	289,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	290,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	291,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	292,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	293,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	294,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	295,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	296,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	297,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	298,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	299,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	300,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	301,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	302,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	303,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	304,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	305,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	306,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	307,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	308,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	309,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	310,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	311,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	312,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	313,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	314,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	315,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	316,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	317,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	318,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	319,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	320,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	321,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	322,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	323,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	324,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	325,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	326,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	327,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	328,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	329,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	330,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	331,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	332,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	333,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	334,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	335,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	336,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	337,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	338,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	339,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	340,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	341,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	342,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	343,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	344,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	345,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	346,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	347,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	348,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	349,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	350,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	351,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	352,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	353,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	354,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	355,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	356,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	357,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	358,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	359,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	360,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	361,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	362,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	363,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	364,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	365,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	366,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	367,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	368,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	369,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	370,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	371,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	372,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	373,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	374,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	375,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	376,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	377,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	378,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	379,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	380,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	381,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	382,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	383,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	384,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	385,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	386,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	387,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	388,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	389,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	390,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	391,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	392,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	393,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	394,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	395,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	396,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	397,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	398,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	399,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	400,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	401,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	402,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	403,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	404,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	405,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	406,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	407,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	408,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	409,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	410,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	411,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	412,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	413,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	414,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	415,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	416,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	417,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	418,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	419,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	420,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	421,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	422,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	423,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	424,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	425,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	426,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	427,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	428,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	429,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	430,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	431,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	432,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	433,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	434,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	435,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	436,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	437,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	438,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	439,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	440,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	441,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	442,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	443,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	444,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	445,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	446,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	447,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	448,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	449,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	450,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	451,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	452,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	453,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	454,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	455,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	456,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	457,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	458,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	459,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	460,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	461,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	462,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	463,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	464,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	465,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	466,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	467,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	468,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	469,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	470,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	471,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	472,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	473,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	474,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	475,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	476,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	477,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	478,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	479,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	480,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	481,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	482,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	483,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	484,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	485,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	486,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	487,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	488,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	489,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	490,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	491,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	492,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	493,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	494,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	495,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	496,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	497,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	498,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	499,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	500,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	501,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	502,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	503,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	504,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	505,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	506,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	507,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	508,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	509,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	510,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	511,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	512,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	513,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	514,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	515,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	516,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	517,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	518,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	519,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	520,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	521,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	522,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	523,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	524,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	525,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	526,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	527,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	528,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	529,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	530,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	531,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	532,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	533,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	534,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	535,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	536,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	537,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	538,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	539,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	540,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	541,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	542,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	543,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	544,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	545,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	546,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	547,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	548,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	549,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	550,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	551,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	552,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	553,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	554,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	555,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	556,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	557,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	558,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	559,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	560,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	561,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	562,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	563,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	564,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	565,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	566,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	567,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	568,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	569,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	570,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	571,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	572,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	573,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	574,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	575,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	576,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	577,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	578,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	579,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	580,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	581,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	582,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	583,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	584,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	585,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	586,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	587,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	588,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	589,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	590,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	591,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	592,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	593,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	594,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	595,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	596,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	597,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	598,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	599,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	600,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	601,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	602,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	603,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	604,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	605,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	606,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	607,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	608,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	609,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	610,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	611,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	612,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	613,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	614,
									"scores":	[-9.3374008717231956, -10.027011627023196, -10.029610134023196, -9.0985518938231955, -9.1148854600231957, -9.3609243738231953, -9.3609243738231953, -9.3609243738231953, -9.1519858600231956, -9.3628749770231963, -9.3609243738231953, -9.3609243738231953, -9.3628749770231963, -8.8599893738231952, -8.8619399770231944, -9.3980247738231952, -9.3980247738231952, -9.1148854600231957, -9.3609243738231953, -9.9290316340231968]
								}]
						}, {
							"switch":	27,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	360,
							"begin_column":	2,
							"end_line":	360,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L360\", 20, &(zfuncname), sizeof (zfuncname), &((zfuncname)->refcount__gc), sizeof ((zfuncname)->refcount__gc), &((zfuncname)->is_ref__gc), sizeof ((zfuncname)->is_ref__gc), &(zopened), sizeof (zopened), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zretval), sizeof (zretval), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(mode), sizeof (mode), &(zmode), sizeof (zmode), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(wrapper), sizeof (wrapper), &(context), sizeof (context), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &((zfuncname)->type), sizeof ((zfuncname)->type)))\n    do {\n        (zfuncname) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(zfuncname))->u.buffered = ((void *)0);\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.3609178429231967, -8.508766009023196, -7.7351714080231959, -7.3942561685231958, -7.2106739340231965, -7.9685620340231962, -7.9685620340231962, -7.9685620340231962, -7.5050247340231957, -7.9742847340231959, -7.9685620340231962, -7.9685620340231962, -7.9742847340231959, -7.6465510040231965, -7.6522737040231963, -8.2629128340231972, -8.2629128340231972, -7.2106739340231965, -7.9685620340231962, -7.7355187440231958]
								}]
						}]
				}, {
					"line":	360,
					"switches":	[{
							"switch":	28,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	361,
							"begin_column":	0,
							"end_line":	361,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset((zfuncname), 0, sizeof (*((zfuncname))))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L361\", 20, &(zfuncname), sizeof (zfuncname), &((zfuncname)->refcount__gc), sizeof ((zfuncname)->refcount__gc), &((zfuncname)->is_ref__gc), sizeof ((zfuncname)->is_ref__gc), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zopened), sizeof (zopened), &(zretval), sizeof (zretval), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(mode), sizeof (mode), &(stream), sizeof (stream), &(zmode), sizeof (zmode), &(opened_path), sizeof (opened_path), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(wrapper), sizeof (wrapper), &(context), sizeof (context), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &((zfuncname)->type), sizeof ((zfuncname)->type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	2,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	3,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	4,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	5,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	6,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	7,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	8,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	9,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	10,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	11,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	12,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	13,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	14,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	15,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	16,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	17,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	18,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	19,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	20,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	21,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	22,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	23,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	24,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	25,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	26,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	27,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	28,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	29,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	30,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	31,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	32,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	33,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	34,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	35,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	36,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	37,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	38,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	39,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	40,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	41,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	42,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	43,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	44,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	45,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	46,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	47,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	48,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	49,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	50,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	51,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	52,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	53,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	54,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	55,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	56,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	57,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	58,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	59,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	60,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	61,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	62,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	63,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	64,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	65,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	66,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	67,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	68,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	69,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	70,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	71,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	72,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	73,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	74,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	75,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	76,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	77,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	78,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	79,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	80,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	81,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	82,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	83,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	84,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	85,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	86,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	87,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	88,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	89,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	90,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	91,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	92,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	93,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	94,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	95,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	96,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	97,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	98,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	99,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	100,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	101,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	102,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	103,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	104,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	105,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	106,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	107,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	108,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	109,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	110,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	111,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	112,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	113,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	114,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	115,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	116,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	117,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	118,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	119,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	120,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	121,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	122,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	123,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	124,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	125,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	126,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	127,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	128,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	129,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	130,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	131,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	132,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	133,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	134,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	135,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	136,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	137,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	138,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	139,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	140,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	141,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	142,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	143,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	144,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	145,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	146,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	147,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	148,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	149,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	150,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	151,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	152,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	153,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	154,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	155,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	156,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	157,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	158,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	159,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	160,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	161,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	162,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	163,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	164,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	165,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	166,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	167,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	168,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	169,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	170,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	171,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	172,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	173,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	174,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	175,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	176,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	177,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	178,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	179,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	180,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	181,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	182,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	183,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	184,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	185,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	186,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	187,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	188,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	189,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	190,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	191,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	192,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	193,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	194,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	195,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	196,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	197,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	198,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	199,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	200,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	201,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	202,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	203,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	204,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	205,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	206,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	207,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	208,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	209,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	210,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	211,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	212,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	213,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	214,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	215,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	216,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	217,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	218,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	219,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	220,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	221,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	222,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	223,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	224,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	225,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	226,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	227,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	228,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	229,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	230,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	231,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	232,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	233,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	234,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	235,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	236,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	237,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	238,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	239,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	240,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	241,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	242,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	243,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	244,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	245,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	246,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	247,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	248,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	249,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	250,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	251,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	252,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	253,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	254,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	255,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	256,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	257,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	258,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	259,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	260,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	261,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	262,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	263,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	264,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	265,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	266,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	267,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	268,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	269,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	270,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	271,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	272,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	273,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	274,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	275,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	276,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	277,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	278,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	279,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	280,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	281,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	282,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	283,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	284,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	285,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	286,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	287,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	288,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	289,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	290,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	291,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	292,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	293,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	294,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	295,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	296,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	297,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	298,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	299,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	300,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	301,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	302,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	303,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	304,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	305,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	306,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	307,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	308,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	309,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	310,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	311,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	312,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	313,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	314,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	315,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	316,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	317,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	318,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	319,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	320,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	321,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	322,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	323,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	324,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	325,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	326,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	327,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	328,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	329,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	330,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	331,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	332,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	333,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	334,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	335,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	336,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	337,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	338,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	339,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	340,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	341,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	342,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	343,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	344,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	345,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	346,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	347,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	348,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	349,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	350,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	351,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	352,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	353,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	354,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	355,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	356,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	357,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	358,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	359,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	360,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	361,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	362,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	363,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	364,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	365,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	366,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	367,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	368,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	369,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	370,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	371,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	372,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	373,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	374,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	375,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	376,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	377,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	378,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	379,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	380,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	381,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	382,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	383,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	384,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	385,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	386,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	387,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	388,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	389,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	390,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	391,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	392,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	393,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	394,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	395,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	396,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	397,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	398,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	399,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	400,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	401,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	402,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	403,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	404,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	405,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	406,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	407,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	408,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	409,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	410,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	411,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	412,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	413,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	414,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	415,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	416,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	417,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	418,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	419,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	420,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	421,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	422,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	423,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	424,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	425,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	426,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	427,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	428,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	429,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	430,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	431,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	432,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	433,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	434,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	435,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	436,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	437,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	438,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	439,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	440,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	441,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	442,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	443,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	444,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	445,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	446,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	447,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	448,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	449,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	450,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	451,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	452,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	453,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	454,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	455,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	456,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	457,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	458,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	459,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	460,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	461,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	462,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	463,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	464,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	465,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	466,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	467,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	468,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	469,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	470,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	471,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	472,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	473,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	474,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	475,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	476,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	477,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	478,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	479,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	480,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	481,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	482,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	483,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	484,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	485,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	486,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	487,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	488,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	489,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	490,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	491,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	492,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	493,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	494,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	495,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	496,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	497,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	498,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	499,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	500,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	501,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	502,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	503,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	504,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	505,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	506,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	507,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	508,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	509,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	510,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	511,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	512,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	513,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	514,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	515,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	516,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	517,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	518,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	519,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	520,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	521,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	522,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	523,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	524,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	525,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	526,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	527,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	528,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	529,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	530,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	531,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	532,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	533,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	534,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	535,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	536,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	537,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	538,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	539,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	540,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	541,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	542,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	543,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	544,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	545,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	546,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	547,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	548,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	549,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	550,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	551,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	552,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	553,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	554,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	555,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	556,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	557,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	558,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	559,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	560,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	561,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	562,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	563,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	564,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	565,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	566,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	567,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	568,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	569,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	570,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	571,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	572,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	573,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	574,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	575,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	576,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	577,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	578,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	579,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	580,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	581,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	582,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	583,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	584,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	585,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	586,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	587,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	588,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	589,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	590,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	591,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	592,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	593,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	594,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	595,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	596,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	597,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	598,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	599,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	600,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	601,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	602,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	603,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	604,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	605,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	606,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	607,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	608,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	609,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	610,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	611,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	612,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	613,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	614,
									"scores":	[-10.233957617553116, -10.878230804753118, -9.74201865975312, -10.916824150753119, -10.779272454453118, -10.910924544553119, -11.038979207553119, -10.310123544553118, -10.246867683753116, -9.914719800753117, -12.30709832145312, -10.310123544553118, -10.635143147753118, -9.8091885445531162, -9.8111391477531171, -10.492906597553118, -10.347223944553118, -10.064084630753117, -10.310123544553118, -10.878230804753118]
								}]
						}, {
							"switch":	29,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	361,
							"begin_column":	2,
							"end_line":	361,
							"end_column":	43,
							"patch_codes":	["if (!__is_neg(\"\", \"L361\", 20, &(zfuncname), sizeof (zfuncname), &((zfuncname)->refcount__gc), sizeof ((zfuncname)->refcount__gc), &((zfuncname)->is_ref__gc), sizeof ((zfuncname)->is_ref__gc), &(call_result), sizeof (call_result), &(us), sizeof (us), &(zopened), sizeof (zopened), &(zretval), sizeof (zretval), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(mode), sizeof (mode), &(stream), sizeof (stream), &(zmode), sizeof (zmode), &(opened_path), sizeof (opened_path), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(wrapper), sizeof (wrapper), &(context), sizeof (context), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap), &((zfuncname)->type), sizeof ((zfuncname)->type)))\n    do {\n        const char *__s = (\"stream_open\");\n        zval *__z = (zfuncname);\n        (*__z).value.str.len = strlen(__s);\n        (*__z).value.str.val = (1 ? _estrndup((__s), ((*__z).value.str.len)) : (char *)__s);\n        (*__z).type = 6;\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4712258542531185, -7.6609013047531178, -7.9265714447531179, -7.8361054357531179, -7.3415214016531181, -8.62506025475312, -8.13840986375312, -7.8939445947531182, -7.463582803753118, -7.8140683537531181, -9.42860006265312, -7.8939445947531182, -8.46605564475312, -7.5719335647531185, -7.5776562647531183, -8.22147090375312, -8.18829539475312, -7.1360564947531184, -7.8939445947531182, -7.6609013047531178]
								}]
						}]
				}, {
					"line":	362,
					"switches":	[{
							"switch":	30,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	363,
							"begin_column":	0,
							"end_line":	363,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us, 0, sizeof (*(us)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L363\", 19, &(call_result), sizeof (call_result), &(us), sizeof (us), &(us->object), sizeof (us->object), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(zopened), sizeof (zopened), &(mode), sizeof (mode), &(stream), sizeof (stream), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(wrapper), sizeof (wrapper), &(filename), sizeof (filename), &(us->wrapper), sizeof (us->wrapper), &(context), sizeof (context), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.356550590848]
								}, {
									"case":	2,
									"scores":	[-6.356550590848]
								}, {
									"case":	3,
									"scores":	[-6.356550590848]
								}, {
									"case":	4,
									"scores":	[-6.356550590848]
								}, {
									"case":	5,
									"scores":	[-6.356550590848]
								}, {
									"case":	6,
									"scores":	[-6.356550590848]
								}, {
									"case":	7,
									"scores":	[-6.356550590848]
								}, {
									"case":	8,
									"scores":	[-6.356550590848]
								}, {
									"case":	9,
									"scores":	[-6.356550590848]
								}, {
									"case":	10,
									"scores":	[-6.356550590848]
								}, {
									"case":	11,
									"scores":	[-6.356550590848]
								}, {
									"case":	12,
									"scores":	[-6.356550590848]
								}, {
									"case":	13,
									"scores":	[-6.356550590848]
								}, {
									"case":	14,
									"scores":	[-6.356550590848]
								}, {
									"case":	15,
									"scores":	[-6.356550590848]
								}, {
									"case":	16,
									"scores":	[-6.356550590848]
								}, {
									"case":	17,
									"scores":	[-6.356550590848]
								}, {
									"case":	18,
									"scores":	[-6.356550590848]
								}, {
									"case":	19,
									"scores":	[-6.356550590848]
								}, {
									"case":	20,
									"scores":	[-6.356550590848]
								}, {
									"case":	21,
									"scores":	[-6.356550590848]
								}, {
									"case":	22,
									"scores":	[-6.356550590848]
								}, {
									"case":	23,
									"scores":	[-6.356550590848]
								}, {
									"case":	24,
									"scores":	[-6.356550590848]
								}, {
									"case":	25,
									"scores":	[-6.356550590848]
								}, {
									"case":	26,
									"scores":	[-6.356550590848]
								}, {
									"case":	27,
									"scores":	[-6.356550590848]
								}, {
									"case":	28,
									"scores":	[-6.356550590848]
								}, {
									"case":	29,
									"scores":	[-6.356550590848]
								}, {
									"case":	30,
									"scores":	[-6.356550590848]
								}, {
									"case":	31,
									"scores":	[-6.356550590848]
								}, {
									"case":	32,
									"scores":	[-6.356550590848]
								}, {
									"case":	33,
									"scores":	[-6.356550590848]
								}, {
									"case":	34,
									"scores":	[-6.356550590848]
								}, {
									"case":	35,
									"scores":	[-6.356550590848]
								}, {
									"case":	36,
									"scores":	[-6.356550590848]
								}, {
									"case":	37,
									"scores":	[-6.356550590848]
								}, {
									"case":	38,
									"scores":	[-6.356550590848]
								}, {
									"case":	39,
									"scores":	[-6.356550590848]
								}, {
									"case":	40,
									"scores":	[-6.356550590848]
								}, {
									"case":	41,
									"scores":	[-6.356550590848]
								}, {
									"case":	42,
									"scores":	[-6.356550590848]
								}, {
									"case":	43,
									"scores":	[-6.356550590848]
								}, {
									"case":	44,
									"scores":	[-6.356550590848]
								}, {
									"case":	45,
									"scores":	[-6.356550590848]
								}, {
									"case":	46,
									"scores":	[-6.356550590848]
								}, {
									"case":	47,
									"scores":	[-6.356550590848]
								}, {
									"case":	48,
									"scores":	[-6.356550590848]
								}, {
									"case":	49,
									"scores":	[-6.356550590848]
								}, {
									"case":	50,
									"scores":	[-6.356550590848]
								}, {
									"case":	51,
									"scores":	[-6.356550590848]
								}, {
									"case":	52,
									"scores":	[-6.356550590848]
								}, {
									"case":	53,
									"scores":	[-6.356550590848]
								}, {
									"case":	54,
									"scores":	[-6.356550590848]
								}, {
									"case":	55,
									"scores":	[-6.356550590848]
								}, {
									"case":	56,
									"scores":	[-6.356550590848]
								}, {
									"case":	57,
									"scores":	[-6.356550590848]
								}, {
									"case":	58,
									"scores":	[-6.356550590848]
								}, {
									"case":	59,
									"scores":	[-6.356550590848]
								}, {
									"case":	60,
									"scores":	[-6.356550590848]
								}, {
									"case":	61,
									"scores":	[-6.356550590848]
								}, {
									"case":	62,
									"scores":	[-6.356550590848]
								}, {
									"case":	63,
									"scores":	[-6.356550590848]
								}, {
									"case":	64,
									"scores":	[-6.356550590848]
								}, {
									"case":	65,
									"scores":	[-6.356550590848]
								}, {
									"case":	66,
									"scores":	[-6.356550590848]
								}, {
									"case":	67,
									"scores":	[-6.356550590848]
								}, {
									"case":	68,
									"scores":	[-6.356550590848]
								}, {
									"case":	69,
									"scores":	[-6.356550590848]
								}, {
									"case":	70,
									"scores":	[-6.356550590848]
								}, {
									"case":	71,
									"scores":	[-6.356550590848]
								}, {
									"case":	72,
									"scores":	[-6.356550590848]
								}, {
									"case":	73,
									"scores":	[-6.356550590848]
								}, {
									"case":	74,
									"scores":	[-6.356550590848]
								}, {
									"case":	75,
									"scores":	[-6.356550590848]
								}, {
									"case":	76,
									"scores":	[-6.356550590848]
								}, {
									"case":	77,
									"scores":	[-6.356550590848]
								}, {
									"case":	78,
									"scores":	[-6.356550590848]
								}, {
									"case":	79,
									"scores":	[-6.356550590848]
								}, {
									"case":	80,
									"scores":	[-6.356550590848]
								}, {
									"case":	81,
									"scores":	[-6.356550590848]
								}, {
									"case":	82,
									"scores":	[-6.356550590848]
								}, {
									"case":	83,
									"scores":	[-6.356550590848]
								}, {
									"case":	84,
									"scores":	[-6.356550590848]
								}, {
									"case":	85,
									"scores":	[-6.356550590848]
								}, {
									"case":	86,
									"scores":	[-6.356550590848]
								}, {
									"case":	87,
									"scores":	[-6.356550590848]
								}, {
									"case":	88,
									"scores":	[-6.356550590848]
								}, {
									"case":	89,
									"scores":	[-6.356550590848]
								}, {
									"case":	90,
									"scores":	[-6.356550590848]
								}, {
									"case":	91,
									"scores":	[-6.356550590848]
								}, {
									"case":	92,
									"scores":	[-6.356550590848]
								}, {
									"case":	93,
									"scores":	[-6.356550590848]
								}, {
									"case":	94,
									"scores":	[-6.356550590848]
								}, {
									"case":	95,
									"scores":	[-6.356550590848]
								}, {
									"case":	96,
									"scores":	[-6.356550590848]
								}, {
									"case":	97,
									"scores":	[-6.356550590848]
								}, {
									"case":	98,
									"scores":	[-6.356550590848]
								}, {
									"case":	99,
									"scores":	[-6.356550590848]
								}, {
									"case":	100,
									"scores":	[-6.356550590848]
								}, {
									"case":	101,
									"scores":	[-6.356550590848]
								}, {
									"case":	102,
									"scores":	[-6.356550590848]
								}, {
									"case":	103,
									"scores":	[-6.356550590848]
								}, {
									"case":	104,
									"scores":	[-6.356550590848]
								}, {
									"case":	105,
									"scores":	[-6.356550590848]
								}, {
									"case":	106,
									"scores":	[-6.356550590848]
								}, {
									"case":	107,
									"scores":	[-6.356550590848]
								}, {
									"case":	108,
									"scores":	[-6.356550590848]
								}, {
									"case":	109,
									"scores":	[-6.356550590848]
								}, {
									"case":	110,
									"scores":	[-6.356550590848]
								}, {
									"case":	111,
									"scores":	[-6.356550590848]
								}, {
									"case":	112,
									"scores":	[-6.356550590848]
								}, {
									"case":	113,
									"scores":	[-6.356550590848]
								}, {
									"case":	114,
									"scores":	[-6.356550590848]
								}, {
									"case":	115,
									"scores":	[-6.356550590848]
								}, {
									"case":	116,
									"scores":	[-6.356550590848]
								}, {
									"case":	117,
									"scores":	[-6.356550590848]
								}, {
									"case":	118,
									"scores":	[-6.356550590848]
								}, {
									"case":	119,
									"scores":	[-6.356550590848]
								}, {
									"case":	120,
									"scores":	[-6.356550590848]
								}, {
									"case":	121,
									"scores":	[-6.356550590848]
								}, {
									"case":	122,
									"scores":	[-6.356550590848]
								}, {
									"case":	123,
									"scores":	[-6.356550590848]
								}, {
									"case":	124,
									"scores":	[-6.356550590848]
								}, {
									"case":	125,
									"scores":	[-6.356550590848]
								}, {
									"case":	126,
									"scores":	[-6.356550590848]
								}, {
									"case":	127,
									"scores":	[-6.356550590848]
								}, {
									"case":	128,
									"scores":	[-6.356550590848]
								}, {
									"case":	129,
									"scores":	[-6.356550590848]
								}, {
									"case":	130,
									"scores":	[-6.356550590848]
								}, {
									"case":	131,
									"scores":	[-6.356550590848]
								}, {
									"case":	132,
									"scores":	[-6.356550590848]
								}, {
									"case":	133,
									"scores":	[-6.356550590848]
								}, {
									"case":	134,
									"scores":	[-6.356550590848]
								}, {
									"case":	135,
									"scores":	[-6.356550590848]
								}, {
									"case":	136,
									"scores":	[-6.356550590848]
								}, {
									"case":	137,
									"scores":	[-6.356550590848]
								}, {
									"case":	138,
									"scores":	[-6.356550590848]
								}, {
									"case":	139,
									"scores":	[-6.356550590848]
								}, {
									"case":	140,
									"scores":	[-6.356550590848]
								}, {
									"case":	141,
									"scores":	[-6.356550590848]
								}, {
									"case":	142,
									"scores":	[-6.356550590848]
								}, {
									"case":	143,
									"scores":	[-6.356550590848]
								}, {
									"case":	144,
									"scores":	[-6.356550590848]
								}, {
									"case":	145,
									"scores":	[-6.356550590848]
								}, {
									"case":	146,
									"scores":	[-6.356550590848]
								}, {
									"case":	147,
									"scores":	[-6.356550590848]
								}, {
									"case":	148,
									"scores":	[-6.356550590848]
								}, {
									"case":	149,
									"scores":	[-6.356550590848]
								}, {
									"case":	150,
									"scores":	[-6.356550590848]
								}, {
									"case":	151,
									"scores":	[-6.356550590848]
								}, {
									"case":	152,
									"scores":	[-6.356550590848]
								}, {
									"case":	153,
									"scores":	[-6.356550590848]
								}, {
									"case":	154,
									"scores":	[-6.356550590848]
								}, {
									"case":	155,
									"scores":	[-6.356550590848]
								}, {
									"case":	156,
									"scores":	[-6.356550590848]
								}, {
									"case":	157,
									"scores":	[-6.356550590848]
								}, {
									"case":	158,
									"scores":	[-6.356550590848]
								}, {
									"case":	159,
									"scores":	[-6.356550590848]
								}, {
									"case":	160,
									"scores":	[-6.356550590848]
								}, {
									"case":	161,
									"scores":	[-6.356550590848]
								}, {
									"case":	162,
									"scores":	[-6.356550590848]
								}, {
									"case":	163,
									"scores":	[-6.356550590848]
								}, {
									"case":	164,
									"scores":	[-6.356550590848]
								}, {
									"case":	165,
									"scores":	[-6.356550590848]
								}, {
									"case":	166,
									"scores":	[-6.356550590848]
								}, {
									"case":	167,
									"scores":	[-6.356550590848]
								}, {
									"case":	168,
									"scores":	[-6.356550590848]
								}, {
									"case":	169,
									"scores":	[-6.356550590848]
								}, {
									"case":	170,
									"scores":	[-6.356550590848]
								}, {
									"case":	171,
									"scores":	[-6.356550590848]
								}, {
									"case":	172,
									"scores":	[-6.356550590848]
								}, {
									"case":	173,
									"scores":	[-6.356550590848]
								}, {
									"case":	174,
									"scores":	[-6.356550590848]
								}, {
									"case":	175,
									"scores":	[-6.356550590848]
								}, {
									"case":	176,
									"scores":	[-6.356550590848]
								}, {
									"case":	177,
									"scores":	[-6.356550590848]
								}, {
									"case":	178,
									"scores":	[-6.356550590848]
								}, {
									"case":	179,
									"scores":	[-6.356550590848]
								}, {
									"case":	180,
									"scores":	[-6.356550590848]
								}, {
									"case":	181,
									"scores":	[-6.356550590848]
								}, {
									"case":	182,
									"scores":	[-6.356550590848]
								}, {
									"case":	183,
									"scores":	[-6.356550590848]
								}, {
									"case":	184,
									"scores":	[-6.356550590848]
								}, {
									"case":	185,
									"scores":	[-6.356550590848]
								}, {
									"case":	186,
									"scores":	[-6.356550590848]
								}, {
									"case":	187,
									"scores":	[-6.356550590848]
								}, {
									"case":	188,
									"scores":	[-6.356550590848]
								}, {
									"case":	189,
									"scores":	[-6.356550590848]
								}, {
									"case":	190,
									"scores":	[-6.356550590848]
								}, {
									"case":	191,
									"scores":	[-6.356550590848]
								}, {
									"case":	192,
									"scores":	[-6.356550590848]
								}, {
									"case":	193,
									"scores":	[-6.356550590848]
								}, {
									"case":	194,
									"scores":	[-6.356550590848]
								}, {
									"case":	195,
									"scores":	[-6.356550590848]
								}, {
									"case":	196,
									"scores":	[-6.356550590848]
								}, {
									"case":	197,
									"scores":	[-6.356550590848]
								}, {
									"case":	198,
									"scores":	[-6.356550590848]
								}, {
									"case":	199,
									"scores":	[-6.356550590848]
								}, {
									"case":	200,
									"scores":	[-6.356550590848]
								}, {
									"case":	201,
									"scores":	[-6.356550590848]
								}, {
									"case":	202,
									"scores":	[-6.356550590848]
								}, {
									"case":	203,
									"scores":	[-6.356550590848]
								}, {
									"case":	204,
									"scores":	[-6.356550590848]
								}, {
									"case":	205,
									"scores":	[-6.356550590848]
								}, {
									"case":	206,
									"scores":	[-6.356550590848]
								}, {
									"case":	207,
									"scores":	[-6.356550590848]
								}, {
									"case":	208,
									"scores":	[-6.356550590848]
								}, {
									"case":	209,
									"scores":	[-6.356550590848]
								}, {
									"case":	210,
									"scores":	[-6.356550590848]
								}, {
									"case":	211,
									"scores":	[-6.356550590848]
								}, {
									"case":	212,
									"scores":	[-6.356550590848]
								}, {
									"case":	213,
									"scores":	[-6.356550590848]
								}, {
									"case":	214,
									"scores":	[-6.356550590848]
								}, {
									"case":	215,
									"scores":	[-6.356550590848]
								}, {
									"case":	216,
									"scores":	[-6.356550590848]
								}, {
									"case":	217,
									"scores":	[-6.356550590848]
								}, {
									"case":	218,
									"scores":	[-6.356550590848]
								}, {
									"case":	219,
									"scores":	[-6.356550590848]
								}, {
									"case":	220,
									"scores":	[-6.356550590848]
								}, {
									"case":	221,
									"scores":	[-6.356550590848]
								}, {
									"case":	222,
									"scores":	[-6.356550590848]
								}, {
									"case":	223,
									"scores":	[-6.356550590848]
								}, {
									"case":	224,
									"scores":	[-6.356550590848]
								}, {
									"case":	225,
									"scores":	[-6.356550590848]
								}, {
									"case":	226,
									"scores":	[-6.356550590848]
								}, {
									"case":	227,
									"scores":	[-6.356550590848]
								}, {
									"case":	228,
									"scores":	[-6.356550590848]
								}, {
									"case":	229,
									"scores":	[-6.356550590848]
								}, {
									"case":	230,
									"scores":	[-6.356550590848]
								}, {
									"case":	231,
									"scores":	[-6.356550590848]
								}, {
									"case":	232,
									"scores":	[-6.356550590848]
								}, {
									"case":	233,
									"scores":	[-6.356550590848]
								}, {
									"case":	234,
									"scores":	[-6.356550590848]
								}, {
									"case":	235,
									"scores":	[-6.356550590848]
								}, {
									"case":	236,
									"scores":	[-6.356550590848]
								}, {
									"case":	237,
									"scores":	[-6.356550590848]
								}, {
									"case":	238,
									"scores":	[-6.356550590848]
								}, {
									"case":	239,
									"scores":	[-6.356550590848]
								}, {
									"case":	240,
									"scores":	[-6.356550590848]
								}, {
									"case":	241,
									"scores":	[-6.356550590848]
								}, {
									"case":	242,
									"scores":	[-6.356550590848]
								}, {
									"case":	243,
									"scores":	[-6.356550590848]
								}, {
									"case":	244,
									"scores":	[-6.356550590848]
								}, {
									"case":	245,
									"scores":	[-6.356550590848]
								}, {
									"case":	246,
									"scores":	[-6.356550590848]
								}, {
									"case":	247,
									"scores":	[-6.356550590848]
								}, {
									"case":	248,
									"scores":	[-6.356550590848]
								}, {
									"case":	249,
									"scores":	[-6.356550590848]
								}, {
									"case":	250,
									"scores":	[-6.356550590848]
								}, {
									"case":	251,
									"scores":	[-6.356550590848]
								}, {
									"case":	252,
									"scores":	[-6.356550590848]
								}, {
									"case":	253,
									"scores":	[-6.356550590848]
								}, {
									"case":	254,
									"scores":	[-6.356550590848]
								}, {
									"case":	255,
									"scores":	[-6.356550590848]
								}, {
									"case":	256,
									"scores":	[-6.356550590848]
								}, {
									"case":	257,
									"scores":	[-6.356550590848]
								}, {
									"case":	258,
									"scores":	[-6.356550590848]
								}, {
									"case":	259,
									"scores":	[-6.356550590848]
								}, {
									"case":	260,
									"scores":	[-6.356550590848]
								}, {
									"case":	261,
									"scores":	[-6.356550590848]
								}, {
									"case":	262,
									"scores":	[-6.356550590848]
								}, {
									"case":	263,
									"scores":	[-6.356550590848]
								}, {
									"case":	264,
									"scores":	[-6.356550590848]
								}, {
									"case":	265,
									"scores":	[-6.356550590848]
								}, {
									"case":	266,
									"scores":	[-6.356550590848]
								}, {
									"case":	267,
									"scores":	[-6.356550590848]
								}, {
									"case":	268,
									"scores":	[-6.356550590848]
								}, {
									"case":	269,
									"scores":	[-6.356550590848]
								}, {
									"case":	270,
									"scores":	[-6.356550590848]
								}, {
									"case":	271,
									"scores":	[-6.356550590848]
								}, {
									"case":	272,
									"scores":	[-6.356550590848]
								}, {
									"case":	273,
									"scores":	[-6.356550590848]
								}, {
									"case":	274,
									"scores":	[-6.356550590848]
								}, {
									"case":	275,
									"scores":	[-6.356550590848]
								}, {
									"case":	276,
									"scores":	[-6.356550590848]
								}, {
									"case":	277,
									"scores":	[-6.356550590848]
								}, {
									"case":	278,
									"scores":	[-6.356550590848]
								}, {
									"case":	279,
									"scores":	[-6.356550590848]
								}, {
									"case":	280,
									"scores":	[-6.356550590848]
								}, {
									"case":	281,
									"scores":	[-6.356550590848]
								}, {
									"case":	282,
									"scores":	[-6.356550590848]
								}, {
									"case":	283,
									"scores":	[-6.356550590848]
								}, {
									"case":	284,
									"scores":	[-6.356550590848]
								}, {
									"case":	285,
									"scores":	[-6.356550590848]
								}, {
									"case":	286,
									"scores":	[-6.356550590848]
								}, {
									"case":	287,
									"scores":	[-6.356550590848]
								}, {
									"case":	288,
									"scores":	[-6.356550590848]
								}, {
									"case":	289,
									"scores":	[-6.356550590848]
								}, {
									"case":	290,
									"scores":	[-6.356550590848]
								}, {
									"case":	291,
									"scores":	[-6.356550590848]
								}, {
									"case":	292,
									"scores":	[-6.356550590848]
								}, {
									"case":	293,
									"scores":	[-6.356550590848]
								}, {
									"case":	294,
									"scores":	[-6.356550590848]
								}, {
									"case":	295,
									"scores":	[-6.356550590848]
								}, {
									"case":	296,
									"scores":	[-6.356550590848]
								}, {
									"case":	297,
									"scores":	[-6.356550590848]
								}, {
									"case":	298,
									"scores":	[-6.356550590848]
								}, {
									"case":	299,
									"scores":	[-6.356550590848]
								}, {
									"case":	300,
									"scores":	[-6.356550590848]
								}, {
									"case":	301,
									"scores":	[-6.356550590848]
								}, {
									"case":	302,
									"scores":	[-6.356550590848]
								}, {
									"case":	303,
									"scores":	[-6.356550590848]
								}, {
									"case":	304,
									"scores":	[-6.356550590848]
								}, {
									"case":	305,
									"scores":	[-6.356550590848]
								}, {
									"case":	306,
									"scores":	[-6.356550590848]
								}, {
									"case":	307,
									"scores":	[-6.356550590848]
								}, {
									"case":	308,
									"scores":	[-6.356550590848]
								}, {
									"case":	309,
									"scores":	[-6.356550590848]
								}, {
									"case":	310,
									"scores":	[-6.356550590848]
								}, {
									"case":	311,
									"scores":	[-6.356550590848]
								}, {
									"case":	312,
									"scores":	[-6.356550590848]
								}, {
									"case":	313,
									"scores":	[-6.356550590848]
								}, {
									"case":	314,
									"scores":	[-6.356550590848]
								}, {
									"case":	315,
									"scores":	[-6.356550590848]
								}, {
									"case":	316,
									"scores":	[-6.356550590848]
								}, {
									"case":	317,
									"scores":	[-6.356550590848]
								}, {
									"case":	318,
									"scores":	[-6.356550590848]
								}, {
									"case":	319,
									"scores":	[-6.356550590848]
								}, {
									"case":	320,
									"scores":	[-6.356550590848]
								}, {
									"case":	321,
									"scores":	[-6.356550590848]
								}, {
									"case":	322,
									"scores":	[-6.356550590848]
								}, {
									"case":	323,
									"scores":	[-6.356550590848]
								}, {
									"case":	324,
									"scores":	[-6.356550590848]
								}, {
									"case":	325,
									"scores":	[-6.356550590848]
								}, {
									"case":	326,
									"scores":	[-6.356550590848]
								}, {
									"case":	327,
									"scores":	[-6.356550590848]
								}, {
									"case":	328,
									"scores":	[-6.356550590848]
								}, {
									"case":	329,
									"scores":	[-6.356550590848]
								}, {
									"case":	330,
									"scores":	[-6.356550590848]
								}, {
									"case":	331,
									"scores":	[-6.356550590848]
								}, {
									"case":	332,
									"scores":	[-6.356550590848]
								}, {
									"case":	333,
									"scores":	[-6.356550590848]
								}, {
									"case":	334,
									"scores":	[-6.356550590848]
								}, {
									"case":	335,
									"scores":	[-6.356550590848]
								}, {
									"case":	336,
									"scores":	[-6.356550590848]
								}, {
									"case":	337,
									"scores":	[-6.356550590848]
								}, {
									"case":	338,
									"scores":	[-6.356550590848]
								}, {
									"case":	339,
									"scores":	[-6.356550590848]
								}, {
									"case":	340,
									"scores":	[-6.356550590848]
								}, {
									"case":	341,
									"scores":	[-6.356550590848]
								}, {
									"case":	342,
									"scores":	[-6.356550590848]
								}, {
									"case":	343,
									"scores":	[-6.356550590848]
								}, {
									"case":	344,
									"scores":	[-6.356550590848]
								}, {
									"case":	345,
									"scores":	[-6.356550590848]
								}, {
									"case":	346,
									"scores":	[-6.356550590848]
								}, {
									"case":	347,
									"scores":	[-6.356550590848]
								}, {
									"case":	348,
									"scores":	[-6.356550590848]
								}, {
									"case":	349,
									"scores":	[-6.356550590848]
								}, {
									"case":	350,
									"scores":	[-6.356550590848]
								}, {
									"case":	351,
									"scores":	[-6.356550590848]
								}, {
									"case":	352,
									"scores":	[-6.356550590848]
								}, {
									"case":	353,
									"scores":	[-6.356550590848]
								}, {
									"case":	354,
									"scores":	[-6.356550590848]
								}, {
									"case":	355,
									"scores":	[-6.356550590848]
								}, {
									"case":	356,
									"scores":	[-6.356550590848]
								}, {
									"case":	357,
									"scores":	[-6.356550590848]
								}, {
									"case":	358,
									"scores":	[-6.356550590848]
								}, {
									"case":	359,
									"scores":	[-6.356550590848]
								}, {
									"case":	360,
									"scores":	[-6.356550590848]
								}, {
									"case":	361,
									"scores":	[-6.356550590848]
								}, {
									"case":	362,
									"scores":	[-6.356550590848]
								}, {
									"case":	363,
									"scores":	[-6.356550590848]
								}, {
									"case":	364,
									"scores":	[-6.356550590848]
								}, {
									"case":	365,
									"scores":	[-6.356550590848]
								}, {
									"case":	366,
									"scores":	[-6.356550590848]
								}, {
									"case":	367,
									"scores":	[-6.356550590848]
								}, {
									"case":	368,
									"scores":	[-6.356550590848]
								}, {
									"case":	369,
									"scores":	[-6.356550590848]
								}, {
									"case":	370,
									"scores":	[-6.356550590848]
								}, {
									"case":	371,
									"scores":	[-6.356550590848]
								}, {
									"case":	372,
									"scores":	[-6.356550590848]
								}, {
									"case":	373,
									"scores":	[-6.356550590848]
								}, {
									"case":	374,
									"scores":	[-6.356550590848]
								}, {
									"case":	375,
									"scores":	[-6.356550590848]
								}, {
									"case":	376,
									"scores":	[-6.356550590848]
								}, {
									"case":	377,
									"scores":	[-6.356550590848]
								}, {
									"case":	378,
									"scores":	[-6.356550590848]
								}, {
									"case":	379,
									"scores":	[-6.356550590848]
								}, {
									"case":	380,
									"scores":	[-6.356550590848]
								}, {
									"case":	381,
									"scores":	[-6.356550590848]
								}, {
									"case":	382,
									"scores":	[-6.356550590848]
								}, {
									"case":	383,
									"scores":	[-6.356550590848]
								}, {
									"case":	384,
									"scores":	[-6.356550590848]
								}, {
									"case":	385,
									"scores":	[-6.356550590848]
								}, {
									"case":	386,
									"scores":	[-6.356550590848]
								}, {
									"case":	387,
									"scores":	[-6.356550590848]
								}, {
									"case":	388,
									"scores":	[-6.356550590848]
								}, {
									"case":	389,
									"scores":	[-6.356550590848]
								}, {
									"case":	390,
									"scores":	[-6.356550590848]
								}, {
									"case":	391,
									"scores":	[-6.356550590848]
								}, {
									"case":	392,
									"scores":	[-6.356550590848]
								}, {
									"case":	393,
									"scores":	[-6.356550590848]
								}, {
									"case":	394,
									"scores":	[-6.356550590848]
								}, {
									"case":	395,
									"scores":	[-6.356550590848]
								}, {
									"case":	396,
									"scores":	[-6.356550590848]
								}, {
									"case":	397,
									"scores":	[-6.356550590848]
								}, {
									"case":	398,
									"scores":	[-6.356550590848]
								}, {
									"case":	399,
									"scores":	[-6.356550590848]
								}, {
									"case":	400,
									"scores":	[-6.356550590848]
								}, {
									"case":	401,
									"scores":	[-6.356550590848]
								}, {
									"case":	402,
									"scores":	[-6.356550590848]
								}, {
									"case":	403,
									"scores":	[-6.356550590848]
								}, {
									"case":	404,
									"scores":	[-6.356550590848]
								}, {
									"case":	405,
									"scores":	[-6.356550590848]
								}, {
									"case":	406,
									"scores":	[-6.356550590848]
								}, {
									"case":	407,
									"scores":	[-6.356550590848]
								}, {
									"case":	408,
									"scores":	[-6.356550590848]
								}, {
									"case":	409,
									"scores":	[-6.356550590848]
								}, {
									"case":	410,
									"scores":	[-6.356550590848]
								}, {
									"case":	411,
									"scores":	[-6.356550590848]
								}, {
									"case":	412,
									"scores":	[-6.356550590848]
								}, {
									"case":	413,
									"scores":	[-6.356550590848]
								}, {
									"case":	414,
									"scores":	[-6.356550590848]
								}, {
									"case":	415,
									"scores":	[-6.356550590848]
								}, {
									"case":	416,
									"scores":	[-6.356550590848]
								}, {
									"case":	417,
									"scores":	[-6.356550590848]
								}, {
									"case":	418,
									"scores":	[-6.356550590848]
								}, {
									"case":	419,
									"scores":	[-6.356550590848]
								}, {
									"case":	420,
									"scores":	[-6.356550590848]
								}, {
									"case":	421,
									"scores":	[-6.356550590848]
								}, {
									"case":	422,
									"scores":	[-6.356550590848]
								}, {
									"case":	423,
									"scores":	[-6.356550590848]
								}, {
									"case":	424,
									"scores":	[-6.356550590848]
								}, {
									"case":	425,
									"scores":	[-6.356550590848]
								}, {
									"case":	426,
									"scores":	[-6.356550590848]
								}, {
									"case":	427,
									"scores":	[-6.356550590848]
								}, {
									"case":	428,
									"scores":	[-6.356550590848]
								}, {
									"case":	429,
									"scores":	[-6.356550590848]
								}, {
									"case":	430,
									"scores":	[-6.356550590848]
								}, {
									"case":	431,
									"scores":	[-6.356550590848]
								}, {
									"case":	432,
									"scores":	[-6.356550590848]
								}, {
									"case":	433,
									"scores":	[-6.356550590848]
								}, {
									"case":	434,
									"scores":	[-6.356550590848]
								}, {
									"case":	435,
									"scores":	[-6.356550590848]
								}, {
									"case":	436,
									"scores":	[-6.356550590848]
								}, {
									"case":	437,
									"scores":	[-6.356550590848]
								}, {
									"case":	438,
									"scores":	[-6.356550590848]
								}, {
									"case":	439,
									"scores":	[-6.356550590848]
								}, {
									"case":	440,
									"scores":	[-6.356550590848]
								}, {
									"case":	441,
									"scores":	[-6.356550590848]
								}, {
									"case":	442,
									"scores":	[-6.356550590848]
								}, {
									"case":	443,
									"scores":	[-6.356550590848]
								}, {
									"case":	444,
									"scores":	[-6.356550590848]
								}, {
									"case":	445,
									"scores":	[-6.356550590848]
								}, {
									"case":	446,
									"scores":	[-6.356550590848]
								}, {
									"case":	447,
									"scores":	[-6.356550590848]
								}, {
									"case":	448,
									"scores":	[-6.356550590848]
								}, {
									"case":	449,
									"scores":	[-6.356550590848]
								}, {
									"case":	450,
									"scores":	[-6.356550590848]
								}, {
									"case":	451,
									"scores":	[-6.356550590848]
								}, {
									"case":	452,
									"scores":	[-6.356550590848]
								}, {
									"case":	453,
									"scores":	[-6.356550590848]
								}, {
									"case":	454,
									"scores":	[-6.356550590848]
								}, {
									"case":	455,
									"scores":	[-6.356550590848]
								}, {
									"case":	456,
									"scores":	[-6.356550590848]
								}, {
									"case":	457,
									"scores":	[-6.356550590848]
								}, {
									"case":	458,
									"scores":	[-6.356550590848]
								}, {
									"case":	459,
									"scores":	[-6.356550590848]
								}, {
									"case":	460,
									"scores":	[-6.356550590848]
								}, {
									"case":	461,
									"scores":	[-6.356550590848]
								}, {
									"case":	462,
									"scores":	[-6.356550590848]
								}, {
									"case":	463,
									"scores":	[-6.356550590848]
								}, {
									"case":	464,
									"scores":	[-6.356550590848]
								}, {
									"case":	465,
									"scores":	[-6.356550590848]
								}, {
									"case":	466,
									"scores":	[-6.356550590848]
								}, {
									"case":	467,
									"scores":	[-6.356550590848]
								}, {
									"case":	468,
									"scores":	[-6.356550590848]
								}, {
									"case":	469,
									"scores":	[-6.356550590848]
								}, {
									"case":	470,
									"scores":	[-6.356550590848]
								}, {
									"case":	471,
									"scores":	[-6.356550590848]
								}, {
									"case":	472,
									"scores":	[-6.356550590848]
								}, {
									"case":	473,
									"scores":	[-6.356550590848]
								}, {
									"case":	474,
									"scores":	[-6.356550590848]
								}, {
									"case":	475,
									"scores":	[-6.356550590848]
								}, {
									"case":	476,
									"scores":	[-6.356550590848]
								}, {
									"case":	477,
									"scores":	[-6.356550590848]
								}, {
									"case":	478,
									"scores":	[-6.356550590848]
								}, {
									"case":	479,
									"scores":	[-6.356550590848]
								}, {
									"case":	480,
									"scores":	[-6.356550590848]
								}, {
									"case":	481,
									"scores":	[-6.356550590848]
								}, {
									"case":	482,
									"scores":	[-6.356550590848]
								}, {
									"case":	483,
									"scores":	[-6.356550590848]
								}, {
									"case":	484,
									"scores":	[-6.356550590848]
								}, {
									"case":	485,
									"scores":	[-6.356550590848]
								}, {
									"case":	486,
									"scores":	[-6.356550590848]
								}, {
									"case":	487,
									"scores":	[-6.356550590848]
								}, {
									"case":	488,
									"scores":	[-6.356550590848]
								}, {
									"case":	489,
									"scores":	[-6.356550590848]
								}, {
									"case":	490,
									"scores":	[-6.356550590848]
								}, {
									"case":	491,
									"scores":	[-6.356550590848]
								}, {
									"case":	492,
									"scores":	[-6.356550590848]
								}, {
									"case":	493,
									"scores":	[-6.356550590848]
								}, {
									"case":	494,
									"scores":	[-6.356550590848]
								}, {
									"case":	495,
									"scores":	[-6.356550590848]
								}, {
									"case":	496,
									"scores":	[-6.356550590848]
								}, {
									"case":	497,
									"scores":	[-6.356550590848]
								}, {
									"case":	498,
									"scores":	[-6.356550590848]
								}, {
									"case":	499,
									"scores":	[-6.356550590848]
								}, {
									"case":	500,
									"scores":	[-6.356550590848]
								}, {
									"case":	501,
									"scores":	[-6.356550590848]
								}, {
									"case":	502,
									"scores":	[-6.356550590848]
								}, {
									"case":	503,
									"scores":	[-6.356550590848]
								}, {
									"case":	504,
									"scores":	[-6.356550590848]
								}, {
									"case":	505,
									"scores":	[-6.356550590848]
								}, {
									"case":	506,
									"scores":	[-6.356550590848]
								}, {
									"case":	507,
									"scores":	[-6.356550590848]
								}, {
									"case":	508,
									"scores":	[-6.356550590848]
								}, {
									"case":	509,
									"scores":	[-6.356550590848]
								}, {
									"case":	510,
									"scores":	[-6.356550590848]
								}, {
									"case":	511,
									"scores":	[-6.356550590848]
								}, {
									"case":	512,
									"scores":	[-6.356550590848]
								}, {
									"case":	513,
									"scores":	[-6.356550590848]
								}, {
									"case":	514,
									"scores":	[-6.356550590848]
								}, {
									"case":	515,
									"scores":	[-6.356550590848]
								}, {
									"case":	516,
									"scores":	[-6.356550590848]
								}, {
									"case":	517,
									"scores":	[-6.356550590848]
								}, {
									"case":	518,
									"scores":	[-6.356550590848]
								}, {
									"case":	519,
									"scores":	[-6.356550590848]
								}, {
									"case":	520,
									"scores":	[-6.356550590848]
								}, {
									"case":	521,
									"scores":	[-6.356550590848]
								}, {
									"case":	522,
									"scores":	[-6.356550590848]
								}, {
									"case":	523,
									"scores":	[-6.356550590848]
								}, {
									"case":	524,
									"scores":	[-6.356550590848]
								}, {
									"case":	525,
									"scores":	[-6.356550590848]
								}, {
									"case":	526,
									"scores":	[-6.356550590848]
								}, {
									"case":	527,
									"scores":	[-6.356550590848]
								}, {
									"case":	528,
									"scores":	[-6.356550590848]
								}, {
									"case":	529,
									"scores":	[-6.356550590848]
								}, {
									"case":	530,
									"scores":	[-6.356550590848]
								}, {
									"case":	531,
									"scores":	[-6.356550590848]
								}, {
									"case":	532,
									"scores":	[-6.356550590848]
								}, {
									"case":	533,
									"scores":	[-6.356550590848]
								}, {
									"case":	534,
									"scores":	[-6.356550590848]
								}, {
									"case":	535,
									"scores":	[-6.356550590848]
								}, {
									"case":	536,
									"scores":	[-6.356550590848]
								}, {
									"case":	537,
									"scores":	[-6.356550590848]
								}, {
									"case":	538,
									"scores":	[-6.356550590848]
								}, {
									"case":	539,
									"scores":	[-6.356550590848]
								}, {
									"case":	540,
									"scores":	[-6.356550590848]
								}, {
									"case":	541,
									"scores":	[-6.356550590848]
								}, {
									"case":	542,
									"scores":	[-6.356550590848]
								}, {
									"case":	543,
									"scores":	[-6.356550590848]
								}, {
									"case":	544,
									"scores":	[-6.356550590848]
								}, {
									"case":	545,
									"scores":	[-6.356550590848]
								}, {
									"case":	546,
									"scores":	[-6.356550590848]
								}, {
									"case":	547,
									"scores":	[-6.356550590848]
								}, {
									"case":	548,
									"scores":	[-6.356550590848]
								}, {
									"case":	549,
									"scores":	[-6.356550590848]
								}, {
									"case":	550,
									"scores":	[-6.356550590848]
								}, {
									"case":	551,
									"scores":	[-6.356550590848]
								}, {
									"case":	552,
									"scores":	[-6.356550590848]
								}, {
									"case":	553,
									"scores":	[-6.356550590848]
								}, {
									"case":	554,
									"scores":	[-6.356550590848]
								}, {
									"case":	555,
									"scores":	[-6.356550590848]
								}, {
									"case":	556,
									"scores":	[-6.356550590848]
								}, {
									"case":	557,
									"scores":	[-6.356550590848]
								}, {
									"case":	558,
									"scores":	[-6.356550590848]
								}, {
									"case":	559,
									"scores":	[-6.356550590848]
								}, {
									"case":	560,
									"scores":	[-6.356550590848]
								}, {
									"case":	561,
									"scores":	[-6.356550590848]
								}, {
									"case":	562,
									"scores":	[-6.356550590848]
								}, {
									"case":	563,
									"scores":	[-6.356550590848]
								}, {
									"case":	564,
									"scores":	[-6.356550590848]
								}, {
									"case":	565,
									"scores":	[-6.356550590848]
								}, {
									"case":	566,
									"scores":	[-6.356550590848]
								}, {
									"case":	567,
									"scores":	[-6.356550590848]
								}, {
									"case":	568,
									"scores":	[-6.356550590848]
								}, {
									"case":	569,
									"scores":	[-6.356550590848]
								}, {
									"case":	570,
									"scores":	[-6.356550590848]
								}, {
									"case":	571,
									"scores":	[-6.356550590848]
								}, {
									"case":	572,
									"scores":	[-6.356550590848]
								}, {
									"case":	573,
									"scores":	[-6.356550590848]
								}, {
									"case":	574,
									"scores":	[-6.356550590848]
								}, {
									"case":	575,
									"scores":	[-6.356550590848]
								}, {
									"case":	576,
									"scores":	[-6.356550590848]
								}, {
									"case":	577,
									"scores":	[-6.356550590848]
								}, {
									"case":	578,
									"scores":	[-6.356550590848]
								}, {
									"case":	579,
									"scores":	[-6.356550590848]
								}, {
									"case":	580,
									"scores":	[-6.356550590848]
								}, {
									"case":	581,
									"scores":	[-6.356550590848]
								}, {
									"case":	582,
									"scores":	[-6.356550590848]
								}, {
									"case":	583,
									"scores":	[-6.356550590848]
								}, {
									"case":	584,
									"scores":	[-6.356550590848]
								}, {
									"case":	585,
									"scores":	[-6.356550590848]
								}, {
									"case":	586,
									"scores":	[-6.356550590848]
								}, {
									"case":	587,
									"scores":	[-6.356550590848]
								}, {
									"case":	588,
									"scores":	[-6.356550590848]
								}, {
									"case":	589,
									"scores":	[-6.356550590848]
								}, {
									"case":	590,
									"scores":	[-6.356550590848]
								}, {
									"case":	591,
									"scores":	[-6.356550590848]
								}, {
									"case":	592,
									"scores":	[-6.356550590848]
								}, {
									"case":	593,
									"scores":	[-6.356550590848]
								}, {
									"case":	594,
									"scores":	[-6.356550590848]
								}, {
									"case":	595,
									"scores":	[-6.356550590848]
								}, {
									"case":	596,
									"scores":	[-6.356550590848]
								}, {
									"case":	597,
									"scores":	[-6.356550590848]
								}, {
									"case":	598,
									"scores":	[-6.356550590848]
								}, {
									"case":	599,
									"scores":	[-6.356550590848]
								}, {
									"case":	600,
									"scores":	[-6.356550590848]
								}, {
									"case":	601,
									"scores":	[-6.356550590848]
								}, {
									"case":	602,
									"scores":	[-6.356550590848]
								}, {
									"case":	603,
									"scores":	[-6.356550590848]
								}, {
									"case":	604,
									"scores":	[-6.356550590848]
								}, {
									"case":	605,
									"scores":	[-6.356550590848]
								}, {
									"case":	606,
									"scores":	[-6.356550590848]
								}, {
									"case":	607,
									"scores":	[-6.356550590848]
								}, {
									"case":	608,
									"scores":	[-6.356550590848]
								}, {
									"case":	609,
									"scores":	[-6.356550590848]
								}, {
									"case":	610,
									"scores":	[-6.356550590848]
								}, {
									"case":	611,
									"scores":	[-6.356550590848]
								}, {
									"case":	612,
									"scores":	[-6.356550590848]
								}, {
									"case":	613,
									"scores":	[-6.356550590848]
								}, {
									"case":	614,
									"scores":	[-9.936979627848, -9.476381122548, -9.530628804648, -7.617131331648, -9.468571283648, -10.789708300648, -9.793503556848, -12.185882077548003, -10.188907300648, -10.125651439848, -10.513926903848, -10.188907300648, -9.687972300648, -10.371690353648, -9.689922903848, -12.147288731548, -10.226007700648, -9.942868386848, -10.188907300648]
								}]
						}, {
							"switch":	31,
							"types":	[[], [], [1], [], [], [], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], [], [3, 4, 5], [], [], [], [], [], [], [], [2]],
							"begin_line":	363,
							"begin_column":	2,
							"end_line":	368,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L363\", 19, &(call_result), sizeof (call_result), &(us), sizeof (us), &(us->object), sizeof (us->object), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(zopened), sizeof (zopened), &(mode), sizeof (mode), &(stream), sizeof (stream), &(zoptions), sizeof (zoptions), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(wrapper), sizeof (wrapper), &(filename), sizeof (filename), &(us->wrapper), sizeof (us->wrapper), &(context), sizeof (context), &(old_in_user_include), sizeof (old_in_user_include), &(uwrap), sizeof (uwrap)))\n    call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0));\n", "{\n}\n", "call_result = Debug(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = php_printf(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = printf(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(&args)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&call_result)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&context)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&filename)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&mode)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&old_in_user_include)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&opened_path)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&options)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&stream)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&uwrap)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&wrapper)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&zfilename)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&zfuncname)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&zmode)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&zopened)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&zoptions)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&zretval)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&args), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&call_result), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&context), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&filename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&mode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&old_in_user_include), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&opened_path), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&options), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&stream), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&us), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&uwrap), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&wrapper), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (&zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&args), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&call_result), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&context), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&filename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&mode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&old_in_user_include), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&opened_path), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&options), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&stream), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&us), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&uwrap), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&wrapper), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(&zretval), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (0 * call_result), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (0 * old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (0 * options), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (args != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (args == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (call_result != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (call_result != old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (call_result * old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (call_result * options), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (call_result + 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (call_result + old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (call_result - 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (call_result - old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (call_result == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (call_result == old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (context != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (context == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (filename != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (filename != mode), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (filename == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (filename == mode), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (mode != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (mode == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (old_in_user_include != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (old_in_user_include * call_result), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (old_in_user_include * options), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (old_in_user_include + 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (old_in_user_include - 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (old_in_user_include == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (opened_path != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (opened_path == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options != call_result), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options != old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options * call_result), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options * old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options + 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options + call_result), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options + old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options - 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options - call_result), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options - old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options == call_result), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (options == old_in_user_include), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (stream != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (stream == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (us != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (us == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (uwrap != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (uwrap == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (wrapper != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (wrapper == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename != zfuncname), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename != zmode), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename != zopened), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename != zoptions), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename != zretval), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename == zfuncname), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename == zmode), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename == zopened), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename == zoptions), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfilename == zretval), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfuncname != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zfuncname == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zmode != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zmode != zfuncname), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zmode != zopened), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zmode != zoptions), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zmode != zretval), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zmode == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zmode == zfuncname), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zmode == zopened), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zmode == zoptions), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zmode == zretval), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zopened != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zopened != zfuncname), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zopened != zoptions), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zopened != zretval), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zopened == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zopened == zfuncname), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zopened == zoptions), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zopened == zretval), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zoptions != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zoptions != zfuncname), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zoptions != zretval), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zoptions == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zoptions == zfuncname), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zoptions == zretval), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zretval != 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zretval != zfuncname), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zretval == 0), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, (zretval == zfuncname), args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&args), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&call_result), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&context), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&filename), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&mode), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&old_in_user_include), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&opened_path), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&options), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&stream), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&us), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&uwrap), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&wrapper), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&zfilename), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&zfuncname), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&zmode), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&zopened), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&zoptions), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (&zretval), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, (args), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (0 * call_result), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (0 * old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (0 * options), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (args != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (args == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (call_result != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (call_result != old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (call_result * old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (call_result * options), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (call_result + 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (call_result + old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (call_result - 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (call_result - old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (call_result == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (call_result == old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (context != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (context == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (filename != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (filename != mode), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (filename == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (filename == mode), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (mode != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (mode == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (old_in_user_include != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (old_in_user_include * call_result), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (old_in_user_include * options), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (old_in_user_include + 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (old_in_user_include - 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (old_in_user_include == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (opened_path != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (opened_path == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options != call_result), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options != old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options * call_result), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options * old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options + 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options + call_result), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options + old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options - 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options - call_result), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options - old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options == call_result), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (options == old_in_user_include), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (stream != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (stream == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (us != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (us == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (uwrap != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (uwrap == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (wrapper != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (wrapper == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename != zfuncname), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename != zmode), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename != zopened), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename != zoptions), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename != zretval), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename == zfuncname), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename == zmode), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename == zopened), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename == zoptions), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfilename == zretval), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfuncname != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zfuncname == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zmode != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zmode != zfuncname), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zmode != zopened), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zmode != zoptions), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zmode != zretval), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zmode == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zmode == zfuncname), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zmode == zopened), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zmode == zoptions), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zmode == zretval), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zopened != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zopened != zfuncname), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zopened != zoptions), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zopened != zretval), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zopened == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zopened == zfuncname), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zopened == zoptions), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zopened == zretval), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zoptions != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zoptions != zfuncname), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zoptions != zretval), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zoptions == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zoptions == zfuncname), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zoptions == zretval), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zretval != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zretval != zfuncname), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zretval == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, (zretval == zfuncname), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.233880771848, -8.632847857748, -9.217252230848, -8.074259060848, -7.4245207698480016, -7.704321020848, -7.994382819848, -10.175464339748, -9.282603350848, -8.138806259848, -8.161419410848, -9.282603350848, -8.960592320848, -8.896694359848, -8.966315020848, -10.000260208748, -9.576954150848, -8.524715250848, -9.282603350848]
								}, {
									"case":	2,
									"scores":	[-6.356550590848]
								}, {
									"case":	3,
									"scores":	[-6.356550590848]
								}, {
									"case":	4,
									"scores":	[-6.356550590848]
								}, {
									"case":	5,
									"scores":	[-6.356550590848]
								}, {
									"case":	6,
									"scores":	[-6.356550590848]
								}, {
									"case":	7,
									"scores":	[-6.356550590848]
								}, {
									"case":	8,
									"scores":	[-6.356550590848]
								}, {
									"case":	9,
									"scores":	[-6.356550590848]
								}, {
									"case":	10,
									"scores":	[-6.356550590848]
								}, {
									"case":	11,
									"scores":	[-6.356550590848]
								}, {
									"case":	12,
									"scores":	[-6.356550590848]
								}, {
									"case":	13,
									"scores":	[-6.356550590848]
								}, {
									"case":	14,
									"scores":	[-6.356550590848]
								}, {
									"case":	15,
									"scores":	[-6.356550590848]
								}, {
									"case":	16,
									"scores":	[-6.356550590848]
								}, {
									"case":	17,
									"scores":	[-6.356550590848]
								}, {
									"case":	18,
									"scores":	[-6.356550590848]
								}, {
									"case":	19,
									"scores":	[-6.356550590848]
								}, {
									"case":	20,
									"scores":	[-6.356550590848]
								}, {
									"case":	21,
									"scores":	[-6.356550590848]
								}, {
									"case":	22,
									"scores":	[-6.356550590848]
								}, {
									"case":	23,
									"scores":	[-6.356550590848]
								}, {
									"case":	24,
									"scores":	[-6.356550590848]
								}, {
									"case":	25,
									"scores":	[-6.356550590848]
								}, {
									"case":	26,
									"scores":	[-6.356550590848]
								}, {
									"case":	27,
									"scores":	[-6.356550590848]
								}, {
									"case":	28,
									"scores":	[-6.356550590848]
								}, {
									"case":	29,
									"scores":	[-6.356550590848]
								}, {
									"case":	30,
									"scores":	[-6.356550590848]
								}, {
									"case":	31,
									"scores":	[-6.356550590848]
								}, {
									"case":	32,
									"scores":	[-6.356550590848]
								}, {
									"case":	33,
									"scores":	[-6.356550590848]
								}, {
									"case":	34,
									"scores":	[-6.356550590848]
								}, {
									"case":	35,
									"scores":	[-6.356550590848]
								}, {
									"case":	36,
									"scores":	[-6.356550590848]
								}, {
									"case":	37,
									"scores":	[-6.356550590848]
								}, {
									"case":	38,
									"scores":	[-6.356550590848]
								}, {
									"case":	39,
									"scores":	[-6.356550590848]
								}, {
									"case":	40,
									"scores":	[-6.356550590848]
								}, {
									"case":	41,
									"scores":	[-6.356550590848]
								}, {
									"case":	42,
									"scores":	[-6.356550590848]
								}, {
									"case":	43,
									"scores":	[-6.356550590848]
								}, {
									"case":	44,
									"scores":	[-6.356550590848]
								}, {
									"case":	45,
									"scores":	[-6.356550590848]
								}, {
									"case":	46,
									"scores":	[-6.356550590848]
								}, {
									"case":	47,
									"scores":	[-6.356550590848]
								}, {
									"case":	48,
									"scores":	[-6.356550590848]
								}, {
									"case":	49,
									"scores":	[-6.356550590848]
								}, {
									"case":	50,
									"scores":	[-6.356550590848]
								}, {
									"case":	51,
									"scores":	[-6.356550590848]
								}, {
									"case":	52,
									"scores":	[-6.356550590848]
								}, {
									"case":	53,
									"scores":	[-6.356550590848]
								}, {
									"case":	54,
									"scores":	[-6.356550590848]
								}, {
									"case":	55,
									"scores":	[-6.356550590848]
								}, {
									"case":	56,
									"scores":	[-6.356550590848]
								}, {
									"case":	57,
									"scores":	[-6.356550590848]
								}, {
									"case":	58,
									"scores":	[-6.356550590848]
								}, {
									"case":	59,
									"scores":	[-6.356550590848]
								}, {
									"case":	60,
									"scores":	[-6.356550590848]
								}, {
									"case":	61,
									"scores":	[-6.356550590848]
								}, {
									"case":	62,
									"scores":	[-6.356550590848]
								}, {
									"case":	63,
									"scores":	[-6.356550590848]
								}, {
									"case":	64,
									"scores":	[-6.356550590848]
								}, {
									"case":	65,
									"scores":	[-6.356550590848]
								}, {
									"case":	66,
									"scores":	[-6.356550590848]
								}, {
									"case":	67,
									"scores":	[-6.356550590848]
								}, {
									"case":	68,
									"scores":	[-6.356550590848]
								}, {
									"case":	69,
									"scores":	[-6.356550590848]
								}, {
									"case":	70,
									"scores":	[-6.356550590848]
								}, {
									"case":	71,
									"scores":	[-6.356550590848]
								}, {
									"case":	72,
									"scores":	[-6.356550590848]
								}, {
									"case":	73,
									"scores":	[-6.356550590848]
								}, {
									"case":	74,
									"scores":	[-6.356550590848]
								}, {
									"case":	75,
									"scores":	[-6.356550590848]
								}, {
									"case":	76,
									"scores":	[-6.356550590848]
								}, {
									"case":	77,
									"scores":	[-6.356550590848]
								}, {
									"case":	78,
									"scores":	[-6.356550590848]
								}, {
									"case":	79,
									"scores":	[-6.356550590848]
								}, {
									"case":	80,
									"scores":	[-6.356550590848]
								}, {
									"case":	81,
									"scores":	[-6.356550590848]
								}, {
									"case":	82,
									"scores":	[-6.356550590848]
								}, {
									"case":	83,
									"scores":	[-6.356550590848]
								}, {
									"case":	84,
									"scores":	[-6.356550590848]
								}, {
									"case":	85,
									"scores":	[-6.356550590848]
								}, {
									"case":	86,
									"scores":	[-6.356550590848]
								}, {
									"case":	87,
									"scores":	[-6.356550590848]
								}, {
									"case":	88,
									"scores":	[-6.356550590848]
								}, {
									"case":	89,
									"scores":	[-6.356550590848]
								}, {
									"case":	90,
									"scores":	[-6.356550590848]
								}, {
									"case":	91,
									"scores":	[-6.356550590848]
								}, {
									"case":	92,
									"scores":	[-6.356550590848]
								}, {
									"case":	93,
									"scores":	[-6.356550590848]
								}, {
									"case":	94,
									"scores":	[-6.356550590848]
								}, {
									"case":	95,
									"scores":	[-6.356550590848]
								}, {
									"case":	96,
									"scores":	[-6.356550590848]
								}, {
									"case":	97,
									"scores":	[-6.356550590848]
								}, {
									"case":	98,
									"scores":	[-6.356550590848]
								}, {
									"case":	99,
									"scores":	[-6.356550590848]
								}, {
									"case":	100,
									"scores":	[-6.356550590848]
								}, {
									"case":	101,
									"scores":	[-6.356550590848]
								}, {
									"case":	102,
									"scores":	[-6.356550590848]
								}, {
									"case":	103,
									"scores":	[-6.356550590848]
								}, {
									"case":	104,
									"scores":	[-6.356550590848]
								}, {
									"case":	105,
									"scores":	[-6.356550590848]
								}, {
									"case":	106,
									"scores":	[-6.356550590848]
								}, {
									"case":	107,
									"scores":	[-6.356550590848]
								}, {
									"case":	108,
									"scores":	[-6.356550590848]
								}, {
									"case":	109,
									"scores":	[-6.356550590848]
								}, {
									"case":	110,
									"scores":	[-6.356550590848]
								}, {
									"case":	111,
									"scores":	[-6.356550590848]
								}, {
									"case":	112,
									"scores":	[-6.356550590848]
								}, {
									"case":	113,
									"scores":	[-6.356550590848]
								}, {
									"case":	114,
									"scores":	[-6.356550590848]
								}, {
									"case":	115,
									"scores":	[-6.356550590848]
								}, {
									"case":	116,
									"scores":	[-6.356550590848]
								}, {
									"case":	117,
									"scores":	[-6.356550590848]
								}, {
									"case":	118,
									"scores":	[-6.356550590848]
								}, {
									"case":	119,
									"scores":	[-6.356550590848]
								}, {
									"case":	120,
									"scores":	[-6.356550590848]
								}, {
									"case":	121,
									"scores":	[-6.356550590848]
								}, {
									"case":	122,
									"scores":	[-6.356550590848]
								}, {
									"case":	123,
									"scores":	[-6.356550590848]
								}, {
									"case":	124,
									"scores":	[-6.356550590848]
								}, {
									"case":	125,
									"scores":	[-6.356550590848]
								}, {
									"case":	126,
									"scores":	[-6.356550590848]
								}, {
									"case":	127,
									"scores":	[-6.356550590848]
								}, {
									"case":	128,
									"scores":	[-6.356550590848]
								}, {
									"case":	129,
									"scores":	[-6.356550590848]
								}, {
									"case":	130,
									"scores":	[-6.356550590848]
								}, {
									"case":	131,
									"scores":	[-6.356550590848]
								}, {
									"case":	132,
									"scores":	[-6.356550590848]
								}, {
									"case":	133,
									"scores":	[-6.356550590848]
								}, {
									"case":	134,
									"scores":	[-6.356550590848]
								}, {
									"case":	135,
									"scores":	[-6.356550590848]
								}, {
									"case":	136,
									"scores":	[-6.356550590848]
								}, {
									"case":	137,
									"scores":	[-6.356550590848]
								}, {
									"case":	138,
									"scores":	[-6.356550590848]
								}, {
									"case":	139,
									"scores":	[-6.356550590848]
								}, {
									"case":	140,
									"scores":	[-6.356550590848]
								}, {
									"case":	141,
									"scores":	[-6.356550590848]
								}, {
									"case":	142,
									"scores":	[-6.356550590848]
								}, {
									"case":	143,
									"scores":	[-6.356550590848]
								}, {
									"case":	144,
									"scores":	[-6.356550590848]
								}, {
									"case":	145,
									"scores":	[-6.356550590848]
								}, {
									"case":	146,
									"scores":	[-6.356550590848]
								}, {
									"case":	147,
									"scores":	[-6.356550590848]
								}, {
									"case":	148,
									"scores":	[-6.356550590848]
								}, {
									"case":	149,
									"scores":	[-6.356550590848]
								}, {
									"case":	150,
									"scores":	[-6.356550590848]
								}, {
									"case":	151,
									"scores":	[-6.356550590848]
								}, {
									"case":	152,
									"scores":	[-6.356550590848]
								}, {
									"case":	153,
									"scores":	[-6.356550590848]
								}, {
									"case":	154,
									"scores":	[-6.356550590848]
								}, {
									"case":	155,
									"scores":	[-6.356550590848]
								}, {
									"case":	156,
									"scores":	[-6.356550590848]
								}, {
									"case":	157,
									"scores":	[-6.356550590848]
								}, {
									"case":	158,
									"scores":	[-6.356550590848]
								}, {
									"case":	159,
									"scores":	[-6.356550590848]
								}, {
									"case":	160,
									"scores":	[-6.356550590848]
								}, {
									"case":	161,
									"scores":	[-6.356550590848]
								}, {
									"case":	162,
									"scores":	[-6.356550590848]
								}, {
									"case":	163,
									"scores":	[-6.356550590848]
								}, {
									"case":	164,
									"scores":	[-6.356550590848]
								}, {
									"case":	165,
									"scores":	[-6.356550590848]
								}, {
									"case":	166,
									"scores":	[-6.356550590848]
								}, {
									"case":	167,
									"scores":	[-6.356550590848]
								}, {
									"case":	168,
									"scores":	[-6.356550590848]
								}, {
									"case":	169,
									"scores":	[-6.356550590848]
								}, {
									"case":	170,
									"scores":	[-6.356550590848]
								}, {
									"case":	171,
									"scores":	[-6.356550590848]
								}, {
									"case":	172,
									"scores":	[-6.356550590848]
								}, {
									"case":	173,
									"scores":	[-6.356550590848]
								}, {
									"case":	174,
									"scores":	[-6.356550590848]
								}, {
									"case":	175,
									"scores":	[-6.356550590848]
								}, {
									"case":	176,
									"scores":	[-6.356550590848]
								}, {
									"case":	177,
									"scores":	[-6.356550590848]
								}, {
									"case":	178,
									"scores":	[-6.356550590848]
								}, {
									"case":	179,
									"scores":	[-6.356550590848]
								}, {
									"case":	180,
									"scores":	[-6.356550590848]
								}, {
									"case":	181,
									"scores":	[-6.356550590848]
								}, {
									"case":	182,
									"scores":	[-6.356550590848]
								}, {
									"case":	183,
									"scores":	[-6.356550590848]
								}, {
									"case":	184,
									"scores":	[-6.356550590848]
								}, {
									"case":	185,
									"scores":	[-6.356550590848]
								}, {
									"case":	186,
									"scores":	[-6.356550590848]
								}, {
									"case":	187,
									"scores":	[-6.356550590848]
								}, {
									"case":	188,
									"scores":	[-6.356550590848]
								}, {
									"case":	189,
									"scores":	[-6.356550590848]
								}, {
									"case":	190,
									"scores":	[-6.356550590848]
								}, {
									"case":	191,
									"scores":	[-6.356550590848]
								}, {
									"case":	192,
									"scores":	[-6.356550590848]
								}, {
									"case":	193,
									"scores":	[-6.356550590848]
								}, {
									"case":	194,
									"scores":	[-6.356550590848]
								}, {
									"case":	195,
									"scores":	[-6.356550590848]
								}, {
									"case":	196,
									"scores":	[-6.356550590848]
								}, {
									"case":	197,
									"scores":	[-6.356550590848]
								}, {
									"case":	198,
									"scores":	[-6.356550590848]
								}, {
									"case":	199,
									"scores":	[-6.356550590848]
								}, {
									"case":	200,
									"scores":	[-6.356550590848]
								}, {
									"case":	201,
									"scores":	[-6.356550590848]
								}, {
									"case":	202,
									"scores":	[-6.356550590848]
								}, {
									"case":	203,
									"scores":	[-6.356550590848]
								}, {
									"case":	204,
									"scores":	[-6.356550590848]
								}, {
									"case":	205,
									"scores":	[-6.356550590848]
								}, {
									"case":	206,
									"scores":	[-6.356550590848]
								}, {
									"case":	207,
									"scores":	[-6.356550590848]
								}, {
									"case":	208,
									"scores":	[-6.356550590848]
								}, {
									"case":	209,
									"scores":	[-6.356550590848]
								}, {
									"case":	210,
									"scores":	[-6.356550590848]
								}, {
									"case":	211,
									"scores":	[-6.356550590848]
								}, {
									"case":	212,
									"scores":	[-6.356550590848]
								}, {
									"case":	213,
									"scores":	[-6.356550590848]
								}, {
									"case":	214,
									"scores":	[-6.356550590848]
								}, {
									"case":	215,
									"scores":	[-6.356550590848]
								}, {
									"case":	216,
									"scores":	[-6.356550590848]
								}, {
									"case":	217,
									"scores":	[-6.356550590848]
								}, {
									"case":	218,
									"scores":	[-6.356550590848]
								}, {
									"case":	219,
									"scores":	[-6.356550590848]
								}, {
									"case":	220,
									"scores":	[-6.356550590848]
								}, {
									"case":	221,
									"scores":	[-6.356550590848]
								}, {
									"case":	222,
									"scores":	[-6.356550590848]
								}, {
									"case":	223,
									"scores":	[-6.356550590848]
								}, {
									"case":	224,
									"scores":	[-6.356550590848]
								}, {
									"case":	225,
									"scores":	[-6.356550590848]
								}, {
									"case":	226,
									"scores":	[-6.356550590848]
								}, {
									"case":	227,
									"scores":	[-6.356550590848]
								}, {
									"case":	228,
									"scores":	[-6.356550590848]
								}, {
									"case":	229,
									"scores":	[-6.356550590848]
								}, {
									"case":	230,
									"scores":	[-6.356550590848]
								}, {
									"case":	231,
									"scores":	[-6.356550590848]
								}, {
									"case":	232,
									"scores":	[-6.356550590848]
								}, {
									"case":	233,
									"scores":	[-6.356550590848]
								}, {
									"case":	234,
									"scores":	[-6.356550590848]
								}, {
									"case":	235,
									"scores":	[-6.356550590848]
								}, {
									"case":	236,
									"scores":	[-6.356550590848]
								}, {
									"case":	237,
									"scores":	[-6.356550590848]
								}, {
									"case":	238,
									"scores":	[-6.356550590848]
								}, {
									"case":	239,
									"scores":	[-6.356550590848]
								}, {
									"case":	240,
									"scores":	[-6.356550590848]
								}, {
									"case":	241,
									"scores":	[-6.356550590848]
								}, {
									"case":	242,
									"scores":	[-6.356550590848]
								}, {
									"case":	243,
									"scores":	[-6.356550590848]
								}, {
									"case":	244,
									"scores":	[-6.356550590848]
								}, {
									"case":	245,
									"scores":	[-6.356550590848]
								}, {
									"case":	246,
									"scores":	[-6.356550590848]
								}, {
									"case":	247,
									"scores":	[-6.356550590848]
								}, {
									"case":	248,
									"scores":	[-6.356550590848]
								}, {
									"case":	249,
									"scores":	[-6.356550590848]
								}, {
									"case":	250,
									"scores":	[-6.356550590848]
								}, {
									"case":	251,
									"scores":	[-6.356550590848]
								}, {
									"case":	252,
									"scores":	[-6.356550590848]
								}, {
									"case":	253,
									"scores":	[-6.356550590848]
								}, {
									"case":	254,
									"scores":	[-6.356550590848]
								}, {
									"case":	255,
									"scores":	[-6.356550590848]
								}, {
									"case":	256,
									"scores":	[-6.356550590848]
								}, {
									"case":	257,
									"scores":	[-6.356550590848]
								}, {
									"case":	258,
									"scores":	[-6.356550590848]
								}, {
									"case":	259,
									"scores":	[-6.356550590848]
								}, {
									"case":	260,
									"scores":	[-6.356550590848]
								}, {
									"case":	261,
									"scores":	[-6.356550590848]
								}, {
									"case":	262,
									"scores":	[-6.356550590848]
								}, {
									"case":	263,
									"scores":	[-6.356550590848]
								}, {
									"case":	264,
									"scores":	[-6.356550590848]
								}, {
									"case":	265,
									"scores":	[-6.356550590848]
								}, {
									"case":	266,
									"scores":	[-6.356550590848]
								}, {
									"case":	267,
									"scores":	[-6.356550590848]
								}, {
									"case":	268,
									"scores":	[-6.356550590848]
								}, {
									"case":	269,
									"scores":	[-6.356550590848]
								}, {
									"case":	270,
									"scores":	[-6.356550590848]
								}, {
									"case":	271,
									"scores":	[-6.356550590848]
								}, {
									"case":	272,
									"scores":	[-6.356550590848]
								}, {
									"case":	273,
									"scores":	[-6.356550590848]
								}, {
									"case":	274,
									"scores":	[-6.356550590848]
								}, {
									"case":	275,
									"scores":	[-6.356550590848]
								}, {
									"case":	276,
									"scores":	[-6.356550590848]
								}, {
									"case":	277,
									"scores":	[-6.356550590848]
								}, {
									"case":	278,
									"scores":	[-6.356550590848]
								}, {
									"case":	279,
									"scores":	[-6.356550590848]
								}, {
									"case":	280,
									"scores":	[-6.356550590848]
								}, {
									"case":	281,
									"scores":	[-6.356550590848]
								}, {
									"case":	282,
									"scores":	[-6.356550590848]
								}, {
									"case":	283,
									"scores":	[-6.356550590848]
								}, {
									"case":	284,
									"scores":	[-6.356550590848]
								}, {
									"case":	285,
									"scores":	[-6.356550590848]
								}, {
									"case":	286,
									"scores":	[-6.356550590848]
								}, {
									"case":	287,
									"scores":	[-6.356550590848]
								}, {
									"case":	288,
									"scores":	[-6.356550590848]
								}, {
									"case":	289,
									"scores":	[-6.356550590848]
								}, {
									"case":	290,
									"scores":	[-6.356550590848]
								}, {
									"case":	291,
									"scores":	[-6.356550590848]
								}, {
									"case":	292,
									"scores":	[-6.356550590848]
								}, {
									"case":	293,
									"scores":	[-6.356550590848]
								}, {
									"case":	294,
									"scores":	[-6.356550590848]
								}, {
									"case":	295,
									"scores":	[-6.356550590848]
								}]
						}]
				}, {
					"line":	371,
					"switches":	[{
							"switch":	34,
							"types":	[[], [], [], [], [654], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], [], [], [], [604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653], [267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], [], [], [], [], [], []],
							"begin_line":	372,
							"begin_column":	1,
							"end_line":	372,
							"end_column":	1,
							"patch_codes":	["memset(&(*zopened).is_ref__gc, 0, sizeof (*(&(*zopened).is_ref__gc)))", "memset(&(*zopened).refcount__gc, 0, sizeof (*(&(*zopened).refcount__gc)))", "memset(&(*zopened).type, 0, sizeof (*(&(*zopened).type)))", "memset(&(*zopened).value, 0, sizeof (*(&(*zopened).value)))", "memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(stream, 0, sizeof (*(stream)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us, 0, sizeof (*(us)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L372\", 50, &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(us->object), sizeof (us->object), &(stream->wrapperdata), sizeof (stream->wrapperdata), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(us->wrapper), sizeof (us->wrapper), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(old_in_user_include), sizeof (old_in_user_include), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(stream->ops), sizeof (stream->ops), &(stream->abstract), sizeof (stream->abstract), &(stream->wrapper), sizeof (stream->wrapper), &(stream->wrapperthis), sizeof (stream->wrapperthis), &(stream->fgetss_state), sizeof (stream->fgetss_state), &(stream->is_persistent), sizeof (stream->is_persistent), &(stream->rsrc_id), sizeof (stream->rsrc_id), &(stream->in_free), sizeof (stream->in_free), &(stream->fclose_stdiocast), sizeof (stream->fclose_stdiocast), &(stream->stdiocast), sizeof (stream->stdiocast), &(stream->orig_path), sizeof (stream->orig_path), &(stream->context), sizeof (stream->context), &(stream->flags), sizeof (stream->flags), &(stream->position), sizeof (stream->position), &(stream->readbuf), sizeof (stream->readbuf), &(stream->readbuflen), sizeof (stream->readbuflen), &(stream->readpos), sizeof (stream->readpos), &(stream->writepos), sizeof (stream->writepos), &(stream->chunk_size), sizeof (stream->chunk_size), &(stream->eof), sizeof (stream->eof), &(stream->enclosing_stream), sizeof (stream->enclosing_stream), &(php_stream_userspace_ops.write), sizeof (php_stream_userspace_ops.write), &(php_stream_userspace_ops.read), sizeof (php_stream_userspace_ops.read), &(php_stream_userspace_ops.close), sizeof (php_stream_userspace_ops.close), &(php_stream_userspace_ops.flush), sizeof (php_stream_userspace_ops.flush), &(php_stream_userspace_ops.label), sizeof (php_stream_userspace_ops.label), &(php_stream_userspace_ops.seek), sizeof (php_stream_userspace_ops.seek), &(php_stream_userspace_ops.cast), sizeof (php_stream_userspace_ops.cast), &(php_stream_userspace_ops.stat), sizeof (php_stream_userspace_ops.stat), &(php_stream_userspace_ops.set_option), sizeof (php_stream_userspace_ops.set_option)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	2,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	3,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	4,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	5,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	6,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	7,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	8,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	9,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	10,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	11,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	12,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	13,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	14,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	15,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	16,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	17,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	18,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	19,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	20,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	21,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	22,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	23,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	24,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	25,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	26,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	27,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	28,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	29,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	30,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	31,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	32,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	33,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	34,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	35,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	36,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	37,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	38,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	39,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	40,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	41,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	42,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	43,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	44,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	45,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	46,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	47,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	48,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	49,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	50,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	51,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	52,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	53,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	54,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	55,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	56,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	57,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	58,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	59,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	60,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	61,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	62,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	63,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	64,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	65,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	66,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	67,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	68,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	69,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	70,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	71,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	72,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	73,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	74,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	75,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	76,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	77,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	78,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	79,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	80,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	81,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	82,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	83,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	84,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	85,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	86,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	87,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	88,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	89,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	90,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	91,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	92,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	93,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	94,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	95,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	96,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	97,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	98,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	99,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	100,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	101,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	102,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	103,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	104,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	105,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	106,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	107,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	108,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	109,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	110,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	111,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	112,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	113,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	114,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	115,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	116,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	117,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	118,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	119,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	120,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	121,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	122,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	123,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	124,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	125,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	126,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	127,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	128,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	129,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	130,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	131,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	132,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	133,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	134,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	135,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	136,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	137,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	138,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	139,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	140,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	141,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	142,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	143,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	144,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	145,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	146,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	147,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	148,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	149,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	150,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	151,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	152,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	153,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	154,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	155,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	156,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	157,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	158,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	159,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	160,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	161,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	162,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	163,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	164,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	165,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	166,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	167,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	168,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	169,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	170,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	171,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	172,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	173,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	174,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	175,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	176,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	177,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	178,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	179,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	180,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	181,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	182,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	183,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	184,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	185,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	186,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	187,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	188,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	189,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	190,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	191,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	192,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	193,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	194,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	195,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	196,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	197,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	198,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	199,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	200,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	201,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	202,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	203,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	204,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	205,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	206,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	207,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	208,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	209,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	210,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	211,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	212,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	213,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	214,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	215,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	216,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	217,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	218,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	219,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	220,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	221,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	222,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	223,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	224,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	225,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	226,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	227,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	228,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	229,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	230,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	231,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	232,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	233,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	234,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	235,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	236,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	237,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	238,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	239,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	240,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	241,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	242,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	243,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	244,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	245,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	246,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	247,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	248,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	249,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	250,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	251,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	252,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	253,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	254,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	255,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	256,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	257,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	258,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	259,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	260,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	261,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	262,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	263,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	264,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	265,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	266,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	267,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	268,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	269,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	270,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	271,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	272,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	273,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	274,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	275,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	276,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	277,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	278,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	279,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	280,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	281,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	282,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	283,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	284,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	285,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	286,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	287,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	288,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	289,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	290,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	291,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	292,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	293,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	294,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	295,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	296,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	297,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	298,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	299,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	300,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	301,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	302,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	303,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	304,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	305,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	306,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	307,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	308,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	309,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	310,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	311,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	312,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	313,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	314,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	315,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	316,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	317,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	318,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	319,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	320,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	321,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	322,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	323,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	324,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	325,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	326,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	327,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	328,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	329,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	330,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	331,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	332,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	333,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	334,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	335,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	336,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	337,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	338,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	339,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	340,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	341,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	342,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	343,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	344,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	345,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	346,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	347,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	348,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	349,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	350,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	351,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	352,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	353,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	354,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	355,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	356,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	357,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	358,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	359,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	360,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	361,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	362,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	363,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	364,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	365,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	366,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	367,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	368,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	369,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	370,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	371,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	372,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	373,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	374,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	375,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	376,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	377,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	378,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	379,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	380,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	381,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	382,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	383,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	384,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	385,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	386,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	387,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	388,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	389,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	390,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	391,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	392,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	393,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	394,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	395,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	396,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	397,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	398,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	399,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	400,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	401,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	402,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	403,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	404,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	405,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	406,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	407,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	408,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	409,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	410,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	411,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	412,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	413,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	414,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	415,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	416,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	417,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	418,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	419,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	420,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	421,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	422,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	423,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	424,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	425,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	426,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	427,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	428,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	429,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	430,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	431,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	432,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	433,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	434,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	435,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	436,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	437,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	438,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	439,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	440,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	441,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	442,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	443,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	444,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	445,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	446,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	447,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	448,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	449,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	450,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	451,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	452,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	453,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	454,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	455,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	456,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	457,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	458,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	459,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	460,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	461,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	462,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	463,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	464,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	465,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	466,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	467,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	468,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	469,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	470,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	471,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	472,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	473,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	474,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	475,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	476,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	477,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	478,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	479,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	480,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	481,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	482,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	483,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	484,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	485,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	486,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	487,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	488,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	489,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	490,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	491,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	492,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	493,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	494,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	495,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	496,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	497,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	498,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	499,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	500,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	501,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	502,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	503,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	504,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	505,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	506,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	507,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	508,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	509,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	510,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	511,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	512,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	513,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	514,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	515,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	516,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	517,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	518,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	519,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	520,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	521,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	522,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	523,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	524,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	525,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	526,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	527,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	528,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	529,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	530,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	531,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	532,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	533,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	534,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	535,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	536,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	537,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	538,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	539,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	540,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	541,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	542,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	543,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	544,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	545,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	546,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	547,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	548,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	549,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	550,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	551,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	552,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	553,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	554,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	555,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	556,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	557,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	558,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	559,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	560,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	561,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	562,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	563,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	564,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	565,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	566,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	567,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	568,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	569,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	570,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	571,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	572,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	573,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	574,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	575,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	576,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	577,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	578,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	579,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	580,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	581,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	582,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	583,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	584,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	585,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	586,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	587,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	588,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	589,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	590,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	591,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	592,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	593,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	594,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	595,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	596,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	597,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	598,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	599,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	600,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	601,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	602,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	603,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	604,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	605,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	606,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	607,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	608,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	609,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	610,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	611,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	612,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	613,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	614,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	615,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	616,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	617,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	618,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	619,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	620,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	621,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	622,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	623,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	624,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	625,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	626,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	627,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	628,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	629,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	630,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	631,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	632,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	633,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	634,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	635,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	636,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	637,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	638,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	639,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	640,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	641,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	642,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	643,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	644,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	645,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	646,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	647,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	648,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	649,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	650,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	651,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	652,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	653,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	654,
									"scores":	[-6.486527605992495, -7.3510802596924947, -9.3105614696924945, -9.0563529717924958, -8.8103140579924943, -9.3813725749924952, -9.6571539717924946, -9.0563529717924958, -9.3274621457924951, -10.358904675792495, -9.0934533717924957, -8.847414457992496, -9.8704991457924951, -9.0563529717924958, -9.0563529717924958, -8.5554179717924939, -8.5573685749924948, -8.8103140579924943, -9.0934533717924957, -9.0563529717924958, -9.8704991457924951, -9.8353493489924944, -9.8704991457924951, -9.8353493489924944, -9.6244602319924955, -9.6244602319924955, -9.6244602319924955, -9.6244602319924955, -9.6244602319924955, -9.8704991457924951, -9.8353493489924944, -9.8704991457924951, -9.6244602319924955, -9.6244602319924955, -9.8353493489924944, -9.1235252319924953, -9.6244602319924955, -9.6244602319924955, -9.6244602319924955, -9.6244602319924955, -9.8704991457924951, -9.6244602319924955, -9.6244602319924955, -9.6244602319924955, -9.6244602319924955, -9.8353493489924944, -9.6244602319924955, -9.6244602319924955, -9.6244602319924955, -9.6244602319924955]
								}]
						}, {
							"switch":	35,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	372,
							"begin_column":	3,
							"end_line":	372,
							"end_column":	12,
							"patch_codes":	["if (!__is_neg(\"\", \"L372\", 50, &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(us->object), sizeof (us->object), &(stream->wrapperdata), sizeof (stream->wrapperdata), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(us->wrapper), sizeof (us->wrapper), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(old_in_user_include), sizeof (old_in_user_include), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(stream->ops), sizeof (stream->ops), &(stream->abstract), sizeof (stream->abstract), &(stream->wrapper), sizeof (stream->wrapper), &(stream->wrapperthis), sizeof (stream->wrapperthis), &(stream->fgetss_state), sizeof (stream->fgetss_state), &(stream->is_persistent), sizeof (stream->is_persistent), &(stream->rsrc_id), sizeof (stream->rsrc_id), &(stream->in_free), sizeof (stream->in_free), &(stream->fclose_stdiocast), sizeof (stream->fclose_stdiocast), &(stream->stdiocast), sizeof (stream->stdiocast), &(stream->orig_path), sizeof (stream->orig_path), &(stream->context), sizeof (stream->context), &(stream->flags), sizeof (stream->flags), &(stream->position), sizeof (stream->position), &(stream->readbuf), sizeof (stream->readbuf), &(stream->readbuflen), sizeof (stream->readbuflen), &(stream->readpos), sizeof (stream->readpos), &(stream->writepos), sizeof (stream->writepos), &(stream->chunk_size), sizeof (stream->chunk_size), &(stream->eof), sizeof (stream->eof), &(stream->enclosing_stream), sizeof (stream->enclosing_stream), &(php_stream_userspace_ops.write), sizeof (php_stream_userspace_ops.write), &(php_stream_userspace_ops.read), sizeof (php_stream_userspace_ops.read), &(php_stream_userspace_ops.close), sizeof (php_stream_userspace_ops.close), &(php_stream_userspace_ops.flush), sizeof (php_stream_userspace_ops.flush), &(php_stream_userspace_ops.label), sizeof (php_stream_userspace_ops.label), &(php_stream_userspace_ops.seek), sizeof (php_stream_userspace_ops.seek), &(php_stream_userspace_ops.cast), sizeof (php_stream_userspace_ops.cast), &(php_stream_userspace_ops.stat), sizeof (php_stream_userspace_ops.stat), &(php_stream_userspace_ops.set_option), sizeof (php_stream_userspace_ops.set_option)))\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n", "{\n}\n", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&args)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&call_result)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&context)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&filename)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&mode)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&old_in_user_include)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&opened_path)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&options)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&stream)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&uwrap)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&wrapper)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&zfilename)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&zfuncname)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&zmode)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&zopened)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&zoptions)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((&zretval)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((0 * call_result)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((0 * old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((0 * options)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((args != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((args == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((call_result != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((call_result != old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((call_result * old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((call_result * options)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((call_result + 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((call_result + old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((call_result - 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((call_result - old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((call_result == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((call_result == old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((context != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((context == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((filename != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((filename != mode)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((filename == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((filename == mode)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((mode != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((mode == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((old_in_user_include != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((old_in_user_include * call_result)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((old_in_user_include * options)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((old_in_user_include + 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((old_in_user_include - 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((old_in_user_include == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((opened_path != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((opened_path == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options != call_result)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options != old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options * call_result)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options * old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options + 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options + call_result)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options + old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options - 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options - call_result)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options - old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options == call_result)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((options == old_in_user_include)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((stream != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((stream == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((us != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((us == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((uwrap != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((uwrap == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((wrapper != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((wrapper == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename != zfuncname)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename != zmode)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename != zopened)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename != zoptions)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename != zretval)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename == zfuncname)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename == zmode)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename == zopened)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename == zoptions)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfilename == zretval)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfuncname != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zfuncname == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zmode != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zmode != zfuncname)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zmode != zopened)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zmode != zoptions)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zmode != zretval)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zmode == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zmode == zfuncname)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zmode == zopened)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zmode == zoptions)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zmode == zretval)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zopened != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zopened != zfuncname)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zopened != zoptions)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zopened != zretval)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zopened == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zopened == zfuncname)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zopened == zoptions)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zopened == zretval)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zoptions != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zoptions != zfuncname)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zoptions != zretval)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zoptions == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zoptions == zfuncname)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zoptions == zretval)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zretval != 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zretval != zfuncname)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zretval == 0)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), ((zretval == zfuncname)), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&args)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&call_result)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&context)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&mode)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&old_in_user_include)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&opened_path)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&options)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&stream)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&us)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&uwrap)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&wrapper)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&zfilename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&zfuncname)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&zmode)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&zopened)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&zoptions)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((&zretval)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4827813705924946, -6.8951059584924952, -8.1351200794924949, -7.6854029605924952, -6.9275148605924954, -6.5642190205924953, -6.1071206305924957, -7.6854029605924952, -8.0914733205924954, -8.5559796005924937, -7.9797537605924944, -7.2218656605924947, -8.2102477705924954, -7.6854029605924952, -7.6854029605924952, -7.3633919305924946, -7.3691146305924953, -6.9275148605924954, -7.9797537605924944, -7.6854029605924952, -8.2102477705924954, -7.9216196705924951, -8.2102477705924954, -7.9216196705924951, -7.4523596705924948, -7.4523596705924948, -7.4523596705924948, -7.4523596705924948, -7.4523596705924948, -8.2102477705924954, -7.9216196705924951, -8.2102477705924954, -7.4523596705924948, -7.4523596705924948, -7.9216196705924951, -7.1303486405924952, -7.4523596705924948, -7.4523596705924948, -7.4523596705924948, -7.4523596705924948, -8.2102477705924954, -7.4523596705924948, -7.4523596705924948, -7.4523596705924948, -7.4523596705924948, -7.9216196705924951, -7.4523596705924948, -7.4523596705924948, -7.4523596705924948, -7.4523596705924948]
								}, {
									"case":	2,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	3,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	4,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	5,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	6,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	7,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	8,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	9,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	10,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	11,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	12,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	13,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	14,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	15,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	16,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	17,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	18,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	19,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	20,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	21,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	22,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	23,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	24,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	25,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	26,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	27,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	28,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	29,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	30,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	31,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	32,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	33,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	34,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	35,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	36,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	37,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	38,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	39,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	40,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	41,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	42,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	43,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	44,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	45,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	46,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	47,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	48,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	49,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	50,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	51,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	52,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	53,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	54,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	55,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	56,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	57,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	58,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	59,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	60,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	61,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	62,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	63,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	64,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	65,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	66,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	67,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	68,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	69,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	70,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	71,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	72,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	73,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	74,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	75,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	76,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	77,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	78,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	79,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	80,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	81,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	82,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	83,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	84,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	85,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	86,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	87,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	88,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	89,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	90,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	91,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	92,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	93,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	94,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	95,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	96,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	97,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	98,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	99,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	100,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	101,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	102,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	103,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	104,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	105,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	106,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	107,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	108,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	109,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	110,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	111,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	112,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	113,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	114,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	115,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	116,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	117,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	118,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	119,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	120,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	121,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	122,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	123,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	124,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	125,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	126,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	127,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	128,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	129,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	130,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	131,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	132,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	133,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	134,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	135,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	136,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	137,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	138,
									"scores":	[-5.8312802005924951]
								}]
						}]
				}, {
					"line":	374,
					"switches":	[{
							"switch":	36,
							"types":	[[], [], [], [], [653], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265], [], [], [], [603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652], [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], [], [], [], [], [], []],
							"begin_line":	375,
							"begin_column":	1,
							"end_line":	375,
							"end_column":	1,
							"patch_codes":	["memset(&(*zopened), 0, sizeof (*(&(*zopened))))", "memset(&(*zopened).is_ref__gc, 0, sizeof (*(&(*zopened).is_ref__gc)))", "memset(&(*zopened).refcount__gc, 0, sizeof (*(&(*zopened).refcount__gc)))", "memset(&(*zopened).type, 0, sizeof (*(&(*zopened).type)))", "memset(&(*zopened).value, 0, sizeof (*(&(*zopened).value)))", "memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L375\", 20, &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &((*zopened).type), sizeof ((*zopened).type), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &((*zopened).refcount__gc), sizeof ((*zopened).refcount__gc), &((*zopened).is_ref__gc), sizeof ((*zopened).is_ref__gc)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	2,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	3,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	4,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	5,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	6,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	7,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	8,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	9,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	10,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	11,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	12,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	13,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	14,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	15,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	16,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	17,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	18,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	19,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	20,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	21,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	22,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	23,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	24,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	25,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	26,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	27,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	28,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	29,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	30,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	31,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	32,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	33,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	34,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	35,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	36,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	37,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	38,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	39,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	40,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	41,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	42,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	43,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	44,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	45,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	46,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	47,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	48,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	49,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	50,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	51,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	52,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	53,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	54,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	55,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	56,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	57,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	58,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	59,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	60,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	61,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	62,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	63,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	64,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	65,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	66,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	67,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	68,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	69,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	70,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	71,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	72,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	73,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	74,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	75,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	76,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	77,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	78,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	79,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	80,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	81,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	82,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	83,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	84,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	85,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	86,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	87,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	88,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	89,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	90,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	91,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	92,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	93,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	94,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	95,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	96,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	97,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	98,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	99,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	100,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	101,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	102,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	103,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	104,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	105,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	106,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	107,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	108,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	109,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	110,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	111,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	112,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	113,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	114,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	115,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	116,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	117,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	118,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	119,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	120,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	121,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	122,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	123,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	124,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	125,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	126,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	127,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	128,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	129,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	130,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	131,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	132,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	133,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	134,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	135,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	136,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	137,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	138,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	139,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	140,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	141,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	142,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	143,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	144,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	145,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	146,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	147,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	148,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	149,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	150,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	151,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	152,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	153,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	154,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	155,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	156,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	157,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	158,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	159,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	160,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	161,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	162,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	163,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	164,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	165,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	166,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	167,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	168,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	169,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	170,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	171,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	172,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	173,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	174,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	175,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	176,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	177,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	178,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	179,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	180,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	181,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	182,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	183,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	184,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	185,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	186,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	187,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	188,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	189,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	190,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	191,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	192,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	193,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	194,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	195,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	196,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	197,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	198,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	199,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	200,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	201,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	202,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	203,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	204,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	205,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	206,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	207,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	208,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	209,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	210,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	211,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	212,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	213,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	214,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	215,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	216,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	217,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	218,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	219,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	220,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	221,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	222,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	223,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	224,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	225,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	226,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	227,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	228,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	229,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	230,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	231,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	232,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	233,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	234,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	235,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	236,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	237,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	238,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	239,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	240,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	241,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	242,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	243,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	244,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	245,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	246,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	247,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	248,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	249,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	250,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	251,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	252,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	253,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	254,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	255,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	256,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	257,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	258,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	259,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	260,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	261,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	262,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	263,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	264,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	265,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	266,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	267,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	268,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	269,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	270,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	271,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	272,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	273,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	274,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	275,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	276,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	277,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	278,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	279,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	280,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	281,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	282,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	283,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	284,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	285,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	286,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	287,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	288,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	289,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	290,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	291,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	292,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	293,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	294,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	295,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	296,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	297,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	298,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	299,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	300,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	301,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	302,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	303,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	304,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	305,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	306,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	307,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	308,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	309,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	310,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	311,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	312,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	313,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	314,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	315,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	316,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	317,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	318,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	319,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	320,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	321,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	322,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	323,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	324,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	325,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	326,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	327,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	328,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	329,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	330,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	331,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	332,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	333,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	334,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	335,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	336,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	337,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	338,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	339,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	340,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	341,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	342,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	343,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	344,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	345,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	346,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	347,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	348,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	349,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	350,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	351,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	352,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	353,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	354,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	355,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	356,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	357,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	358,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	359,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	360,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	361,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	362,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	363,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	364,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	365,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	366,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	367,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	368,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	369,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	370,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	371,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	372,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	373,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	374,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	375,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	376,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	377,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	378,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	379,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	380,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	381,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	382,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	383,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	384,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	385,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	386,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	387,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	388,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	389,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	390,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	391,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	392,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	393,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	394,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	395,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	396,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	397,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	398,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	399,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	400,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	401,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	402,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	403,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	404,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	405,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	406,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	407,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	408,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	409,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	410,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	411,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	412,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	413,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	414,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	415,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	416,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	417,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	418,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	419,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	420,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	421,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	422,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	423,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	424,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	425,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	426,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	427,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	428,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	429,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	430,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	431,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	432,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	433,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	434,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	435,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	436,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	437,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	438,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	439,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	440,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	441,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	442,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	443,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	444,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	445,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	446,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	447,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	448,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	449,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	450,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	451,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	452,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	453,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	454,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	455,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	456,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	457,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	458,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	459,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	460,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	461,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	462,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	463,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	464,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	465,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	466,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	467,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	468,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	469,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	470,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	471,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	472,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	473,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	474,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	475,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	476,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	477,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	478,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	479,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	480,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	481,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	482,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	483,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	484,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	485,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	486,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	487,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	488,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	489,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	490,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	491,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	492,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	493,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	494,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	495,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	496,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	497,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	498,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	499,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	500,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	501,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	502,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	503,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	504,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	505,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	506,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	507,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	508,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	509,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	510,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	511,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	512,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	513,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	514,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	515,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	516,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	517,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	518,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	519,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	520,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	521,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	522,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	523,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	524,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	525,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	526,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	527,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	528,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	529,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	530,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	531,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	532,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	533,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	534,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	535,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	536,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	537,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	538,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	539,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	540,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	541,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	542,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	543,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	544,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	545,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	546,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	547,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	548,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	549,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	550,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	551,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	552,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	553,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	554,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	555,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	556,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	557,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	558,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	559,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	560,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	561,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	562,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	563,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	564,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	565,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	566,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	567,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	568,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	569,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	570,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	571,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	572,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	573,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	574,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	575,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	576,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	577,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	578,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	579,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	580,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	581,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	582,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	583,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	584,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	585,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	586,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	587,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	588,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	589,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	590,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	591,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	592,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	593,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	594,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	595,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	596,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	597,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	598,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	599,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	600,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	601,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	602,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	603,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	604,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	605,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	606,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	607,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	608,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	609,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	610,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	611,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	612,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	613,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	614,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	615,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	616,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	617,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	618,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	619,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	620,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	621,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	622,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	623,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	624,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	625,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	626,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	627,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	628,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	629,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	630,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	631,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	632,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	633,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	634,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	635,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	636,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	637,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	638,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	639,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	640,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	641,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	642,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	643,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	644,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	645,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	646,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	647,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	648,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	649,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	650,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	651,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	652,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	653,
									"scores":	[-9.3544936676749746, -9.2173694424749755, -11.081754144674974, -10.354796667674975, -10.676312321374976, -9.3431740413749758, -10.546807264474975, -10.300768350674975, -10.583907664474975, -10.337868750674975, -10.546807264474975, -10.546807264474975, -10.546807264474975, -10.045872264474976, -10.300768350674975, -10.047822867674975, -10.583907664474975, -10.546807264474975, -11.114914524674974, -11.114914524674974]
								}]
						}, {
							"switch":	37,
							"types":	[[5], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4]],
							"begin_line":	375,
							"begin_column":	3,
							"end_line":	377,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L375\", 20, &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &((*zopened).type), sizeof ((*zopened).type), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &((*zopened).refcount__gc), sizeof ((*zopened).refcount__gc), &((*zopened).is_ref__gc), sizeof ((*zopened).is_ref__gc))) {\n    *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n}\n", "if ((((*zopened).type == 6) || __is_neg(\"\", \"L375\", 20, &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &((*zopened).type), sizeof ((*zopened).type), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &((*zopened).refcount__gc), sizeof ((*zopened).refcount__gc), &((*zopened).is_ref__gc), sizeof ((*zopened).is_ref__gc))) && opened_path) {\n    *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n}\n", "if (((*zopened).type == 6 && opened_path) || __is_neg(\"\", \"L375\", 20, &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &((*zopened).type), sizeof ((*zopened).type), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &((*zopened).refcount__gc), sizeof ((*zopened).refcount__gc), &((*zopened).is_ref__gc), sizeof ((*zopened).is_ref__gc))) {\n    *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n}\n", "if ((*zopened).type == 6) {\n    *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n}\n", "if (((*zopened).type == 6 && opened_path) && !__is_neg(\"\", \"L375\", 20, &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &((*zopened).type), sizeof ((*zopened).type), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &((*zopened).refcount__gc), sizeof ((*zopened).refcount__gc), &((*zopened).is_ref__gc), sizeof ((*zopened).is_ref__gc))) {\n    *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.5451540704281452, -0.92332837042814564, -0.875693070428145, -2.9568689064281459, -2.9816505043281456, -2.5472811083281464, -3.232726360428146, -2.4748382604281458, -3.5270771604281457, -2.7691890604281459, -3.232726360428146, -3.232726360428146, -3.232726360428146, -2.9107153304281459, -2.4748382604281458, -2.9164380304281456, -3.5270771604281457, -3.232726360428146, -2.9996830704281456, -2.9996830704281456]
								}, {
									"case":	2,
									"scores":	[-2.1727121524281454, -1.5508864524281449, -1.5032511524281458, -3.5844269884281457, -3.6092085863281458, -3.1748391903281457, -3.8602844424281457, -3.102396342428146, -4.1546352424281459, -3.3967471424281461, -3.8602844424281457, -3.8602844424281457, -3.8602844424281457, -3.5382734124281461, -3.102396342428146, -3.5439961124281458, -4.1546352424281459, -3.8602844424281457, -3.6272411524281458, -3.6272411524281458]
								}, {
									"case":	3,
									"scores":	[-2.1727121524281454, -1.5508864524281449, -1.5032511524281458, -3.5844269884281457, -3.6092085863281458, -3.1748391903281457, -3.8602844424281457, -3.102396342428146, -4.1546352424281459, -3.3967471424281461, -3.8602844424281457, -3.8602844424281457, -3.8602844424281457, -3.5382734124281461, -3.102396342428146, -3.5439961124281458, -4.1546352424281459, -3.8602844424281457, -3.6272411524281458, -3.6272411524281458]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-2.1727121524281454, -1.5508864524281449, -1.5032511524281458, -3.5844269884281457, -3.6092085863281458, -3.1748391903281457, -3.8602844424281457, -3.102396342428146, -4.1546352424281459, -3.3967471424281461, -3.8602844424281457, -3.8602844424281457, -3.8602844424281457, -3.5382734124281461, -3.102396342428146, -3.5439961124281458, -4.1546352424281459, -3.8602844424281457, -3.6272411524281458, -3.6272411524281458]
								}]
						}, {
							"switch":	38,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	375,
							"begin_column":	3,
							"end_line":	377,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L375\", 20, &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &((*zopened).type), sizeof ((*zopened).type), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &((*zopened).refcount__gc), sizeof ((*zopened).refcount__gc), &((*zopened).is_ref__gc), sizeof ((*zopened).is_ref__gc)))\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n", "if (!__is_neg(\"\", \"L375\", 20, &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &((*zopened).type), sizeof ((*zopened).type), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &((*zopened).refcount__gc), sizeof ((*zopened).refcount__gc), &((*zopened).is_ref__gc), sizeof ((*zopened).is_ref__gc)) && ((*zopened).type == 6 && opened_path)) {\n    *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4526495732749751, -5.8308238732749755, -5.783188573274975, -7.8643644092749749, -7.8891460071749755, -7.4547766111749754, -8.1402218632749754, -7.3823337632749757, -8.4345726632749756, -7.6766845632749749, -8.1402218632749754, -8.1402218632749754, -8.1402218632749754, -7.8182108332749749, -7.3823337632749757, -7.8239335332749755, -8.4345726632749756, -8.1402218632749754, -7.9071785732749751, -7.9071785732749751]
								}, {
									"case":	2,
									"scores":	[-4.7639562032749749, -4.1421305032749753, -4.0944952032749748, -6.1756710392749756, -6.2004526371749753, -5.7660832411749752, -6.4515284932749752, -5.6936403932749755, -6.7458792932749754, -5.9879911932749756, -6.4515284932749752, -6.4515284932749752, -6.4515284932749752, -6.1295174632749756, -5.6936403932749755, -6.1352401632749753, -6.7458792932749754, -6.4515284932749752, -6.2184852032749758, -6.2184852032749758]
								}]
						}]
				}, {
					"line":	379,
					"switches":	[{
							"switch":	39,
							"types":	[[], [], [], [], [654], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], [], [], [], [604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653], [267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], [], [], [], [], [], []],
							"begin_line":	380,
							"begin_column":	1,
							"end_line":	380,
							"end_column":	1,
							"patch_codes":	["memset(&(*zopened).is_ref__gc, 0, sizeof (*(&(*zopened).is_ref__gc)))", "memset(&(*zopened).refcount__gc, 0, sizeof (*(&(*zopened).refcount__gc)))", "memset(&(*zopened).type, 0, sizeof (*(&(*zopened).type)))", "memset(&(*zopened).value, 0, sizeof (*(&(*zopened).value)))", "memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(stream, 0, sizeof (*(stream)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us, 0, sizeof (*(us)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L380\", 41, &(us), sizeof (us), &(stream), sizeof (stream), &(us->object), sizeof (us->object), &(stream->wrapperdata), sizeof (stream->wrapperdata), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(us->wrapper), sizeof (us->wrapper), &(mode), sizeof (mode), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(stream->ops), sizeof (stream->ops), &(stream->abstract), sizeof (stream->abstract), &(stream->wrapper), sizeof (stream->wrapper), &(stream->wrapperthis), sizeof (stream->wrapperthis), &(stream->fgetss_state), sizeof (stream->fgetss_state), &(stream->is_persistent), sizeof (stream->is_persistent), &(stream->rsrc_id), sizeof (stream->rsrc_id), &(stream->in_free), sizeof (stream->in_free), &(stream->fclose_stdiocast), sizeof (stream->fclose_stdiocast), &(stream->stdiocast), sizeof (stream->stdiocast), &(stream->orig_path), sizeof (stream->orig_path), &(stream->context), sizeof (stream->context), &(stream->flags), sizeof (stream->flags), &(stream->position), sizeof (stream->position), &(stream->readbuf), sizeof (stream->readbuf), &(stream->readbuflen), sizeof (stream->readbuflen), &(stream->readpos), sizeof (stream->readpos), &(stream->writepos), sizeof (stream->writepos), &(stream->chunk_size), sizeof (stream->chunk_size), &(stream->eof), sizeof (stream->eof), &(stream->enclosing_stream), sizeof (stream->enclosing_stream)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	2,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	3,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	4,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	5,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	6,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	7,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	8,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	9,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	10,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	11,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	12,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	13,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	14,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	15,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	16,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	17,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	18,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	19,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	20,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	21,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	22,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	23,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	24,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	25,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	26,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	27,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	28,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	29,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	30,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	31,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	32,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	33,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	34,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	35,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	36,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	37,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	38,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	39,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	40,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	41,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	42,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	43,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	44,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	45,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	46,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	47,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	48,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	49,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	50,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	51,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	52,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	53,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	54,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	55,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	56,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	57,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	58,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	59,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	60,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	61,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	62,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	63,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	64,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	65,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	66,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	67,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	68,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	69,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	70,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	71,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	72,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	73,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	74,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	75,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	76,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	77,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	78,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	79,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	80,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	81,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	82,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	83,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	84,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	85,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	86,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	87,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	88,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	89,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	90,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	91,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	92,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	93,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	94,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	95,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	96,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	97,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	98,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	99,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	100,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	101,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	102,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	103,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	104,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	105,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	106,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	107,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	108,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	109,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	110,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	111,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	112,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	113,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	114,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	115,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	116,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	117,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	118,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	119,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	120,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	121,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	122,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	123,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	124,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	125,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	126,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	127,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	128,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	129,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	130,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	131,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	132,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	133,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	134,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	135,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	136,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	137,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	138,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	139,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	140,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	141,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	142,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	143,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	144,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	145,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	146,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	147,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	148,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	149,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	150,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	151,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	152,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	153,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	154,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	155,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	156,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	157,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	158,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	159,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	160,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	161,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	162,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	163,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	164,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	165,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	166,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	167,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	168,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	169,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	170,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	171,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	172,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	173,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	174,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	175,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	176,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	177,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	178,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	179,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	180,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	181,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	182,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	183,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	184,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	185,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	186,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	187,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	188,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	189,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	190,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	191,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	192,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	193,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	194,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	195,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	196,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	197,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	198,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	199,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	200,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	201,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	202,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	203,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	204,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	205,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	206,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	207,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	208,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	209,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	210,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	211,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	212,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	213,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	214,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	215,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	216,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	217,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	218,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	219,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	220,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	221,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	222,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	223,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	224,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	225,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	226,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	227,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	228,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	229,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	230,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	231,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	232,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	233,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	234,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	235,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	236,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	237,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	238,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	239,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	240,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	241,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	242,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	243,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	244,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	245,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	246,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	247,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	248,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	249,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	250,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	251,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	252,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	253,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	254,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	255,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	256,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	257,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	258,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	259,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	260,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	261,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	262,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	263,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	264,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	265,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	266,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	267,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	268,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	269,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	270,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	271,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	272,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	273,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	274,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	275,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	276,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	277,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	278,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	279,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	280,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	281,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	282,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	283,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	284,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	285,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	286,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	287,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	288,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	289,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	290,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	291,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	292,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	293,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	294,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	295,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	296,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	297,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	298,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	299,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	300,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	301,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	302,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	303,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	304,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	305,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	306,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	307,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	308,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	309,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	310,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	311,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	312,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	313,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	314,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	315,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	316,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	317,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	318,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	319,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	320,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	321,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	322,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	323,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	324,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	325,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	326,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	327,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	328,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	329,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	330,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	331,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	332,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	333,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	334,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	335,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	336,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	337,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	338,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	339,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	340,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	341,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	342,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	343,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	344,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	345,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	346,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	347,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	348,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	349,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	350,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	351,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	352,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	353,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	354,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	355,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	356,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	357,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	358,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	359,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	360,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	361,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	362,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	363,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	364,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	365,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	366,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	367,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	368,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	369,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	370,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	371,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	372,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	373,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	374,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	375,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	376,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	377,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	378,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	379,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	380,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	381,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	382,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	383,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	384,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	385,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	386,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	387,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	388,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	389,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	390,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	391,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	392,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	393,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	394,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	395,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	396,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	397,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	398,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	399,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	400,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	401,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	402,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	403,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	404,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	405,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	406,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	407,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	408,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	409,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	410,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	411,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	412,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	413,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	414,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	415,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	416,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	417,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	418,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	419,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	420,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	421,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	422,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	423,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	424,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	425,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	426,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	427,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	428,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	429,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	430,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	431,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	432,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	433,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	434,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	435,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	436,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	437,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	438,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	439,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	440,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	441,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	442,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	443,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	444,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	445,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	446,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	447,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	448,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	449,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	450,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	451,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	452,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	453,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	454,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	455,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	456,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	457,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	458,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	459,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	460,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	461,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	462,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	463,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	464,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	465,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	466,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	467,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	468,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	469,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	470,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	471,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	472,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	473,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	474,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	475,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	476,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	477,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	478,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	479,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	480,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	481,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	482,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	483,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	484,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	485,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	486,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	487,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	488,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	489,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	490,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	491,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	492,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	493,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	494,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	495,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	496,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	497,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	498,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	499,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	500,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	501,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	502,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	503,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	504,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	505,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	506,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	507,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	508,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	509,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	510,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	511,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	512,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	513,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	514,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	515,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	516,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	517,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	518,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	519,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	520,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	521,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	522,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	523,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	524,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	525,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	526,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	527,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	528,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	529,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	530,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	531,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	532,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	533,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	534,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	535,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	536,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	537,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	538,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	539,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	540,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	541,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	542,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	543,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	544,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	545,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	546,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	547,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	548,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	549,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	550,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	551,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	552,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	553,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	554,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	555,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	556,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	557,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	558,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	559,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	560,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	561,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	562,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	563,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	564,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	565,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	566,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	567,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	568,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	569,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	570,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	571,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	572,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	573,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	574,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	575,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	576,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	577,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	578,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	579,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	580,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	581,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	582,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	583,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	584,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	585,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	586,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	587,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	588,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	589,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	590,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	591,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	592,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	593,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	594,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	595,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	596,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	597,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	598,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	599,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	600,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	601,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	602,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	603,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	604,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	605,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	606,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	607,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	608,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	609,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	610,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	611,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	612,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	613,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	614,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	615,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	616,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	617,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	618,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	619,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	620,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	621,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	622,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	623,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	624,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	625,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	626,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	627,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	628,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	629,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	630,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	631,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	632,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	633,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	634,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	635,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	636,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	637,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	638,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	639,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	640,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	641,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	642,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	643,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	644,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	645,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	646,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	647,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	648,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	649,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	650,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	651,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	652,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	653,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	654,
									"scores":	[-8.4547291480574565, -7.1215908680574556, -8.1916717311574558, -9.537916982157455, -9.1310939571574554, -8.8850550433574558, -9.1909222803574568, -9.2046379171574557, -9.9081397311574548, -8.9019829603574561, -9.0939935571574555, -8.8479546433574559, -9.0939935571574555, -9.0939935571574555, -9.0939935571574555, -8.5930585571574554, -8.8479546433574559, -8.5950091603574563, -9.1310939571574554, -9.0939935571574555, -9.9081397311574548, -9.8729899343574559, -9.9081397311574548, -9.8729899343574559, -9.6621008173574552, -9.6621008173574552, -9.6621008173574552, -9.6621008173574552, -9.6621008173574552, -9.9081397311574548, -9.8729899343574559, -9.9081397311574548, -9.6621008173574552, -9.6621008173574552, -9.8729899343574559, -9.1611658173574568, -9.6621008173574552, -9.6621008173574552, -9.6621008173574552, -9.6621008173574552, -9.9081397311574548]
								}]
						}, {
							"switch":	40,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	380,
							"begin_column":	3,
							"end_line":	380,
							"end_column":	29,
							"patch_codes":	["if (!__is_neg(\"\", \"L380\", 41, &(us), sizeof (us), &(stream), sizeof (stream), &(us->object), sizeof (us->object), &(stream->wrapperdata), sizeof (stream->wrapperdata), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(us->wrapper), sizeof (us->wrapper), &(mode), sizeof (mode), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(stream->ops), sizeof (stream->ops), &(stream->abstract), sizeof (stream->abstract), &(stream->wrapper), sizeof (stream->wrapper), &(stream->wrapperthis), sizeof (stream->wrapperthis), &(stream->fgetss_state), sizeof (stream->fgetss_state), &(stream->is_persistent), sizeof (stream->is_persistent), &(stream->rsrc_id), sizeof (stream->rsrc_id), &(stream->in_free), sizeof (stream->in_free), &(stream->fclose_stdiocast), sizeof (stream->fclose_stdiocast), &(stream->stdiocast), sizeof (stream->stdiocast), &(stream->orig_path), sizeof (stream->orig_path), &(stream->context), sizeof (stream->context), &(stream->flags), sizeof (stream->flags), &(stream->position), sizeof (stream->position), &(stream->readbuf), sizeof (stream->readbuf), &(stream->readbuflen), sizeof (stream->readbuflen), &(stream->readpos), sizeof (stream->readpos), &(stream->writepos), sizeof (stream->writepos), &(stream->chunk_size), sizeof (stream->chunk_size), &(stream->eof), sizeof (stream->eof), &(stream->enclosing_stream), sizeof (stream->enclosing_stream)))\n    stream->wrapperdata = us->object;\n", "{\n}\n", "stream->wrapperdata = (&args)->object", "stream->wrapperdata = (&call_result)->object", "stream->wrapperdata = (&context)->object", "stream->wrapperdata = (&filename)->object", "stream->wrapperdata = (&mode)->object", "stream->wrapperdata = (&old_in_user_include)->object", "stream->wrapperdata = (&opened_path)->object", "stream->wrapperdata = (&options)->object", "stream->wrapperdata = (&stream)->object", "stream->wrapperdata = (&us)->object", "stream->wrapperdata = (&uwrap)->object", "stream->wrapperdata = (&wrapper)->object", "stream->wrapperdata = (&zfilename)->object", "stream->wrapperdata = (&zfuncname)->object", "stream->wrapperdata = (&zmode)->object", "stream->wrapperdata = (&zopened)->object", "stream->wrapperdata = (&zoptions)->object", "stream->wrapperdata = (&zretval)->object", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.599504011957456, -6.0858533538574564, -7.2985629759574557, -7.6839019969574558, -7.5629779559574564, -6.8050898559574566, -6.9802905664574562, -7.0588416664574556, -7.7934719659574565, -6.9927697019574566, -7.2686271559574562, -6.5107390559574565, -7.2686271559574562, -7.2686271559574562, -7.2686271559574562, -6.9466161259574566, -6.5107390559574565, -6.9523388259574563, -7.5629779559574564, -7.2686271559574562, -7.7934719659574565, -7.5048438659574561, -7.7934719659574565, -7.5048438659574561, -7.0355838659574559, -7.0355838659574559, -7.0355838659574559, -7.0355838659574559, -7.0355838659574559, -7.7934719659574565, -7.5048438659574561, -7.7934719659574565, -7.0355838659574559, -7.0355838659574559, -7.5048438659574561, -6.7135728359574562, -7.0355838659574559, -7.0355838659574559, -7.0355838659574559, -7.0355838659574559, -7.7934719659574565]
								}, {
									"case":	2,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	3,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	4,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	5,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	6,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	7,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	8,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	9,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	10,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	11,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	12,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	13,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	14,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	15,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	16,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	17,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	18,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	19,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	20,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	21,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	22,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	23,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	24,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	25,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	26,
									"scores":	[-5.7908747859574561]
								}, {
									"case":	27,
									"scores":	[-5.7908747859574561]
								}]
						}]
				}, {
					"line":	380,
					"switches":	[{
							"switch":	41,
							"types":	[[], [], [], [], [653], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265], [], [], [], [603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652], [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], [], [], [], [], [], []],
							"begin_line":	381,
							"begin_column":	1,
							"end_line":	381,
							"end_column":	1,
							"patch_codes":	["memset(&(*zopened).is_ref__gc, 0, sizeof (*(&(*zopened).is_ref__gc)))", "memset(&(*zopened).refcount__gc, 0, sizeof (*(&(*zopened).refcount__gc)))", "memset(&(*zopened).type, 0, sizeof (*(&(*zopened).type)))", "memset(&(*zopened).value, 0, sizeof (*(&(*zopened).value)))", "memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(stream, 0, sizeof (*(stream)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L381\", 41, &(stream), sizeof (stream), &(stream->wrapperdata), sizeof (stream->wrapperdata), &(us), sizeof (us), &(us->object), sizeof (us->object), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(us->wrapper), sizeof (us->wrapper), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(mode), sizeof (mode), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(stream->ops), sizeof (stream->ops), &(stream->abstract), sizeof (stream->abstract), &(stream->wrapper), sizeof (stream->wrapper), &(stream->wrapperthis), sizeof (stream->wrapperthis), &(stream->fgetss_state), sizeof (stream->fgetss_state), &(stream->is_persistent), sizeof (stream->is_persistent), &(stream->rsrc_id), sizeof (stream->rsrc_id), &(stream->in_free), sizeof (stream->in_free), &(stream->fclose_stdiocast), sizeof (stream->fclose_stdiocast), &(stream->stdiocast), sizeof (stream->stdiocast), &(stream->orig_path), sizeof (stream->orig_path), &(stream->context), sizeof (stream->context), &(stream->flags), sizeof (stream->flags), &(stream->position), sizeof (stream->position), &(stream->readbuf), sizeof (stream->readbuf), &(stream->readbuflen), sizeof (stream->readbuflen), &(stream->readpos), sizeof (stream->readpos), &(stream->writepos), sizeof (stream->writepos), &(stream->chunk_size), sizeof (stream->chunk_size), &(stream->eof), sizeof (stream->eof), &(stream->enclosing_stream), sizeof (stream->enclosing_stream)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	2,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	3,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	4,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	5,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	6,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	7,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	8,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	9,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	10,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	11,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	12,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	13,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	14,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	15,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	16,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	17,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	18,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	19,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	20,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	21,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	22,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	23,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	24,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	25,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	26,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	27,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	28,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	29,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	30,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	31,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	32,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	33,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	34,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	35,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	36,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	37,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	38,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	39,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	40,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	41,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	42,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	43,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	44,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	45,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	46,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	47,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	48,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	49,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	50,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	51,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	52,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	53,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	54,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	55,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	56,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	57,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	58,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	59,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	60,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	61,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	62,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	63,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	64,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	65,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	66,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	67,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	68,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	69,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	70,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	71,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	72,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	73,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	74,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	75,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	76,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	77,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	78,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	79,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	80,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	81,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	82,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	83,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	84,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	85,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	86,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	87,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	88,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	89,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	90,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	91,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	92,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	93,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	94,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	95,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	96,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	97,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	98,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	99,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	100,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	101,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	102,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	103,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	104,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	105,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	106,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	107,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	108,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	109,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	110,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	111,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	112,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	113,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	114,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	115,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	116,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	117,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	118,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	119,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	120,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	121,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	122,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	123,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	124,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	125,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	126,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	127,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	128,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	129,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	130,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	131,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	132,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	133,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	134,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	135,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	136,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	137,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	138,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	139,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	140,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	141,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	142,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	143,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	144,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	145,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	146,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	147,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	148,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	149,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	150,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	151,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	152,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	153,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	154,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	155,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	156,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	157,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	158,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	159,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	160,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	161,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	162,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	163,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	164,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	165,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	166,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	167,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	168,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	169,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	170,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	171,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	172,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	173,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	174,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	175,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	176,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	177,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	178,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	179,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	180,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	181,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	182,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	183,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	184,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	185,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	186,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	187,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	188,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	189,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	190,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	191,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	192,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	193,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	194,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	195,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	196,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	197,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	198,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	199,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	200,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	201,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	202,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	203,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	204,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	205,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	206,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	207,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	208,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	209,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	210,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	211,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	212,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	213,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	214,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	215,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	216,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	217,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	218,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	219,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	220,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	221,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	222,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	223,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	224,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	225,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	226,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	227,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	228,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	229,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	230,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	231,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	232,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	233,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	234,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	235,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	236,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	237,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	238,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	239,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	240,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	241,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	242,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	243,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	244,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	245,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	246,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	247,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	248,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	249,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	250,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	251,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	252,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	253,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	254,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	255,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	256,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	257,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	258,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	259,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	260,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	261,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	262,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	263,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	264,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	265,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	266,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	267,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	268,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	269,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	270,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	271,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	272,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	273,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	274,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	275,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	276,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	277,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	278,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	279,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	280,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	281,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	282,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	283,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	284,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	285,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	286,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	287,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	288,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	289,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	290,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	291,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	292,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	293,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	294,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	295,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	296,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	297,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	298,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	299,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	300,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	301,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	302,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	303,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	304,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	305,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	306,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	307,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	308,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	309,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	310,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	311,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	312,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	313,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	314,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	315,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	316,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	317,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	318,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	319,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	320,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	321,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	322,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	323,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	324,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	325,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	326,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	327,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	328,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	329,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	330,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	331,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	332,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	333,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	334,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	335,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	336,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	337,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	338,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	339,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	340,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	341,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	342,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	343,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	344,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	345,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	346,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	347,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	348,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	349,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	350,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	351,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	352,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	353,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	354,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	355,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	356,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	357,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	358,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	359,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	360,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	361,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	362,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	363,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	364,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	365,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	366,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	367,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	368,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	369,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	370,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	371,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	372,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	373,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	374,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	375,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	376,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	377,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	378,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	379,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	380,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	381,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	382,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	383,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	384,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	385,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	386,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	387,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	388,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	389,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	390,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	391,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	392,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	393,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	394,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	395,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	396,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	397,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	398,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	399,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	400,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	401,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	402,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	403,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	404,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	405,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	406,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	407,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	408,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	409,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	410,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	411,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	412,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	413,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	414,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	415,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	416,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	417,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	418,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	419,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	420,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	421,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	422,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	423,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	424,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	425,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	426,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	427,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	428,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	429,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	430,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	431,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	432,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	433,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	434,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	435,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	436,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	437,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	438,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	439,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	440,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	441,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	442,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	443,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	444,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	445,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	446,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	447,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	448,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	449,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	450,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	451,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	452,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	453,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	454,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	455,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	456,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	457,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	458,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	459,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	460,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	461,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	462,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	463,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	464,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	465,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	466,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	467,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	468,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	469,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	470,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	471,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	472,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	473,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	474,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	475,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	476,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	477,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	478,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	479,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	480,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	481,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	482,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	483,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	484,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	485,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	486,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	487,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	488,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	489,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	490,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	491,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	492,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	493,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	494,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	495,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	496,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	497,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	498,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	499,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	500,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	501,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	502,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	503,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	504,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	505,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	506,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	507,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	508,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	509,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	510,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	511,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	512,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	513,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	514,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	515,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	516,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	517,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	518,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	519,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	520,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	521,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	522,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	523,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	524,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	525,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	526,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	527,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	528,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	529,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	530,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	531,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	532,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	533,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	534,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	535,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	536,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	537,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	538,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	539,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	540,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	541,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	542,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	543,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	544,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	545,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	546,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	547,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	548,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	549,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	550,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	551,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	552,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	553,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	554,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	555,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	556,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	557,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	558,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	559,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	560,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	561,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	562,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	563,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	564,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	565,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	566,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	567,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	568,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	569,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	570,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	571,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	572,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	573,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	574,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	575,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	576,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	577,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	578,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	579,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	580,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	581,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	582,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	583,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	584,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	585,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	586,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	587,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	588,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	589,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	590,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	591,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	592,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	593,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	594,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	595,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	596,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	597,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	598,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	599,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	600,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	601,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	602,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	603,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	604,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	605,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	606,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	607,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	608,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	609,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	610,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	611,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	612,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	613,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	614,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	615,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	616,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	617,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	618,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	619,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	620,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	621,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	622,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	623,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	624,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	625,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	626,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	627,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	628,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	629,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	630,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	631,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	632,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	633,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	634,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	635,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	636,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	637,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	638,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	639,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	640,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	641,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	642,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	643,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	644,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	645,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	646,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	647,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	648,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	649,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	650,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	651,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	652,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	653,
									"scores":	[-8.4216690387399353, -7.8086036738399365, -8.8965481498399352, -9.15531654383994, -8.5923460498399358, -8.3463071360399361, -9.369391823839937, -8.6521743730399372, -8.6658900098399361, -8.3632350530399364, -8.5552456498399359, -8.3092067360399362, -8.5552456498399359, -8.5552456498399359, -8.5552456498399359, -8.0543106498399357, -8.3092067360399362, -8.0562612530399349, -8.5923460498399358, -8.5552456498399359, -9.369391823839937, -9.3342420270399362, -9.369391823839937, -9.3342420270399362, -9.1233529100399373, -9.1233529100399373, -9.1233529100399373, -9.1233529100399373, -9.1233529100399373, -9.369391823839937, -9.3342420270399362, -9.369391823839937, -9.1233529100399373, -9.1233529100399373, -9.3342420270399362, -8.6224179100399354, -9.1233529100399373, -9.1233529100399373, -9.1233529100399373, -9.1233529100399373, -9.369391823839937]
								}]
						}, {
							"switch":	42,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [6, 7], [], [], [], [], [2, 3, 4], [], [], [5]],
							"begin_line":	381,
							"begin_column":	3,
							"end_line":	381,
							"end_column":	36,
							"patch_codes":	["if (!__is_neg(\"\", \"L381\", 41, &(stream), sizeof (stream), &(stream->wrapperdata), sizeof (stream->wrapperdata), &(us), sizeof (us), &(us->object), sizeof (us->object), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(us->wrapper), sizeof (us->wrapper), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(mode), sizeof (mode), &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(zfuncname), sizeof (zfuncname), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(stream->ops), sizeof (stream->ops), &(stream->abstract), sizeof (stream->abstract), &(stream->wrapper), sizeof (stream->wrapper), &(stream->wrapperthis), sizeof (stream->wrapperthis), &(stream->fgetss_state), sizeof (stream->fgetss_state), &(stream->is_persistent), sizeof (stream->is_persistent), &(stream->rsrc_id), sizeof (stream->rsrc_id), &(stream->in_free), sizeof (stream->in_free), &(stream->fclose_stdiocast), sizeof (stream->fclose_stdiocast), &(stream->stdiocast), sizeof (stream->stdiocast), &(stream->orig_path), sizeof (stream->orig_path), &(stream->context), sizeof (stream->context), &(stream->flags), sizeof (stream->flags), &(stream->position), sizeof (stream->position), &(stream->readbuf), sizeof (stream->readbuf), &(stream->readbuflen), sizeof (stream->readbuflen), &(stream->readpos), sizeof (stream->readpos), &(stream->writepos), sizeof (stream->writepos), &(stream->chunk_size), sizeof (stream->chunk_size), &(stream->eof), sizeof (stream->eof), &(stream->enclosing_stream), sizeof (stream->enclosing_stream)))\n    zval_add_ref(&stream->wrapperdata);\n", "zval_update_constant(&stream->wrapperdata, 0)", "zval_update_constant_inline_change(&stream->wrapperdata, 0)", "zval_update_constant_no_inline_change(&stream->wrapperdata, 0)", "{\n}\n", "_zval_internal_ptr_dtor(&stream->wrapperdata)", "_zval_ptr_dtor(&stream->wrapperdata)", "zval_add_ref(&(&args)->wrapperdata)", "zval_add_ref(&(&call_result)->wrapperdata)", "zval_add_ref(&(&context)->wrapperdata)", "zval_add_ref(&(&filename)->wrapperdata)", "zval_add_ref(&(&mode)->wrapperdata)", "zval_add_ref(&(&old_in_user_include)->wrapperdata)", "zval_add_ref(&(&opened_path)->wrapperdata)", "zval_add_ref(&(&options)->wrapperdata)", "zval_add_ref(&(&stream)->wrapperdata)", "zval_add_ref(&(&us)->wrapperdata)", "zval_add_ref(&(&uwrap)->wrapperdata)", "zval_add_ref(&(&wrapper)->wrapperdata)", "zval_add_ref(&(&zfilename)->wrapperdata)", "zval_add_ref(&(&zfuncname)->wrapperdata)", "zval_add_ref(&(&zmode)->wrapperdata)", "zval_add_ref(&(&zopened)->wrapperdata)", "zval_add_ref(&(&zoptions)->wrapperdata)", "zval_add_ref(&(&zretval)->wrapperdata)", "zval_add_ref(&(stream)->wrapperdata)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6301170791399366, -6.9665604986399368, -7.7379507851399367, -7.9320252586399365, -8.072094248639937, -7.3142061486399363, -8.3025882586399362, -7.4894068591399368, -7.5679579591399371, -7.5018859946399363, -7.7777434486399368, -7.0198553486399362, -7.7777434486399368, -7.7777434486399368, -7.7777434486399368, -7.4557324186399363, -7.0198553486399362, -7.461455118639936, -8.072094248639937, -7.7777434486399368, -8.3025882586399362, -8.0139601586399358, -8.3025882586399362, -8.0139601586399358, -7.5447001586399365, -7.5447001586399365, -7.5447001586399365, -7.5447001586399365, -7.5447001586399365, -8.3025882586399362, -8.0139601586399358, -8.3025882586399362, -7.5447001586399365, -7.5447001586399365, -8.0139601586399358, -7.2226891286399368, -7.5447001586399365, -7.5447001586399365, -7.5447001586399365, -7.5447001586399365, -8.3025882586399362]
								}, {
									"case":	2,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	3,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	4,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	5,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	6,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	7,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	8,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	9,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	10,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	11,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	12,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	13,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	14,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	15,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	16,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	17,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	18,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	19,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	20,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	21,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	22,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	23,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	24,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	25,
									"scores":	[-5.7706720786399366]
								}, {
									"case":	26,
									"scores":	[-5.7706720786399366]
								}]
						}]
				}, {
					"line":	369,
					"switches":	[{
							"switch":	32,
							"types":	[[], [], [], [], [615], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227], [], [], [], [565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614], [228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564], [], [], [], [], [], []],
							"begin_line":	370,
							"begin_column":	0,
							"end_line":	370,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us, 0, sizeof (*(us)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper, 0, sizeof (*(wrapper)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L370\", 17, &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(old_in_user_include), sizeof (old_in_user_include), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	2,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	3,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	4,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	5,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	6,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	7,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	8,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	9,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	10,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	11,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	12,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	13,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	14,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	15,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	16,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	17,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	18,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	19,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	20,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	21,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	22,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	23,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	24,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	25,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	26,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	27,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	28,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	29,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	30,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	31,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	32,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	33,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	34,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	35,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	36,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	37,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	38,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	39,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	40,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	41,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	42,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	43,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	44,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	45,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	46,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	47,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	48,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	49,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	50,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	51,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	52,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	53,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	54,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	55,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	56,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	57,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	58,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	59,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	60,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	61,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	62,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	63,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	64,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	65,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	66,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	67,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	68,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	69,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	70,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	71,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	72,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	73,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	74,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	75,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	76,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	77,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	78,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	79,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	80,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	81,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	82,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	83,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	84,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	85,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	86,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	87,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	88,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	89,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	90,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	91,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	92,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	93,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	94,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	95,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	96,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	97,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	98,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	99,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	100,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	101,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	102,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	103,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	104,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	105,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	106,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	107,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	108,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	109,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	110,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	111,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	112,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	113,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	114,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	115,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	116,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	117,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	118,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	119,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	120,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	121,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	122,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	123,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	124,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	125,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	126,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	127,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	128,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	129,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	130,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	131,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	132,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	133,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	134,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	135,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	136,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	137,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	138,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	139,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	140,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	141,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	142,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	143,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	144,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	145,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	146,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	147,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	148,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	149,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	150,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	151,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	152,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	153,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	154,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	155,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	156,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	157,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	158,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	159,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	160,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	161,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	162,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	163,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	164,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	165,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	166,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	167,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	168,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	169,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	170,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	171,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	172,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	173,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	174,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	175,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	176,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	177,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	178,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	179,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	180,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	181,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	182,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	183,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	184,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	185,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	186,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	187,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	188,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	189,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	190,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	191,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	192,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	193,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	194,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	195,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	196,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	197,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	198,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	199,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	200,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	201,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	202,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	203,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	204,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	205,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	206,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	207,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	208,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	209,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	210,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	211,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	212,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	213,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	214,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	215,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	216,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	217,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	218,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	219,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	220,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	221,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	222,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	223,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	224,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	225,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	226,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	227,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	228,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	229,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	230,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	231,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	232,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	233,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	234,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	235,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	236,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	237,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	238,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	239,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	240,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	241,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	242,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	243,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	244,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	245,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	246,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	247,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	248,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	249,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	250,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	251,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	252,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	253,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	254,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	255,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	256,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	257,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	258,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	259,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	260,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	261,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	262,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	263,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	264,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	265,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	266,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	267,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	268,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	269,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	270,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	271,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	272,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	273,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	274,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	275,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	276,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	277,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	278,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	279,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	280,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	281,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	282,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	283,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	284,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	285,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	286,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	287,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	288,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	289,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	290,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	291,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	292,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	293,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	294,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	295,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	296,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	297,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	298,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	299,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	300,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	301,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	302,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	303,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	304,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	305,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	306,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	307,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	308,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	309,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	310,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	311,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	312,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	313,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	314,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	315,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	316,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	317,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	318,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	319,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	320,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	321,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	322,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	323,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	324,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	325,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	326,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	327,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	328,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	329,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	330,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	331,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	332,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	333,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	334,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	335,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	336,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	337,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	338,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	339,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	340,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	341,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	342,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	343,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	344,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	345,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	346,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	347,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	348,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	349,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	350,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	351,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	352,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	353,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	354,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	355,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	356,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	357,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	358,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	359,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	360,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	361,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	362,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	363,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	364,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	365,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	366,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	367,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	368,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	369,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	370,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	371,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	372,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	373,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	374,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	375,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	376,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	377,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	378,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	379,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	380,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	381,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	382,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	383,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	384,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	385,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	386,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	387,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	388,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	389,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	390,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	391,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	392,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	393,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	394,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	395,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	396,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	397,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	398,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	399,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	400,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	401,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	402,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	403,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	404,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	405,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	406,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	407,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	408,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	409,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	410,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	411,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	412,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	413,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	414,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	415,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	416,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	417,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	418,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	419,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	420,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	421,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	422,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	423,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	424,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	425,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	426,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	427,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	428,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	429,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	430,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	431,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	432,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	433,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	434,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	435,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	436,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	437,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	438,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	439,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	440,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	441,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	442,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	443,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	444,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	445,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	446,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	447,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	448,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	449,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	450,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	451,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	452,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	453,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	454,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	455,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	456,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	457,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	458,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	459,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	460,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	461,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	462,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	463,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	464,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	465,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	466,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	467,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	468,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	469,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	470,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	471,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	472,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	473,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	474,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	475,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	476,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	477,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	478,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	479,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	480,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	481,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	482,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	483,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	484,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	485,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	486,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	487,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	488,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	489,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	490,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	491,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	492,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	493,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	494,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	495,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	496,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	497,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	498,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	499,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	500,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	501,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	502,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	503,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	504,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	505,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	506,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	507,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	508,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	509,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	510,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	511,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	512,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	513,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	514,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	515,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	516,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	517,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	518,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	519,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	520,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	521,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	522,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	523,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	524,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	525,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	526,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	527,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	528,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	529,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	530,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	531,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	532,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	533,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	534,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	535,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	536,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	537,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	538,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	539,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	540,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	541,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	542,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	543,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	544,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	545,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	546,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	547,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	548,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	549,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	550,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	551,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	552,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	553,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	554,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	555,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	556,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	557,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	558,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	559,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	560,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	561,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	562,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	563,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	564,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	565,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	566,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	567,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	568,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	569,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	570,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	571,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	572,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	573,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	574,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	575,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	576,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	577,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	578,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	579,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	580,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	581,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	582,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	583,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	584,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	585,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	586,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	587,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	588,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	589,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	590,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	591,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	592,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	593,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	594,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	595,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	596,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	597,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	598,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	599,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	600,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	601,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	602,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	603,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	604,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	605,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	606,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	607,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	608,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	609,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	610,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	611,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	612,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	613,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	614,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	615,
									"scores":	[-9.16764237573048, -8.28576758093048, -7.7999729889304827, -9.40604183663048, -11.499900764630482, -9.17748475793048, -9.04036053273048, -10.695641164730484, -9.55159078573048, -9.3055518719304828, -10.369798354730481, -10.369798354730481, -9.86886335473048, -9.87081395793048, -10.123759440930481, -10.406898754730483, -10.369798354730481]
								}]
						}, {
							"switch":	33,
							"types":	[[17], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [], [4, 5, 6]],
							"begin_line":	370,
							"begin_column":	2,
							"end_line":	385,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L370\", 17, &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(old_in_user_include), sizeof (old_in_user_include), &(context), sizeof (context), &(uwrap), sizeof (uwrap))) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (((call_result == 0 && zretval != ((void *)0)) || __is_neg(\"\", \"L370\", 17, &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(old_in_user_include), sizeof (old_in_user_include), &(context), sizeof (context), &(uwrap), sizeof (uwrap))) && zval_is_true(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if ((call_result == 0 && zretval != ((void *)0) && zval_is_true(zretval)) || __is_neg(\"\", \"L370\", 17, &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(old_in_user_include), sizeof (old_in_user_include), &(context), sizeof (context), &(uwrap), sizeof (uwrap))) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zval_is_true(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (zretval != ((void *)0) && zval_is_true(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0) && _object_init(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0) && add_next_index_null(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0) && decrement_function(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0) && i_zend_is_true(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0) && increment_function(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0) && lex_scan(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0) && php_output_get_contents(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0) && php_output_get_length(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0) && zend_is_true(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if (call_result == 0 && zretval != ((void *)0) && zend_print_variable(zretval)) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n", "if ((call_result == 0 && zretval != ((void *)0) && zval_is_true(zretval)) && !__is_neg(\"\", \"L370\", 17, &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(old_in_user_include), sizeof (old_in_user_include), &(context), sizeof (context), &(uwrap), sizeof (uwrap))) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.5102650608281429, -1.6728327668281451, -4.2327661368281433, -4.8599049742281446, -5.7598062478281467, -3.7478154368281449, -3.1259897368281448, -5.6326459828281461, -5.0163032268281462, -4.2584151268281456, -5.4353877268281456, -5.4353877268281456, -5.113376696828146, -5.1190993968281457, -4.677499626828145, -5.7297385268281449, -5.4353877268281456]
								}, {
									"case":	2,
									"scores":	[-2.5772197364281437, -1.7397874424281445, -4.299720812428145, -4.9268596498281463, -5.8267609234281457, -3.8147701124281443, -3.1929444124281439, -5.699600658428146, -5.0832579024281452, -4.3253698024281455, -5.5023424024281464, -5.5023424024281464, -5.1803313724281459, -5.1860540724281456, -4.7444543024281458, -5.7966932024281457, -5.5023424024281464]
								}, {
									"case":	3,
									"scores":	[-2.5772197364281437, -1.7397874424281445, -4.299720812428145, -4.9268596498281463, -5.8267609234281457, -3.8147701124281443, -3.1929444124281439, -5.699600658428146, -5.0832579024281452, -4.3253698024281455, -5.5023424024281464, -5.5023424024281464, -5.1803313724281459, -5.1860540724281456, -4.7444543024281458, -5.7966932024281457, -5.5023424024281464]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-2.5772197364281437, -1.7397874424281445, -4.299720812428145, -4.9268596498281463, -5.8267609234281457, -3.8147701124281443, -3.1929444124281439, -5.699600658428146, -5.0832579024281452, -4.3253698024281455, -5.5023424024281464, -5.5023424024281464, -5.1803313724281459, -5.1860540724281456, -4.7444543024281458, -5.7966932024281457, -5.5023424024281464]
								}]
						}, {
							"switch":	43,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	370,
							"begin_column":	2,
							"end_line":	385,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L370\", 17, &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(old_in_user_include), sizeof (old_in_user_include), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    if (call_result == 0 && zretval != ((void *)0) && zval_is_true(zretval)) {\n        stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n        if ((*zopened).type == 6 && opened_path) {\n            *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n        }\n        stream->wrapperdata = us->object;\n        zval_add_ref(&stream->wrapperdata);\n    } else {\n        php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n    }\n", "if (!__is_neg(\"\", \"L370\", 17, &(zretval), sizeof (zretval), &(call_result), sizeof (call_result), &(mode), sizeof (mode), &(us), sizeof (us), &(stream), sizeof (stream), &(opened_path), sizeof (opened_path), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(filename), sizeof (filename), &(old_in_user_include), sizeof (old_in_user_include), &(context), sizeof (context), &(uwrap), sizeof (uwrap)) && (call_result == 0 && zretval != ((void *)0) && zval_is_true(zretval))) {\n    stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode));\n    if ((*zopened).type == 6 && opened_path) {\n        *opened_path = _estrndup(((*zopened).value.str.val), ((*zopened).value.str.len));\n    }\n    stream->wrapperdata = us->object;\n    zval_add_ref(&stream->wrapperdata);\n} else {\n    php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1833096775304819, -5.3458773835304827, -7.9058107535304822, -8.53294959093048, -7.308860864530482, -7.4208600535304825, -6.799034353530482, -9.30569059953048, -8.68934784353048, -7.9314597435304819, -9.1084323435304828, -9.1084323435304828, -8.78642131353048, -8.79214401353048, -8.35054424353048, -9.4027831435304829, -9.1084323435304828]
								}, {
									"case":	2,
									"scores":	[-5.36992756753048, -4.5324952735304818, -7.0924286435304822, -7.7195674809304826, -8.61946875453048, -6.6074779435304816, -5.98565224353048, -8.49230848953048, -7.8759657335304825, -7.1180776335304827, -8.2950502335304837, -8.2950502335304837, -7.9730392035304831, -7.9787619035304829, -7.537162133530483, -8.58940103353048, -8.2950502335304837]
								}]
						}]
				}, {
					"line":	387,
					"switches":	[{
							"switch":	44,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	388,
							"begin_column":	0,
							"end_line":	388,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us, 0, sizeof (*(us)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L388\", 19, &(stream), sizeof (stream), &(us), sizeof (us), &(us->object), sizeof (us->object), &(zretval), sizeof (zretval), &(us->wrapper), sizeof (us->wrapper), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(opened_path), sizeof (opened_path), &(old_in_user_include), sizeof (old_in_user_include), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.316145176212963]
								}, {
									"case":	2,
									"scores":	[-6.316145176212963]
								}, {
									"case":	3,
									"scores":	[-6.316145176212963]
								}, {
									"case":	4,
									"scores":	[-6.316145176212963]
								}, {
									"case":	5,
									"scores":	[-6.316145176212963]
								}, {
									"case":	6,
									"scores":	[-6.316145176212963]
								}, {
									"case":	7,
									"scores":	[-6.316145176212963]
								}, {
									"case":	8,
									"scores":	[-6.316145176212963]
								}, {
									"case":	9,
									"scores":	[-6.316145176212963]
								}, {
									"case":	10,
									"scores":	[-6.316145176212963]
								}, {
									"case":	11,
									"scores":	[-6.316145176212963]
								}, {
									"case":	12,
									"scores":	[-6.316145176212963]
								}, {
									"case":	13,
									"scores":	[-6.316145176212963]
								}, {
									"case":	14,
									"scores":	[-6.316145176212963]
								}, {
									"case":	15,
									"scores":	[-6.316145176212963]
								}, {
									"case":	16,
									"scores":	[-6.316145176212963]
								}, {
									"case":	17,
									"scores":	[-6.316145176212963]
								}, {
									"case":	18,
									"scores":	[-6.316145176212963]
								}, {
									"case":	19,
									"scores":	[-6.316145176212963]
								}, {
									"case":	20,
									"scores":	[-6.316145176212963]
								}, {
									"case":	21,
									"scores":	[-6.316145176212963]
								}, {
									"case":	22,
									"scores":	[-6.316145176212963]
								}, {
									"case":	23,
									"scores":	[-6.316145176212963]
								}, {
									"case":	24,
									"scores":	[-6.316145176212963]
								}, {
									"case":	25,
									"scores":	[-6.316145176212963]
								}, {
									"case":	26,
									"scores":	[-6.316145176212963]
								}, {
									"case":	27,
									"scores":	[-6.316145176212963]
								}, {
									"case":	28,
									"scores":	[-6.316145176212963]
								}, {
									"case":	29,
									"scores":	[-6.316145176212963]
								}, {
									"case":	30,
									"scores":	[-6.316145176212963]
								}, {
									"case":	31,
									"scores":	[-6.316145176212963]
								}, {
									"case":	32,
									"scores":	[-6.316145176212963]
								}, {
									"case":	33,
									"scores":	[-6.316145176212963]
								}, {
									"case":	34,
									"scores":	[-6.316145176212963]
								}, {
									"case":	35,
									"scores":	[-6.316145176212963]
								}, {
									"case":	36,
									"scores":	[-6.316145176212963]
								}, {
									"case":	37,
									"scores":	[-6.316145176212963]
								}, {
									"case":	38,
									"scores":	[-6.316145176212963]
								}, {
									"case":	39,
									"scores":	[-6.316145176212963]
								}, {
									"case":	40,
									"scores":	[-6.316145176212963]
								}, {
									"case":	41,
									"scores":	[-6.316145176212963]
								}, {
									"case":	42,
									"scores":	[-6.316145176212963]
								}, {
									"case":	43,
									"scores":	[-6.316145176212963]
								}, {
									"case":	44,
									"scores":	[-6.316145176212963]
								}, {
									"case":	45,
									"scores":	[-6.316145176212963]
								}, {
									"case":	46,
									"scores":	[-6.316145176212963]
								}, {
									"case":	47,
									"scores":	[-6.316145176212963]
								}, {
									"case":	48,
									"scores":	[-6.316145176212963]
								}, {
									"case":	49,
									"scores":	[-6.316145176212963]
								}, {
									"case":	50,
									"scores":	[-6.316145176212963]
								}, {
									"case":	51,
									"scores":	[-6.316145176212963]
								}, {
									"case":	52,
									"scores":	[-6.316145176212963]
								}, {
									"case":	53,
									"scores":	[-6.316145176212963]
								}, {
									"case":	54,
									"scores":	[-6.316145176212963]
								}, {
									"case":	55,
									"scores":	[-6.316145176212963]
								}, {
									"case":	56,
									"scores":	[-6.316145176212963]
								}, {
									"case":	57,
									"scores":	[-6.316145176212963]
								}, {
									"case":	58,
									"scores":	[-6.316145176212963]
								}, {
									"case":	59,
									"scores":	[-6.316145176212963]
								}, {
									"case":	60,
									"scores":	[-6.316145176212963]
								}, {
									"case":	61,
									"scores":	[-6.316145176212963]
								}, {
									"case":	62,
									"scores":	[-6.316145176212963]
								}, {
									"case":	63,
									"scores":	[-6.316145176212963]
								}, {
									"case":	64,
									"scores":	[-6.316145176212963]
								}, {
									"case":	65,
									"scores":	[-6.316145176212963]
								}, {
									"case":	66,
									"scores":	[-6.316145176212963]
								}, {
									"case":	67,
									"scores":	[-6.316145176212963]
								}, {
									"case":	68,
									"scores":	[-6.316145176212963]
								}, {
									"case":	69,
									"scores":	[-6.316145176212963]
								}, {
									"case":	70,
									"scores":	[-6.316145176212963]
								}, {
									"case":	71,
									"scores":	[-6.316145176212963]
								}, {
									"case":	72,
									"scores":	[-6.316145176212963]
								}, {
									"case":	73,
									"scores":	[-6.316145176212963]
								}, {
									"case":	74,
									"scores":	[-6.316145176212963]
								}, {
									"case":	75,
									"scores":	[-6.316145176212963]
								}, {
									"case":	76,
									"scores":	[-6.316145176212963]
								}, {
									"case":	77,
									"scores":	[-6.316145176212963]
								}, {
									"case":	78,
									"scores":	[-6.316145176212963]
								}, {
									"case":	79,
									"scores":	[-6.316145176212963]
								}, {
									"case":	80,
									"scores":	[-6.316145176212963]
								}, {
									"case":	81,
									"scores":	[-6.316145176212963]
								}, {
									"case":	82,
									"scores":	[-6.316145176212963]
								}, {
									"case":	83,
									"scores":	[-6.316145176212963]
								}, {
									"case":	84,
									"scores":	[-6.316145176212963]
								}, {
									"case":	85,
									"scores":	[-6.316145176212963]
								}, {
									"case":	86,
									"scores":	[-6.316145176212963]
								}, {
									"case":	87,
									"scores":	[-6.316145176212963]
								}, {
									"case":	88,
									"scores":	[-6.316145176212963]
								}, {
									"case":	89,
									"scores":	[-6.316145176212963]
								}, {
									"case":	90,
									"scores":	[-6.316145176212963]
								}, {
									"case":	91,
									"scores":	[-6.316145176212963]
								}, {
									"case":	92,
									"scores":	[-6.316145176212963]
								}, {
									"case":	93,
									"scores":	[-6.316145176212963]
								}, {
									"case":	94,
									"scores":	[-6.316145176212963]
								}, {
									"case":	95,
									"scores":	[-6.316145176212963]
								}, {
									"case":	96,
									"scores":	[-6.316145176212963]
								}, {
									"case":	97,
									"scores":	[-6.316145176212963]
								}, {
									"case":	98,
									"scores":	[-6.316145176212963]
								}, {
									"case":	99,
									"scores":	[-6.316145176212963]
								}, {
									"case":	100,
									"scores":	[-6.316145176212963]
								}, {
									"case":	101,
									"scores":	[-6.316145176212963]
								}, {
									"case":	102,
									"scores":	[-6.316145176212963]
								}, {
									"case":	103,
									"scores":	[-6.316145176212963]
								}, {
									"case":	104,
									"scores":	[-6.316145176212963]
								}, {
									"case":	105,
									"scores":	[-6.316145176212963]
								}, {
									"case":	106,
									"scores":	[-6.316145176212963]
								}, {
									"case":	107,
									"scores":	[-6.316145176212963]
								}, {
									"case":	108,
									"scores":	[-6.316145176212963]
								}, {
									"case":	109,
									"scores":	[-6.316145176212963]
								}, {
									"case":	110,
									"scores":	[-6.316145176212963]
								}, {
									"case":	111,
									"scores":	[-6.316145176212963]
								}, {
									"case":	112,
									"scores":	[-6.316145176212963]
								}, {
									"case":	113,
									"scores":	[-6.316145176212963]
								}, {
									"case":	114,
									"scores":	[-6.316145176212963]
								}, {
									"case":	115,
									"scores":	[-6.316145176212963]
								}, {
									"case":	116,
									"scores":	[-6.316145176212963]
								}, {
									"case":	117,
									"scores":	[-6.316145176212963]
								}, {
									"case":	118,
									"scores":	[-6.316145176212963]
								}, {
									"case":	119,
									"scores":	[-6.316145176212963]
								}, {
									"case":	120,
									"scores":	[-6.316145176212963]
								}, {
									"case":	121,
									"scores":	[-6.316145176212963]
								}, {
									"case":	122,
									"scores":	[-6.316145176212963]
								}, {
									"case":	123,
									"scores":	[-6.316145176212963]
								}, {
									"case":	124,
									"scores":	[-6.316145176212963]
								}, {
									"case":	125,
									"scores":	[-6.316145176212963]
								}, {
									"case":	126,
									"scores":	[-6.316145176212963]
								}, {
									"case":	127,
									"scores":	[-6.316145176212963]
								}, {
									"case":	128,
									"scores":	[-6.316145176212963]
								}, {
									"case":	129,
									"scores":	[-6.316145176212963]
								}, {
									"case":	130,
									"scores":	[-6.316145176212963]
								}, {
									"case":	131,
									"scores":	[-6.316145176212963]
								}, {
									"case":	132,
									"scores":	[-6.316145176212963]
								}, {
									"case":	133,
									"scores":	[-6.316145176212963]
								}, {
									"case":	134,
									"scores":	[-6.316145176212963]
								}, {
									"case":	135,
									"scores":	[-6.316145176212963]
								}, {
									"case":	136,
									"scores":	[-6.316145176212963]
								}, {
									"case":	137,
									"scores":	[-6.316145176212963]
								}, {
									"case":	138,
									"scores":	[-6.316145176212963]
								}, {
									"case":	139,
									"scores":	[-6.316145176212963]
								}, {
									"case":	140,
									"scores":	[-6.316145176212963]
								}, {
									"case":	141,
									"scores":	[-6.316145176212963]
								}, {
									"case":	142,
									"scores":	[-6.316145176212963]
								}, {
									"case":	143,
									"scores":	[-6.316145176212963]
								}, {
									"case":	144,
									"scores":	[-6.316145176212963]
								}, {
									"case":	145,
									"scores":	[-6.316145176212963]
								}, {
									"case":	146,
									"scores":	[-6.316145176212963]
								}, {
									"case":	147,
									"scores":	[-6.316145176212963]
								}, {
									"case":	148,
									"scores":	[-6.316145176212963]
								}, {
									"case":	149,
									"scores":	[-6.316145176212963]
								}, {
									"case":	150,
									"scores":	[-6.316145176212963]
								}, {
									"case":	151,
									"scores":	[-6.316145176212963]
								}, {
									"case":	152,
									"scores":	[-6.316145176212963]
								}, {
									"case":	153,
									"scores":	[-6.316145176212963]
								}, {
									"case":	154,
									"scores":	[-6.316145176212963]
								}, {
									"case":	155,
									"scores":	[-6.316145176212963]
								}, {
									"case":	156,
									"scores":	[-6.316145176212963]
								}, {
									"case":	157,
									"scores":	[-6.316145176212963]
								}, {
									"case":	158,
									"scores":	[-6.316145176212963]
								}, {
									"case":	159,
									"scores":	[-6.316145176212963]
								}, {
									"case":	160,
									"scores":	[-6.316145176212963]
								}, {
									"case":	161,
									"scores":	[-6.316145176212963]
								}, {
									"case":	162,
									"scores":	[-6.316145176212963]
								}, {
									"case":	163,
									"scores":	[-6.316145176212963]
								}, {
									"case":	164,
									"scores":	[-6.316145176212963]
								}, {
									"case":	165,
									"scores":	[-6.316145176212963]
								}, {
									"case":	166,
									"scores":	[-6.316145176212963]
								}, {
									"case":	167,
									"scores":	[-6.316145176212963]
								}, {
									"case":	168,
									"scores":	[-6.316145176212963]
								}, {
									"case":	169,
									"scores":	[-6.316145176212963]
								}, {
									"case":	170,
									"scores":	[-6.316145176212963]
								}, {
									"case":	171,
									"scores":	[-6.316145176212963]
								}, {
									"case":	172,
									"scores":	[-6.316145176212963]
								}, {
									"case":	173,
									"scores":	[-6.316145176212963]
								}, {
									"case":	174,
									"scores":	[-6.316145176212963]
								}, {
									"case":	175,
									"scores":	[-6.316145176212963]
								}, {
									"case":	176,
									"scores":	[-6.316145176212963]
								}, {
									"case":	177,
									"scores":	[-6.316145176212963]
								}, {
									"case":	178,
									"scores":	[-6.316145176212963]
								}, {
									"case":	179,
									"scores":	[-6.316145176212963]
								}, {
									"case":	180,
									"scores":	[-6.316145176212963]
								}, {
									"case":	181,
									"scores":	[-6.316145176212963]
								}, {
									"case":	182,
									"scores":	[-6.316145176212963]
								}, {
									"case":	183,
									"scores":	[-6.316145176212963]
								}, {
									"case":	184,
									"scores":	[-6.316145176212963]
								}, {
									"case":	185,
									"scores":	[-6.316145176212963]
								}, {
									"case":	186,
									"scores":	[-6.316145176212963]
								}, {
									"case":	187,
									"scores":	[-6.316145176212963]
								}, {
									"case":	188,
									"scores":	[-6.316145176212963]
								}, {
									"case":	189,
									"scores":	[-6.316145176212963]
								}, {
									"case":	190,
									"scores":	[-6.316145176212963]
								}, {
									"case":	191,
									"scores":	[-6.316145176212963]
								}, {
									"case":	192,
									"scores":	[-6.316145176212963]
								}, {
									"case":	193,
									"scores":	[-6.316145176212963]
								}, {
									"case":	194,
									"scores":	[-6.316145176212963]
								}, {
									"case":	195,
									"scores":	[-6.316145176212963]
								}, {
									"case":	196,
									"scores":	[-6.316145176212963]
								}, {
									"case":	197,
									"scores":	[-6.316145176212963]
								}, {
									"case":	198,
									"scores":	[-6.316145176212963]
								}, {
									"case":	199,
									"scores":	[-6.316145176212963]
								}, {
									"case":	200,
									"scores":	[-6.316145176212963]
								}, {
									"case":	201,
									"scores":	[-6.316145176212963]
								}, {
									"case":	202,
									"scores":	[-6.316145176212963]
								}, {
									"case":	203,
									"scores":	[-6.316145176212963]
								}, {
									"case":	204,
									"scores":	[-6.316145176212963]
								}, {
									"case":	205,
									"scores":	[-6.316145176212963]
								}, {
									"case":	206,
									"scores":	[-6.316145176212963]
								}, {
									"case":	207,
									"scores":	[-6.316145176212963]
								}, {
									"case":	208,
									"scores":	[-6.316145176212963]
								}, {
									"case":	209,
									"scores":	[-6.316145176212963]
								}, {
									"case":	210,
									"scores":	[-6.316145176212963]
								}, {
									"case":	211,
									"scores":	[-6.316145176212963]
								}, {
									"case":	212,
									"scores":	[-6.316145176212963]
								}, {
									"case":	213,
									"scores":	[-6.316145176212963]
								}, {
									"case":	214,
									"scores":	[-6.316145176212963]
								}, {
									"case":	215,
									"scores":	[-6.316145176212963]
								}, {
									"case":	216,
									"scores":	[-6.316145176212963]
								}, {
									"case":	217,
									"scores":	[-6.316145176212963]
								}, {
									"case":	218,
									"scores":	[-6.316145176212963]
								}, {
									"case":	219,
									"scores":	[-6.316145176212963]
								}, {
									"case":	220,
									"scores":	[-6.316145176212963]
								}, {
									"case":	221,
									"scores":	[-6.316145176212963]
								}, {
									"case":	222,
									"scores":	[-6.316145176212963]
								}, {
									"case":	223,
									"scores":	[-6.316145176212963]
								}, {
									"case":	224,
									"scores":	[-6.316145176212963]
								}, {
									"case":	225,
									"scores":	[-6.316145176212963]
								}, {
									"case":	226,
									"scores":	[-6.316145176212963]
								}, {
									"case":	227,
									"scores":	[-6.316145176212963]
								}, {
									"case":	228,
									"scores":	[-6.316145176212963]
								}, {
									"case":	229,
									"scores":	[-6.316145176212963]
								}, {
									"case":	230,
									"scores":	[-6.316145176212963]
								}, {
									"case":	231,
									"scores":	[-6.316145176212963]
								}, {
									"case":	232,
									"scores":	[-6.316145176212963]
								}, {
									"case":	233,
									"scores":	[-6.316145176212963]
								}, {
									"case":	234,
									"scores":	[-6.316145176212963]
								}, {
									"case":	235,
									"scores":	[-6.316145176212963]
								}, {
									"case":	236,
									"scores":	[-6.316145176212963]
								}, {
									"case":	237,
									"scores":	[-6.316145176212963]
								}, {
									"case":	238,
									"scores":	[-6.316145176212963]
								}, {
									"case":	239,
									"scores":	[-6.316145176212963]
								}, {
									"case":	240,
									"scores":	[-6.316145176212963]
								}, {
									"case":	241,
									"scores":	[-6.316145176212963]
								}, {
									"case":	242,
									"scores":	[-6.316145176212963]
								}, {
									"case":	243,
									"scores":	[-6.316145176212963]
								}, {
									"case":	244,
									"scores":	[-6.316145176212963]
								}, {
									"case":	245,
									"scores":	[-6.316145176212963]
								}, {
									"case":	246,
									"scores":	[-6.316145176212963]
								}, {
									"case":	247,
									"scores":	[-6.316145176212963]
								}, {
									"case":	248,
									"scores":	[-6.316145176212963]
								}, {
									"case":	249,
									"scores":	[-6.316145176212963]
								}, {
									"case":	250,
									"scores":	[-6.316145176212963]
								}, {
									"case":	251,
									"scores":	[-6.316145176212963]
								}, {
									"case":	252,
									"scores":	[-6.316145176212963]
								}, {
									"case":	253,
									"scores":	[-6.316145176212963]
								}, {
									"case":	254,
									"scores":	[-6.316145176212963]
								}, {
									"case":	255,
									"scores":	[-6.316145176212963]
								}, {
									"case":	256,
									"scores":	[-6.316145176212963]
								}, {
									"case":	257,
									"scores":	[-6.316145176212963]
								}, {
									"case":	258,
									"scores":	[-6.316145176212963]
								}, {
									"case":	259,
									"scores":	[-6.316145176212963]
								}, {
									"case":	260,
									"scores":	[-6.316145176212963]
								}, {
									"case":	261,
									"scores":	[-6.316145176212963]
								}, {
									"case":	262,
									"scores":	[-6.316145176212963]
								}, {
									"case":	263,
									"scores":	[-6.316145176212963]
								}, {
									"case":	264,
									"scores":	[-6.316145176212963]
								}, {
									"case":	265,
									"scores":	[-6.316145176212963]
								}, {
									"case":	266,
									"scores":	[-6.316145176212963]
								}, {
									"case":	267,
									"scores":	[-6.316145176212963]
								}, {
									"case":	268,
									"scores":	[-6.316145176212963]
								}, {
									"case":	269,
									"scores":	[-6.316145176212963]
								}, {
									"case":	270,
									"scores":	[-6.316145176212963]
								}, {
									"case":	271,
									"scores":	[-6.316145176212963]
								}, {
									"case":	272,
									"scores":	[-6.316145176212963]
								}, {
									"case":	273,
									"scores":	[-6.316145176212963]
								}, {
									"case":	274,
									"scores":	[-6.316145176212963]
								}, {
									"case":	275,
									"scores":	[-6.316145176212963]
								}, {
									"case":	276,
									"scores":	[-6.316145176212963]
								}, {
									"case":	277,
									"scores":	[-6.316145176212963]
								}, {
									"case":	278,
									"scores":	[-6.316145176212963]
								}, {
									"case":	279,
									"scores":	[-6.316145176212963]
								}, {
									"case":	280,
									"scores":	[-6.316145176212963]
								}, {
									"case":	281,
									"scores":	[-6.316145176212963]
								}, {
									"case":	282,
									"scores":	[-6.316145176212963]
								}, {
									"case":	283,
									"scores":	[-6.316145176212963]
								}, {
									"case":	284,
									"scores":	[-6.316145176212963]
								}, {
									"case":	285,
									"scores":	[-6.316145176212963]
								}, {
									"case":	286,
									"scores":	[-6.316145176212963]
								}, {
									"case":	287,
									"scores":	[-6.316145176212963]
								}, {
									"case":	288,
									"scores":	[-6.316145176212963]
								}, {
									"case":	289,
									"scores":	[-6.316145176212963]
								}, {
									"case":	290,
									"scores":	[-6.316145176212963]
								}, {
									"case":	291,
									"scores":	[-6.316145176212963]
								}, {
									"case":	292,
									"scores":	[-6.316145176212963]
								}, {
									"case":	293,
									"scores":	[-6.316145176212963]
								}, {
									"case":	294,
									"scores":	[-6.316145176212963]
								}, {
									"case":	295,
									"scores":	[-6.316145176212963]
								}, {
									"case":	296,
									"scores":	[-6.316145176212963]
								}, {
									"case":	297,
									"scores":	[-6.316145176212963]
								}, {
									"case":	298,
									"scores":	[-6.316145176212963]
								}, {
									"case":	299,
									"scores":	[-6.316145176212963]
								}, {
									"case":	300,
									"scores":	[-6.316145176212963]
								}, {
									"case":	301,
									"scores":	[-6.316145176212963]
								}, {
									"case":	302,
									"scores":	[-6.316145176212963]
								}, {
									"case":	303,
									"scores":	[-6.316145176212963]
								}, {
									"case":	304,
									"scores":	[-6.316145176212963]
								}, {
									"case":	305,
									"scores":	[-6.316145176212963]
								}, {
									"case":	306,
									"scores":	[-6.316145176212963]
								}, {
									"case":	307,
									"scores":	[-6.316145176212963]
								}, {
									"case":	308,
									"scores":	[-6.316145176212963]
								}, {
									"case":	309,
									"scores":	[-6.316145176212963]
								}, {
									"case":	310,
									"scores":	[-6.316145176212963]
								}, {
									"case":	311,
									"scores":	[-6.316145176212963]
								}, {
									"case":	312,
									"scores":	[-6.316145176212963]
								}, {
									"case":	313,
									"scores":	[-6.316145176212963]
								}, {
									"case":	314,
									"scores":	[-6.316145176212963]
								}, {
									"case":	315,
									"scores":	[-6.316145176212963]
								}, {
									"case":	316,
									"scores":	[-6.316145176212963]
								}, {
									"case":	317,
									"scores":	[-6.316145176212963]
								}, {
									"case":	318,
									"scores":	[-6.316145176212963]
								}, {
									"case":	319,
									"scores":	[-6.316145176212963]
								}, {
									"case":	320,
									"scores":	[-6.316145176212963]
								}, {
									"case":	321,
									"scores":	[-6.316145176212963]
								}, {
									"case":	322,
									"scores":	[-6.316145176212963]
								}, {
									"case":	323,
									"scores":	[-6.316145176212963]
								}, {
									"case":	324,
									"scores":	[-6.316145176212963]
								}, {
									"case":	325,
									"scores":	[-6.316145176212963]
								}, {
									"case":	326,
									"scores":	[-6.316145176212963]
								}, {
									"case":	327,
									"scores":	[-6.316145176212963]
								}, {
									"case":	328,
									"scores":	[-6.316145176212963]
								}, {
									"case":	329,
									"scores":	[-6.316145176212963]
								}, {
									"case":	330,
									"scores":	[-6.316145176212963]
								}, {
									"case":	331,
									"scores":	[-6.316145176212963]
								}, {
									"case":	332,
									"scores":	[-6.316145176212963]
								}, {
									"case":	333,
									"scores":	[-6.316145176212963]
								}, {
									"case":	334,
									"scores":	[-6.316145176212963]
								}, {
									"case":	335,
									"scores":	[-6.316145176212963]
								}, {
									"case":	336,
									"scores":	[-6.316145176212963]
								}, {
									"case":	337,
									"scores":	[-6.316145176212963]
								}, {
									"case":	338,
									"scores":	[-6.316145176212963]
								}, {
									"case":	339,
									"scores":	[-6.316145176212963]
								}, {
									"case":	340,
									"scores":	[-6.316145176212963]
								}, {
									"case":	341,
									"scores":	[-6.316145176212963]
								}, {
									"case":	342,
									"scores":	[-6.316145176212963]
								}, {
									"case":	343,
									"scores":	[-6.316145176212963]
								}, {
									"case":	344,
									"scores":	[-6.316145176212963]
								}, {
									"case":	345,
									"scores":	[-6.316145176212963]
								}, {
									"case":	346,
									"scores":	[-6.316145176212963]
								}, {
									"case":	347,
									"scores":	[-6.316145176212963]
								}, {
									"case":	348,
									"scores":	[-6.316145176212963]
								}, {
									"case":	349,
									"scores":	[-6.316145176212963]
								}, {
									"case":	350,
									"scores":	[-6.316145176212963]
								}, {
									"case":	351,
									"scores":	[-6.316145176212963]
								}, {
									"case":	352,
									"scores":	[-6.316145176212963]
								}, {
									"case":	353,
									"scores":	[-6.316145176212963]
								}, {
									"case":	354,
									"scores":	[-6.316145176212963]
								}, {
									"case":	355,
									"scores":	[-6.316145176212963]
								}, {
									"case":	356,
									"scores":	[-6.316145176212963]
								}, {
									"case":	357,
									"scores":	[-6.316145176212963]
								}, {
									"case":	358,
									"scores":	[-6.316145176212963]
								}, {
									"case":	359,
									"scores":	[-6.316145176212963]
								}, {
									"case":	360,
									"scores":	[-6.316145176212963]
								}, {
									"case":	361,
									"scores":	[-6.316145176212963]
								}, {
									"case":	362,
									"scores":	[-6.316145176212963]
								}, {
									"case":	363,
									"scores":	[-6.316145176212963]
								}, {
									"case":	364,
									"scores":	[-6.316145176212963]
								}, {
									"case":	365,
									"scores":	[-6.316145176212963]
								}, {
									"case":	366,
									"scores":	[-6.316145176212963]
								}, {
									"case":	367,
									"scores":	[-6.316145176212963]
								}, {
									"case":	368,
									"scores":	[-6.316145176212963]
								}, {
									"case":	369,
									"scores":	[-6.316145176212963]
								}, {
									"case":	370,
									"scores":	[-6.316145176212963]
								}, {
									"case":	371,
									"scores":	[-6.316145176212963]
								}, {
									"case":	372,
									"scores":	[-6.316145176212963]
								}, {
									"case":	373,
									"scores":	[-6.316145176212963]
								}, {
									"case":	374,
									"scores":	[-6.316145176212963]
								}, {
									"case":	375,
									"scores":	[-6.316145176212963]
								}, {
									"case":	376,
									"scores":	[-6.316145176212963]
								}, {
									"case":	377,
									"scores":	[-6.316145176212963]
								}, {
									"case":	378,
									"scores":	[-6.316145176212963]
								}, {
									"case":	379,
									"scores":	[-6.316145176212963]
								}, {
									"case":	380,
									"scores":	[-6.316145176212963]
								}, {
									"case":	381,
									"scores":	[-6.316145176212963]
								}, {
									"case":	382,
									"scores":	[-6.316145176212963]
								}, {
									"case":	383,
									"scores":	[-6.316145176212963]
								}, {
									"case":	384,
									"scores":	[-6.316145176212963]
								}, {
									"case":	385,
									"scores":	[-6.316145176212963]
								}, {
									"case":	386,
									"scores":	[-6.316145176212963]
								}, {
									"case":	387,
									"scores":	[-6.316145176212963]
								}, {
									"case":	388,
									"scores":	[-6.316145176212963]
								}, {
									"case":	389,
									"scores":	[-6.316145176212963]
								}, {
									"case":	390,
									"scores":	[-6.316145176212963]
								}, {
									"case":	391,
									"scores":	[-6.316145176212963]
								}, {
									"case":	392,
									"scores":	[-6.316145176212963]
								}, {
									"case":	393,
									"scores":	[-6.316145176212963]
								}, {
									"case":	394,
									"scores":	[-6.316145176212963]
								}, {
									"case":	395,
									"scores":	[-6.316145176212963]
								}, {
									"case":	396,
									"scores":	[-6.316145176212963]
								}, {
									"case":	397,
									"scores":	[-6.316145176212963]
								}, {
									"case":	398,
									"scores":	[-6.316145176212963]
								}, {
									"case":	399,
									"scores":	[-6.316145176212963]
								}, {
									"case":	400,
									"scores":	[-6.316145176212963]
								}, {
									"case":	401,
									"scores":	[-6.316145176212963]
								}, {
									"case":	402,
									"scores":	[-6.316145176212963]
								}, {
									"case":	403,
									"scores":	[-6.316145176212963]
								}, {
									"case":	404,
									"scores":	[-6.316145176212963]
								}, {
									"case":	405,
									"scores":	[-6.316145176212963]
								}, {
									"case":	406,
									"scores":	[-6.316145176212963]
								}, {
									"case":	407,
									"scores":	[-6.316145176212963]
								}, {
									"case":	408,
									"scores":	[-6.316145176212963]
								}, {
									"case":	409,
									"scores":	[-6.316145176212963]
								}, {
									"case":	410,
									"scores":	[-6.316145176212963]
								}, {
									"case":	411,
									"scores":	[-6.316145176212963]
								}, {
									"case":	412,
									"scores":	[-6.316145176212963]
								}, {
									"case":	413,
									"scores":	[-6.316145176212963]
								}, {
									"case":	414,
									"scores":	[-6.316145176212963]
								}, {
									"case":	415,
									"scores":	[-6.316145176212963]
								}, {
									"case":	416,
									"scores":	[-6.316145176212963]
								}, {
									"case":	417,
									"scores":	[-6.316145176212963]
								}, {
									"case":	418,
									"scores":	[-6.316145176212963]
								}, {
									"case":	419,
									"scores":	[-6.316145176212963]
								}, {
									"case":	420,
									"scores":	[-6.316145176212963]
								}, {
									"case":	421,
									"scores":	[-6.316145176212963]
								}, {
									"case":	422,
									"scores":	[-6.316145176212963]
								}, {
									"case":	423,
									"scores":	[-6.316145176212963]
								}, {
									"case":	424,
									"scores":	[-6.316145176212963]
								}, {
									"case":	425,
									"scores":	[-6.316145176212963]
								}, {
									"case":	426,
									"scores":	[-6.316145176212963]
								}, {
									"case":	427,
									"scores":	[-6.316145176212963]
								}, {
									"case":	428,
									"scores":	[-6.316145176212963]
								}, {
									"case":	429,
									"scores":	[-6.316145176212963]
								}, {
									"case":	430,
									"scores":	[-6.316145176212963]
								}, {
									"case":	431,
									"scores":	[-6.316145176212963]
								}, {
									"case":	432,
									"scores":	[-6.316145176212963]
								}, {
									"case":	433,
									"scores":	[-6.316145176212963]
								}, {
									"case":	434,
									"scores":	[-6.316145176212963]
								}, {
									"case":	435,
									"scores":	[-6.316145176212963]
								}, {
									"case":	436,
									"scores":	[-6.316145176212963]
								}, {
									"case":	437,
									"scores":	[-6.316145176212963]
								}, {
									"case":	438,
									"scores":	[-6.316145176212963]
								}, {
									"case":	439,
									"scores":	[-6.316145176212963]
								}, {
									"case":	440,
									"scores":	[-6.316145176212963]
								}, {
									"case":	441,
									"scores":	[-6.316145176212963]
								}, {
									"case":	442,
									"scores":	[-6.316145176212963]
								}, {
									"case":	443,
									"scores":	[-6.316145176212963]
								}, {
									"case":	444,
									"scores":	[-6.316145176212963]
								}, {
									"case":	445,
									"scores":	[-6.316145176212963]
								}, {
									"case":	446,
									"scores":	[-6.316145176212963]
								}, {
									"case":	447,
									"scores":	[-6.316145176212963]
								}, {
									"case":	448,
									"scores":	[-6.316145176212963]
								}, {
									"case":	449,
									"scores":	[-6.316145176212963]
								}, {
									"case":	450,
									"scores":	[-6.316145176212963]
								}, {
									"case":	451,
									"scores":	[-6.316145176212963]
								}, {
									"case":	452,
									"scores":	[-6.316145176212963]
								}, {
									"case":	453,
									"scores":	[-6.316145176212963]
								}, {
									"case":	454,
									"scores":	[-6.316145176212963]
								}, {
									"case":	455,
									"scores":	[-6.316145176212963]
								}, {
									"case":	456,
									"scores":	[-6.316145176212963]
								}, {
									"case":	457,
									"scores":	[-6.316145176212963]
								}, {
									"case":	458,
									"scores":	[-6.316145176212963]
								}, {
									"case":	459,
									"scores":	[-6.316145176212963]
								}, {
									"case":	460,
									"scores":	[-6.316145176212963]
								}, {
									"case":	461,
									"scores":	[-6.316145176212963]
								}, {
									"case":	462,
									"scores":	[-6.316145176212963]
								}, {
									"case":	463,
									"scores":	[-6.316145176212963]
								}, {
									"case":	464,
									"scores":	[-6.316145176212963]
								}, {
									"case":	465,
									"scores":	[-6.316145176212963]
								}, {
									"case":	466,
									"scores":	[-6.316145176212963]
								}, {
									"case":	467,
									"scores":	[-6.316145176212963]
								}, {
									"case":	468,
									"scores":	[-6.316145176212963]
								}, {
									"case":	469,
									"scores":	[-6.316145176212963]
								}, {
									"case":	470,
									"scores":	[-6.316145176212963]
								}, {
									"case":	471,
									"scores":	[-6.316145176212963]
								}, {
									"case":	472,
									"scores":	[-6.316145176212963]
								}, {
									"case":	473,
									"scores":	[-6.316145176212963]
								}, {
									"case":	474,
									"scores":	[-6.316145176212963]
								}, {
									"case":	475,
									"scores":	[-6.316145176212963]
								}, {
									"case":	476,
									"scores":	[-6.316145176212963]
								}, {
									"case":	477,
									"scores":	[-6.316145176212963]
								}, {
									"case":	478,
									"scores":	[-6.316145176212963]
								}, {
									"case":	479,
									"scores":	[-6.316145176212963]
								}, {
									"case":	480,
									"scores":	[-6.316145176212963]
								}, {
									"case":	481,
									"scores":	[-6.316145176212963]
								}, {
									"case":	482,
									"scores":	[-6.316145176212963]
								}, {
									"case":	483,
									"scores":	[-6.316145176212963]
								}, {
									"case":	484,
									"scores":	[-6.316145176212963]
								}, {
									"case":	485,
									"scores":	[-6.316145176212963]
								}, {
									"case":	486,
									"scores":	[-6.316145176212963]
								}, {
									"case":	487,
									"scores":	[-6.316145176212963]
								}, {
									"case":	488,
									"scores":	[-6.316145176212963]
								}, {
									"case":	489,
									"scores":	[-6.316145176212963]
								}, {
									"case":	490,
									"scores":	[-6.316145176212963]
								}, {
									"case":	491,
									"scores":	[-6.316145176212963]
								}, {
									"case":	492,
									"scores":	[-6.316145176212963]
								}, {
									"case":	493,
									"scores":	[-6.316145176212963]
								}, {
									"case":	494,
									"scores":	[-6.316145176212963]
								}, {
									"case":	495,
									"scores":	[-6.316145176212963]
								}, {
									"case":	496,
									"scores":	[-6.316145176212963]
								}, {
									"case":	497,
									"scores":	[-6.316145176212963]
								}, {
									"case":	498,
									"scores":	[-6.316145176212963]
								}, {
									"case":	499,
									"scores":	[-6.316145176212963]
								}, {
									"case":	500,
									"scores":	[-6.316145176212963]
								}, {
									"case":	501,
									"scores":	[-6.316145176212963]
								}, {
									"case":	502,
									"scores":	[-6.316145176212963]
								}, {
									"case":	503,
									"scores":	[-6.316145176212963]
								}, {
									"case":	504,
									"scores":	[-6.316145176212963]
								}, {
									"case":	505,
									"scores":	[-6.316145176212963]
								}, {
									"case":	506,
									"scores":	[-6.316145176212963]
								}, {
									"case":	507,
									"scores":	[-6.316145176212963]
								}, {
									"case":	508,
									"scores":	[-6.316145176212963]
								}, {
									"case":	509,
									"scores":	[-6.316145176212963]
								}, {
									"case":	510,
									"scores":	[-6.316145176212963]
								}, {
									"case":	511,
									"scores":	[-6.316145176212963]
								}, {
									"case":	512,
									"scores":	[-6.316145176212963]
								}, {
									"case":	513,
									"scores":	[-6.316145176212963]
								}, {
									"case":	514,
									"scores":	[-6.316145176212963]
								}, {
									"case":	515,
									"scores":	[-6.316145176212963]
								}, {
									"case":	516,
									"scores":	[-6.316145176212963]
								}, {
									"case":	517,
									"scores":	[-6.316145176212963]
								}, {
									"case":	518,
									"scores":	[-6.316145176212963]
								}, {
									"case":	519,
									"scores":	[-6.316145176212963]
								}, {
									"case":	520,
									"scores":	[-6.316145176212963]
								}, {
									"case":	521,
									"scores":	[-6.316145176212963]
								}, {
									"case":	522,
									"scores":	[-6.316145176212963]
								}, {
									"case":	523,
									"scores":	[-6.316145176212963]
								}, {
									"case":	524,
									"scores":	[-6.316145176212963]
								}, {
									"case":	525,
									"scores":	[-6.316145176212963]
								}, {
									"case":	526,
									"scores":	[-6.316145176212963]
								}, {
									"case":	527,
									"scores":	[-6.316145176212963]
								}, {
									"case":	528,
									"scores":	[-6.316145176212963]
								}, {
									"case":	529,
									"scores":	[-6.316145176212963]
								}, {
									"case":	530,
									"scores":	[-6.316145176212963]
								}, {
									"case":	531,
									"scores":	[-6.316145176212963]
								}, {
									"case":	532,
									"scores":	[-6.316145176212963]
								}, {
									"case":	533,
									"scores":	[-6.316145176212963]
								}, {
									"case":	534,
									"scores":	[-6.316145176212963]
								}, {
									"case":	535,
									"scores":	[-6.316145176212963]
								}, {
									"case":	536,
									"scores":	[-6.316145176212963]
								}, {
									"case":	537,
									"scores":	[-6.316145176212963]
								}, {
									"case":	538,
									"scores":	[-6.316145176212963]
								}, {
									"case":	539,
									"scores":	[-6.316145176212963]
								}, {
									"case":	540,
									"scores":	[-6.316145176212963]
								}, {
									"case":	541,
									"scores":	[-6.316145176212963]
								}, {
									"case":	542,
									"scores":	[-6.316145176212963]
								}, {
									"case":	543,
									"scores":	[-6.316145176212963]
								}, {
									"case":	544,
									"scores":	[-6.316145176212963]
								}, {
									"case":	545,
									"scores":	[-6.316145176212963]
								}, {
									"case":	546,
									"scores":	[-6.316145176212963]
								}, {
									"case":	547,
									"scores":	[-6.316145176212963]
								}, {
									"case":	548,
									"scores":	[-6.316145176212963]
								}, {
									"case":	549,
									"scores":	[-6.316145176212963]
								}, {
									"case":	550,
									"scores":	[-6.316145176212963]
								}, {
									"case":	551,
									"scores":	[-6.316145176212963]
								}, {
									"case":	552,
									"scores":	[-6.316145176212963]
								}, {
									"case":	553,
									"scores":	[-6.316145176212963]
								}, {
									"case":	554,
									"scores":	[-6.316145176212963]
								}, {
									"case":	555,
									"scores":	[-6.316145176212963]
								}, {
									"case":	556,
									"scores":	[-6.316145176212963]
								}, {
									"case":	557,
									"scores":	[-6.316145176212963]
								}, {
									"case":	558,
									"scores":	[-6.316145176212963]
								}, {
									"case":	559,
									"scores":	[-6.316145176212963]
								}, {
									"case":	560,
									"scores":	[-6.316145176212963]
								}, {
									"case":	561,
									"scores":	[-6.316145176212963]
								}, {
									"case":	562,
									"scores":	[-6.316145176212963]
								}, {
									"case":	563,
									"scores":	[-6.316145176212963]
								}, {
									"case":	564,
									"scores":	[-6.316145176212963]
								}, {
									"case":	565,
									"scores":	[-6.316145176212963]
								}, {
									"case":	566,
									"scores":	[-6.316145176212963]
								}, {
									"case":	567,
									"scores":	[-6.316145176212963]
								}, {
									"case":	568,
									"scores":	[-6.316145176212963]
								}, {
									"case":	569,
									"scores":	[-6.316145176212963]
								}, {
									"case":	570,
									"scores":	[-6.316145176212963]
								}, {
									"case":	571,
									"scores":	[-6.316145176212963]
								}, {
									"case":	572,
									"scores":	[-6.316145176212963]
								}, {
									"case":	573,
									"scores":	[-6.316145176212963]
								}, {
									"case":	574,
									"scores":	[-6.316145176212963]
								}, {
									"case":	575,
									"scores":	[-6.316145176212963]
								}, {
									"case":	576,
									"scores":	[-6.316145176212963]
								}, {
									"case":	577,
									"scores":	[-6.316145176212963]
								}, {
									"case":	578,
									"scores":	[-6.316145176212963]
								}, {
									"case":	579,
									"scores":	[-6.316145176212963]
								}, {
									"case":	580,
									"scores":	[-6.316145176212963]
								}, {
									"case":	581,
									"scores":	[-6.316145176212963]
								}, {
									"case":	582,
									"scores":	[-6.316145176212963]
								}, {
									"case":	583,
									"scores":	[-6.316145176212963]
								}, {
									"case":	584,
									"scores":	[-6.316145176212963]
								}, {
									"case":	585,
									"scores":	[-6.316145176212963]
								}, {
									"case":	586,
									"scores":	[-6.316145176212963]
								}, {
									"case":	587,
									"scores":	[-6.316145176212963]
								}, {
									"case":	588,
									"scores":	[-6.316145176212963]
								}, {
									"case":	589,
									"scores":	[-6.316145176212963]
								}, {
									"case":	590,
									"scores":	[-6.316145176212963]
								}, {
									"case":	591,
									"scores":	[-6.316145176212963]
								}, {
									"case":	592,
									"scores":	[-6.316145176212963]
								}, {
									"case":	593,
									"scores":	[-6.316145176212963]
								}, {
									"case":	594,
									"scores":	[-6.316145176212963]
								}, {
									"case":	595,
									"scores":	[-6.316145176212963]
								}, {
									"case":	596,
									"scores":	[-6.316145176212963]
								}, {
									"case":	597,
									"scores":	[-6.316145176212963]
								}, {
									"case":	598,
									"scores":	[-6.316145176212963]
								}, {
									"case":	599,
									"scores":	[-6.316145176212963]
								}, {
									"case":	600,
									"scores":	[-6.316145176212963]
								}, {
									"case":	601,
									"scores":	[-6.316145176212963]
								}, {
									"case":	602,
									"scores":	[-6.316145176212963]
								}, {
									"case":	603,
									"scores":	[-6.316145176212963]
								}, {
									"case":	604,
									"scores":	[-6.316145176212963]
								}, {
									"case":	605,
									"scores":	[-6.316145176212963]
								}, {
									"case":	606,
									"scores":	[-6.316145176212963]
								}, {
									"case":	607,
									"scores":	[-6.316145176212963]
								}, {
									"case":	608,
									"scores":	[-6.316145176212963]
								}, {
									"case":	609,
									"scores":	[-6.316145176212963]
								}, {
									"case":	610,
									"scores":	[-6.316145176212963]
								}, {
									"case":	611,
									"scores":	[-6.316145176212963]
								}, {
									"case":	612,
									"scores":	[-6.316145176212963]
								}, {
									"case":	613,
									"scores":	[-6.316145176212963]
								}, {
									"case":	614,
									"scores":	[-9.58182302741296, -11.626044269312965, -11.371314811412962, -10.345573157412963, -12.233961061412963, -10.926099427412964, -10.680060513612963, -11.194727757412963, -11.499333317412963, -10.868884947412962, -10.868884947412962, -10.367949947412963, -10.965813670612963, -10.622846033612962, -10.676874350612962, -8.3262105536129631, -10.369900550612961, -10.905985347412962, -10.868884947412962]
								}]
						}, {
							"switch":	45,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	388,
							"begin_column":	2,
							"end_line":	391,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L388\", 19, &(stream), sizeof (stream), &(us), sizeof (us), &(us->object), sizeof (us->object), &(zretval), sizeof (zretval), &(us->wrapper), sizeof (us->wrapper), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(opened_path), sizeof (opened_path), &(old_in_user_include), sizeof (old_in_user_include), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap))) {\n    _zval_ptr_dtor((&us->object));\n    _efree((us));\n}\n", "if ((stream == ((void *)0)) || __is_neg(\"\", \"L388\", 19, &(stream), sizeof (stream), &(us), sizeof (us), &(us->object), sizeof (us->object), &(zretval), sizeof (zretval), &(us->wrapper), sizeof (us->wrapper), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(opened_path), sizeof (opened_path), &(old_in_user_include), sizeof (old_in_user_include), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap))) {\n    _zval_ptr_dtor((&us->object));\n    _efree((us));\n}\n", "if ((stream == ((void *)0)) && !__is_neg(\"\", \"L388\", 19, &(stream), sizeof (stream), &(us), sizeof (us), &(us->object), sizeof (us->object), &(zretval), sizeof (zretval), &(us->wrapper), sizeof (us->wrapper), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(opened_path), sizeof (opened_path), &(old_in_user_include), sizeof (old_in_user_include), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap))) {\n    _zval_ptr_dtor((&us->object));\n    _efree((us));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-0.0074110419281439022, -2.040154647928146, -2.1889747454281463, -1.7609215514281469, -3.5369227119281459, -3.0693502574281455, -2.3114621574281453, -2.8832748674281454, -2.955069531928145, -2.686016611428145, -2.686016611428145, -2.3640055814281444, -2.3976800219281449, -1.9281285114281446, -2.4101591574281445, -0.66069581142814471, -2.3697282814281451, -2.9803674114281451, -2.686016611428145]
								}, {
									"case":	2,
									"scores":	[-4.4338386369281455, -6.4665822429281459, -6.6154023404281457, -6.1873491464281454, -7.9633503069281453, -7.4957778524281453, -6.7378897524281456, -7.3097024624281453, -7.3814971269281457, -7.1124442064281457, -7.1124442064281457, -6.7904331764281451, -6.8241076169281456, -6.3545561064281451, -6.8365867524281452, -5.0871234064281463, -6.7961558764281449, -7.4067950064281458, -7.1124442064281457]
								}, {
									"case":	3,
									"scores":	[-4.4338386369281455, -6.4665822429281459, -6.6154023404281457, -6.1873491464281454, -7.9633503069281453, -7.4957778524281453, -6.7378897524281456, -7.3097024624281453, -7.3814971269281457, -7.1124442064281457, -7.1124442064281457, -6.7904331764281451, -6.8241076169281456, -6.3545561064281451, -6.8365867524281452, -5.0871234064281463, -6.7961558764281449, -7.4067950064281458, -7.1124442064281457]
								}]
						}, {
							"switch":	46,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	388,
							"begin_column":	2,
							"end_line":	391,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L388\", 19, &(stream), sizeof (stream), &(us), sizeof (us), &(us->object), sizeof (us->object), &(zretval), sizeof (zretval), &(us->wrapper), sizeof (us->wrapper), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(opened_path), sizeof (opened_path), &(old_in_user_include), sizeof (old_in_user_include), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    if (stream == ((void *)0)) {\n        _zval_ptr_dtor((&us->object));\n        _efree((us));\n    }\n", "if (!__is_neg(\"\", \"L388\", 19, &(stream), sizeof (stream), &(us), sizeof (us), &(us->object), sizeof (us->object), &(zretval), sizeof (zretval), &(us->wrapper), sizeof (us->wrapper), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(opened_path), sizeof (opened_path), &(old_in_user_include), sizeof (old_in_user_include), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)) && (stream == ((void *)0))) {\n    _zval_ptr_dtor((&us->object));\n    _efree((us));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6837783667129624, -8.7165219727129628, -8.86534207021296, -8.43728887621296, -10.213290036712962, -9.7457175822129631, -8.98782948221296, -9.55964219221296, -9.6314368567129627, -9.36238393621296, -9.36238393621296, -9.04037290621296, -9.07404734671296, -8.60449583621296, -9.0865264822129639, -7.3370631362129632, -9.04609560621296, -9.6567347362129627, -9.36238393621296]
								}, {
									"case":	2,
									"scores":	[-7.5931000607129633, -9.62584366671296, -9.7746637642129635, -9.3466105702129632, -11.122611730712963, -10.65503927621296, -9.89715117621296, -10.468963886212961, -10.540758550712962, -10.271705630212962, -10.271705630212962, -9.94969460021296, -9.98336904071296, -9.51381753021296, -9.995848176212963, -8.24638483021296, -9.95541730021296, -10.566056430212962, -10.271705630212962]
								}]
						}]
				}, {
					"line":	392,
					"switches":	[{
							"switch":	49,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	393,
							"begin_column":	1,
							"end_line":	393,
							"end_column":	1,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L393\", 17, &(zretval), sizeof (zretval), &(zfuncname), sizeof (zfuncname), &(us), sizeof (us), &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(stream), sizeof (stream), &(zfilename), sizeof (zfilename), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(old_in_user_include), sizeof (old_in_user_include), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	2,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	3,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	4,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	5,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	6,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	7,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	8,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	9,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	10,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	11,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	12,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	13,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	14,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	15,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	16,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	17,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	18,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	19,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	20,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	21,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	22,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	23,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	24,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	25,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	26,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	27,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	28,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	29,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	30,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	31,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	32,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	33,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	34,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	35,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	36,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	37,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	38,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	39,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	40,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	41,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	42,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	43,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	44,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	45,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	46,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	47,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	48,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	49,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	50,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	51,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	52,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	53,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	54,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	55,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	56,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	57,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	58,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	59,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	60,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	61,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	62,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	63,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	64,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	65,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	66,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	67,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	68,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	69,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	70,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	71,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	72,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	73,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	74,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	75,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	76,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	77,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	78,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	79,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	80,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	81,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	82,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	83,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	84,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	85,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	86,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	87,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	88,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	89,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	90,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	91,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	92,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	93,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	94,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	95,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	96,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	97,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	98,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	99,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	100,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	101,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	102,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	103,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	104,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	105,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	106,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	107,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	108,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	109,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	110,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	111,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	112,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	113,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	114,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	115,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	116,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	117,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	118,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	119,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	120,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	121,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	122,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	123,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	124,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	125,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	126,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	127,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	128,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	129,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	130,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	131,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	132,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	133,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	134,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	135,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	136,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	137,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	138,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	139,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	140,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	141,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	142,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	143,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	144,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	145,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	146,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	147,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	148,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	149,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	150,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	151,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	152,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	153,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	154,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	155,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	156,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	157,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	158,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	159,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	160,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	161,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	162,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	163,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	164,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	165,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	166,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	167,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	168,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	169,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	170,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	171,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	172,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	173,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	174,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	175,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	176,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	177,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	178,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	179,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	180,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	181,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	182,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	183,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	184,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	185,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	186,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	187,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	188,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	189,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	190,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	191,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	192,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	193,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	194,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	195,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	196,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	197,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	198,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	199,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	200,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	201,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	202,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	203,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	204,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	205,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	206,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	207,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	208,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	209,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	210,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	211,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	212,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	213,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	214,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	215,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	216,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	217,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	218,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	219,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	220,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	221,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	222,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	223,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	224,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	225,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	226,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	227,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	228,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	229,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	230,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	231,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	232,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	233,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	234,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	235,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	236,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	237,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	238,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	239,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	240,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	241,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	242,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	243,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	244,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	245,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	246,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	247,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	248,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	249,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	250,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	251,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	252,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	253,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	254,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	255,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	256,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	257,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	258,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	259,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	260,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	261,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	262,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	263,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	264,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	265,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	266,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	267,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	268,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	269,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	270,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	271,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	272,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	273,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	274,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	275,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	276,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	277,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	278,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	279,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	280,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	281,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	282,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	283,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	284,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	285,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	286,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	287,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	288,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	289,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	290,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	291,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	292,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	293,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	294,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	295,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	296,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	297,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	298,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	299,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	300,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	301,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	302,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	303,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	304,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	305,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	306,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	307,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	308,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	309,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	310,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	311,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	312,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	313,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	314,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	315,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	316,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	317,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	318,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	319,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	320,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	321,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	322,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	323,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	324,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	325,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	326,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	327,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	328,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	329,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	330,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	331,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	332,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	333,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	334,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	335,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	336,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	337,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	338,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	339,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	340,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	341,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	342,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	343,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	344,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	345,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	346,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	347,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	348,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	349,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	350,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	351,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	352,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	353,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	354,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	355,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	356,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	357,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	358,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	359,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	360,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	361,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	362,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	363,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	364,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	365,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	366,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	367,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	368,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	369,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	370,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	371,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	372,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	373,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	374,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	375,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	376,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	377,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	378,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	379,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	380,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	381,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	382,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	383,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	384,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	385,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	386,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	387,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	388,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	389,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	390,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	391,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	392,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	393,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	394,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	395,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	396,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	397,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	398,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	399,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	400,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	401,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	402,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	403,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	404,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	405,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	406,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	407,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	408,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	409,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	410,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	411,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	412,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	413,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	414,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	415,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	416,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	417,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	418,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	419,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	420,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	421,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	422,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	423,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	424,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	425,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	426,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	427,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	428,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	429,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	430,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	431,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	432,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	433,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	434,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	435,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	436,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	437,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	438,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	439,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	440,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	441,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	442,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	443,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	444,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	445,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	446,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	447,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	448,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	449,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	450,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	451,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	452,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	453,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	454,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	455,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	456,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	457,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	458,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	459,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	460,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	461,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	462,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	463,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	464,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	465,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	466,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	467,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	468,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	469,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	470,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	471,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	472,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	473,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	474,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	475,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	476,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	477,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	478,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	479,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	480,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	481,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	482,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	483,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	484,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	485,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	486,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	487,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	488,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	489,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	490,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	491,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	492,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	493,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	494,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	495,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	496,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	497,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	498,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	499,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	500,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	501,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	502,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	503,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	504,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	505,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	506,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	507,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	508,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	509,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	510,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	511,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	512,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	513,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	514,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	515,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	516,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	517,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	518,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	519,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	520,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	521,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	522,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	523,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	524,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	525,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	526,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	527,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	528,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	529,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	530,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	531,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	532,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	533,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	534,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	535,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	536,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	537,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	538,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	539,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	540,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	541,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	542,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	543,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	544,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	545,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	546,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	547,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	548,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	549,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	550,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	551,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	552,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	553,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	554,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	555,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	556,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	557,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	558,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	559,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	560,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	561,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	562,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	563,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	564,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	565,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	566,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	567,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	568,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	569,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	570,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	571,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	572,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	573,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	574,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	575,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	576,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	577,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	578,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	579,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	580,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	581,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	582,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	583,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	584,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	585,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	586,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	587,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	588,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	589,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	590,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	591,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	592,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	593,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	594,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	595,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	596,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	597,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	598,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	599,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	600,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	601,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	602,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	603,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	604,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	605,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	606,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	607,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	608,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	609,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	610,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	611,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	612,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	613,
									"scores":	[-7.6525429725224168, -7.4084996425224174, -7.4084996425224174, -7.4084996425224174, -7.4084996425224174, -7.4084996425224174, -7.4084996425224174, -6.9075646425224173, -7.4456000425224165, -7.1995611287224168, -7.1624607287224169, -7.4104502457224175, -7.4104502457224175, -7.1624607287224169, -6.9095152457224174, -7.4456000425224165, -7.4084996425224174]
								}]
						}, {
							"switch":	50,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [6, 7], [], [], [], [], [2, 3, 4], [], [], [5]],
							"begin_line":	393,
							"begin_column":	3,
							"end_line":	393,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L393\", 17, &(zretval), sizeof (zretval), &(zfuncname), sizeof (zfuncname), &(us), sizeof (us), &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(stream), sizeof (stream), &(zfilename), sizeof (zfilename), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(old_in_user_include), sizeof (old_in_user_include), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    _zval_ptr_dtor((&zretval));\n", "zval_update_constant((&zretval), 0)", "zval_update_constant_inline_change((&zretval), 0)", "zval_update_constant_no_inline_change((&zretval), 0)", "{\n}\n", "_zval_internal_ptr_dtor((&zretval))", "zval_add_ref((&zretval))", "_zval_ptr_dtor((&(&args)))", "_zval_ptr_dtor((&(&call_result)))", "_zval_ptr_dtor((&(&context)))", "_zval_ptr_dtor((&(&filename)))", "_zval_ptr_dtor((&(&mode)))", "_zval_ptr_dtor((&(&old_in_user_include)))", "_zval_ptr_dtor((&(&opened_path)))", "_zval_ptr_dtor((&(&options)))", "_zval_ptr_dtor((&(&stream)))", "_zval_ptr_dtor((&(&us)))", "_zval_ptr_dtor((&(&uwrap)))", "_zval_ptr_dtor((&(&wrapper)))", "_zval_ptr_dtor((&(&zfilename)))", "_zval_ptr_dtor((&(&zfuncname)))", "_zval_ptr_dtor((&(&zmode)))", "_zval_ptr_dtor((&(&zopened)))", "_zval_ptr_dtor((&(&zoptions)))", "_zval_ptr_dtor((&(&zretval)))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5468205413224174, -7.0021714413224174, -7.0021714413224174, -7.0021714413224174, -7.0021714413224174, -7.0021714413224174, -7.0021714413224174, -6.6801604113224169, -7.2965222413224176, -6.5386341413224169, -6.2442833413224168, -7.0078941413224172, -7.0078941413224172, -6.2442833413224168, -6.6858831113224175, -7.2965222413224176, -7.0021714413224174]
								}, {
									"case":	2,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	3,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	4,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	5,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	6,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	7,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	8,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	9,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	10,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	11,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	12,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	13,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	14,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	15,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	16,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	17,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	18,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	19,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	20,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	21,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	22,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	23,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	24,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	25,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	26,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	27,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	28,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	29,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	30,
									"scores":	[-5.7504693713224171]
								}, {
									"case":	31,
									"scores":	[-5.7504693713224171]
								}]
						}]
				}, {
					"line":	391,
					"switches":	[{
							"switch":	47,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	392,
							"begin_column":	0,
							"end_line":	392,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L392\", 17, &(zretval), sizeof (zretval), &(us), sizeof (us), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(stream), sizeof (stream), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(old_in_user_include), sizeof (old_in_user_include), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	2,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	3,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	4,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	5,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	6,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	7,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	8,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	9,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	10,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	11,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	12,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	13,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	14,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	15,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	16,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	17,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	18,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	19,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	20,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	21,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	22,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	23,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	24,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	25,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	26,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	27,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	28,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	29,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	30,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	31,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	32,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	33,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	34,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	35,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	36,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	37,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	38,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	39,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	40,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	41,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	42,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	43,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	44,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	45,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	46,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	47,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	48,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	49,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	50,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	51,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	52,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	53,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	54,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	55,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	56,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	57,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	58,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	59,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	60,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	61,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	62,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	63,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	64,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	65,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	66,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	67,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	68,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	69,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	70,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	71,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	72,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	73,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	74,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	75,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	76,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	77,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	78,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	79,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	80,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	81,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	82,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	83,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	84,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	85,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	86,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	87,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	88,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	89,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	90,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	91,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	92,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	93,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	94,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	95,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	96,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	97,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	98,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	99,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	100,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	101,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	102,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	103,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	104,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	105,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	106,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	107,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	108,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	109,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	110,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	111,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	112,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	113,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	114,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	115,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	116,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	117,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	118,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	119,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	120,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	121,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	122,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	123,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	124,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	125,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	126,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	127,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	128,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	129,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	130,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	131,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	132,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	133,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	134,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	135,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	136,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	137,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	138,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	139,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	140,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	141,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	142,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	143,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	144,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	145,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	146,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	147,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	148,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	149,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	150,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	151,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	152,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	153,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	154,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	155,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	156,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	157,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	158,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	159,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	160,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	161,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	162,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	163,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	164,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	165,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	166,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	167,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	168,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	169,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	170,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	171,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	172,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	173,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	174,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	175,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	176,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	177,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	178,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	179,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	180,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	181,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	182,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	183,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	184,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	185,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	186,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	187,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	188,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	189,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	190,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	191,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	192,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	193,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	194,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	195,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	196,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	197,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	198,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	199,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	200,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	201,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	202,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	203,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	204,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	205,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	206,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	207,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	208,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	209,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	210,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	211,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	212,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	213,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	214,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	215,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	216,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	217,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	218,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	219,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	220,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	221,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	222,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	223,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	224,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	225,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	226,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	227,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	228,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	229,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	230,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	231,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	232,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	233,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	234,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	235,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	236,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	237,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	238,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	239,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	240,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	241,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	242,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	243,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	244,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	245,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	246,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	247,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	248,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	249,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	250,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	251,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	252,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	253,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	254,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	255,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	256,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	257,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	258,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	259,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	260,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	261,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	262,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	263,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	264,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	265,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	266,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	267,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	268,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	269,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	270,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	271,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	272,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	273,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	274,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	275,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	276,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	277,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	278,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	279,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	280,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	281,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	282,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	283,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	284,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	285,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	286,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	287,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	288,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	289,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	290,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	291,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	292,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	293,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	294,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	295,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	296,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	297,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	298,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	299,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	300,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	301,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	302,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	303,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	304,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	305,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	306,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	307,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	308,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	309,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	310,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	311,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	312,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	313,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	314,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	315,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	316,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	317,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	318,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	319,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	320,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	321,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	322,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	323,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	324,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	325,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	326,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	327,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	328,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	329,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	330,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	331,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	332,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	333,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	334,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	335,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	336,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	337,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	338,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	339,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	340,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	341,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	342,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	343,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	344,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	345,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	346,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	347,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	348,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	349,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	350,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	351,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	352,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	353,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	354,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	355,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	356,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	357,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	358,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	359,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	360,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	361,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	362,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	363,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	364,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	365,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	366,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	367,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	368,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	369,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	370,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	371,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	372,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	373,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	374,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	375,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	376,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	377,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	378,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	379,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	380,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	381,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	382,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	383,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	384,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	385,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	386,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	387,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	388,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	389,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	390,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	391,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	392,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	393,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	394,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	395,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	396,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	397,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	398,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	399,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	400,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	401,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	402,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	403,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	404,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	405,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	406,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	407,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	408,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	409,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	410,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	411,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	412,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	413,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	414,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	415,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	416,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	417,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	418,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	419,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	420,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	421,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	422,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	423,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	424,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	425,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	426,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	427,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	428,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	429,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	430,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	431,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	432,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	433,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	434,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	435,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	436,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	437,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	438,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	439,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	440,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	441,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	442,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	443,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	444,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	445,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	446,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	447,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	448,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	449,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	450,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	451,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	452,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	453,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	454,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	455,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	456,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	457,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	458,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	459,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	460,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	461,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	462,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	463,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	464,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	465,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	466,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	467,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	468,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	469,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	470,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	471,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	472,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	473,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	474,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	475,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	476,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	477,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	478,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	479,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	480,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	481,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	482,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	483,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	484,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	485,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	486,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	487,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	488,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	489,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	490,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	491,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	492,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	493,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	494,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	495,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	496,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	497,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	498,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	499,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	500,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	501,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	502,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	503,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	504,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	505,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	506,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	507,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	508,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	509,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	510,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	511,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	512,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	513,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	514,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	515,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	516,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	517,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	518,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	519,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	520,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	521,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	522,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	523,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	524,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	525,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	526,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	527,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	528,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	529,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	530,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	531,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	532,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	533,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	534,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	535,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	536,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	537,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	538,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	539,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	540,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	541,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	542,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	543,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	544,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	545,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	546,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	547,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	548,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	549,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	550,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	551,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	552,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	553,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	554,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	555,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	556,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	557,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	558,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	559,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	560,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	561,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	562,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	563,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	564,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	565,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	566,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	567,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	568,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	569,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	570,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	571,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	572,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	573,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	574,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	575,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	576,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	577,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	578,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	579,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	580,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	581,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	582,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	583,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	584,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	585,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	586,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	587,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	588,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	589,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	590,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	591,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	592,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	593,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	594,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	595,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	596,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	597,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	598,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	599,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	600,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	601,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	602,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	603,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	604,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	605,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	606,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	607,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	608,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	609,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	610,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	611,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	612,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	613,
									"scores":	[-10.031122470095443, -11.171497440095443, -11.156037750095443, -11.460643310095445, -9.08448940009544, -11.349998950095443, -10.830194940095444, -10.329259940095444, -10.887409420095445, -10.641370506295443, -10.584156026295442, -10.927123663295443, -10.638184343295443, -8.2875205462954433, -10.331210543295443, -10.867295340095444, -10.830194940095444]
								}]
						}, {
							"switch":	48,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	392,
							"begin_column":	2,
							"end_line":	393,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L392\", 17, &(zretval), sizeof (zretval), &(us), sizeof (us), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(stream), sizeof (stream), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(old_in_user_include), sizeof (old_in_user_include), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    _zval_ptr_dtor((&zretval));\n", "if ((zretval) || __is_neg(\"\", \"L392\", 17, &(zretval), sizeof (zretval), &(us), sizeof (us), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(stream), sizeof (stream), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(old_in_user_include), sizeof (old_in_user_include), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    _zval_ptr_dtor((&zretval));\n", "if ((zretval) && !__is_neg(\"\", \"L392\", 17, &(zretval), sizeof (zretval), &(us), sizeof (us), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(stream), sizeof (stream), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(old_in_user_include), sizeof (old_in_user_include), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    _zval_ptr_dtor((&zretval));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6203739494281457, -5.9845147559281457, -5.7662147754281463, -6.2933603399281459, -5.0829360099281455, -6.5031458294281457, -6.0243074194281458, -5.7022963894281462, -6.4076410654281455, -5.6497529654281458, -5.2664193194281461, -5.7359708299281467, -5.7484499654281462, -3.998986619428146, -5.708019089428146, -6.318658219428146, -6.0243074194281458]
								}, {
									"case":	2,
									"scores":	[-4.4557507424281457, -5.8198915489281458, -5.6015915684281463, -6.1287371329281459, -4.9183128029281455, -6.3385226224281457, -5.8596842124281459, -5.5376731824281462, -6.2430178584281464, -5.4851297584281458, -5.1017961124281461, -5.5713476229281458, -5.5838267584281462, -3.834363412428146, -5.543395882428146, -6.154035012428146, -5.8596842124281459]
								}, {
									"case":	3,
									"scores":	[-4.4557507424281457, -5.8198915489281458, -5.6015915684281463, -6.1287371329281459, -4.9183128029281455, -6.3385226224281457, -5.8596842124281459, -5.5376731824281462, -6.2430178584281464, -5.4851297584281458, -5.1017961124281461, -5.5713476229281458, -5.5838267584281462, -3.834363412428146, -5.543395882428146, -6.154035012428146, -5.8596842124281459]
								}]
						}, {
							"switch":	51,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	392,
							"begin_column":	2,
							"end_line":	393,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L392\", 17, &(zretval), sizeof (zretval), &(us), sizeof (us), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(stream), sizeof (stream), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(old_in_user_include), sizeof (old_in_user_include), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    if (zretval)\n        _zval_ptr_dtor((&zretval));\n", "if (!__is_neg(\"\", \"L392\", 17, &(zretval), sizeof (zretval), &(us), sizeof (us), &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(stream), sizeof (stream), &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(old_in_user_include), sizeof (old_in_user_include), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)) && (zretval))\n    _zval_ptr_dtor((&zretval));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7997530688954431, -9.1638938753954431, -8.9455938948954437, -9.4727394593954433, -8.2623151293954429, -9.682524948895443, -9.2036865388954432, -8.88167550889544, -9.5870201848954437, -8.8291320848954431, -8.44579843889544, -8.9153499493954431, -8.9278290848954427, -7.1783657388954438, -8.8873982088954442, -9.4980373388954433, -9.2036865388954432]
								}, {
									"case":	2,
									"scores":	[-7.7997530688954431, -9.1638938753954431, -8.9455938948954437, -9.4727394593954433, -8.2623151293954429, -9.682524948895443, -9.2036865388954432, -8.88167550889544, -9.5870201848954437, -8.8291320848954431, -8.44579843889544, -8.9153499493954431, -8.9278290848954427, -7.1783657388954438, -8.8873982088954442, -9.4980373388954433, -9.2036865388954432]
								}]
						}]
				}, {
					"line":	394,
					"switches":	[{
							"switch":	52,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	395,
							"begin_column":	0,
							"end_line":	395,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L395\", 17, &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zretval), sizeof (zretval), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(us), sizeof (us), &(stream), sizeof (stream), &(old_in_user_include), sizeof (old_in_user_include), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.275739761577924]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}, {
									"case":	4,
									"scores":	[-6.275739761577924]
								}, {
									"case":	5,
									"scores":	[-6.275739761577924]
								}, {
									"case":	6,
									"scores":	[-6.275739761577924]
								}, {
									"case":	7,
									"scores":	[-6.275739761577924]
								}, {
									"case":	8,
									"scores":	[-6.275739761577924]
								}, {
									"case":	9,
									"scores":	[-6.275739761577924]
								}, {
									"case":	10,
									"scores":	[-6.275739761577924]
								}, {
									"case":	11,
									"scores":	[-6.275739761577924]
								}, {
									"case":	12,
									"scores":	[-6.275739761577924]
								}, {
									"case":	13,
									"scores":	[-6.275739761577924]
								}, {
									"case":	14,
									"scores":	[-6.275739761577924]
								}, {
									"case":	15,
									"scores":	[-6.275739761577924]
								}, {
									"case":	16,
									"scores":	[-6.275739761577924]
								}, {
									"case":	17,
									"scores":	[-6.275739761577924]
								}, {
									"case":	18,
									"scores":	[-6.275739761577924]
								}, {
									"case":	19,
									"scores":	[-6.275739761577924]
								}, {
									"case":	20,
									"scores":	[-6.275739761577924]
								}, {
									"case":	21,
									"scores":	[-6.275739761577924]
								}, {
									"case":	22,
									"scores":	[-6.275739761577924]
								}, {
									"case":	23,
									"scores":	[-6.275739761577924]
								}, {
									"case":	24,
									"scores":	[-6.275739761577924]
								}, {
									"case":	25,
									"scores":	[-6.275739761577924]
								}, {
									"case":	26,
									"scores":	[-6.275739761577924]
								}, {
									"case":	27,
									"scores":	[-6.275739761577924]
								}, {
									"case":	28,
									"scores":	[-6.275739761577924]
								}, {
									"case":	29,
									"scores":	[-6.275739761577924]
								}, {
									"case":	30,
									"scores":	[-6.275739761577924]
								}, {
									"case":	31,
									"scores":	[-6.275739761577924]
								}, {
									"case":	32,
									"scores":	[-6.275739761577924]
								}, {
									"case":	33,
									"scores":	[-6.275739761577924]
								}, {
									"case":	34,
									"scores":	[-6.275739761577924]
								}, {
									"case":	35,
									"scores":	[-6.275739761577924]
								}, {
									"case":	36,
									"scores":	[-6.275739761577924]
								}, {
									"case":	37,
									"scores":	[-6.275739761577924]
								}, {
									"case":	38,
									"scores":	[-6.275739761577924]
								}, {
									"case":	39,
									"scores":	[-6.275739761577924]
								}, {
									"case":	40,
									"scores":	[-6.275739761577924]
								}, {
									"case":	41,
									"scores":	[-6.275739761577924]
								}, {
									"case":	42,
									"scores":	[-6.275739761577924]
								}, {
									"case":	43,
									"scores":	[-6.275739761577924]
								}, {
									"case":	44,
									"scores":	[-6.275739761577924]
								}, {
									"case":	45,
									"scores":	[-6.275739761577924]
								}, {
									"case":	46,
									"scores":	[-6.275739761577924]
								}, {
									"case":	47,
									"scores":	[-6.275739761577924]
								}, {
									"case":	48,
									"scores":	[-6.275739761577924]
								}, {
									"case":	49,
									"scores":	[-6.275739761577924]
								}, {
									"case":	50,
									"scores":	[-6.275739761577924]
								}, {
									"case":	51,
									"scores":	[-6.275739761577924]
								}, {
									"case":	52,
									"scores":	[-6.275739761577924]
								}, {
									"case":	53,
									"scores":	[-6.275739761577924]
								}, {
									"case":	54,
									"scores":	[-6.275739761577924]
								}, {
									"case":	55,
									"scores":	[-6.275739761577924]
								}, {
									"case":	56,
									"scores":	[-6.275739761577924]
								}, {
									"case":	57,
									"scores":	[-6.275739761577924]
								}, {
									"case":	58,
									"scores":	[-6.275739761577924]
								}, {
									"case":	59,
									"scores":	[-6.275739761577924]
								}, {
									"case":	60,
									"scores":	[-6.275739761577924]
								}, {
									"case":	61,
									"scores":	[-6.275739761577924]
								}, {
									"case":	62,
									"scores":	[-6.275739761577924]
								}, {
									"case":	63,
									"scores":	[-6.275739761577924]
								}, {
									"case":	64,
									"scores":	[-6.275739761577924]
								}, {
									"case":	65,
									"scores":	[-6.275739761577924]
								}, {
									"case":	66,
									"scores":	[-6.275739761577924]
								}, {
									"case":	67,
									"scores":	[-6.275739761577924]
								}, {
									"case":	68,
									"scores":	[-6.275739761577924]
								}, {
									"case":	69,
									"scores":	[-6.275739761577924]
								}, {
									"case":	70,
									"scores":	[-6.275739761577924]
								}, {
									"case":	71,
									"scores":	[-6.275739761577924]
								}, {
									"case":	72,
									"scores":	[-6.275739761577924]
								}, {
									"case":	73,
									"scores":	[-6.275739761577924]
								}, {
									"case":	74,
									"scores":	[-6.275739761577924]
								}, {
									"case":	75,
									"scores":	[-6.275739761577924]
								}, {
									"case":	76,
									"scores":	[-6.275739761577924]
								}, {
									"case":	77,
									"scores":	[-6.275739761577924]
								}, {
									"case":	78,
									"scores":	[-6.275739761577924]
								}, {
									"case":	79,
									"scores":	[-6.275739761577924]
								}, {
									"case":	80,
									"scores":	[-6.275739761577924]
								}, {
									"case":	81,
									"scores":	[-6.275739761577924]
								}, {
									"case":	82,
									"scores":	[-6.275739761577924]
								}, {
									"case":	83,
									"scores":	[-6.275739761577924]
								}, {
									"case":	84,
									"scores":	[-6.275739761577924]
								}, {
									"case":	85,
									"scores":	[-6.275739761577924]
								}, {
									"case":	86,
									"scores":	[-6.275739761577924]
								}, {
									"case":	87,
									"scores":	[-6.275739761577924]
								}, {
									"case":	88,
									"scores":	[-6.275739761577924]
								}, {
									"case":	89,
									"scores":	[-6.275739761577924]
								}, {
									"case":	90,
									"scores":	[-6.275739761577924]
								}, {
									"case":	91,
									"scores":	[-6.275739761577924]
								}, {
									"case":	92,
									"scores":	[-6.275739761577924]
								}, {
									"case":	93,
									"scores":	[-6.275739761577924]
								}, {
									"case":	94,
									"scores":	[-6.275739761577924]
								}, {
									"case":	95,
									"scores":	[-6.275739761577924]
								}, {
									"case":	96,
									"scores":	[-6.275739761577924]
								}, {
									"case":	97,
									"scores":	[-6.275739761577924]
								}, {
									"case":	98,
									"scores":	[-6.275739761577924]
								}, {
									"case":	99,
									"scores":	[-6.275739761577924]
								}, {
									"case":	100,
									"scores":	[-6.275739761577924]
								}, {
									"case":	101,
									"scores":	[-6.275739761577924]
								}, {
									"case":	102,
									"scores":	[-6.275739761577924]
								}, {
									"case":	103,
									"scores":	[-6.275739761577924]
								}, {
									"case":	104,
									"scores":	[-6.275739761577924]
								}, {
									"case":	105,
									"scores":	[-6.275739761577924]
								}, {
									"case":	106,
									"scores":	[-6.275739761577924]
								}, {
									"case":	107,
									"scores":	[-6.275739761577924]
								}, {
									"case":	108,
									"scores":	[-6.275739761577924]
								}, {
									"case":	109,
									"scores":	[-6.275739761577924]
								}, {
									"case":	110,
									"scores":	[-6.275739761577924]
								}, {
									"case":	111,
									"scores":	[-6.275739761577924]
								}, {
									"case":	112,
									"scores":	[-6.275739761577924]
								}, {
									"case":	113,
									"scores":	[-6.275739761577924]
								}, {
									"case":	114,
									"scores":	[-6.275739761577924]
								}, {
									"case":	115,
									"scores":	[-6.275739761577924]
								}, {
									"case":	116,
									"scores":	[-6.275739761577924]
								}, {
									"case":	117,
									"scores":	[-6.275739761577924]
								}, {
									"case":	118,
									"scores":	[-6.275739761577924]
								}, {
									"case":	119,
									"scores":	[-6.275739761577924]
								}, {
									"case":	120,
									"scores":	[-6.275739761577924]
								}, {
									"case":	121,
									"scores":	[-6.275739761577924]
								}, {
									"case":	122,
									"scores":	[-6.275739761577924]
								}, {
									"case":	123,
									"scores":	[-6.275739761577924]
								}, {
									"case":	124,
									"scores":	[-6.275739761577924]
								}, {
									"case":	125,
									"scores":	[-6.275739761577924]
								}, {
									"case":	126,
									"scores":	[-6.275739761577924]
								}, {
									"case":	127,
									"scores":	[-6.275739761577924]
								}, {
									"case":	128,
									"scores":	[-6.275739761577924]
								}, {
									"case":	129,
									"scores":	[-6.275739761577924]
								}, {
									"case":	130,
									"scores":	[-6.275739761577924]
								}, {
									"case":	131,
									"scores":	[-6.275739761577924]
								}, {
									"case":	132,
									"scores":	[-6.275739761577924]
								}, {
									"case":	133,
									"scores":	[-6.275739761577924]
								}, {
									"case":	134,
									"scores":	[-6.275739761577924]
								}, {
									"case":	135,
									"scores":	[-6.275739761577924]
								}, {
									"case":	136,
									"scores":	[-6.275739761577924]
								}, {
									"case":	137,
									"scores":	[-6.275739761577924]
								}, {
									"case":	138,
									"scores":	[-6.275739761577924]
								}, {
									"case":	139,
									"scores":	[-6.275739761577924]
								}, {
									"case":	140,
									"scores":	[-6.275739761577924]
								}, {
									"case":	141,
									"scores":	[-6.275739761577924]
								}, {
									"case":	142,
									"scores":	[-6.275739761577924]
								}, {
									"case":	143,
									"scores":	[-6.275739761577924]
								}, {
									"case":	144,
									"scores":	[-6.275739761577924]
								}, {
									"case":	145,
									"scores":	[-6.275739761577924]
								}, {
									"case":	146,
									"scores":	[-6.275739761577924]
								}, {
									"case":	147,
									"scores":	[-6.275739761577924]
								}, {
									"case":	148,
									"scores":	[-6.275739761577924]
								}, {
									"case":	149,
									"scores":	[-6.275739761577924]
								}, {
									"case":	150,
									"scores":	[-6.275739761577924]
								}, {
									"case":	151,
									"scores":	[-6.275739761577924]
								}, {
									"case":	152,
									"scores":	[-6.275739761577924]
								}, {
									"case":	153,
									"scores":	[-6.275739761577924]
								}, {
									"case":	154,
									"scores":	[-6.275739761577924]
								}, {
									"case":	155,
									"scores":	[-6.275739761577924]
								}, {
									"case":	156,
									"scores":	[-6.275739761577924]
								}, {
									"case":	157,
									"scores":	[-6.275739761577924]
								}, {
									"case":	158,
									"scores":	[-6.275739761577924]
								}, {
									"case":	159,
									"scores":	[-6.275739761577924]
								}, {
									"case":	160,
									"scores":	[-6.275739761577924]
								}, {
									"case":	161,
									"scores":	[-6.275739761577924]
								}, {
									"case":	162,
									"scores":	[-6.275739761577924]
								}, {
									"case":	163,
									"scores":	[-6.275739761577924]
								}, {
									"case":	164,
									"scores":	[-6.275739761577924]
								}, {
									"case":	165,
									"scores":	[-6.275739761577924]
								}, {
									"case":	166,
									"scores":	[-6.275739761577924]
								}, {
									"case":	167,
									"scores":	[-6.275739761577924]
								}, {
									"case":	168,
									"scores":	[-6.275739761577924]
								}, {
									"case":	169,
									"scores":	[-6.275739761577924]
								}, {
									"case":	170,
									"scores":	[-6.275739761577924]
								}, {
									"case":	171,
									"scores":	[-6.275739761577924]
								}, {
									"case":	172,
									"scores":	[-6.275739761577924]
								}, {
									"case":	173,
									"scores":	[-6.275739761577924]
								}, {
									"case":	174,
									"scores":	[-6.275739761577924]
								}, {
									"case":	175,
									"scores":	[-6.275739761577924]
								}, {
									"case":	176,
									"scores":	[-6.275739761577924]
								}, {
									"case":	177,
									"scores":	[-6.275739761577924]
								}, {
									"case":	178,
									"scores":	[-6.275739761577924]
								}, {
									"case":	179,
									"scores":	[-6.275739761577924]
								}, {
									"case":	180,
									"scores":	[-6.275739761577924]
								}, {
									"case":	181,
									"scores":	[-6.275739761577924]
								}, {
									"case":	182,
									"scores":	[-6.275739761577924]
								}, {
									"case":	183,
									"scores":	[-6.275739761577924]
								}, {
									"case":	184,
									"scores":	[-6.275739761577924]
								}, {
									"case":	185,
									"scores":	[-6.275739761577924]
								}, {
									"case":	186,
									"scores":	[-6.275739761577924]
								}, {
									"case":	187,
									"scores":	[-6.275739761577924]
								}, {
									"case":	188,
									"scores":	[-6.275739761577924]
								}, {
									"case":	189,
									"scores":	[-6.275739761577924]
								}, {
									"case":	190,
									"scores":	[-6.275739761577924]
								}, {
									"case":	191,
									"scores":	[-6.275739761577924]
								}, {
									"case":	192,
									"scores":	[-6.275739761577924]
								}, {
									"case":	193,
									"scores":	[-6.275739761577924]
								}, {
									"case":	194,
									"scores":	[-6.275739761577924]
								}, {
									"case":	195,
									"scores":	[-6.275739761577924]
								}, {
									"case":	196,
									"scores":	[-6.275739761577924]
								}, {
									"case":	197,
									"scores":	[-6.275739761577924]
								}, {
									"case":	198,
									"scores":	[-6.275739761577924]
								}, {
									"case":	199,
									"scores":	[-6.275739761577924]
								}, {
									"case":	200,
									"scores":	[-6.275739761577924]
								}, {
									"case":	201,
									"scores":	[-6.275739761577924]
								}, {
									"case":	202,
									"scores":	[-6.275739761577924]
								}, {
									"case":	203,
									"scores":	[-6.275739761577924]
								}, {
									"case":	204,
									"scores":	[-6.275739761577924]
								}, {
									"case":	205,
									"scores":	[-6.275739761577924]
								}, {
									"case":	206,
									"scores":	[-6.275739761577924]
								}, {
									"case":	207,
									"scores":	[-6.275739761577924]
								}, {
									"case":	208,
									"scores":	[-6.275739761577924]
								}, {
									"case":	209,
									"scores":	[-6.275739761577924]
								}, {
									"case":	210,
									"scores":	[-6.275739761577924]
								}, {
									"case":	211,
									"scores":	[-6.275739761577924]
								}, {
									"case":	212,
									"scores":	[-6.275739761577924]
								}, {
									"case":	213,
									"scores":	[-6.275739761577924]
								}, {
									"case":	214,
									"scores":	[-6.275739761577924]
								}, {
									"case":	215,
									"scores":	[-6.275739761577924]
								}, {
									"case":	216,
									"scores":	[-6.275739761577924]
								}, {
									"case":	217,
									"scores":	[-6.275739761577924]
								}, {
									"case":	218,
									"scores":	[-6.275739761577924]
								}, {
									"case":	219,
									"scores":	[-6.275739761577924]
								}, {
									"case":	220,
									"scores":	[-6.275739761577924]
								}, {
									"case":	221,
									"scores":	[-6.275739761577924]
								}, {
									"case":	222,
									"scores":	[-6.275739761577924]
								}, {
									"case":	223,
									"scores":	[-6.275739761577924]
								}, {
									"case":	224,
									"scores":	[-6.275739761577924]
								}, {
									"case":	225,
									"scores":	[-6.275739761577924]
								}, {
									"case":	226,
									"scores":	[-6.275739761577924]
								}, {
									"case":	227,
									"scores":	[-6.275739761577924]
								}, {
									"case":	228,
									"scores":	[-6.275739761577924]
								}, {
									"case":	229,
									"scores":	[-6.275739761577924]
								}, {
									"case":	230,
									"scores":	[-6.275739761577924]
								}, {
									"case":	231,
									"scores":	[-6.275739761577924]
								}, {
									"case":	232,
									"scores":	[-6.275739761577924]
								}, {
									"case":	233,
									"scores":	[-6.275739761577924]
								}, {
									"case":	234,
									"scores":	[-6.275739761577924]
								}, {
									"case":	235,
									"scores":	[-6.275739761577924]
								}, {
									"case":	236,
									"scores":	[-6.275739761577924]
								}, {
									"case":	237,
									"scores":	[-6.275739761577924]
								}, {
									"case":	238,
									"scores":	[-6.275739761577924]
								}, {
									"case":	239,
									"scores":	[-6.275739761577924]
								}, {
									"case":	240,
									"scores":	[-6.275739761577924]
								}, {
									"case":	241,
									"scores":	[-6.275739761577924]
								}, {
									"case":	242,
									"scores":	[-6.275739761577924]
								}, {
									"case":	243,
									"scores":	[-6.275739761577924]
								}, {
									"case":	244,
									"scores":	[-6.275739761577924]
								}, {
									"case":	245,
									"scores":	[-6.275739761577924]
								}, {
									"case":	246,
									"scores":	[-6.275739761577924]
								}, {
									"case":	247,
									"scores":	[-6.275739761577924]
								}, {
									"case":	248,
									"scores":	[-6.275739761577924]
								}, {
									"case":	249,
									"scores":	[-6.275739761577924]
								}, {
									"case":	250,
									"scores":	[-6.275739761577924]
								}, {
									"case":	251,
									"scores":	[-6.275739761577924]
								}, {
									"case":	252,
									"scores":	[-6.275739761577924]
								}, {
									"case":	253,
									"scores":	[-6.275739761577924]
								}, {
									"case":	254,
									"scores":	[-6.275739761577924]
								}, {
									"case":	255,
									"scores":	[-6.275739761577924]
								}, {
									"case":	256,
									"scores":	[-6.275739761577924]
								}, {
									"case":	257,
									"scores":	[-6.275739761577924]
								}, {
									"case":	258,
									"scores":	[-6.275739761577924]
								}, {
									"case":	259,
									"scores":	[-6.275739761577924]
								}, {
									"case":	260,
									"scores":	[-6.275739761577924]
								}, {
									"case":	261,
									"scores":	[-6.275739761577924]
								}, {
									"case":	262,
									"scores":	[-6.275739761577924]
								}, {
									"case":	263,
									"scores":	[-6.275739761577924]
								}, {
									"case":	264,
									"scores":	[-6.275739761577924]
								}, {
									"case":	265,
									"scores":	[-6.275739761577924]
								}, {
									"case":	266,
									"scores":	[-6.275739761577924]
								}, {
									"case":	267,
									"scores":	[-6.275739761577924]
								}, {
									"case":	268,
									"scores":	[-6.275739761577924]
								}, {
									"case":	269,
									"scores":	[-6.275739761577924]
								}, {
									"case":	270,
									"scores":	[-6.275739761577924]
								}, {
									"case":	271,
									"scores":	[-6.275739761577924]
								}, {
									"case":	272,
									"scores":	[-6.275739761577924]
								}, {
									"case":	273,
									"scores":	[-6.275739761577924]
								}, {
									"case":	274,
									"scores":	[-6.275739761577924]
								}, {
									"case":	275,
									"scores":	[-6.275739761577924]
								}, {
									"case":	276,
									"scores":	[-6.275739761577924]
								}, {
									"case":	277,
									"scores":	[-6.275739761577924]
								}, {
									"case":	278,
									"scores":	[-6.275739761577924]
								}, {
									"case":	279,
									"scores":	[-6.275739761577924]
								}, {
									"case":	280,
									"scores":	[-6.275739761577924]
								}, {
									"case":	281,
									"scores":	[-6.275739761577924]
								}, {
									"case":	282,
									"scores":	[-6.275739761577924]
								}, {
									"case":	283,
									"scores":	[-6.275739761577924]
								}, {
									"case":	284,
									"scores":	[-6.275739761577924]
								}, {
									"case":	285,
									"scores":	[-6.275739761577924]
								}, {
									"case":	286,
									"scores":	[-6.275739761577924]
								}, {
									"case":	287,
									"scores":	[-6.275739761577924]
								}, {
									"case":	288,
									"scores":	[-6.275739761577924]
								}, {
									"case":	289,
									"scores":	[-6.275739761577924]
								}, {
									"case":	290,
									"scores":	[-6.275739761577924]
								}, {
									"case":	291,
									"scores":	[-6.275739761577924]
								}, {
									"case":	292,
									"scores":	[-6.275739761577924]
								}, {
									"case":	293,
									"scores":	[-6.275739761577924]
								}, {
									"case":	294,
									"scores":	[-6.275739761577924]
								}, {
									"case":	295,
									"scores":	[-6.275739761577924]
								}, {
									"case":	296,
									"scores":	[-6.275739761577924]
								}, {
									"case":	297,
									"scores":	[-6.275739761577924]
								}, {
									"case":	298,
									"scores":	[-6.275739761577924]
								}, {
									"case":	299,
									"scores":	[-6.275739761577924]
								}, {
									"case":	300,
									"scores":	[-6.275739761577924]
								}, {
									"case":	301,
									"scores":	[-6.275739761577924]
								}, {
									"case":	302,
									"scores":	[-6.275739761577924]
								}, {
									"case":	303,
									"scores":	[-6.275739761577924]
								}, {
									"case":	304,
									"scores":	[-6.275739761577924]
								}, {
									"case":	305,
									"scores":	[-6.275739761577924]
								}, {
									"case":	306,
									"scores":	[-6.275739761577924]
								}, {
									"case":	307,
									"scores":	[-6.275739761577924]
								}, {
									"case":	308,
									"scores":	[-6.275739761577924]
								}, {
									"case":	309,
									"scores":	[-6.275739761577924]
								}, {
									"case":	310,
									"scores":	[-6.275739761577924]
								}, {
									"case":	311,
									"scores":	[-6.275739761577924]
								}, {
									"case":	312,
									"scores":	[-6.275739761577924]
								}, {
									"case":	313,
									"scores":	[-6.275739761577924]
								}, {
									"case":	314,
									"scores":	[-6.275739761577924]
								}, {
									"case":	315,
									"scores":	[-6.275739761577924]
								}, {
									"case":	316,
									"scores":	[-6.275739761577924]
								}, {
									"case":	317,
									"scores":	[-6.275739761577924]
								}, {
									"case":	318,
									"scores":	[-6.275739761577924]
								}, {
									"case":	319,
									"scores":	[-6.275739761577924]
								}, {
									"case":	320,
									"scores":	[-6.275739761577924]
								}, {
									"case":	321,
									"scores":	[-6.275739761577924]
								}, {
									"case":	322,
									"scores":	[-6.275739761577924]
								}, {
									"case":	323,
									"scores":	[-6.275739761577924]
								}, {
									"case":	324,
									"scores":	[-6.275739761577924]
								}, {
									"case":	325,
									"scores":	[-6.275739761577924]
								}, {
									"case":	326,
									"scores":	[-6.275739761577924]
								}, {
									"case":	327,
									"scores":	[-6.275739761577924]
								}, {
									"case":	328,
									"scores":	[-6.275739761577924]
								}, {
									"case":	329,
									"scores":	[-6.275739761577924]
								}, {
									"case":	330,
									"scores":	[-6.275739761577924]
								}, {
									"case":	331,
									"scores":	[-6.275739761577924]
								}, {
									"case":	332,
									"scores":	[-6.275739761577924]
								}, {
									"case":	333,
									"scores":	[-6.275739761577924]
								}, {
									"case":	334,
									"scores":	[-6.275739761577924]
								}, {
									"case":	335,
									"scores":	[-6.275739761577924]
								}, {
									"case":	336,
									"scores":	[-6.275739761577924]
								}, {
									"case":	337,
									"scores":	[-6.275739761577924]
								}, {
									"case":	338,
									"scores":	[-6.275739761577924]
								}, {
									"case":	339,
									"scores":	[-6.275739761577924]
								}, {
									"case":	340,
									"scores":	[-6.275739761577924]
								}, {
									"case":	341,
									"scores":	[-6.275739761577924]
								}, {
									"case":	342,
									"scores":	[-6.275739761577924]
								}, {
									"case":	343,
									"scores":	[-6.275739761577924]
								}, {
									"case":	344,
									"scores":	[-6.275739761577924]
								}, {
									"case":	345,
									"scores":	[-6.275739761577924]
								}, {
									"case":	346,
									"scores":	[-6.275739761577924]
								}, {
									"case":	347,
									"scores":	[-6.275739761577924]
								}, {
									"case":	348,
									"scores":	[-6.275739761577924]
								}, {
									"case":	349,
									"scores":	[-6.275739761577924]
								}, {
									"case":	350,
									"scores":	[-6.275739761577924]
								}, {
									"case":	351,
									"scores":	[-6.275739761577924]
								}, {
									"case":	352,
									"scores":	[-6.275739761577924]
								}, {
									"case":	353,
									"scores":	[-6.275739761577924]
								}, {
									"case":	354,
									"scores":	[-6.275739761577924]
								}, {
									"case":	355,
									"scores":	[-6.275739761577924]
								}, {
									"case":	356,
									"scores":	[-6.275739761577924]
								}, {
									"case":	357,
									"scores":	[-6.275739761577924]
								}, {
									"case":	358,
									"scores":	[-6.275739761577924]
								}, {
									"case":	359,
									"scores":	[-6.275739761577924]
								}, {
									"case":	360,
									"scores":	[-6.275739761577924]
								}, {
									"case":	361,
									"scores":	[-6.275739761577924]
								}, {
									"case":	362,
									"scores":	[-6.275739761577924]
								}, {
									"case":	363,
									"scores":	[-6.275739761577924]
								}, {
									"case":	364,
									"scores":	[-6.275739761577924]
								}, {
									"case":	365,
									"scores":	[-6.275739761577924]
								}, {
									"case":	366,
									"scores":	[-6.275739761577924]
								}, {
									"case":	367,
									"scores":	[-6.275739761577924]
								}, {
									"case":	368,
									"scores":	[-6.275739761577924]
								}, {
									"case":	369,
									"scores":	[-6.275739761577924]
								}, {
									"case":	370,
									"scores":	[-6.275739761577924]
								}, {
									"case":	371,
									"scores":	[-6.275739761577924]
								}, {
									"case":	372,
									"scores":	[-6.275739761577924]
								}, {
									"case":	373,
									"scores":	[-6.275739761577924]
								}, {
									"case":	374,
									"scores":	[-6.275739761577924]
								}, {
									"case":	375,
									"scores":	[-6.275739761577924]
								}, {
									"case":	376,
									"scores":	[-6.275739761577924]
								}, {
									"case":	377,
									"scores":	[-6.275739761577924]
								}, {
									"case":	378,
									"scores":	[-6.275739761577924]
								}, {
									"case":	379,
									"scores":	[-6.275739761577924]
								}, {
									"case":	380,
									"scores":	[-6.275739761577924]
								}, {
									"case":	381,
									"scores":	[-6.275739761577924]
								}, {
									"case":	382,
									"scores":	[-6.275739761577924]
								}, {
									"case":	383,
									"scores":	[-6.275739761577924]
								}, {
									"case":	384,
									"scores":	[-6.275739761577924]
								}, {
									"case":	385,
									"scores":	[-6.275739761577924]
								}, {
									"case":	386,
									"scores":	[-6.275739761577924]
								}, {
									"case":	387,
									"scores":	[-6.275739761577924]
								}, {
									"case":	388,
									"scores":	[-6.275739761577924]
								}, {
									"case":	389,
									"scores":	[-6.275739761577924]
								}, {
									"case":	390,
									"scores":	[-6.275739761577924]
								}, {
									"case":	391,
									"scores":	[-6.275739761577924]
								}, {
									"case":	392,
									"scores":	[-6.275739761577924]
								}, {
									"case":	393,
									"scores":	[-6.275739761577924]
								}, {
									"case":	394,
									"scores":	[-6.275739761577924]
								}, {
									"case":	395,
									"scores":	[-6.275739761577924]
								}, {
									"case":	396,
									"scores":	[-6.275739761577924]
								}, {
									"case":	397,
									"scores":	[-6.275739761577924]
								}, {
									"case":	398,
									"scores":	[-6.275739761577924]
								}, {
									"case":	399,
									"scores":	[-6.275739761577924]
								}, {
									"case":	400,
									"scores":	[-6.275739761577924]
								}, {
									"case":	401,
									"scores":	[-6.275739761577924]
								}, {
									"case":	402,
									"scores":	[-6.275739761577924]
								}, {
									"case":	403,
									"scores":	[-6.275739761577924]
								}, {
									"case":	404,
									"scores":	[-6.275739761577924]
								}, {
									"case":	405,
									"scores":	[-6.275739761577924]
								}, {
									"case":	406,
									"scores":	[-6.275739761577924]
								}, {
									"case":	407,
									"scores":	[-6.275739761577924]
								}, {
									"case":	408,
									"scores":	[-6.275739761577924]
								}, {
									"case":	409,
									"scores":	[-6.275739761577924]
								}, {
									"case":	410,
									"scores":	[-6.275739761577924]
								}, {
									"case":	411,
									"scores":	[-6.275739761577924]
								}, {
									"case":	412,
									"scores":	[-6.275739761577924]
								}, {
									"case":	413,
									"scores":	[-6.275739761577924]
								}, {
									"case":	414,
									"scores":	[-6.275739761577924]
								}, {
									"case":	415,
									"scores":	[-6.275739761577924]
								}, {
									"case":	416,
									"scores":	[-6.275739761577924]
								}, {
									"case":	417,
									"scores":	[-6.275739761577924]
								}, {
									"case":	418,
									"scores":	[-6.275739761577924]
								}, {
									"case":	419,
									"scores":	[-6.275739761577924]
								}, {
									"case":	420,
									"scores":	[-6.275739761577924]
								}, {
									"case":	421,
									"scores":	[-6.275739761577924]
								}, {
									"case":	422,
									"scores":	[-6.275739761577924]
								}, {
									"case":	423,
									"scores":	[-6.275739761577924]
								}, {
									"case":	424,
									"scores":	[-6.275739761577924]
								}, {
									"case":	425,
									"scores":	[-6.275739761577924]
								}, {
									"case":	426,
									"scores":	[-6.275739761577924]
								}, {
									"case":	427,
									"scores":	[-6.275739761577924]
								}, {
									"case":	428,
									"scores":	[-6.275739761577924]
								}, {
									"case":	429,
									"scores":	[-6.275739761577924]
								}, {
									"case":	430,
									"scores":	[-6.275739761577924]
								}, {
									"case":	431,
									"scores":	[-6.275739761577924]
								}, {
									"case":	432,
									"scores":	[-6.275739761577924]
								}, {
									"case":	433,
									"scores":	[-6.275739761577924]
								}, {
									"case":	434,
									"scores":	[-6.275739761577924]
								}, {
									"case":	435,
									"scores":	[-6.275739761577924]
								}, {
									"case":	436,
									"scores":	[-6.275739761577924]
								}, {
									"case":	437,
									"scores":	[-6.275739761577924]
								}, {
									"case":	438,
									"scores":	[-6.275739761577924]
								}, {
									"case":	439,
									"scores":	[-6.275739761577924]
								}, {
									"case":	440,
									"scores":	[-6.275739761577924]
								}, {
									"case":	441,
									"scores":	[-6.275739761577924]
								}, {
									"case":	442,
									"scores":	[-6.275739761577924]
								}, {
									"case":	443,
									"scores":	[-6.275739761577924]
								}, {
									"case":	444,
									"scores":	[-6.275739761577924]
								}, {
									"case":	445,
									"scores":	[-6.275739761577924]
								}, {
									"case":	446,
									"scores":	[-6.275739761577924]
								}, {
									"case":	447,
									"scores":	[-6.275739761577924]
								}, {
									"case":	448,
									"scores":	[-6.275739761577924]
								}, {
									"case":	449,
									"scores":	[-6.275739761577924]
								}, {
									"case":	450,
									"scores":	[-6.275739761577924]
								}, {
									"case":	451,
									"scores":	[-6.275739761577924]
								}, {
									"case":	452,
									"scores":	[-6.275739761577924]
								}, {
									"case":	453,
									"scores":	[-6.275739761577924]
								}, {
									"case":	454,
									"scores":	[-6.275739761577924]
								}, {
									"case":	455,
									"scores":	[-6.275739761577924]
								}, {
									"case":	456,
									"scores":	[-6.275739761577924]
								}, {
									"case":	457,
									"scores":	[-6.275739761577924]
								}, {
									"case":	458,
									"scores":	[-6.275739761577924]
								}, {
									"case":	459,
									"scores":	[-6.275739761577924]
								}, {
									"case":	460,
									"scores":	[-6.275739761577924]
								}, {
									"case":	461,
									"scores":	[-6.275739761577924]
								}, {
									"case":	462,
									"scores":	[-6.275739761577924]
								}, {
									"case":	463,
									"scores":	[-6.275739761577924]
								}, {
									"case":	464,
									"scores":	[-6.275739761577924]
								}, {
									"case":	465,
									"scores":	[-6.275739761577924]
								}, {
									"case":	466,
									"scores":	[-6.275739761577924]
								}, {
									"case":	467,
									"scores":	[-6.275739761577924]
								}, {
									"case":	468,
									"scores":	[-6.275739761577924]
								}, {
									"case":	469,
									"scores":	[-6.275739761577924]
								}, {
									"case":	470,
									"scores":	[-6.275739761577924]
								}, {
									"case":	471,
									"scores":	[-6.275739761577924]
								}, {
									"case":	472,
									"scores":	[-6.275739761577924]
								}, {
									"case":	473,
									"scores":	[-6.275739761577924]
								}, {
									"case":	474,
									"scores":	[-6.275739761577924]
								}, {
									"case":	475,
									"scores":	[-6.275739761577924]
								}, {
									"case":	476,
									"scores":	[-6.275739761577924]
								}, {
									"case":	477,
									"scores":	[-6.275739761577924]
								}, {
									"case":	478,
									"scores":	[-6.275739761577924]
								}, {
									"case":	479,
									"scores":	[-6.275739761577924]
								}, {
									"case":	480,
									"scores":	[-6.275739761577924]
								}, {
									"case":	481,
									"scores":	[-6.275739761577924]
								}, {
									"case":	482,
									"scores":	[-6.275739761577924]
								}, {
									"case":	483,
									"scores":	[-6.275739761577924]
								}, {
									"case":	484,
									"scores":	[-6.275739761577924]
								}, {
									"case":	485,
									"scores":	[-6.275739761577924]
								}, {
									"case":	486,
									"scores":	[-6.275739761577924]
								}, {
									"case":	487,
									"scores":	[-6.275739761577924]
								}, {
									"case":	488,
									"scores":	[-6.275739761577924]
								}, {
									"case":	489,
									"scores":	[-6.275739761577924]
								}, {
									"case":	490,
									"scores":	[-6.275739761577924]
								}, {
									"case":	491,
									"scores":	[-6.275739761577924]
								}, {
									"case":	492,
									"scores":	[-6.275739761577924]
								}, {
									"case":	493,
									"scores":	[-6.275739761577924]
								}, {
									"case":	494,
									"scores":	[-6.275739761577924]
								}, {
									"case":	495,
									"scores":	[-6.275739761577924]
								}, {
									"case":	496,
									"scores":	[-6.275739761577924]
								}, {
									"case":	497,
									"scores":	[-6.275739761577924]
								}, {
									"case":	498,
									"scores":	[-6.275739761577924]
								}, {
									"case":	499,
									"scores":	[-6.275739761577924]
								}, {
									"case":	500,
									"scores":	[-6.275739761577924]
								}, {
									"case":	501,
									"scores":	[-6.275739761577924]
								}, {
									"case":	502,
									"scores":	[-6.275739761577924]
								}, {
									"case":	503,
									"scores":	[-6.275739761577924]
								}, {
									"case":	504,
									"scores":	[-6.275739761577924]
								}, {
									"case":	505,
									"scores":	[-6.275739761577924]
								}, {
									"case":	506,
									"scores":	[-6.275739761577924]
								}, {
									"case":	507,
									"scores":	[-6.275739761577924]
								}, {
									"case":	508,
									"scores":	[-6.275739761577924]
								}, {
									"case":	509,
									"scores":	[-6.275739761577924]
								}, {
									"case":	510,
									"scores":	[-6.275739761577924]
								}, {
									"case":	511,
									"scores":	[-6.275739761577924]
								}, {
									"case":	512,
									"scores":	[-6.275739761577924]
								}, {
									"case":	513,
									"scores":	[-6.275739761577924]
								}, {
									"case":	514,
									"scores":	[-6.275739761577924]
								}, {
									"case":	515,
									"scores":	[-6.275739761577924]
								}, {
									"case":	516,
									"scores":	[-6.275739761577924]
								}, {
									"case":	517,
									"scores":	[-6.275739761577924]
								}, {
									"case":	518,
									"scores":	[-6.275739761577924]
								}, {
									"case":	519,
									"scores":	[-6.275739761577924]
								}, {
									"case":	520,
									"scores":	[-6.275739761577924]
								}, {
									"case":	521,
									"scores":	[-6.275739761577924]
								}, {
									"case":	522,
									"scores":	[-6.275739761577924]
								}, {
									"case":	523,
									"scores":	[-6.275739761577924]
								}, {
									"case":	524,
									"scores":	[-6.275739761577924]
								}, {
									"case":	525,
									"scores":	[-6.275739761577924]
								}, {
									"case":	526,
									"scores":	[-6.275739761577924]
								}, {
									"case":	527,
									"scores":	[-6.275739761577924]
								}, {
									"case":	528,
									"scores":	[-6.275739761577924]
								}, {
									"case":	529,
									"scores":	[-6.275739761577924]
								}, {
									"case":	530,
									"scores":	[-6.275739761577924]
								}, {
									"case":	531,
									"scores":	[-6.275739761577924]
								}, {
									"case":	532,
									"scores":	[-6.275739761577924]
								}, {
									"case":	533,
									"scores":	[-6.275739761577924]
								}, {
									"case":	534,
									"scores":	[-6.275739761577924]
								}, {
									"case":	535,
									"scores":	[-6.275739761577924]
								}, {
									"case":	536,
									"scores":	[-6.275739761577924]
								}, {
									"case":	537,
									"scores":	[-6.275739761577924]
								}, {
									"case":	538,
									"scores":	[-6.275739761577924]
								}, {
									"case":	539,
									"scores":	[-6.275739761577924]
								}, {
									"case":	540,
									"scores":	[-6.275739761577924]
								}, {
									"case":	541,
									"scores":	[-6.275739761577924]
								}, {
									"case":	542,
									"scores":	[-6.275739761577924]
								}, {
									"case":	543,
									"scores":	[-6.275739761577924]
								}, {
									"case":	544,
									"scores":	[-6.275739761577924]
								}, {
									"case":	545,
									"scores":	[-6.275739761577924]
								}, {
									"case":	546,
									"scores":	[-6.275739761577924]
								}, {
									"case":	547,
									"scores":	[-6.275739761577924]
								}, {
									"case":	548,
									"scores":	[-6.275739761577924]
								}, {
									"case":	549,
									"scores":	[-6.275739761577924]
								}, {
									"case":	550,
									"scores":	[-6.275739761577924]
								}, {
									"case":	551,
									"scores":	[-6.275739761577924]
								}, {
									"case":	552,
									"scores":	[-6.275739761577924]
								}, {
									"case":	553,
									"scores":	[-6.275739761577924]
								}, {
									"case":	554,
									"scores":	[-6.275739761577924]
								}, {
									"case":	555,
									"scores":	[-6.275739761577924]
								}, {
									"case":	556,
									"scores":	[-6.275739761577924]
								}, {
									"case":	557,
									"scores":	[-6.275739761577924]
								}, {
									"case":	558,
									"scores":	[-6.275739761577924]
								}, {
									"case":	559,
									"scores":	[-6.275739761577924]
								}, {
									"case":	560,
									"scores":	[-6.275739761577924]
								}, {
									"case":	561,
									"scores":	[-6.275739761577924]
								}, {
									"case":	562,
									"scores":	[-6.275739761577924]
								}, {
									"case":	563,
									"scores":	[-6.275739761577924]
								}, {
									"case":	564,
									"scores":	[-6.275739761577924]
								}, {
									"case":	565,
									"scores":	[-6.275739761577924]
								}, {
									"case":	566,
									"scores":	[-6.275739761577924]
								}, {
									"case":	567,
									"scores":	[-6.275739761577924]
								}, {
									"case":	568,
									"scores":	[-6.275739761577924]
								}, {
									"case":	569,
									"scores":	[-6.275739761577924]
								}, {
									"case":	570,
									"scores":	[-6.275739761577924]
								}, {
									"case":	571,
									"scores":	[-6.275739761577924]
								}, {
									"case":	572,
									"scores":	[-6.275739761577924]
								}, {
									"case":	573,
									"scores":	[-6.275739761577924]
								}, {
									"case":	574,
									"scores":	[-6.275739761577924]
								}, {
									"case":	575,
									"scores":	[-6.275739761577924]
								}, {
									"case":	576,
									"scores":	[-6.275739761577924]
								}, {
									"case":	577,
									"scores":	[-6.275739761577924]
								}, {
									"case":	578,
									"scores":	[-6.275739761577924]
								}, {
									"case":	579,
									"scores":	[-6.275739761577924]
								}, {
									"case":	580,
									"scores":	[-6.275739761577924]
								}, {
									"case":	581,
									"scores":	[-6.275739761577924]
								}, {
									"case":	582,
									"scores":	[-6.275739761577924]
								}, {
									"case":	583,
									"scores":	[-6.275739761577924]
								}, {
									"case":	584,
									"scores":	[-6.275739761577924]
								}, {
									"case":	585,
									"scores":	[-6.275739761577924]
								}, {
									"case":	586,
									"scores":	[-6.275739761577924]
								}, {
									"case":	587,
									"scores":	[-6.275739761577924]
								}, {
									"case":	588,
									"scores":	[-6.275739761577924]
								}, {
									"case":	589,
									"scores":	[-6.275739761577924]
								}, {
									"case":	590,
									"scores":	[-6.275739761577924]
								}, {
									"case":	591,
									"scores":	[-6.275739761577924]
								}, {
									"case":	592,
									"scores":	[-6.275739761577924]
								}, {
									"case":	593,
									"scores":	[-6.275739761577924]
								}, {
									"case":	594,
									"scores":	[-6.275739761577924]
								}, {
									"case":	595,
									"scores":	[-6.275739761577924]
								}, {
									"case":	596,
									"scores":	[-6.275739761577924]
								}, {
									"case":	597,
									"scores":	[-6.275739761577924]
								}, {
									"case":	598,
									"scores":	[-6.275739761577924]
								}, {
									"case":	599,
									"scores":	[-6.275739761577924]
								}, {
									"case":	600,
									"scores":	[-6.275739761577924]
								}, {
									"case":	601,
									"scores":	[-6.275739761577924]
								}, {
									"case":	602,
									"scores":	[-6.275739761577924]
								}, {
									"case":	603,
									"scores":	[-6.275739761577924]
								}, {
									"case":	604,
									"scores":	[-6.275739761577924]
								}, {
									"case":	605,
									"scores":	[-6.275739761577924]
								}, {
									"case":	606,
									"scores":	[-6.275739761577924]
								}, {
									"case":	607,
									"scores":	[-6.275739761577924]
								}, {
									"case":	608,
									"scores":	[-6.275739761577924]
								}, {
									"case":	609,
									"scores":	[-6.275739761577924]
								}, {
									"case":	610,
									"scores":	[-6.275739761577924]
								}, {
									"case":	611,
									"scores":	[-6.275739761577924]
								}, {
									"case":	612,
									"scores":	[-6.275739761577924]
								}, {
									"case":	613,
									"scores":	[-8.67861536277792, -9.0650204027779235, -8.9543760427779233, -7.6055315127779242, -8.9543760427779233, -7.9336370327779244, -8.7758745327779231, -6.6888664927779242, -8.188533118977924, -8.4917865127779244, -8.2457475989779248, -8.5315007559779232, -8.2425614359779242, -7.6967291189779239, -7.9355876359779245, -8.4716724327779236, -8.4345720327779237]
								}]
						}, {
							"switch":	53,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [6, 7], [], [], [], [], [2, 3, 4], [], [], [5]],
							"begin_line":	395,
							"begin_column":	2,
							"end_line":	395,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L395\", 17, &(zfuncname), sizeof (zfuncname), &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zretval), sizeof (zretval), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(us), sizeof (us), &(stream), sizeof (stream), &(old_in_user_include), sizeof (old_in_user_include), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    _zval_ptr_dtor((&zfuncname));\n", "zval_update_constant((&zfuncname), 0)", "zval_update_constant_inline_change((&zfuncname), 0)", "zval_update_constant_no_inline_change((&zfuncname), 0)", "{\n}\n", "_zval_internal_ptr_dtor((&zfuncname))", "zval_add_ref((&zfuncname))", "_zval_ptr_dtor((&(&args)))", "_zval_ptr_dtor((&(&call_result)))", "_zval_ptr_dtor((&(&context)))", "_zval_ptr_dtor((&(&filename)))", "_zval_ptr_dtor((&(&mode)))", "_zval_ptr_dtor((&(&old_in_user_include)))", "_zval_ptr_dtor((&(&opened_path)))", "_zval_ptr_dtor((&(&options)))", "_zval_ptr_dtor((&(&stream)))", "_zval_ptr_dtor((&(&us)))", "_zval_ptr_dtor((&(&uwrap)))", "_zval_ptr_dtor((&(&wrapper)))", "_zval_ptr_dtor((&(&zfilename)))", "_zval_ptr_dtor((&(&zfuncname)))", "_zval_ptr_dtor((&(&zmode)))", "_zval_ptr_dtor((&(&zopened)))", "_zval_ptr_dtor((&(&zoptions)))", "_zval_ptr_dtor((&(&zretval)))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9953579315779244, -7.2644108520779236, -7.9295472415779242, -6.872689261577924, -7.9295472415779242, -7.1286978015779239, -7.4109161680779243, -6.5093374220779241, -6.6928207315779238, -7.834042477577924, -7.0761543775779243, -7.1623722420779243, -7.1748513775779239, -6.3060648915779236, -7.1344205015779245, -7.7450596315779237, -7.4507088315779244]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}, {
									"case":	4,
									"scores":	[-6.275739761577924]
								}, {
									"case":	5,
									"scores":	[-6.275739761577924]
								}, {
									"case":	6,
									"scores":	[-6.275739761577924]
								}, {
									"case":	7,
									"scores":	[-6.275739761577924]
								}, {
									"case":	8,
									"scores":	[-6.275739761577924]
								}, {
									"case":	9,
									"scores":	[-6.275739761577924]
								}, {
									"case":	10,
									"scores":	[-6.275739761577924]
								}, {
									"case":	11,
									"scores":	[-6.275739761577924]
								}, {
									"case":	12,
									"scores":	[-6.275739761577924]
								}, {
									"case":	13,
									"scores":	[-6.275739761577924]
								}, {
									"case":	14,
									"scores":	[-6.275739761577924]
								}, {
									"case":	15,
									"scores":	[-6.275739761577924]
								}, {
									"case":	16,
									"scores":	[-6.275739761577924]
								}, {
									"case":	17,
									"scores":	[-6.275739761577924]
								}, {
									"case":	18,
									"scores":	[-6.275739761577924]
								}, {
									"case":	19,
									"scores":	[-6.275739761577924]
								}, {
									"case":	20,
									"scores":	[-6.275739761577924]
								}, {
									"case":	21,
									"scores":	[-6.275739761577924]
								}, {
									"case":	22,
									"scores":	[-6.275739761577924]
								}, {
									"case":	23,
									"scores":	[-6.275739761577924]
								}, {
									"case":	24,
									"scores":	[-6.275739761577924]
								}, {
									"case":	25,
									"scores":	[-6.275739761577924]
								}, {
									"case":	26,
									"scores":	[-6.275739761577924]
								}, {
									"case":	27,
									"scores":	[-6.275739761577924]
								}, {
									"case":	28,
									"scores":	[-6.275739761577924]
								}, {
									"case":	29,
									"scores":	[-6.275739761577924]
								}, {
									"case":	30,
									"scores":	[-6.275739761577924]
								}, {
									"case":	31,
									"scores":	[-6.275739761577924]
								}]
						}]
				}, {
					"line":	395,
					"switches":	[{
							"switch":	54,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	396,
							"begin_column":	0,
							"end_line":	396,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L396\", 17, &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zfuncname), sizeof (zfuncname), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(zretval), sizeof (zretval), &(us), sizeof (us), &(old_in_user_include), sizeof (old_in_user_include), &(stream), sizeof (stream), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	2,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	3,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	4,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	5,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	6,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	7,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	8,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	9,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	10,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	11,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	12,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	13,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	14,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	15,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	16,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	17,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	18,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	19,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	20,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	21,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	22,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	23,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	24,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	25,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	26,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	27,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	28,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	29,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	30,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	31,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	32,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	33,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	34,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	35,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	36,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	37,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	38,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	39,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	40,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	41,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	42,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	43,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	44,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	45,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	46,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	47,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	48,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	49,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	50,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	51,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	52,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	53,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	54,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	55,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	56,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	57,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	58,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	59,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	60,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	61,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	62,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	63,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	64,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	65,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	66,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	67,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	68,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	69,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	70,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	71,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	72,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	73,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	74,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	75,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	76,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	77,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	78,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	79,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	80,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	81,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	82,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	83,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	84,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	85,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	86,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	87,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	88,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	89,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	90,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	91,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	92,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	93,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	94,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	95,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	96,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	97,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	98,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	99,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	100,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	101,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	102,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	103,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	104,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	105,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	106,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	107,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	108,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	109,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	110,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	111,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	112,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	113,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	114,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	115,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	116,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	117,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	118,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	119,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	120,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	121,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	122,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	123,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	124,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	125,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	126,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	127,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	128,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	129,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	130,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	131,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	132,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	133,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	134,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	135,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	136,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	137,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	138,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	139,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	140,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	141,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	142,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	143,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	144,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	145,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	146,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	147,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	148,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	149,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	150,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	151,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	152,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	153,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	154,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	155,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	156,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	157,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	158,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	159,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	160,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	161,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	162,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	163,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	164,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	165,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	166,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	167,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	168,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	169,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	170,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	171,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	172,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	173,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	174,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	175,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	176,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	177,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	178,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	179,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	180,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	181,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	182,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	183,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	184,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	185,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	186,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	187,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	188,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	189,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	190,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	191,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	192,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	193,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	194,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	195,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	196,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	197,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	198,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	199,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	200,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	201,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	202,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	203,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	204,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	205,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	206,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	207,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	208,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	209,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	210,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	211,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	212,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	213,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	214,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	215,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	216,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	217,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	218,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	219,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	220,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	221,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	222,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	223,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	224,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	225,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	226,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	227,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	228,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	229,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	230,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	231,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	232,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	233,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	234,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	235,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	236,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	237,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	238,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	239,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	240,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	241,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	242,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	243,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	244,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	245,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	246,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	247,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	248,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	249,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	250,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	251,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	252,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	253,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	254,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	255,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	256,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	257,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	258,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	259,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	260,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	261,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	262,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	263,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	264,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	265,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	266,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	267,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	268,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	269,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	270,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	271,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	272,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	273,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	274,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	275,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	276,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	277,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	278,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	279,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	280,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	281,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	282,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	283,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	284,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	285,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	286,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	287,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	288,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	289,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	290,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	291,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	292,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	293,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	294,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	295,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	296,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	297,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	298,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	299,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	300,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	301,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	302,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	303,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	304,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	305,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	306,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	307,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	308,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	309,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	310,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	311,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	312,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	313,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	314,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	315,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	316,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	317,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	318,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	319,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	320,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	321,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	322,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	323,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	324,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	325,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	326,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	327,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	328,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	329,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	330,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	331,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	332,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	333,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	334,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	335,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	336,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	337,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	338,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	339,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	340,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	341,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	342,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	343,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	344,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	345,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	346,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	347,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	348,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	349,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	350,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	351,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	352,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	353,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	354,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	355,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	356,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	357,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	358,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	359,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	360,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	361,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	362,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	363,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	364,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	365,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	366,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	367,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	368,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	369,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	370,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	371,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	372,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	373,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	374,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	375,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	376,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	377,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	378,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	379,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	380,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	381,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	382,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	383,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	384,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	385,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	386,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	387,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	388,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	389,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	390,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	391,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	392,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	393,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	394,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	395,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	396,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	397,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	398,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	399,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	400,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	401,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	402,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	403,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	404,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	405,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	406,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	407,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	408,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	409,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	410,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	411,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	412,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	413,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	414,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	415,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	416,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	417,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	418,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	419,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	420,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	421,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	422,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	423,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	424,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	425,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	426,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	427,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	428,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	429,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	430,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	431,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	432,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	433,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	434,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	435,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	436,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	437,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	438,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	439,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	440,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	441,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	442,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	443,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	444,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	445,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	446,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	447,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	448,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	449,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	450,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	451,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	452,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	453,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	454,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	455,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	456,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	457,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	458,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	459,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	460,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	461,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	462,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	463,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	464,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	465,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	466,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	467,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	468,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	469,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	470,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	471,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	472,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	473,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	474,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	475,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	476,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	477,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	478,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	479,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	480,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	481,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	482,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	483,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	484,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	485,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	486,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	487,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	488,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	489,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	490,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	491,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	492,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	493,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	494,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	495,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	496,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	497,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	498,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	499,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	500,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	501,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	502,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	503,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	504,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	505,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	506,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	507,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	508,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	509,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	510,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	511,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	512,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	513,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	514,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	515,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	516,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	517,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	518,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	519,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	520,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	521,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	522,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	523,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	524,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	525,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	526,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	527,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	528,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	529,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	530,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	531,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	532,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	533,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	534,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	535,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	536,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	537,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	538,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	539,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	540,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	541,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	542,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	543,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	544,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	545,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	546,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	547,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	548,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	549,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	550,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	551,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	552,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	553,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	554,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	555,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	556,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	557,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	558,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	559,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	560,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	561,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	562,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	563,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	564,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	565,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	566,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	567,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	568,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	569,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	570,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	571,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	572,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	573,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	574,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	575,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	576,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	577,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	578,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	579,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	580,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	581,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	582,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	583,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	584,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	585,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	586,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	587,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	588,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	589,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	590,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	591,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	592,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	593,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	594,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	595,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	596,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	597,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	598,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	599,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	600,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	601,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	602,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	603,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	604,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	605,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	606,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	607,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	608,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	609,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	610,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	611,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	612,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	613,
									"scores":	[-8.8325176554604035, -9.1082783354604047, -8.2467899654604047, -9.1082783354604047, -8.6073433354604028, -8.2467899654604047, -9.1438521054604038, -8.3424354116604036, -8.0966703254604049, -8.6255747254604049, -8.3795358116604053, -8.5904249286604042, -8.5904249286604042, -8.3424354116604036, -8.0894899286604041, -8.6255747254604049, -8.5884743254604032]
								}]
						}, {
							"switch":	55,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [6, 7], [], [], [], [], [2, 3, 4], [], [], [5]],
							"begin_line":	396,
							"begin_column":	2,
							"end_line":	396,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L396\", 17, &(zopened), sizeof (zopened), &(zoptions), sizeof (zoptions), &(zfuncname), sizeof (zfuncname), &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(zretval), sizeof (zretval), &(us), sizeof (us), &(old_in_user_include), sizeof (old_in_user_include), &(stream), sizeof (stream), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    _zval_ptr_dtor((&zopened));\n", "zval_update_constant((&zopened), 0)", "zval_update_constant_inline_change((&zopened), 0)", "zval_update_constant_no_inline_change((&zopened), 0)", "{\n}\n", "_zval_internal_ptr_dtor((&zopened))", "zval_add_ref((&zopened))", "_zval_ptr_dtor((&(&args)))", "_zval_ptr_dtor((&(&call_result)))", "_zval_ptr_dtor((&(&context)))", "_zval_ptr_dtor((&(&filename)))", "_zval_ptr_dtor((&(&mode)))", "_zval_ptr_dtor((&(&old_in_user_include)))", "_zval_ptr_dtor((&(&opened_path)))", "_zval_ptr_dtor((&(&options)))", "_zval_ptr_dtor((&(&stream)))", "_zval_ptr_dtor((&(&us)))", "_zval_ptr_dtor((&(&uwrap)))", "_zval_ptr_dtor((&(&wrapper)))", "_zval_ptr_dtor((&(&zfilename)))", "_zval_ptr_dtor((&(&zfuncname)))", "_zval_ptr_dtor((&(&zmode)))", "_zval_ptr_dtor((&(&zopened)))", "_zval_ptr_dtor((&(&zoptions)))", "_zval_ptr_dtor((&(&zretval)))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.1734592242604043, -7.652297634260405, -7.4328373482604047, -8.1076485342604041, -7.7856375042604045, -7.4328373482604047, -7.9595804607604048, -6.8709220242604045, -7.2420542842604041, -7.9231609242604044, -7.1652728242604047, -7.634532824260404, -7.634532824260404, -6.8709220242604045, -7.3125217942604044, -7.9231609242604044, -7.6288101242604043]
								}, {
									"case":	2,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	3,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	4,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	5,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	6,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	7,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	8,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	9,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	10,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	11,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	12,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	13,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	14,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	15,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	16,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	17,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	18,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	19,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	20,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	21,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	22,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	23,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	24,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	25,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	26,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	27,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	28,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	29,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	30,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	31,
									"scores":	[-6.2555370542604045]
								}]
						}]
				}, {
					"line":	396,
					"switches":	[{
							"switch":	56,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	397,
							"begin_column":	0,
							"end_line":	397,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L397\", 17, &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zopened), sizeof (zopened), &(zfilename), sizeof (zfilename), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(old_in_user_include), sizeof (old_in_user_include), &(us), sizeof (us), &(stream), sizeof (stream), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.235334346942885]
								}, {
									"case":	2,
									"scores":	[-6.235334346942885]
								}, {
									"case":	3,
									"scores":	[-6.235334346942885]
								}, {
									"case":	4,
									"scores":	[-6.235334346942885]
								}, {
									"case":	5,
									"scores":	[-6.235334346942885]
								}, {
									"case":	6,
									"scores":	[-6.235334346942885]
								}, {
									"case":	7,
									"scores":	[-6.235334346942885]
								}, {
									"case":	8,
									"scores":	[-6.235334346942885]
								}, {
									"case":	9,
									"scores":	[-6.235334346942885]
								}, {
									"case":	10,
									"scores":	[-6.235334346942885]
								}, {
									"case":	11,
									"scores":	[-6.235334346942885]
								}, {
									"case":	12,
									"scores":	[-6.235334346942885]
								}, {
									"case":	13,
									"scores":	[-6.235334346942885]
								}, {
									"case":	14,
									"scores":	[-6.235334346942885]
								}, {
									"case":	15,
									"scores":	[-6.235334346942885]
								}, {
									"case":	16,
									"scores":	[-6.235334346942885]
								}, {
									"case":	17,
									"scores":	[-6.235334346942885]
								}, {
									"case":	18,
									"scores":	[-6.235334346942885]
								}, {
									"case":	19,
									"scores":	[-6.235334346942885]
								}, {
									"case":	20,
									"scores":	[-6.235334346942885]
								}, {
									"case":	21,
									"scores":	[-6.235334346942885]
								}, {
									"case":	22,
									"scores":	[-6.235334346942885]
								}, {
									"case":	23,
									"scores":	[-6.235334346942885]
								}, {
									"case":	24,
									"scores":	[-6.235334346942885]
								}, {
									"case":	25,
									"scores":	[-6.235334346942885]
								}, {
									"case":	26,
									"scores":	[-6.235334346942885]
								}, {
									"case":	27,
									"scores":	[-6.235334346942885]
								}, {
									"case":	28,
									"scores":	[-6.235334346942885]
								}, {
									"case":	29,
									"scores":	[-6.235334346942885]
								}, {
									"case":	30,
									"scores":	[-6.235334346942885]
								}, {
									"case":	31,
									"scores":	[-6.235334346942885]
								}, {
									"case":	32,
									"scores":	[-6.235334346942885]
								}, {
									"case":	33,
									"scores":	[-6.235334346942885]
								}, {
									"case":	34,
									"scores":	[-6.235334346942885]
								}, {
									"case":	35,
									"scores":	[-6.235334346942885]
								}, {
									"case":	36,
									"scores":	[-6.235334346942885]
								}, {
									"case":	37,
									"scores":	[-6.235334346942885]
								}, {
									"case":	38,
									"scores":	[-6.235334346942885]
								}, {
									"case":	39,
									"scores":	[-6.235334346942885]
								}, {
									"case":	40,
									"scores":	[-6.235334346942885]
								}, {
									"case":	41,
									"scores":	[-6.235334346942885]
								}, {
									"case":	42,
									"scores":	[-6.235334346942885]
								}, {
									"case":	43,
									"scores":	[-6.235334346942885]
								}, {
									"case":	44,
									"scores":	[-6.235334346942885]
								}, {
									"case":	45,
									"scores":	[-6.235334346942885]
								}, {
									"case":	46,
									"scores":	[-6.235334346942885]
								}, {
									"case":	47,
									"scores":	[-6.235334346942885]
								}, {
									"case":	48,
									"scores":	[-6.235334346942885]
								}, {
									"case":	49,
									"scores":	[-6.235334346942885]
								}, {
									"case":	50,
									"scores":	[-6.235334346942885]
								}, {
									"case":	51,
									"scores":	[-6.235334346942885]
								}, {
									"case":	52,
									"scores":	[-6.235334346942885]
								}, {
									"case":	53,
									"scores":	[-6.235334346942885]
								}, {
									"case":	54,
									"scores":	[-6.235334346942885]
								}, {
									"case":	55,
									"scores":	[-6.235334346942885]
								}, {
									"case":	56,
									"scores":	[-6.235334346942885]
								}, {
									"case":	57,
									"scores":	[-6.235334346942885]
								}, {
									"case":	58,
									"scores":	[-6.235334346942885]
								}, {
									"case":	59,
									"scores":	[-6.235334346942885]
								}, {
									"case":	60,
									"scores":	[-6.235334346942885]
								}, {
									"case":	61,
									"scores":	[-6.235334346942885]
								}, {
									"case":	62,
									"scores":	[-6.235334346942885]
								}, {
									"case":	63,
									"scores":	[-6.235334346942885]
								}, {
									"case":	64,
									"scores":	[-6.235334346942885]
								}, {
									"case":	65,
									"scores":	[-6.235334346942885]
								}, {
									"case":	66,
									"scores":	[-6.235334346942885]
								}, {
									"case":	67,
									"scores":	[-6.235334346942885]
								}, {
									"case":	68,
									"scores":	[-6.235334346942885]
								}, {
									"case":	69,
									"scores":	[-6.235334346942885]
								}, {
									"case":	70,
									"scores":	[-6.235334346942885]
								}, {
									"case":	71,
									"scores":	[-6.235334346942885]
								}, {
									"case":	72,
									"scores":	[-6.235334346942885]
								}, {
									"case":	73,
									"scores":	[-6.235334346942885]
								}, {
									"case":	74,
									"scores":	[-6.235334346942885]
								}, {
									"case":	75,
									"scores":	[-6.235334346942885]
								}, {
									"case":	76,
									"scores":	[-6.235334346942885]
								}, {
									"case":	77,
									"scores":	[-6.235334346942885]
								}, {
									"case":	78,
									"scores":	[-6.235334346942885]
								}, {
									"case":	79,
									"scores":	[-6.235334346942885]
								}, {
									"case":	80,
									"scores":	[-6.235334346942885]
								}, {
									"case":	81,
									"scores":	[-6.235334346942885]
								}, {
									"case":	82,
									"scores":	[-6.235334346942885]
								}, {
									"case":	83,
									"scores":	[-6.235334346942885]
								}, {
									"case":	84,
									"scores":	[-6.235334346942885]
								}, {
									"case":	85,
									"scores":	[-6.235334346942885]
								}, {
									"case":	86,
									"scores":	[-6.235334346942885]
								}, {
									"case":	87,
									"scores":	[-6.235334346942885]
								}, {
									"case":	88,
									"scores":	[-6.235334346942885]
								}, {
									"case":	89,
									"scores":	[-6.235334346942885]
								}, {
									"case":	90,
									"scores":	[-6.235334346942885]
								}, {
									"case":	91,
									"scores":	[-6.235334346942885]
								}, {
									"case":	92,
									"scores":	[-6.235334346942885]
								}, {
									"case":	93,
									"scores":	[-6.235334346942885]
								}, {
									"case":	94,
									"scores":	[-6.235334346942885]
								}, {
									"case":	95,
									"scores":	[-6.235334346942885]
								}, {
									"case":	96,
									"scores":	[-6.235334346942885]
								}, {
									"case":	97,
									"scores":	[-6.235334346942885]
								}, {
									"case":	98,
									"scores":	[-6.235334346942885]
								}, {
									"case":	99,
									"scores":	[-6.235334346942885]
								}, {
									"case":	100,
									"scores":	[-6.235334346942885]
								}, {
									"case":	101,
									"scores":	[-6.235334346942885]
								}, {
									"case":	102,
									"scores":	[-6.235334346942885]
								}, {
									"case":	103,
									"scores":	[-6.235334346942885]
								}, {
									"case":	104,
									"scores":	[-6.235334346942885]
								}, {
									"case":	105,
									"scores":	[-6.235334346942885]
								}, {
									"case":	106,
									"scores":	[-6.235334346942885]
								}, {
									"case":	107,
									"scores":	[-6.235334346942885]
								}, {
									"case":	108,
									"scores":	[-6.235334346942885]
								}, {
									"case":	109,
									"scores":	[-6.235334346942885]
								}, {
									"case":	110,
									"scores":	[-6.235334346942885]
								}, {
									"case":	111,
									"scores":	[-6.235334346942885]
								}, {
									"case":	112,
									"scores":	[-6.235334346942885]
								}, {
									"case":	113,
									"scores":	[-6.235334346942885]
								}, {
									"case":	114,
									"scores":	[-6.235334346942885]
								}, {
									"case":	115,
									"scores":	[-6.235334346942885]
								}, {
									"case":	116,
									"scores":	[-6.235334346942885]
								}, {
									"case":	117,
									"scores":	[-6.235334346942885]
								}, {
									"case":	118,
									"scores":	[-6.235334346942885]
								}, {
									"case":	119,
									"scores":	[-6.235334346942885]
								}, {
									"case":	120,
									"scores":	[-6.235334346942885]
								}, {
									"case":	121,
									"scores":	[-6.235334346942885]
								}, {
									"case":	122,
									"scores":	[-6.235334346942885]
								}, {
									"case":	123,
									"scores":	[-6.235334346942885]
								}, {
									"case":	124,
									"scores":	[-6.235334346942885]
								}, {
									"case":	125,
									"scores":	[-6.235334346942885]
								}, {
									"case":	126,
									"scores":	[-6.235334346942885]
								}, {
									"case":	127,
									"scores":	[-6.235334346942885]
								}, {
									"case":	128,
									"scores":	[-6.235334346942885]
								}, {
									"case":	129,
									"scores":	[-6.235334346942885]
								}, {
									"case":	130,
									"scores":	[-6.235334346942885]
								}, {
									"case":	131,
									"scores":	[-6.235334346942885]
								}, {
									"case":	132,
									"scores":	[-6.235334346942885]
								}, {
									"case":	133,
									"scores":	[-6.235334346942885]
								}, {
									"case":	134,
									"scores":	[-6.235334346942885]
								}, {
									"case":	135,
									"scores":	[-6.235334346942885]
								}, {
									"case":	136,
									"scores":	[-6.235334346942885]
								}, {
									"case":	137,
									"scores":	[-6.235334346942885]
								}, {
									"case":	138,
									"scores":	[-6.235334346942885]
								}, {
									"case":	139,
									"scores":	[-6.235334346942885]
								}, {
									"case":	140,
									"scores":	[-6.235334346942885]
								}, {
									"case":	141,
									"scores":	[-6.235334346942885]
								}, {
									"case":	142,
									"scores":	[-6.235334346942885]
								}, {
									"case":	143,
									"scores":	[-6.235334346942885]
								}, {
									"case":	144,
									"scores":	[-6.235334346942885]
								}, {
									"case":	145,
									"scores":	[-6.235334346942885]
								}, {
									"case":	146,
									"scores":	[-6.235334346942885]
								}, {
									"case":	147,
									"scores":	[-6.235334346942885]
								}, {
									"case":	148,
									"scores":	[-6.235334346942885]
								}, {
									"case":	149,
									"scores":	[-6.235334346942885]
								}, {
									"case":	150,
									"scores":	[-6.235334346942885]
								}, {
									"case":	151,
									"scores":	[-6.235334346942885]
								}, {
									"case":	152,
									"scores":	[-6.235334346942885]
								}, {
									"case":	153,
									"scores":	[-6.235334346942885]
								}, {
									"case":	154,
									"scores":	[-6.235334346942885]
								}, {
									"case":	155,
									"scores":	[-6.235334346942885]
								}, {
									"case":	156,
									"scores":	[-6.235334346942885]
								}, {
									"case":	157,
									"scores":	[-6.235334346942885]
								}, {
									"case":	158,
									"scores":	[-6.235334346942885]
								}, {
									"case":	159,
									"scores":	[-6.235334346942885]
								}, {
									"case":	160,
									"scores":	[-6.235334346942885]
								}, {
									"case":	161,
									"scores":	[-6.235334346942885]
								}, {
									"case":	162,
									"scores":	[-6.235334346942885]
								}, {
									"case":	163,
									"scores":	[-6.235334346942885]
								}, {
									"case":	164,
									"scores":	[-6.235334346942885]
								}, {
									"case":	165,
									"scores":	[-6.235334346942885]
								}, {
									"case":	166,
									"scores":	[-6.235334346942885]
								}, {
									"case":	167,
									"scores":	[-6.235334346942885]
								}, {
									"case":	168,
									"scores":	[-6.235334346942885]
								}, {
									"case":	169,
									"scores":	[-6.235334346942885]
								}, {
									"case":	170,
									"scores":	[-6.235334346942885]
								}, {
									"case":	171,
									"scores":	[-6.235334346942885]
								}, {
									"case":	172,
									"scores":	[-6.235334346942885]
								}, {
									"case":	173,
									"scores":	[-6.235334346942885]
								}, {
									"case":	174,
									"scores":	[-6.235334346942885]
								}, {
									"case":	175,
									"scores":	[-6.235334346942885]
								}, {
									"case":	176,
									"scores":	[-6.235334346942885]
								}, {
									"case":	177,
									"scores":	[-6.235334346942885]
								}, {
									"case":	178,
									"scores":	[-6.235334346942885]
								}, {
									"case":	179,
									"scores":	[-6.235334346942885]
								}, {
									"case":	180,
									"scores":	[-6.235334346942885]
								}, {
									"case":	181,
									"scores":	[-6.235334346942885]
								}, {
									"case":	182,
									"scores":	[-6.235334346942885]
								}, {
									"case":	183,
									"scores":	[-6.235334346942885]
								}, {
									"case":	184,
									"scores":	[-6.235334346942885]
								}, {
									"case":	185,
									"scores":	[-6.235334346942885]
								}, {
									"case":	186,
									"scores":	[-6.235334346942885]
								}, {
									"case":	187,
									"scores":	[-6.235334346942885]
								}, {
									"case":	188,
									"scores":	[-6.235334346942885]
								}, {
									"case":	189,
									"scores":	[-6.235334346942885]
								}, {
									"case":	190,
									"scores":	[-6.235334346942885]
								}, {
									"case":	191,
									"scores":	[-6.235334346942885]
								}, {
									"case":	192,
									"scores":	[-6.235334346942885]
								}, {
									"case":	193,
									"scores":	[-6.235334346942885]
								}, {
									"case":	194,
									"scores":	[-6.235334346942885]
								}, {
									"case":	195,
									"scores":	[-6.235334346942885]
								}, {
									"case":	196,
									"scores":	[-6.235334346942885]
								}, {
									"case":	197,
									"scores":	[-6.235334346942885]
								}, {
									"case":	198,
									"scores":	[-6.235334346942885]
								}, {
									"case":	199,
									"scores":	[-6.235334346942885]
								}, {
									"case":	200,
									"scores":	[-6.235334346942885]
								}, {
									"case":	201,
									"scores":	[-6.235334346942885]
								}, {
									"case":	202,
									"scores":	[-6.235334346942885]
								}, {
									"case":	203,
									"scores":	[-6.235334346942885]
								}, {
									"case":	204,
									"scores":	[-6.235334346942885]
								}, {
									"case":	205,
									"scores":	[-6.235334346942885]
								}, {
									"case":	206,
									"scores":	[-6.235334346942885]
								}, {
									"case":	207,
									"scores":	[-6.235334346942885]
								}, {
									"case":	208,
									"scores":	[-6.235334346942885]
								}, {
									"case":	209,
									"scores":	[-6.235334346942885]
								}, {
									"case":	210,
									"scores":	[-6.235334346942885]
								}, {
									"case":	211,
									"scores":	[-6.235334346942885]
								}, {
									"case":	212,
									"scores":	[-6.235334346942885]
								}, {
									"case":	213,
									"scores":	[-6.235334346942885]
								}, {
									"case":	214,
									"scores":	[-6.235334346942885]
								}, {
									"case":	215,
									"scores":	[-6.235334346942885]
								}, {
									"case":	216,
									"scores":	[-6.235334346942885]
								}, {
									"case":	217,
									"scores":	[-6.235334346942885]
								}, {
									"case":	218,
									"scores":	[-6.235334346942885]
								}, {
									"case":	219,
									"scores":	[-6.235334346942885]
								}, {
									"case":	220,
									"scores":	[-6.235334346942885]
								}, {
									"case":	221,
									"scores":	[-6.235334346942885]
								}, {
									"case":	222,
									"scores":	[-6.235334346942885]
								}, {
									"case":	223,
									"scores":	[-6.235334346942885]
								}, {
									"case":	224,
									"scores":	[-6.235334346942885]
								}, {
									"case":	225,
									"scores":	[-6.235334346942885]
								}, {
									"case":	226,
									"scores":	[-6.235334346942885]
								}, {
									"case":	227,
									"scores":	[-6.235334346942885]
								}, {
									"case":	228,
									"scores":	[-6.235334346942885]
								}, {
									"case":	229,
									"scores":	[-6.235334346942885]
								}, {
									"case":	230,
									"scores":	[-6.235334346942885]
								}, {
									"case":	231,
									"scores":	[-6.235334346942885]
								}, {
									"case":	232,
									"scores":	[-6.235334346942885]
								}, {
									"case":	233,
									"scores":	[-6.235334346942885]
								}, {
									"case":	234,
									"scores":	[-6.235334346942885]
								}, {
									"case":	235,
									"scores":	[-6.235334346942885]
								}, {
									"case":	236,
									"scores":	[-6.235334346942885]
								}, {
									"case":	237,
									"scores":	[-6.235334346942885]
								}, {
									"case":	238,
									"scores":	[-6.235334346942885]
								}, {
									"case":	239,
									"scores":	[-6.235334346942885]
								}, {
									"case":	240,
									"scores":	[-6.235334346942885]
								}, {
									"case":	241,
									"scores":	[-6.235334346942885]
								}, {
									"case":	242,
									"scores":	[-6.235334346942885]
								}, {
									"case":	243,
									"scores":	[-6.235334346942885]
								}, {
									"case":	244,
									"scores":	[-6.235334346942885]
								}, {
									"case":	245,
									"scores":	[-6.235334346942885]
								}, {
									"case":	246,
									"scores":	[-6.235334346942885]
								}, {
									"case":	247,
									"scores":	[-6.235334346942885]
								}, {
									"case":	248,
									"scores":	[-6.235334346942885]
								}, {
									"case":	249,
									"scores":	[-6.235334346942885]
								}, {
									"case":	250,
									"scores":	[-6.235334346942885]
								}, {
									"case":	251,
									"scores":	[-6.235334346942885]
								}, {
									"case":	252,
									"scores":	[-6.235334346942885]
								}, {
									"case":	253,
									"scores":	[-6.235334346942885]
								}, {
									"case":	254,
									"scores":	[-6.235334346942885]
								}, {
									"case":	255,
									"scores":	[-6.235334346942885]
								}, {
									"case":	256,
									"scores":	[-6.235334346942885]
								}, {
									"case":	257,
									"scores":	[-6.235334346942885]
								}, {
									"case":	258,
									"scores":	[-6.235334346942885]
								}, {
									"case":	259,
									"scores":	[-6.235334346942885]
								}, {
									"case":	260,
									"scores":	[-6.235334346942885]
								}, {
									"case":	261,
									"scores":	[-6.235334346942885]
								}, {
									"case":	262,
									"scores":	[-6.235334346942885]
								}, {
									"case":	263,
									"scores":	[-6.235334346942885]
								}, {
									"case":	264,
									"scores":	[-6.235334346942885]
								}, {
									"case":	265,
									"scores":	[-6.235334346942885]
								}, {
									"case":	266,
									"scores":	[-6.235334346942885]
								}, {
									"case":	267,
									"scores":	[-6.235334346942885]
								}, {
									"case":	268,
									"scores":	[-6.235334346942885]
								}, {
									"case":	269,
									"scores":	[-6.235334346942885]
								}, {
									"case":	270,
									"scores":	[-6.235334346942885]
								}, {
									"case":	271,
									"scores":	[-6.235334346942885]
								}, {
									"case":	272,
									"scores":	[-6.235334346942885]
								}, {
									"case":	273,
									"scores":	[-6.235334346942885]
								}, {
									"case":	274,
									"scores":	[-6.235334346942885]
								}, {
									"case":	275,
									"scores":	[-6.235334346942885]
								}, {
									"case":	276,
									"scores":	[-6.235334346942885]
								}, {
									"case":	277,
									"scores":	[-6.235334346942885]
								}, {
									"case":	278,
									"scores":	[-6.235334346942885]
								}, {
									"case":	279,
									"scores":	[-6.235334346942885]
								}, {
									"case":	280,
									"scores":	[-6.235334346942885]
								}, {
									"case":	281,
									"scores":	[-6.235334346942885]
								}, {
									"case":	282,
									"scores":	[-6.235334346942885]
								}, {
									"case":	283,
									"scores":	[-6.235334346942885]
								}, {
									"case":	284,
									"scores":	[-6.235334346942885]
								}, {
									"case":	285,
									"scores":	[-6.235334346942885]
								}, {
									"case":	286,
									"scores":	[-6.235334346942885]
								}, {
									"case":	287,
									"scores":	[-6.235334346942885]
								}, {
									"case":	288,
									"scores":	[-6.235334346942885]
								}, {
									"case":	289,
									"scores":	[-6.235334346942885]
								}, {
									"case":	290,
									"scores":	[-6.235334346942885]
								}, {
									"case":	291,
									"scores":	[-6.235334346942885]
								}, {
									"case":	292,
									"scores":	[-6.235334346942885]
								}, {
									"case":	293,
									"scores":	[-6.235334346942885]
								}, {
									"case":	294,
									"scores":	[-6.235334346942885]
								}, {
									"case":	295,
									"scores":	[-6.235334346942885]
								}, {
									"case":	296,
									"scores":	[-6.235334346942885]
								}, {
									"case":	297,
									"scores":	[-6.235334346942885]
								}, {
									"case":	298,
									"scores":	[-6.235334346942885]
								}, {
									"case":	299,
									"scores":	[-6.235334346942885]
								}, {
									"case":	300,
									"scores":	[-6.235334346942885]
								}, {
									"case":	301,
									"scores":	[-6.235334346942885]
								}, {
									"case":	302,
									"scores":	[-6.235334346942885]
								}, {
									"case":	303,
									"scores":	[-6.235334346942885]
								}, {
									"case":	304,
									"scores":	[-6.235334346942885]
								}, {
									"case":	305,
									"scores":	[-6.235334346942885]
								}, {
									"case":	306,
									"scores":	[-6.235334346942885]
								}, {
									"case":	307,
									"scores":	[-6.235334346942885]
								}, {
									"case":	308,
									"scores":	[-6.235334346942885]
								}, {
									"case":	309,
									"scores":	[-6.235334346942885]
								}, {
									"case":	310,
									"scores":	[-6.235334346942885]
								}, {
									"case":	311,
									"scores":	[-6.235334346942885]
								}, {
									"case":	312,
									"scores":	[-6.235334346942885]
								}, {
									"case":	313,
									"scores":	[-6.235334346942885]
								}, {
									"case":	314,
									"scores":	[-6.235334346942885]
								}, {
									"case":	315,
									"scores":	[-6.235334346942885]
								}, {
									"case":	316,
									"scores":	[-6.235334346942885]
								}, {
									"case":	317,
									"scores":	[-6.235334346942885]
								}, {
									"case":	318,
									"scores":	[-6.235334346942885]
								}, {
									"case":	319,
									"scores":	[-6.235334346942885]
								}, {
									"case":	320,
									"scores":	[-6.235334346942885]
								}, {
									"case":	321,
									"scores":	[-6.235334346942885]
								}, {
									"case":	322,
									"scores":	[-6.235334346942885]
								}, {
									"case":	323,
									"scores":	[-6.235334346942885]
								}, {
									"case":	324,
									"scores":	[-6.235334346942885]
								}, {
									"case":	325,
									"scores":	[-6.235334346942885]
								}, {
									"case":	326,
									"scores":	[-6.235334346942885]
								}, {
									"case":	327,
									"scores":	[-6.235334346942885]
								}, {
									"case":	328,
									"scores":	[-6.235334346942885]
								}, {
									"case":	329,
									"scores":	[-6.235334346942885]
								}, {
									"case":	330,
									"scores":	[-6.235334346942885]
								}, {
									"case":	331,
									"scores":	[-6.235334346942885]
								}, {
									"case":	332,
									"scores":	[-6.235334346942885]
								}, {
									"case":	333,
									"scores":	[-6.235334346942885]
								}, {
									"case":	334,
									"scores":	[-6.235334346942885]
								}, {
									"case":	335,
									"scores":	[-6.235334346942885]
								}, {
									"case":	336,
									"scores":	[-6.235334346942885]
								}, {
									"case":	337,
									"scores":	[-6.235334346942885]
								}, {
									"case":	338,
									"scores":	[-6.235334346942885]
								}, {
									"case":	339,
									"scores":	[-6.235334346942885]
								}, {
									"case":	340,
									"scores":	[-6.235334346942885]
								}, {
									"case":	341,
									"scores":	[-6.235334346942885]
								}, {
									"case":	342,
									"scores":	[-6.235334346942885]
								}, {
									"case":	343,
									"scores":	[-6.235334346942885]
								}, {
									"case":	344,
									"scores":	[-6.235334346942885]
								}, {
									"case":	345,
									"scores":	[-6.235334346942885]
								}, {
									"case":	346,
									"scores":	[-6.235334346942885]
								}, {
									"case":	347,
									"scores":	[-6.235334346942885]
								}, {
									"case":	348,
									"scores":	[-6.235334346942885]
								}, {
									"case":	349,
									"scores":	[-6.235334346942885]
								}, {
									"case":	350,
									"scores":	[-6.235334346942885]
								}, {
									"case":	351,
									"scores":	[-6.235334346942885]
								}, {
									"case":	352,
									"scores":	[-6.235334346942885]
								}, {
									"case":	353,
									"scores":	[-6.235334346942885]
								}, {
									"case":	354,
									"scores":	[-6.235334346942885]
								}, {
									"case":	355,
									"scores":	[-6.235334346942885]
								}, {
									"case":	356,
									"scores":	[-6.235334346942885]
								}, {
									"case":	357,
									"scores":	[-6.235334346942885]
								}, {
									"case":	358,
									"scores":	[-6.235334346942885]
								}, {
									"case":	359,
									"scores":	[-6.235334346942885]
								}, {
									"case":	360,
									"scores":	[-6.235334346942885]
								}, {
									"case":	361,
									"scores":	[-6.235334346942885]
								}, {
									"case":	362,
									"scores":	[-6.235334346942885]
								}, {
									"case":	363,
									"scores":	[-6.235334346942885]
								}, {
									"case":	364,
									"scores":	[-6.235334346942885]
								}, {
									"case":	365,
									"scores":	[-6.235334346942885]
								}, {
									"case":	366,
									"scores":	[-6.235334346942885]
								}, {
									"case":	367,
									"scores":	[-6.235334346942885]
								}, {
									"case":	368,
									"scores":	[-6.235334346942885]
								}, {
									"case":	369,
									"scores":	[-6.235334346942885]
								}, {
									"case":	370,
									"scores":	[-6.235334346942885]
								}, {
									"case":	371,
									"scores":	[-6.235334346942885]
								}, {
									"case":	372,
									"scores":	[-6.235334346942885]
								}, {
									"case":	373,
									"scores":	[-6.235334346942885]
								}, {
									"case":	374,
									"scores":	[-6.235334346942885]
								}, {
									"case":	375,
									"scores":	[-6.235334346942885]
								}, {
									"case":	376,
									"scores":	[-6.235334346942885]
								}, {
									"case":	377,
									"scores":	[-6.235334346942885]
								}, {
									"case":	378,
									"scores":	[-6.235334346942885]
								}, {
									"case":	379,
									"scores":	[-6.235334346942885]
								}, {
									"case":	380,
									"scores":	[-6.235334346942885]
								}, {
									"case":	381,
									"scores":	[-6.235334346942885]
								}, {
									"case":	382,
									"scores":	[-6.235334346942885]
								}, {
									"case":	383,
									"scores":	[-6.235334346942885]
								}, {
									"case":	384,
									"scores":	[-6.235334346942885]
								}, {
									"case":	385,
									"scores":	[-6.235334346942885]
								}, {
									"case":	386,
									"scores":	[-6.235334346942885]
								}, {
									"case":	387,
									"scores":	[-6.235334346942885]
								}, {
									"case":	388,
									"scores":	[-6.235334346942885]
								}, {
									"case":	389,
									"scores":	[-6.235334346942885]
								}, {
									"case":	390,
									"scores":	[-6.235334346942885]
								}, {
									"case":	391,
									"scores":	[-6.235334346942885]
								}, {
									"case":	392,
									"scores":	[-6.235334346942885]
								}, {
									"case":	393,
									"scores":	[-6.235334346942885]
								}, {
									"case":	394,
									"scores":	[-6.235334346942885]
								}, {
									"case":	395,
									"scores":	[-6.235334346942885]
								}, {
									"case":	396,
									"scores":	[-6.235334346942885]
								}, {
									"case":	397,
									"scores":	[-6.235334346942885]
								}, {
									"case":	398,
									"scores":	[-6.235334346942885]
								}, {
									"case":	399,
									"scores":	[-6.235334346942885]
								}, {
									"case":	400,
									"scores":	[-6.235334346942885]
								}, {
									"case":	401,
									"scores":	[-6.235334346942885]
								}, {
									"case":	402,
									"scores":	[-6.235334346942885]
								}, {
									"case":	403,
									"scores":	[-6.235334346942885]
								}, {
									"case":	404,
									"scores":	[-6.235334346942885]
								}, {
									"case":	405,
									"scores":	[-6.235334346942885]
								}, {
									"case":	406,
									"scores":	[-6.235334346942885]
								}, {
									"case":	407,
									"scores":	[-6.235334346942885]
								}, {
									"case":	408,
									"scores":	[-6.235334346942885]
								}, {
									"case":	409,
									"scores":	[-6.235334346942885]
								}, {
									"case":	410,
									"scores":	[-6.235334346942885]
								}, {
									"case":	411,
									"scores":	[-6.235334346942885]
								}, {
									"case":	412,
									"scores":	[-6.235334346942885]
								}, {
									"case":	413,
									"scores":	[-6.235334346942885]
								}, {
									"case":	414,
									"scores":	[-6.235334346942885]
								}, {
									"case":	415,
									"scores":	[-6.235334346942885]
								}, {
									"case":	416,
									"scores":	[-6.235334346942885]
								}, {
									"case":	417,
									"scores":	[-6.235334346942885]
								}, {
									"case":	418,
									"scores":	[-6.235334346942885]
								}, {
									"case":	419,
									"scores":	[-6.235334346942885]
								}, {
									"case":	420,
									"scores":	[-6.235334346942885]
								}, {
									"case":	421,
									"scores":	[-6.235334346942885]
								}, {
									"case":	422,
									"scores":	[-6.235334346942885]
								}, {
									"case":	423,
									"scores":	[-6.235334346942885]
								}, {
									"case":	424,
									"scores":	[-6.235334346942885]
								}, {
									"case":	425,
									"scores":	[-6.235334346942885]
								}, {
									"case":	426,
									"scores":	[-6.235334346942885]
								}, {
									"case":	427,
									"scores":	[-6.235334346942885]
								}, {
									"case":	428,
									"scores":	[-6.235334346942885]
								}, {
									"case":	429,
									"scores":	[-6.235334346942885]
								}, {
									"case":	430,
									"scores":	[-6.235334346942885]
								}, {
									"case":	431,
									"scores":	[-6.235334346942885]
								}, {
									"case":	432,
									"scores":	[-6.235334346942885]
								}, {
									"case":	433,
									"scores":	[-6.235334346942885]
								}, {
									"case":	434,
									"scores":	[-6.235334346942885]
								}, {
									"case":	435,
									"scores":	[-6.235334346942885]
								}, {
									"case":	436,
									"scores":	[-6.235334346942885]
								}, {
									"case":	437,
									"scores":	[-6.235334346942885]
								}, {
									"case":	438,
									"scores":	[-6.235334346942885]
								}, {
									"case":	439,
									"scores":	[-6.235334346942885]
								}, {
									"case":	440,
									"scores":	[-6.235334346942885]
								}, {
									"case":	441,
									"scores":	[-6.235334346942885]
								}, {
									"case":	442,
									"scores":	[-6.235334346942885]
								}, {
									"case":	443,
									"scores":	[-6.235334346942885]
								}, {
									"case":	444,
									"scores":	[-6.235334346942885]
								}, {
									"case":	445,
									"scores":	[-6.235334346942885]
								}, {
									"case":	446,
									"scores":	[-6.235334346942885]
								}, {
									"case":	447,
									"scores":	[-6.235334346942885]
								}, {
									"case":	448,
									"scores":	[-6.235334346942885]
								}, {
									"case":	449,
									"scores":	[-6.235334346942885]
								}, {
									"case":	450,
									"scores":	[-6.235334346942885]
								}, {
									"case":	451,
									"scores":	[-6.235334346942885]
								}, {
									"case":	452,
									"scores":	[-6.235334346942885]
								}, {
									"case":	453,
									"scores":	[-6.235334346942885]
								}, {
									"case":	454,
									"scores":	[-6.235334346942885]
								}, {
									"case":	455,
									"scores":	[-6.235334346942885]
								}, {
									"case":	456,
									"scores":	[-6.235334346942885]
								}, {
									"case":	457,
									"scores":	[-6.235334346942885]
								}, {
									"case":	458,
									"scores":	[-6.235334346942885]
								}, {
									"case":	459,
									"scores":	[-6.235334346942885]
								}, {
									"case":	460,
									"scores":	[-6.235334346942885]
								}, {
									"case":	461,
									"scores":	[-6.235334346942885]
								}, {
									"case":	462,
									"scores":	[-6.235334346942885]
								}, {
									"case":	463,
									"scores":	[-6.235334346942885]
								}, {
									"case":	464,
									"scores":	[-6.235334346942885]
								}, {
									"case":	465,
									"scores":	[-6.235334346942885]
								}, {
									"case":	466,
									"scores":	[-6.235334346942885]
								}, {
									"case":	467,
									"scores":	[-6.235334346942885]
								}, {
									"case":	468,
									"scores":	[-6.235334346942885]
								}, {
									"case":	469,
									"scores":	[-6.235334346942885]
								}, {
									"case":	470,
									"scores":	[-6.235334346942885]
								}, {
									"case":	471,
									"scores":	[-6.235334346942885]
								}, {
									"case":	472,
									"scores":	[-6.235334346942885]
								}, {
									"case":	473,
									"scores":	[-6.235334346942885]
								}, {
									"case":	474,
									"scores":	[-6.235334346942885]
								}, {
									"case":	475,
									"scores":	[-6.235334346942885]
								}, {
									"case":	476,
									"scores":	[-6.235334346942885]
								}, {
									"case":	477,
									"scores":	[-6.235334346942885]
								}, {
									"case":	478,
									"scores":	[-6.235334346942885]
								}, {
									"case":	479,
									"scores":	[-6.235334346942885]
								}, {
									"case":	480,
									"scores":	[-6.235334346942885]
								}, {
									"case":	481,
									"scores":	[-6.235334346942885]
								}, {
									"case":	482,
									"scores":	[-6.235334346942885]
								}, {
									"case":	483,
									"scores":	[-6.235334346942885]
								}, {
									"case":	484,
									"scores":	[-6.235334346942885]
								}, {
									"case":	485,
									"scores":	[-6.235334346942885]
								}, {
									"case":	486,
									"scores":	[-6.235334346942885]
								}, {
									"case":	487,
									"scores":	[-6.235334346942885]
								}, {
									"case":	488,
									"scores":	[-6.235334346942885]
								}, {
									"case":	489,
									"scores":	[-6.235334346942885]
								}, {
									"case":	490,
									"scores":	[-6.235334346942885]
								}, {
									"case":	491,
									"scores":	[-6.235334346942885]
								}, {
									"case":	492,
									"scores":	[-6.235334346942885]
								}, {
									"case":	493,
									"scores":	[-6.235334346942885]
								}, {
									"case":	494,
									"scores":	[-6.235334346942885]
								}, {
									"case":	495,
									"scores":	[-6.235334346942885]
								}, {
									"case":	496,
									"scores":	[-6.235334346942885]
								}, {
									"case":	497,
									"scores":	[-6.235334346942885]
								}, {
									"case":	498,
									"scores":	[-6.235334346942885]
								}, {
									"case":	499,
									"scores":	[-6.235334346942885]
								}, {
									"case":	500,
									"scores":	[-6.235334346942885]
								}, {
									"case":	501,
									"scores":	[-6.235334346942885]
								}, {
									"case":	502,
									"scores":	[-6.235334346942885]
								}, {
									"case":	503,
									"scores":	[-6.235334346942885]
								}, {
									"case":	504,
									"scores":	[-6.235334346942885]
								}, {
									"case":	505,
									"scores":	[-6.235334346942885]
								}, {
									"case":	506,
									"scores":	[-6.235334346942885]
								}, {
									"case":	507,
									"scores":	[-6.235334346942885]
								}, {
									"case":	508,
									"scores":	[-6.235334346942885]
								}, {
									"case":	509,
									"scores":	[-6.235334346942885]
								}, {
									"case":	510,
									"scores":	[-6.235334346942885]
								}, {
									"case":	511,
									"scores":	[-6.235334346942885]
								}, {
									"case":	512,
									"scores":	[-6.235334346942885]
								}, {
									"case":	513,
									"scores":	[-6.235334346942885]
								}, {
									"case":	514,
									"scores":	[-6.235334346942885]
								}, {
									"case":	515,
									"scores":	[-6.235334346942885]
								}, {
									"case":	516,
									"scores":	[-6.235334346942885]
								}, {
									"case":	517,
									"scores":	[-6.235334346942885]
								}, {
									"case":	518,
									"scores":	[-6.235334346942885]
								}, {
									"case":	519,
									"scores":	[-6.235334346942885]
								}, {
									"case":	520,
									"scores":	[-6.235334346942885]
								}, {
									"case":	521,
									"scores":	[-6.235334346942885]
								}, {
									"case":	522,
									"scores":	[-6.235334346942885]
								}, {
									"case":	523,
									"scores":	[-6.235334346942885]
								}, {
									"case":	524,
									"scores":	[-6.235334346942885]
								}, {
									"case":	525,
									"scores":	[-6.235334346942885]
								}, {
									"case":	526,
									"scores":	[-6.235334346942885]
								}, {
									"case":	527,
									"scores":	[-6.235334346942885]
								}, {
									"case":	528,
									"scores":	[-6.235334346942885]
								}, {
									"case":	529,
									"scores":	[-6.235334346942885]
								}, {
									"case":	530,
									"scores":	[-6.235334346942885]
								}, {
									"case":	531,
									"scores":	[-6.235334346942885]
								}, {
									"case":	532,
									"scores":	[-6.235334346942885]
								}, {
									"case":	533,
									"scores":	[-6.235334346942885]
								}, {
									"case":	534,
									"scores":	[-6.235334346942885]
								}, {
									"case":	535,
									"scores":	[-6.235334346942885]
								}, {
									"case":	536,
									"scores":	[-6.235334346942885]
								}, {
									"case":	537,
									"scores":	[-6.235334346942885]
								}, {
									"case":	538,
									"scores":	[-6.235334346942885]
								}, {
									"case":	539,
									"scores":	[-6.235334346942885]
								}, {
									"case":	540,
									"scores":	[-6.235334346942885]
								}, {
									"case":	541,
									"scores":	[-6.235334346942885]
								}, {
									"case":	542,
									"scores":	[-6.235334346942885]
								}, {
									"case":	543,
									"scores":	[-6.235334346942885]
								}, {
									"case":	544,
									"scores":	[-6.235334346942885]
								}, {
									"case":	545,
									"scores":	[-6.235334346942885]
								}, {
									"case":	546,
									"scores":	[-6.235334346942885]
								}, {
									"case":	547,
									"scores":	[-6.235334346942885]
								}, {
									"case":	548,
									"scores":	[-6.235334346942885]
								}, {
									"case":	549,
									"scores":	[-6.235334346942885]
								}, {
									"case":	550,
									"scores":	[-6.235334346942885]
								}, {
									"case":	551,
									"scores":	[-6.235334346942885]
								}, {
									"case":	552,
									"scores":	[-6.235334346942885]
								}, {
									"case":	553,
									"scores":	[-6.235334346942885]
								}, {
									"case":	554,
									"scores":	[-6.235334346942885]
								}, {
									"case":	555,
									"scores":	[-6.235334346942885]
								}, {
									"case":	556,
									"scores":	[-6.235334346942885]
								}, {
									"case":	557,
									"scores":	[-6.235334346942885]
								}, {
									"case":	558,
									"scores":	[-6.235334346942885]
								}, {
									"case":	559,
									"scores":	[-6.235334346942885]
								}, {
									"case":	560,
									"scores":	[-6.235334346942885]
								}, {
									"case":	561,
									"scores":	[-6.235334346942885]
								}, {
									"case":	562,
									"scores":	[-6.235334346942885]
								}, {
									"case":	563,
									"scores":	[-6.235334346942885]
								}, {
									"case":	564,
									"scores":	[-6.235334346942885]
								}, {
									"case":	565,
									"scores":	[-6.235334346942885]
								}, {
									"case":	566,
									"scores":	[-6.235334346942885]
								}, {
									"case":	567,
									"scores":	[-6.235334346942885]
								}, {
									"case":	568,
									"scores":	[-6.235334346942885]
								}, {
									"case":	569,
									"scores":	[-6.235334346942885]
								}, {
									"case":	570,
									"scores":	[-6.235334346942885]
								}, {
									"case":	571,
									"scores":	[-6.235334346942885]
								}, {
									"case":	572,
									"scores":	[-6.235334346942885]
								}, {
									"case":	573,
									"scores":	[-6.235334346942885]
								}, {
									"case":	574,
									"scores":	[-6.235334346942885]
								}, {
									"case":	575,
									"scores":	[-6.235334346942885]
								}, {
									"case":	576,
									"scores":	[-6.235334346942885]
								}, {
									"case":	577,
									"scores":	[-6.235334346942885]
								}, {
									"case":	578,
									"scores":	[-6.235334346942885]
								}, {
									"case":	579,
									"scores":	[-6.235334346942885]
								}, {
									"case":	580,
									"scores":	[-6.235334346942885]
								}, {
									"case":	581,
									"scores":	[-6.235334346942885]
								}, {
									"case":	582,
									"scores":	[-6.235334346942885]
								}, {
									"case":	583,
									"scores":	[-6.235334346942885]
								}, {
									"case":	584,
									"scores":	[-6.235334346942885]
								}, {
									"case":	585,
									"scores":	[-6.235334346942885]
								}, {
									"case":	586,
									"scores":	[-6.235334346942885]
								}, {
									"case":	587,
									"scores":	[-6.235334346942885]
								}, {
									"case":	588,
									"scores":	[-6.235334346942885]
								}, {
									"case":	589,
									"scores":	[-6.235334346942885]
								}, {
									"case":	590,
									"scores":	[-6.235334346942885]
								}, {
									"case":	591,
									"scores":	[-6.235334346942885]
								}, {
									"case":	592,
									"scores":	[-6.235334346942885]
								}, {
									"case":	593,
									"scores":	[-6.235334346942885]
								}, {
									"case":	594,
									"scores":	[-6.235334346942885]
								}, {
									"case":	595,
									"scores":	[-6.235334346942885]
								}, {
									"case":	596,
									"scores":	[-6.235334346942885]
								}, {
									"case":	597,
									"scores":	[-6.235334346942885]
								}, {
									"case":	598,
									"scores":	[-6.235334346942885]
								}, {
									"case":	599,
									"scores":	[-6.235334346942885]
								}, {
									"case":	600,
									"scores":	[-6.235334346942885]
								}, {
									"case":	601,
									"scores":	[-6.235334346942885]
								}, {
									"case":	602,
									"scores":	[-6.235334346942885]
								}, {
									"case":	603,
									"scores":	[-6.235334346942885]
								}, {
									"case":	604,
									"scores":	[-6.235334346942885]
								}, {
									"case":	605,
									"scores":	[-6.235334346942885]
								}, {
									"case":	606,
									"scores":	[-6.235334346942885]
								}, {
									"case":	607,
									"scores":	[-6.235334346942885]
								}, {
									"case":	608,
									"scores":	[-6.235334346942885]
								}, {
									"case":	609,
									"scores":	[-6.235334346942885]
								}, {
									"case":	610,
									"scores":	[-6.235334346942885]
								}, {
									"case":	611,
									"scores":	[-6.235334346942885]
								}, {
									"case":	612,
									"scores":	[-6.235334346942885]
								}, {
									"case":	613,
									"scores":	[-9.4961069481428844, -9.7718676281428856, -8.9103792581428838, -9.2709326281428837, -8.9103792581428838, -8.9103792581428838, -9.0060247043428845, -9.2520636181428841, -9.2520636181428841, -9.2891640181428841, -9.0431251043428844, -9.2540142213428851, -9.2540142213428851, -9.0060247043428845, -8.7530792213428832, -9.2891640181428841, -9.2520636181428841]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [6, 7], [], [], [], [], [2, 3, 4], [], [], [5]],
							"begin_line":	397,
							"begin_column":	2,
							"end_line":	397,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L397\", 17, &(zoptions), sizeof (zoptions), &(zmode), sizeof (zmode), &(zopened), sizeof (zopened), &(zfilename), sizeof (zfilename), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(old_in_user_include), sizeof (old_in_user_include), &(us), sizeof (us), &(stream), sizeof (stream), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    _zval_ptr_dtor((&zoptions));\n", "zval_update_constant((&zoptions), 0)", "zval_update_constant_inline_change((&zoptions), 0)", "zval_update_constant_no_inline_change((&zoptions), 0)", "{\n}\n", "_zval_internal_ptr_dtor((&zoptions))", "zval_add_ref((&zoptions))", "_zval_ptr_dtor((&(&args)))", "_zval_ptr_dtor((&(&call_result)))", "_zval_ptr_dtor((&(&context)))", "_zval_ptr_dtor((&(&filename)))", "_zval_ptr_dtor((&(&mode)))", "_zval_ptr_dtor((&(&old_in_user_include)))", "_zval_ptr_dtor((&(&opened_path)))", "_zval_ptr_dtor((&(&options)))", "_zval_ptr_dtor((&(&stream)))", "_zval_ptr_dtor((&(&us)))", "_zval_ptr_dtor((&(&uwrap)))", "_zval_ptr_dtor((&(&wrapper)))", "_zval_ptr_dtor((&(&zfilename)))", "_zval_ptr_dtor((&(&zfuncname)))", "_zval_ptr_dtor((&(&zmode)))", "_zval_ptr_dtor((&(&zopened)))", "_zval_ptr_dtor((&(&zoptions)))", "_zval_ptr_dtor((&(&zretval)))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8949415169428852, -7.3737799269428859, -7.1543196409428855, -7.5071197969428853, -7.1543196409428855, -7.1543196409428855, -6.5924043169428854, -7.3502924169428852, -7.3502924169428852, -7.6446432169428853, -6.8867551169428847, -7.3560151169428849, -7.3560151169428849, -6.5924043169428854, -7.0340040869428853, -7.6446432169428853, -7.3502924169428852]
								}, {
									"case":	2,
									"scores":	[-6.235334346942885]
								}, {
									"case":	3,
									"scores":	[-6.235334346942885]
								}, {
									"case":	4,
									"scores":	[-6.235334346942885]
								}, {
									"case":	5,
									"scores":	[-6.235334346942885]
								}, {
									"case":	6,
									"scores":	[-6.235334346942885]
								}, {
									"case":	7,
									"scores":	[-6.235334346942885]
								}, {
									"case":	8,
									"scores":	[-6.235334346942885]
								}, {
									"case":	9,
									"scores":	[-6.235334346942885]
								}, {
									"case":	10,
									"scores":	[-6.235334346942885]
								}, {
									"case":	11,
									"scores":	[-6.235334346942885]
								}, {
									"case":	12,
									"scores":	[-6.235334346942885]
								}, {
									"case":	13,
									"scores":	[-6.235334346942885]
								}, {
									"case":	14,
									"scores":	[-6.235334346942885]
								}, {
									"case":	15,
									"scores":	[-6.235334346942885]
								}, {
									"case":	16,
									"scores":	[-6.235334346942885]
								}, {
									"case":	17,
									"scores":	[-6.235334346942885]
								}, {
									"case":	18,
									"scores":	[-6.235334346942885]
								}, {
									"case":	19,
									"scores":	[-6.235334346942885]
								}, {
									"case":	20,
									"scores":	[-6.235334346942885]
								}, {
									"case":	21,
									"scores":	[-6.235334346942885]
								}, {
									"case":	22,
									"scores":	[-6.235334346942885]
								}, {
									"case":	23,
									"scores":	[-6.235334346942885]
								}, {
									"case":	24,
									"scores":	[-6.235334346942885]
								}, {
									"case":	25,
									"scores":	[-6.235334346942885]
								}, {
									"case":	26,
									"scores":	[-6.235334346942885]
								}, {
									"case":	27,
									"scores":	[-6.235334346942885]
								}, {
									"case":	28,
									"scores":	[-6.235334346942885]
								}, {
									"case":	29,
									"scores":	[-6.235334346942885]
								}, {
									"case":	30,
									"scores":	[-6.235334346942885]
								}, {
									"case":	31,
									"scores":	[-6.235334346942885]
								}]
						}]
				}, {
					"line":	397,
					"switches":	[{
							"switch":	58,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	398,
							"begin_column":	0,
							"end_line":	398,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L398\", 17, &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(zoptions), sizeof (zoptions), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(old_in_user_include), sizeof (old_in_user_include), &(stream), sizeof (stream), &(us), sizeof (us), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	2,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	3,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	4,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	5,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	6,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	7,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	8,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	9,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	10,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	11,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	12,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	13,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	14,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	15,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	16,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	17,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	18,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	19,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	20,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	21,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	22,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	23,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	24,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	25,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	26,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	27,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	28,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	29,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	30,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	31,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	32,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	33,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	34,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	35,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	36,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	37,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	38,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	39,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	40,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	41,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	42,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	43,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	44,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	45,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	46,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	47,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	48,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	49,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	50,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	51,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	52,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	53,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	54,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	55,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	56,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	57,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	58,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	59,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	60,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	61,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	62,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	63,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	64,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	65,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	66,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	67,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	68,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	69,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	70,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	71,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	72,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	73,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	74,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	75,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	76,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	77,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	78,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	79,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	80,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	81,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	82,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	83,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	84,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	85,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	86,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	87,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	88,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	89,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	90,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	91,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	92,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	93,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	94,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	95,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	96,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	97,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	98,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	99,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	100,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	101,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	102,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	103,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	104,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	105,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	106,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	107,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	108,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	109,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	110,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	111,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	112,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	113,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	114,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	115,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	116,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	117,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	118,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	119,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	120,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	121,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	122,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	123,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	124,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	125,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	126,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	127,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	128,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	129,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	130,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	131,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	132,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	133,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	134,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	135,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	136,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	137,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	138,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	139,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	140,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	141,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	142,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	143,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	144,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	145,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	146,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	147,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	148,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	149,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	150,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	151,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	152,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	153,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	154,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	155,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	156,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	157,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	158,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	159,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	160,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	161,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	162,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	163,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	164,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	165,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	166,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	167,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	168,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	169,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	170,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	171,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	172,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	173,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	174,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	175,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	176,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	177,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	178,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	179,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	180,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	181,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	182,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	183,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	184,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	185,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	186,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	187,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	188,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	189,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	190,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	191,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	192,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	193,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	194,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	195,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	196,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	197,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	198,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	199,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	200,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	201,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	202,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	203,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	204,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	205,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	206,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	207,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	208,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	209,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	210,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	211,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	212,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	213,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	214,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	215,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	216,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	217,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	218,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	219,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	220,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	221,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	222,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	223,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	224,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	225,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	226,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	227,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	228,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	229,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	230,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	231,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	232,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	233,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	234,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	235,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	236,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	237,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	238,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	239,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	240,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	241,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	242,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	243,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	244,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	245,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	246,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	247,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	248,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	249,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	250,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	251,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	252,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	253,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	254,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	255,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	256,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	257,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	258,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	259,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	260,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	261,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	262,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	263,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	264,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	265,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	266,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	267,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	268,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	269,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	270,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	271,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	272,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	273,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	274,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	275,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	276,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	277,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	278,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	279,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	280,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	281,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	282,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	283,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	284,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	285,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	286,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	287,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	288,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	289,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	290,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	291,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	292,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	293,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	294,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	295,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	296,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	297,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	298,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	299,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	300,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	301,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	302,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	303,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	304,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	305,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	306,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	307,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	308,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	309,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	310,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	311,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	312,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	313,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	314,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	315,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	316,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	317,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	318,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	319,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	320,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	321,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	322,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	323,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	324,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	325,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	326,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	327,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	328,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	329,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	330,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	331,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	332,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	333,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	334,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	335,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	336,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	337,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	338,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	339,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	340,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	341,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	342,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	343,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	344,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	345,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	346,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	347,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	348,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	349,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	350,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	351,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	352,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	353,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	354,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	355,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	356,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	357,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	358,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	359,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	360,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	361,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	362,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	363,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	364,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	365,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	366,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	367,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	368,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	369,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	370,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	371,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	372,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	373,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	374,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	375,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	376,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	377,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	378,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	379,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	380,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	381,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	382,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	383,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	384,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	385,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	386,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	387,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	388,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	389,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	390,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	391,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	392,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	393,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	394,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	395,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	396,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	397,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	398,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	399,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	400,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	401,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	402,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	403,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	404,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	405,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	406,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	407,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	408,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	409,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	410,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	411,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	412,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	413,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	414,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	415,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	416,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	417,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	418,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	419,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	420,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	421,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	422,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	423,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	424,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	425,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	426,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	427,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	428,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	429,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	430,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	431,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	432,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	433,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	434,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	435,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	436,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	437,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	438,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	439,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	440,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	441,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	442,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	443,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	444,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	445,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	446,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	447,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	448,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	449,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	450,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	451,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	452,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	453,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	454,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	455,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	456,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	457,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	458,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	459,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	460,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	461,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	462,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	463,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	464,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	465,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	466,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	467,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	468,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	469,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	470,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	471,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	472,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	473,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	474,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	475,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	476,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	477,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	478,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	479,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	480,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	481,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	482,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	483,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	484,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	485,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	486,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	487,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	488,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	489,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	490,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	491,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	492,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	493,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	494,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	495,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	496,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	497,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	498,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	499,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	500,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	501,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	502,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	503,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	504,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	505,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	506,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	507,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	508,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	509,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	510,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	511,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	512,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	513,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	514,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	515,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	516,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	517,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	518,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	519,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	520,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	521,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	522,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	523,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	524,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	525,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	526,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	527,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	528,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	529,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	530,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	531,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	532,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	533,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	534,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	535,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	536,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	537,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	538,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	539,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	540,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	541,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	542,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	543,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	544,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	545,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	546,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	547,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	548,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	549,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	550,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	551,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	552,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	553,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	554,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	555,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	556,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	557,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	558,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	559,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	560,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	561,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	562,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	563,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	564,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	565,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	566,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	567,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	568,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	569,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	570,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	571,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	572,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	573,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	574,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	575,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	576,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	577,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	578,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	579,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	580,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	581,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	582,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	583,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	584,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	585,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	586,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	587,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	588,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	589,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	590,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	591,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	592,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	593,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	594,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	595,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	596,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	597,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	598,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	599,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	600,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	601,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	602,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	603,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	604,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	605,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	606,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	607,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	608,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	609,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	610,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	611,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	612,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	613,
									"scores":	[-8.9751022408253647, -8.749927920825364, -8.3893745508253659, -8.3893745508253659, -8.3893745508253659, -8.7310589108253644, -7.9419829970253657, -8.7310589108253644, -8.7310589108253644, -8.7681593108253644, -8.5221203970253647, -8.7330095140253654, -8.7330095140253654, -8.4850199970253648, -8.2320745140253653, -8.7681593108253644, -8.7310589108253644]
								}]
						}, {
							"switch":	59,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [6, 7], [], [], [], [], [2, 3, 4], [], [], [5]],
							"begin_line":	398,
							"begin_column":	2,
							"end_line":	398,
							"end_column":	22,
							"patch_codes":	["if (!__is_neg(\"\", \"L398\", 17, &(zmode), sizeof (zmode), &(zfilename), sizeof (zfilename), &(zoptions), sizeof (zoptions), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(old_in_user_include), sizeof (old_in_user_include), &(stream), sizeof (stream), &(us), sizeof (us), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    _zval_ptr_dtor((&zmode));\n", "zval_update_constant((&zmode), 0)", "zval_update_constant_inline_change((&zmode), 0)", "zval_update_constant_no_inline_change((&zmode), 0)", "{\n}\n", "_zval_internal_ptr_dtor((&zmode))", "zval_add_ref((&zmode))", "_zval_ptr_dtor((&(&args)))", "_zval_ptr_dtor((&(&call_result)))", "_zval_ptr_dtor((&(&context)))", "_zval_ptr_dtor((&(&filename)))", "_zval_ptr_dtor((&(&mode)))", "_zval_ptr_dtor((&(&old_in_user_include)))", "_zval_ptr_dtor((&(&opened_path)))", "_zval_ptr_dtor((&(&options)))", "_zval_ptr_dtor((&(&stream)))", "_zval_ptr_dtor((&(&us)))", "_zval_ptr_dtor((&(&uwrap)))", "_zval_ptr_dtor((&(&wrapper)))", "_zval_ptr_dtor((&(&zfilename)))", "_zval_ptr_dtor((&(&zfuncname)))", "_zval_ptr_dtor((&(&zmode)))", "_zval_ptr_dtor((&(&zopened)))", "_zval_ptr_dtor((&(&zoptions)))", "_zval_ptr_dtor((&(&zretval)))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6190718096253658, -6.7758991896253651, -6.8784499336253653, -6.8784499336253653, -6.8784499336253653, -7.0744227096253658, -6.197760159625366, -7.0744227096253658, -7.0744227096253658, -7.368773509625365, -6.6108854096253653, -7.0801454096253655, -7.0801454096253655, -6.3165346096253652, -6.7581343796253659, -7.368773509625365, -7.0744227096253658]
								}, {
									"case":	2,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	3,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	4,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	5,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	6,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	7,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	8,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	9,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	10,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	11,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	12,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	13,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	14,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	15,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	16,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	17,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	18,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	19,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	20,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	21,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	22,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	23,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	24,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	25,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	26,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	27,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	28,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	29,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	30,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	31,
									"scores":	[-6.2151316396253655]
								}]
						}]
				}, {
					"line":	398,
					"switches":	[{
							"switch":	60,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	399,
							"begin_column":	0,
							"end_line":	399,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L399\", 17, &(zfilename), sizeof (zfilename), &(zmode), sizeof (zmode), &(zoptions), sizeof (zoptions), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(old_in_user_include), sizeof (old_in_user_include), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(us), sizeof (us), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.194928932307846]
								}, {
									"case":	2,
									"scores":	[-6.194928932307846]
								}, {
									"case":	3,
									"scores":	[-6.194928932307846]
								}, {
									"case":	4,
									"scores":	[-6.194928932307846]
								}, {
									"case":	5,
									"scores":	[-6.194928932307846]
								}, {
									"case":	6,
									"scores":	[-6.194928932307846]
								}, {
									"case":	7,
									"scores":	[-6.194928932307846]
								}, {
									"case":	8,
									"scores":	[-6.194928932307846]
								}, {
									"case":	9,
									"scores":	[-6.194928932307846]
								}, {
									"case":	10,
									"scores":	[-6.194928932307846]
								}, {
									"case":	11,
									"scores":	[-6.194928932307846]
								}, {
									"case":	12,
									"scores":	[-6.194928932307846]
								}, {
									"case":	13,
									"scores":	[-6.194928932307846]
								}, {
									"case":	14,
									"scores":	[-6.194928932307846]
								}, {
									"case":	15,
									"scores":	[-6.194928932307846]
								}, {
									"case":	16,
									"scores":	[-6.194928932307846]
								}, {
									"case":	17,
									"scores":	[-6.194928932307846]
								}, {
									"case":	18,
									"scores":	[-6.194928932307846]
								}, {
									"case":	19,
									"scores":	[-6.194928932307846]
								}, {
									"case":	20,
									"scores":	[-6.194928932307846]
								}, {
									"case":	21,
									"scores":	[-6.194928932307846]
								}, {
									"case":	22,
									"scores":	[-6.194928932307846]
								}, {
									"case":	23,
									"scores":	[-6.194928932307846]
								}, {
									"case":	24,
									"scores":	[-6.194928932307846]
								}, {
									"case":	25,
									"scores":	[-6.194928932307846]
								}, {
									"case":	26,
									"scores":	[-6.194928932307846]
								}, {
									"case":	27,
									"scores":	[-6.194928932307846]
								}, {
									"case":	28,
									"scores":	[-6.194928932307846]
								}, {
									"case":	29,
									"scores":	[-6.194928932307846]
								}, {
									"case":	30,
									"scores":	[-6.194928932307846]
								}, {
									"case":	31,
									"scores":	[-6.194928932307846]
								}, {
									"case":	32,
									"scores":	[-6.194928932307846]
								}, {
									"case":	33,
									"scores":	[-6.194928932307846]
								}, {
									"case":	34,
									"scores":	[-6.194928932307846]
								}, {
									"case":	35,
									"scores":	[-6.194928932307846]
								}, {
									"case":	36,
									"scores":	[-6.194928932307846]
								}, {
									"case":	37,
									"scores":	[-6.194928932307846]
								}, {
									"case":	38,
									"scores":	[-6.194928932307846]
								}, {
									"case":	39,
									"scores":	[-6.194928932307846]
								}, {
									"case":	40,
									"scores":	[-6.194928932307846]
								}, {
									"case":	41,
									"scores":	[-6.194928932307846]
								}, {
									"case":	42,
									"scores":	[-6.194928932307846]
								}, {
									"case":	43,
									"scores":	[-6.194928932307846]
								}, {
									"case":	44,
									"scores":	[-6.194928932307846]
								}, {
									"case":	45,
									"scores":	[-6.194928932307846]
								}, {
									"case":	46,
									"scores":	[-6.194928932307846]
								}, {
									"case":	47,
									"scores":	[-6.194928932307846]
								}, {
									"case":	48,
									"scores":	[-6.194928932307846]
								}, {
									"case":	49,
									"scores":	[-6.194928932307846]
								}, {
									"case":	50,
									"scores":	[-6.194928932307846]
								}, {
									"case":	51,
									"scores":	[-6.194928932307846]
								}, {
									"case":	52,
									"scores":	[-6.194928932307846]
								}, {
									"case":	53,
									"scores":	[-6.194928932307846]
								}, {
									"case":	54,
									"scores":	[-6.194928932307846]
								}, {
									"case":	55,
									"scores":	[-6.194928932307846]
								}, {
									"case":	56,
									"scores":	[-6.194928932307846]
								}, {
									"case":	57,
									"scores":	[-6.194928932307846]
								}, {
									"case":	58,
									"scores":	[-6.194928932307846]
								}, {
									"case":	59,
									"scores":	[-6.194928932307846]
								}, {
									"case":	60,
									"scores":	[-6.194928932307846]
								}, {
									"case":	61,
									"scores":	[-6.194928932307846]
								}, {
									"case":	62,
									"scores":	[-6.194928932307846]
								}, {
									"case":	63,
									"scores":	[-6.194928932307846]
								}, {
									"case":	64,
									"scores":	[-6.194928932307846]
								}, {
									"case":	65,
									"scores":	[-6.194928932307846]
								}, {
									"case":	66,
									"scores":	[-6.194928932307846]
								}, {
									"case":	67,
									"scores":	[-6.194928932307846]
								}, {
									"case":	68,
									"scores":	[-6.194928932307846]
								}, {
									"case":	69,
									"scores":	[-6.194928932307846]
								}, {
									"case":	70,
									"scores":	[-6.194928932307846]
								}, {
									"case":	71,
									"scores":	[-6.194928932307846]
								}, {
									"case":	72,
									"scores":	[-6.194928932307846]
								}, {
									"case":	73,
									"scores":	[-6.194928932307846]
								}, {
									"case":	74,
									"scores":	[-6.194928932307846]
								}, {
									"case":	75,
									"scores":	[-6.194928932307846]
								}, {
									"case":	76,
									"scores":	[-6.194928932307846]
								}, {
									"case":	77,
									"scores":	[-6.194928932307846]
								}, {
									"case":	78,
									"scores":	[-6.194928932307846]
								}, {
									"case":	79,
									"scores":	[-6.194928932307846]
								}, {
									"case":	80,
									"scores":	[-6.194928932307846]
								}, {
									"case":	81,
									"scores":	[-6.194928932307846]
								}, {
									"case":	82,
									"scores":	[-6.194928932307846]
								}, {
									"case":	83,
									"scores":	[-6.194928932307846]
								}, {
									"case":	84,
									"scores":	[-6.194928932307846]
								}, {
									"case":	85,
									"scores":	[-6.194928932307846]
								}, {
									"case":	86,
									"scores":	[-6.194928932307846]
								}, {
									"case":	87,
									"scores":	[-6.194928932307846]
								}, {
									"case":	88,
									"scores":	[-6.194928932307846]
								}, {
									"case":	89,
									"scores":	[-6.194928932307846]
								}, {
									"case":	90,
									"scores":	[-6.194928932307846]
								}, {
									"case":	91,
									"scores":	[-6.194928932307846]
								}, {
									"case":	92,
									"scores":	[-6.194928932307846]
								}, {
									"case":	93,
									"scores":	[-6.194928932307846]
								}, {
									"case":	94,
									"scores":	[-6.194928932307846]
								}, {
									"case":	95,
									"scores":	[-6.194928932307846]
								}, {
									"case":	96,
									"scores":	[-6.194928932307846]
								}, {
									"case":	97,
									"scores":	[-6.194928932307846]
								}, {
									"case":	98,
									"scores":	[-6.194928932307846]
								}, {
									"case":	99,
									"scores":	[-6.194928932307846]
								}, {
									"case":	100,
									"scores":	[-6.194928932307846]
								}, {
									"case":	101,
									"scores":	[-6.194928932307846]
								}, {
									"case":	102,
									"scores":	[-6.194928932307846]
								}, {
									"case":	103,
									"scores":	[-6.194928932307846]
								}, {
									"case":	104,
									"scores":	[-6.194928932307846]
								}, {
									"case":	105,
									"scores":	[-6.194928932307846]
								}, {
									"case":	106,
									"scores":	[-6.194928932307846]
								}, {
									"case":	107,
									"scores":	[-6.194928932307846]
								}, {
									"case":	108,
									"scores":	[-6.194928932307846]
								}, {
									"case":	109,
									"scores":	[-6.194928932307846]
								}, {
									"case":	110,
									"scores":	[-6.194928932307846]
								}, {
									"case":	111,
									"scores":	[-6.194928932307846]
								}, {
									"case":	112,
									"scores":	[-6.194928932307846]
								}, {
									"case":	113,
									"scores":	[-6.194928932307846]
								}, {
									"case":	114,
									"scores":	[-6.194928932307846]
								}, {
									"case":	115,
									"scores":	[-6.194928932307846]
								}, {
									"case":	116,
									"scores":	[-6.194928932307846]
								}, {
									"case":	117,
									"scores":	[-6.194928932307846]
								}, {
									"case":	118,
									"scores":	[-6.194928932307846]
								}, {
									"case":	119,
									"scores":	[-6.194928932307846]
								}, {
									"case":	120,
									"scores":	[-6.194928932307846]
								}, {
									"case":	121,
									"scores":	[-6.194928932307846]
								}, {
									"case":	122,
									"scores":	[-6.194928932307846]
								}, {
									"case":	123,
									"scores":	[-6.194928932307846]
								}, {
									"case":	124,
									"scores":	[-6.194928932307846]
								}, {
									"case":	125,
									"scores":	[-6.194928932307846]
								}, {
									"case":	126,
									"scores":	[-6.194928932307846]
								}, {
									"case":	127,
									"scores":	[-6.194928932307846]
								}, {
									"case":	128,
									"scores":	[-6.194928932307846]
								}, {
									"case":	129,
									"scores":	[-6.194928932307846]
								}, {
									"case":	130,
									"scores":	[-6.194928932307846]
								}, {
									"case":	131,
									"scores":	[-6.194928932307846]
								}, {
									"case":	132,
									"scores":	[-6.194928932307846]
								}, {
									"case":	133,
									"scores":	[-6.194928932307846]
								}, {
									"case":	134,
									"scores":	[-6.194928932307846]
								}, {
									"case":	135,
									"scores":	[-6.194928932307846]
								}, {
									"case":	136,
									"scores":	[-6.194928932307846]
								}, {
									"case":	137,
									"scores":	[-6.194928932307846]
								}, {
									"case":	138,
									"scores":	[-6.194928932307846]
								}, {
									"case":	139,
									"scores":	[-6.194928932307846]
								}, {
									"case":	140,
									"scores":	[-6.194928932307846]
								}, {
									"case":	141,
									"scores":	[-6.194928932307846]
								}, {
									"case":	142,
									"scores":	[-6.194928932307846]
								}, {
									"case":	143,
									"scores":	[-6.194928932307846]
								}, {
									"case":	144,
									"scores":	[-6.194928932307846]
								}, {
									"case":	145,
									"scores":	[-6.194928932307846]
								}, {
									"case":	146,
									"scores":	[-6.194928932307846]
								}, {
									"case":	147,
									"scores":	[-6.194928932307846]
								}, {
									"case":	148,
									"scores":	[-6.194928932307846]
								}, {
									"case":	149,
									"scores":	[-6.194928932307846]
								}, {
									"case":	150,
									"scores":	[-6.194928932307846]
								}, {
									"case":	151,
									"scores":	[-6.194928932307846]
								}, {
									"case":	152,
									"scores":	[-6.194928932307846]
								}, {
									"case":	153,
									"scores":	[-6.194928932307846]
								}, {
									"case":	154,
									"scores":	[-6.194928932307846]
								}, {
									"case":	155,
									"scores":	[-6.194928932307846]
								}, {
									"case":	156,
									"scores":	[-6.194928932307846]
								}, {
									"case":	157,
									"scores":	[-6.194928932307846]
								}, {
									"case":	158,
									"scores":	[-6.194928932307846]
								}, {
									"case":	159,
									"scores":	[-6.194928932307846]
								}, {
									"case":	160,
									"scores":	[-6.194928932307846]
								}, {
									"case":	161,
									"scores":	[-6.194928932307846]
								}, {
									"case":	162,
									"scores":	[-6.194928932307846]
								}, {
									"case":	163,
									"scores":	[-6.194928932307846]
								}, {
									"case":	164,
									"scores":	[-6.194928932307846]
								}, {
									"case":	165,
									"scores":	[-6.194928932307846]
								}, {
									"case":	166,
									"scores":	[-6.194928932307846]
								}, {
									"case":	167,
									"scores":	[-6.194928932307846]
								}, {
									"case":	168,
									"scores":	[-6.194928932307846]
								}, {
									"case":	169,
									"scores":	[-6.194928932307846]
								}, {
									"case":	170,
									"scores":	[-6.194928932307846]
								}, {
									"case":	171,
									"scores":	[-6.194928932307846]
								}, {
									"case":	172,
									"scores":	[-6.194928932307846]
								}, {
									"case":	173,
									"scores":	[-6.194928932307846]
								}, {
									"case":	174,
									"scores":	[-6.194928932307846]
								}, {
									"case":	175,
									"scores":	[-6.194928932307846]
								}, {
									"case":	176,
									"scores":	[-6.194928932307846]
								}, {
									"case":	177,
									"scores":	[-6.194928932307846]
								}, {
									"case":	178,
									"scores":	[-6.194928932307846]
								}, {
									"case":	179,
									"scores":	[-6.194928932307846]
								}, {
									"case":	180,
									"scores":	[-6.194928932307846]
								}, {
									"case":	181,
									"scores":	[-6.194928932307846]
								}, {
									"case":	182,
									"scores":	[-6.194928932307846]
								}, {
									"case":	183,
									"scores":	[-6.194928932307846]
								}, {
									"case":	184,
									"scores":	[-6.194928932307846]
								}, {
									"case":	185,
									"scores":	[-6.194928932307846]
								}, {
									"case":	186,
									"scores":	[-6.194928932307846]
								}, {
									"case":	187,
									"scores":	[-6.194928932307846]
								}, {
									"case":	188,
									"scores":	[-6.194928932307846]
								}, {
									"case":	189,
									"scores":	[-6.194928932307846]
								}, {
									"case":	190,
									"scores":	[-6.194928932307846]
								}, {
									"case":	191,
									"scores":	[-6.194928932307846]
								}, {
									"case":	192,
									"scores":	[-6.194928932307846]
								}, {
									"case":	193,
									"scores":	[-6.194928932307846]
								}, {
									"case":	194,
									"scores":	[-6.194928932307846]
								}, {
									"case":	195,
									"scores":	[-6.194928932307846]
								}, {
									"case":	196,
									"scores":	[-6.194928932307846]
								}, {
									"case":	197,
									"scores":	[-6.194928932307846]
								}, {
									"case":	198,
									"scores":	[-6.194928932307846]
								}, {
									"case":	199,
									"scores":	[-6.194928932307846]
								}, {
									"case":	200,
									"scores":	[-6.194928932307846]
								}, {
									"case":	201,
									"scores":	[-6.194928932307846]
								}, {
									"case":	202,
									"scores":	[-6.194928932307846]
								}, {
									"case":	203,
									"scores":	[-6.194928932307846]
								}, {
									"case":	204,
									"scores":	[-6.194928932307846]
								}, {
									"case":	205,
									"scores":	[-6.194928932307846]
								}, {
									"case":	206,
									"scores":	[-6.194928932307846]
								}, {
									"case":	207,
									"scores":	[-6.194928932307846]
								}, {
									"case":	208,
									"scores":	[-6.194928932307846]
								}, {
									"case":	209,
									"scores":	[-6.194928932307846]
								}, {
									"case":	210,
									"scores":	[-6.194928932307846]
								}, {
									"case":	211,
									"scores":	[-6.194928932307846]
								}, {
									"case":	212,
									"scores":	[-6.194928932307846]
								}, {
									"case":	213,
									"scores":	[-6.194928932307846]
								}, {
									"case":	214,
									"scores":	[-6.194928932307846]
								}, {
									"case":	215,
									"scores":	[-6.194928932307846]
								}, {
									"case":	216,
									"scores":	[-6.194928932307846]
								}, {
									"case":	217,
									"scores":	[-6.194928932307846]
								}, {
									"case":	218,
									"scores":	[-6.194928932307846]
								}, {
									"case":	219,
									"scores":	[-6.194928932307846]
								}, {
									"case":	220,
									"scores":	[-6.194928932307846]
								}, {
									"case":	221,
									"scores":	[-6.194928932307846]
								}, {
									"case":	222,
									"scores":	[-6.194928932307846]
								}, {
									"case":	223,
									"scores":	[-6.194928932307846]
								}, {
									"case":	224,
									"scores":	[-6.194928932307846]
								}, {
									"case":	225,
									"scores":	[-6.194928932307846]
								}, {
									"case":	226,
									"scores":	[-6.194928932307846]
								}, {
									"case":	227,
									"scores":	[-6.194928932307846]
								}, {
									"case":	228,
									"scores":	[-6.194928932307846]
								}, {
									"case":	229,
									"scores":	[-6.194928932307846]
								}, {
									"case":	230,
									"scores":	[-6.194928932307846]
								}, {
									"case":	231,
									"scores":	[-6.194928932307846]
								}, {
									"case":	232,
									"scores":	[-6.194928932307846]
								}, {
									"case":	233,
									"scores":	[-6.194928932307846]
								}, {
									"case":	234,
									"scores":	[-6.194928932307846]
								}, {
									"case":	235,
									"scores":	[-6.194928932307846]
								}, {
									"case":	236,
									"scores":	[-6.194928932307846]
								}, {
									"case":	237,
									"scores":	[-6.194928932307846]
								}, {
									"case":	238,
									"scores":	[-6.194928932307846]
								}, {
									"case":	239,
									"scores":	[-6.194928932307846]
								}, {
									"case":	240,
									"scores":	[-6.194928932307846]
								}, {
									"case":	241,
									"scores":	[-6.194928932307846]
								}, {
									"case":	242,
									"scores":	[-6.194928932307846]
								}, {
									"case":	243,
									"scores":	[-6.194928932307846]
								}, {
									"case":	244,
									"scores":	[-6.194928932307846]
								}, {
									"case":	245,
									"scores":	[-6.194928932307846]
								}, {
									"case":	246,
									"scores":	[-6.194928932307846]
								}, {
									"case":	247,
									"scores":	[-6.194928932307846]
								}, {
									"case":	248,
									"scores":	[-6.194928932307846]
								}, {
									"case":	249,
									"scores":	[-6.194928932307846]
								}, {
									"case":	250,
									"scores":	[-6.194928932307846]
								}, {
									"case":	251,
									"scores":	[-6.194928932307846]
								}, {
									"case":	252,
									"scores":	[-6.194928932307846]
								}, {
									"case":	253,
									"scores":	[-6.194928932307846]
								}, {
									"case":	254,
									"scores":	[-6.194928932307846]
								}, {
									"case":	255,
									"scores":	[-6.194928932307846]
								}, {
									"case":	256,
									"scores":	[-6.194928932307846]
								}, {
									"case":	257,
									"scores":	[-6.194928932307846]
								}, {
									"case":	258,
									"scores":	[-6.194928932307846]
								}, {
									"case":	259,
									"scores":	[-6.194928932307846]
								}, {
									"case":	260,
									"scores":	[-6.194928932307846]
								}, {
									"case":	261,
									"scores":	[-6.194928932307846]
								}, {
									"case":	262,
									"scores":	[-6.194928932307846]
								}, {
									"case":	263,
									"scores":	[-6.194928932307846]
								}, {
									"case":	264,
									"scores":	[-6.194928932307846]
								}, {
									"case":	265,
									"scores":	[-6.194928932307846]
								}, {
									"case":	266,
									"scores":	[-6.194928932307846]
								}, {
									"case":	267,
									"scores":	[-6.194928932307846]
								}, {
									"case":	268,
									"scores":	[-6.194928932307846]
								}, {
									"case":	269,
									"scores":	[-6.194928932307846]
								}, {
									"case":	270,
									"scores":	[-6.194928932307846]
								}, {
									"case":	271,
									"scores":	[-6.194928932307846]
								}, {
									"case":	272,
									"scores":	[-6.194928932307846]
								}, {
									"case":	273,
									"scores":	[-6.194928932307846]
								}, {
									"case":	274,
									"scores":	[-6.194928932307846]
								}, {
									"case":	275,
									"scores":	[-6.194928932307846]
								}, {
									"case":	276,
									"scores":	[-6.194928932307846]
								}, {
									"case":	277,
									"scores":	[-6.194928932307846]
								}, {
									"case":	278,
									"scores":	[-6.194928932307846]
								}, {
									"case":	279,
									"scores":	[-6.194928932307846]
								}, {
									"case":	280,
									"scores":	[-6.194928932307846]
								}, {
									"case":	281,
									"scores":	[-6.194928932307846]
								}, {
									"case":	282,
									"scores":	[-6.194928932307846]
								}, {
									"case":	283,
									"scores":	[-6.194928932307846]
								}, {
									"case":	284,
									"scores":	[-6.194928932307846]
								}, {
									"case":	285,
									"scores":	[-6.194928932307846]
								}, {
									"case":	286,
									"scores":	[-6.194928932307846]
								}, {
									"case":	287,
									"scores":	[-6.194928932307846]
								}, {
									"case":	288,
									"scores":	[-6.194928932307846]
								}, {
									"case":	289,
									"scores":	[-6.194928932307846]
								}, {
									"case":	290,
									"scores":	[-6.194928932307846]
								}, {
									"case":	291,
									"scores":	[-6.194928932307846]
								}, {
									"case":	292,
									"scores":	[-6.194928932307846]
								}, {
									"case":	293,
									"scores":	[-6.194928932307846]
								}, {
									"case":	294,
									"scores":	[-6.194928932307846]
								}, {
									"case":	295,
									"scores":	[-6.194928932307846]
								}, {
									"case":	296,
									"scores":	[-6.194928932307846]
								}, {
									"case":	297,
									"scores":	[-6.194928932307846]
								}, {
									"case":	298,
									"scores":	[-6.194928932307846]
								}, {
									"case":	299,
									"scores":	[-6.194928932307846]
								}, {
									"case":	300,
									"scores":	[-6.194928932307846]
								}, {
									"case":	301,
									"scores":	[-6.194928932307846]
								}, {
									"case":	302,
									"scores":	[-6.194928932307846]
								}, {
									"case":	303,
									"scores":	[-6.194928932307846]
								}, {
									"case":	304,
									"scores":	[-6.194928932307846]
								}, {
									"case":	305,
									"scores":	[-6.194928932307846]
								}, {
									"case":	306,
									"scores":	[-6.194928932307846]
								}, {
									"case":	307,
									"scores":	[-6.194928932307846]
								}, {
									"case":	308,
									"scores":	[-6.194928932307846]
								}, {
									"case":	309,
									"scores":	[-6.194928932307846]
								}, {
									"case":	310,
									"scores":	[-6.194928932307846]
								}, {
									"case":	311,
									"scores":	[-6.194928932307846]
								}, {
									"case":	312,
									"scores":	[-6.194928932307846]
								}, {
									"case":	313,
									"scores":	[-6.194928932307846]
								}, {
									"case":	314,
									"scores":	[-6.194928932307846]
								}, {
									"case":	315,
									"scores":	[-6.194928932307846]
								}, {
									"case":	316,
									"scores":	[-6.194928932307846]
								}, {
									"case":	317,
									"scores":	[-6.194928932307846]
								}, {
									"case":	318,
									"scores":	[-6.194928932307846]
								}, {
									"case":	319,
									"scores":	[-6.194928932307846]
								}, {
									"case":	320,
									"scores":	[-6.194928932307846]
								}, {
									"case":	321,
									"scores":	[-6.194928932307846]
								}, {
									"case":	322,
									"scores":	[-6.194928932307846]
								}, {
									"case":	323,
									"scores":	[-6.194928932307846]
								}, {
									"case":	324,
									"scores":	[-6.194928932307846]
								}, {
									"case":	325,
									"scores":	[-6.194928932307846]
								}, {
									"case":	326,
									"scores":	[-6.194928932307846]
								}, {
									"case":	327,
									"scores":	[-6.194928932307846]
								}, {
									"case":	328,
									"scores":	[-6.194928932307846]
								}, {
									"case":	329,
									"scores":	[-6.194928932307846]
								}, {
									"case":	330,
									"scores":	[-6.194928932307846]
								}, {
									"case":	331,
									"scores":	[-6.194928932307846]
								}, {
									"case":	332,
									"scores":	[-6.194928932307846]
								}, {
									"case":	333,
									"scores":	[-6.194928932307846]
								}, {
									"case":	334,
									"scores":	[-6.194928932307846]
								}, {
									"case":	335,
									"scores":	[-6.194928932307846]
								}, {
									"case":	336,
									"scores":	[-6.194928932307846]
								}, {
									"case":	337,
									"scores":	[-6.194928932307846]
								}, {
									"case":	338,
									"scores":	[-6.194928932307846]
								}, {
									"case":	339,
									"scores":	[-6.194928932307846]
								}, {
									"case":	340,
									"scores":	[-6.194928932307846]
								}, {
									"case":	341,
									"scores":	[-6.194928932307846]
								}, {
									"case":	342,
									"scores":	[-6.194928932307846]
								}, {
									"case":	343,
									"scores":	[-6.194928932307846]
								}, {
									"case":	344,
									"scores":	[-6.194928932307846]
								}, {
									"case":	345,
									"scores":	[-6.194928932307846]
								}, {
									"case":	346,
									"scores":	[-6.194928932307846]
								}, {
									"case":	347,
									"scores":	[-6.194928932307846]
								}, {
									"case":	348,
									"scores":	[-6.194928932307846]
								}, {
									"case":	349,
									"scores":	[-6.194928932307846]
								}, {
									"case":	350,
									"scores":	[-6.194928932307846]
								}, {
									"case":	351,
									"scores":	[-6.194928932307846]
								}, {
									"case":	352,
									"scores":	[-6.194928932307846]
								}, {
									"case":	353,
									"scores":	[-6.194928932307846]
								}, {
									"case":	354,
									"scores":	[-6.194928932307846]
								}, {
									"case":	355,
									"scores":	[-6.194928932307846]
								}, {
									"case":	356,
									"scores":	[-6.194928932307846]
								}, {
									"case":	357,
									"scores":	[-6.194928932307846]
								}, {
									"case":	358,
									"scores":	[-6.194928932307846]
								}, {
									"case":	359,
									"scores":	[-6.194928932307846]
								}, {
									"case":	360,
									"scores":	[-6.194928932307846]
								}, {
									"case":	361,
									"scores":	[-6.194928932307846]
								}, {
									"case":	362,
									"scores":	[-6.194928932307846]
								}, {
									"case":	363,
									"scores":	[-6.194928932307846]
								}, {
									"case":	364,
									"scores":	[-6.194928932307846]
								}, {
									"case":	365,
									"scores":	[-6.194928932307846]
								}, {
									"case":	366,
									"scores":	[-6.194928932307846]
								}, {
									"case":	367,
									"scores":	[-6.194928932307846]
								}, {
									"case":	368,
									"scores":	[-6.194928932307846]
								}, {
									"case":	369,
									"scores":	[-6.194928932307846]
								}, {
									"case":	370,
									"scores":	[-6.194928932307846]
								}, {
									"case":	371,
									"scores":	[-6.194928932307846]
								}, {
									"case":	372,
									"scores":	[-6.194928932307846]
								}, {
									"case":	373,
									"scores":	[-6.194928932307846]
								}, {
									"case":	374,
									"scores":	[-6.194928932307846]
								}, {
									"case":	375,
									"scores":	[-6.194928932307846]
								}, {
									"case":	376,
									"scores":	[-6.194928932307846]
								}, {
									"case":	377,
									"scores":	[-6.194928932307846]
								}, {
									"case":	378,
									"scores":	[-6.194928932307846]
								}, {
									"case":	379,
									"scores":	[-6.194928932307846]
								}, {
									"case":	380,
									"scores":	[-6.194928932307846]
								}, {
									"case":	381,
									"scores":	[-6.194928932307846]
								}, {
									"case":	382,
									"scores":	[-6.194928932307846]
								}, {
									"case":	383,
									"scores":	[-6.194928932307846]
								}, {
									"case":	384,
									"scores":	[-6.194928932307846]
								}, {
									"case":	385,
									"scores":	[-6.194928932307846]
								}, {
									"case":	386,
									"scores":	[-6.194928932307846]
								}, {
									"case":	387,
									"scores":	[-6.194928932307846]
								}, {
									"case":	388,
									"scores":	[-6.194928932307846]
								}, {
									"case":	389,
									"scores":	[-6.194928932307846]
								}, {
									"case":	390,
									"scores":	[-6.194928932307846]
								}, {
									"case":	391,
									"scores":	[-6.194928932307846]
								}, {
									"case":	392,
									"scores":	[-6.194928932307846]
								}, {
									"case":	393,
									"scores":	[-6.194928932307846]
								}, {
									"case":	394,
									"scores":	[-6.194928932307846]
								}, {
									"case":	395,
									"scores":	[-6.194928932307846]
								}, {
									"case":	396,
									"scores":	[-6.194928932307846]
								}, {
									"case":	397,
									"scores":	[-6.194928932307846]
								}, {
									"case":	398,
									"scores":	[-6.194928932307846]
								}, {
									"case":	399,
									"scores":	[-6.194928932307846]
								}, {
									"case":	400,
									"scores":	[-6.194928932307846]
								}, {
									"case":	401,
									"scores":	[-6.194928932307846]
								}, {
									"case":	402,
									"scores":	[-6.194928932307846]
								}, {
									"case":	403,
									"scores":	[-6.194928932307846]
								}, {
									"case":	404,
									"scores":	[-6.194928932307846]
								}, {
									"case":	405,
									"scores":	[-6.194928932307846]
								}, {
									"case":	406,
									"scores":	[-6.194928932307846]
								}, {
									"case":	407,
									"scores":	[-6.194928932307846]
								}, {
									"case":	408,
									"scores":	[-6.194928932307846]
								}, {
									"case":	409,
									"scores":	[-6.194928932307846]
								}, {
									"case":	410,
									"scores":	[-6.194928932307846]
								}, {
									"case":	411,
									"scores":	[-6.194928932307846]
								}, {
									"case":	412,
									"scores":	[-6.194928932307846]
								}, {
									"case":	413,
									"scores":	[-6.194928932307846]
								}, {
									"case":	414,
									"scores":	[-6.194928932307846]
								}, {
									"case":	415,
									"scores":	[-6.194928932307846]
								}, {
									"case":	416,
									"scores":	[-6.194928932307846]
								}, {
									"case":	417,
									"scores":	[-6.194928932307846]
								}, {
									"case":	418,
									"scores":	[-6.194928932307846]
								}, {
									"case":	419,
									"scores":	[-6.194928932307846]
								}, {
									"case":	420,
									"scores":	[-6.194928932307846]
								}, {
									"case":	421,
									"scores":	[-6.194928932307846]
								}, {
									"case":	422,
									"scores":	[-6.194928932307846]
								}, {
									"case":	423,
									"scores":	[-6.194928932307846]
								}, {
									"case":	424,
									"scores":	[-6.194928932307846]
								}, {
									"case":	425,
									"scores":	[-6.194928932307846]
								}, {
									"case":	426,
									"scores":	[-6.194928932307846]
								}, {
									"case":	427,
									"scores":	[-6.194928932307846]
								}, {
									"case":	428,
									"scores":	[-6.194928932307846]
								}, {
									"case":	429,
									"scores":	[-6.194928932307846]
								}, {
									"case":	430,
									"scores":	[-6.194928932307846]
								}, {
									"case":	431,
									"scores":	[-6.194928932307846]
								}, {
									"case":	432,
									"scores":	[-6.194928932307846]
								}, {
									"case":	433,
									"scores":	[-6.194928932307846]
								}, {
									"case":	434,
									"scores":	[-6.194928932307846]
								}, {
									"case":	435,
									"scores":	[-6.194928932307846]
								}, {
									"case":	436,
									"scores":	[-6.194928932307846]
								}, {
									"case":	437,
									"scores":	[-6.194928932307846]
								}, {
									"case":	438,
									"scores":	[-6.194928932307846]
								}, {
									"case":	439,
									"scores":	[-6.194928932307846]
								}, {
									"case":	440,
									"scores":	[-6.194928932307846]
								}, {
									"case":	441,
									"scores":	[-6.194928932307846]
								}, {
									"case":	442,
									"scores":	[-6.194928932307846]
								}, {
									"case":	443,
									"scores":	[-6.194928932307846]
								}, {
									"case":	444,
									"scores":	[-6.194928932307846]
								}, {
									"case":	445,
									"scores":	[-6.194928932307846]
								}, {
									"case":	446,
									"scores":	[-6.194928932307846]
								}, {
									"case":	447,
									"scores":	[-6.194928932307846]
								}, {
									"case":	448,
									"scores":	[-6.194928932307846]
								}, {
									"case":	449,
									"scores":	[-6.194928932307846]
								}, {
									"case":	450,
									"scores":	[-6.194928932307846]
								}, {
									"case":	451,
									"scores":	[-6.194928932307846]
								}, {
									"case":	452,
									"scores":	[-6.194928932307846]
								}, {
									"case":	453,
									"scores":	[-6.194928932307846]
								}, {
									"case":	454,
									"scores":	[-6.194928932307846]
								}, {
									"case":	455,
									"scores":	[-6.194928932307846]
								}, {
									"case":	456,
									"scores":	[-6.194928932307846]
								}, {
									"case":	457,
									"scores":	[-6.194928932307846]
								}, {
									"case":	458,
									"scores":	[-6.194928932307846]
								}, {
									"case":	459,
									"scores":	[-6.194928932307846]
								}, {
									"case":	460,
									"scores":	[-6.194928932307846]
								}, {
									"case":	461,
									"scores":	[-6.194928932307846]
								}, {
									"case":	462,
									"scores":	[-6.194928932307846]
								}, {
									"case":	463,
									"scores":	[-6.194928932307846]
								}, {
									"case":	464,
									"scores":	[-6.194928932307846]
								}, {
									"case":	465,
									"scores":	[-6.194928932307846]
								}, {
									"case":	466,
									"scores":	[-6.194928932307846]
								}, {
									"case":	467,
									"scores":	[-6.194928932307846]
								}, {
									"case":	468,
									"scores":	[-6.194928932307846]
								}, {
									"case":	469,
									"scores":	[-6.194928932307846]
								}, {
									"case":	470,
									"scores":	[-6.194928932307846]
								}, {
									"case":	471,
									"scores":	[-6.194928932307846]
								}, {
									"case":	472,
									"scores":	[-6.194928932307846]
								}, {
									"case":	473,
									"scores":	[-6.194928932307846]
								}, {
									"case":	474,
									"scores":	[-6.194928932307846]
								}, {
									"case":	475,
									"scores":	[-6.194928932307846]
								}, {
									"case":	476,
									"scores":	[-6.194928932307846]
								}, {
									"case":	477,
									"scores":	[-6.194928932307846]
								}, {
									"case":	478,
									"scores":	[-6.194928932307846]
								}, {
									"case":	479,
									"scores":	[-6.194928932307846]
								}, {
									"case":	480,
									"scores":	[-6.194928932307846]
								}, {
									"case":	481,
									"scores":	[-6.194928932307846]
								}, {
									"case":	482,
									"scores":	[-6.194928932307846]
								}, {
									"case":	483,
									"scores":	[-6.194928932307846]
								}, {
									"case":	484,
									"scores":	[-6.194928932307846]
								}, {
									"case":	485,
									"scores":	[-6.194928932307846]
								}, {
									"case":	486,
									"scores":	[-6.194928932307846]
								}, {
									"case":	487,
									"scores":	[-6.194928932307846]
								}, {
									"case":	488,
									"scores":	[-6.194928932307846]
								}, {
									"case":	489,
									"scores":	[-6.194928932307846]
								}, {
									"case":	490,
									"scores":	[-6.194928932307846]
								}, {
									"case":	491,
									"scores":	[-6.194928932307846]
								}, {
									"case":	492,
									"scores":	[-6.194928932307846]
								}, {
									"case":	493,
									"scores":	[-6.194928932307846]
								}, {
									"case":	494,
									"scores":	[-6.194928932307846]
								}, {
									"case":	495,
									"scores":	[-6.194928932307846]
								}, {
									"case":	496,
									"scores":	[-6.194928932307846]
								}, {
									"case":	497,
									"scores":	[-6.194928932307846]
								}, {
									"case":	498,
									"scores":	[-6.194928932307846]
								}, {
									"case":	499,
									"scores":	[-6.194928932307846]
								}, {
									"case":	500,
									"scores":	[-6.194928932307846]
								}, {
									"case":	501,
									"scores":	[-6.194928932307846]
								}, {
									"case":	502,
									"scores":	[-6.194928932307846]
								}, {
									"case":	503,
									"scores":	[-6.194928932307846]
								}, {
									"case":	504,
									"scores":	[-6.194928932307846]
								}, {
									"case":	505,
									"scores":	[-6.194928932307846]
								}, {
									"case":	506,
									"scores":	[-6.194928932307846]
								}, {
									"case":	507,
									"scores":	[-6.194928932307846]
								}, {
									"case":	508,
									"scores":	[-6.194928932307846]
								}, {
									"case":	509,
									"scores":	[-6.194928932307846]
								}, {
									"case":	510,
									"scores":	[-6.194928932307846]
								}, {
									"case":	511,
									"scores":	[-6.194928932307846]
								}, {
									"case":	512,
									"scores":	[-6.194928932307846]
								}, {
									"case":	513,
									"scores":	[-6.194928932307846]
								}, {
									"case":	514,
									"scores":	[-6.194928932307846]
								}, {
									"case":	515,
									"scores":	[-6.194928932307846]
								}, {
									"case":	516,
									"scores":	[-6.194928932307846]
								}, {
									"case":	517,
									"scores":	[-6.194928932307846]
								}, {
									"case":	518,
									"scores":	[-6.194928932307846]
								}, {
									"case":	519,
									"scores":	[-6.194928932307846]
								}, {
									"case":	520,
									"scores":	[-6.194928932307846]
								}, {
									"case":	521,
									"scores":	[-6.194928932307846]
								}, {
									"case":	522,
									"scores":	[-6.194928932307846]
								}, {
									"case":	523,
									"scores":	[-6.194928932307846]
								}, {
									"case":	524,
									"scores":	[-6.194928932307846]
								}, {
									"case":	525,
									"scores":	[-6.194928932307846]
								}, {
									"case":	526,
									"scores":	[-6.194928932307846]
								}, {
									"case":	527,
									"scores":	[-6.194928932307846]
								}, {
									"case":	528,
									"scores":	[-6.194928932307846]
								}, {
									"case":	529,
									"scores":	[-6.194928932307846]
								}, {
									"case":	530,
									"scores":	[-6.194928932307846]
								}, {
									"case":	531,
									"scores":	[-6.194928932307846]
								}, {
									"case":	532,
									"scores":	[-6.194928932307846]
								}, {
									"case":	533,
									"scores":	[-6.194928932307846]
								}, {
									"case":	534,
									"scores":	[-6.194928932307846]
								}, {
									"case":	535,
									"scores":	[-6.194928932307846]
								}, {
									"case":	536,
									"scores":	[-6.194928932307846]
								}, {
									"case":	537,
									"scores":	[-6.194928932307846]
								}, {
									"case":	538,
									"scores":	[-6.194928932307846]
								}, {
									"case":	539,
									"scores":	[-6.194928932307846]
								}, {
									"case":	540,
									"scores":	[-6.194928932307846]
								}, {
									"case":	541,
									"scores":	[-6.194928932307846]
								}, {
									"case":	542,
									"scores":	[-6.194928932307846]
								}, {
									"case":	543,
									"scores":	[-6.194928932307846]
								}, {
									"case":	544,
									"scores":	[-6.194928932307846]
								}, {
									"case":	545,
									"scores":	[-6.194928932307846]
								}, {
									"case":	546,
									"scores":	[-6.194928932307846]
								}, {
									"case":	547,
									"scores":	[-6.194928932307846]
								}, {
									"case":	548,
									"scores":	[-6.194928932307846]
								}, {
									"case":	549,
									"scores":	[-6.194928932307846]
								}, {
									"case":	550,
									"scores":	[-6.194928932307846]
								}, {
									"case":	551,
									"scores":	[-6.194928932307846]
								}, {
									"case":	552,
									"scores":	[-6.194928932307846]
								}, {
									"case":	553,
									"scores":	[-6.194928932307846]
								}, {
									"case":	554,
									"scores":	[-6.194928932307846]
								}, {
									"case":	555,
									"scores":	[-6.194928932307846]
								}, {
									"case":	556,
									"scores":	[-6.194928932307846]
								}, {
									"case":	557,
									"scores":	[-6.194928932307846]
								}, {
									"case":	558,
									"scores":	[-6.194928932307846]
								}, {
									"case":	559,
									"scores":	[-6.194928932307846]
								}, {
									"case":	560,
									"scores":	[-6.194928932307846]
								}, {
									"case":	561,
									"scores":	[-6.194928932307846]
								}, {
									"case":	562,
									"scores":	[-6.194928932307846]
								}, {
									"case":	563,
									"scores":	[-6.194928932307846]
								}, {
									"case":	564,
									"scores":	[-6.194928932307846]
								}, {
									"case":	565,
									"scores":	[-6.194928932307846]
								}, {
									"case":	566,
									"scores":	[-6.194928932307846]
								}, {
									"case":	567,
									"scores":	[-6.194928932307846]
								}, {
									"case":	568,
									"scores":	[-6.194928932307846]
								}, {
									"case":	569,
									"scores":	[-6.194928932307846]
								}, {
									"case":	570,
									"scores":	[-6.194928932307846]
								}, {
									"case":	571,
									"scores":	[-6.194928932307846]
								}, {
									"case":	572,
									"scores":	[-6.194928932307846]
								}, {
									"case":	573,
									"scores":	[-6.194928932307846]
								}, {
									"case":	574,
									"scores":	[-6.194928932307846]
								}, {
									"case":	575,
									"scores":	[-6.194928932307846]
								}, {
									"case":	576,
									"scores":	[-6.194928932307846]
								}, {
									"case":	577,
									"scores":	[-6.194928932307846]
								}, {
									"case":	578,
									"scores":	[-6.194928932307846]
								}, {
									"case":	579,
									"scores":	[-6.194928932307846]
								}, {
									"case":	580,
									"scores":	[-6.194928932307846]
								}, {
									"case":	581,
									"scores":	[-6.194928932307846]
								}, {
									"case":	582,
									"scores":	[-6.194928932307846]
								}, {
									"case":	583,
									"scores":	[-6.194928932307846]
								}, {
									"case":	584,
									"scores":	[-6.194928932307846]
								}, {
									"case":	585,
									"scores":	[-6.194928932307846]
								}, {
									"case":	586,
									"scores":	[-6.194928932307846]
								}, {
									"case":	587,
									"scores":	[-6.194928932307846]
								}, {
									"case":	588,
									"scores":	[-6.194928932307846]
								}, {
									"case":	589,
									"scores":	[-6.194928932307846]
								}, {
									"case":	590,
									"scores":	[-6.194928932307846]
								}, {
									"case":	591,
									"scores":	[-6.194928932307846]
								}, {
									"case":	592,
									"scores":	[-6.194928932307846]
								}, {
									"case":	593,
									"scores":	[-6.194928932307846]
								}, {
									"case":	594,
									"scores":	[-6.194928932307846]
								}, {
									"case":	595,
									"scores":	[-6.194928932307846]
								}, {
									"case":	596,
									"scores":	[-6.194928932307846]
								}, {
									"case":	597,
									"scores":	[-6.194928932307846]
								}, {
									"case":	598,
									"scores":	[-6.194928932307846]
								}, {
									"case":	599,
									"scores":	[-6.194928932307846]
								}, {
									"case":	600,
									"scores":	[-6.194928932307846]
								}, {
									"case":	601,
									"scores":	[-6.194928932307846]
								}, {
									"case":	602,
									"scores":	[-6.194928932307846]
								}, {
									"case":	603,
									"scores":	[-6.194928932307846]
								}, {
									"case":	604,
									"scores":	[-6.194928932307846]
								}, {
									"case":	605,
									"scores":	[-6.194928932307846]
								}, {
									"case":	606,
									"scores":	[-6.194928932307846]
								}, {
									"case":	607,
									"scores":	[-6.194928932307846]
								}, {
									"case":	608,
									"scores":	[-6.194928932307846]
								}, {
									"case":	609,
									"scores":	[-6.194928932307846]
								}, {
									"case":	610,
									"scores":	[-6.194928932307846]
								}, {
									"case":	611,
									"scores":	[-6.194928932307846]
								}, {
									"case":	612,
									"scores":	[-6.194928932307846]
								}, {
									"case":	613,
									"scores":	[-8.7338085335078457, -8.6490158435078452, -8.6490158435078452, -8.6490158435078452, -8.9907002035078456, -8.201624289707846, -9.1853207095078453, -8.9907002035078456, -8.9907002035078456, -9.0278006035078455, -8.7817616897078459, -8.9926508067078466, -8.9926508067078466, -8.744661289707846, -8.4917158067078446, -9.0278006035078455, -8.9907002035078456]
								}]
						}, {
							"switch":	61,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [6, 7], [], [], [], [], [2, 3, 4], [], [], [5]],
							"begin_line":	399,
							"begin_column":	2,
							"end_line":	399,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L399\", 17, &(zfilename), sizeof (zfilename), &(zmode), sizeof (zmode), &(zoptions), sizeof (zoptions), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(old_in_user_include), sizeof (old_in_user_include), &(stream), sizeof (stream), &(zretval), sizeof (zretval), &(us), sizeof (us), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap)))\n    _zval_ptr_dtor((&zfilename));\n", "zval_update_constant((&zfilename), 0)", "zval_update_constant_inline_change((&zfilename), 0)", "zval_update_constant_no_inline_change((&zfilename), 0)", "{\n}\n", "_zval_internal_ptr_dtor((&zfilename))", "zval_add_ref((&zfilename))", "_zval_ptr_dtor((&(&args)))", "_zval_ptr_dtor((&(&call_result)))", "_zval_ptr_dtor((&(&context)))", "_zval_ptr_dtor((&(&filename)))", "_zval_ptr_dtor((&(&mode)))", "_zval_ptr_dtor((&(&old_in_user_include)))", "_zval_ptr_dtor((&(&opened_path)))", "_zval_ptr_dtor((&(&options)))", "_zval_ptr_dtor((&(&stream)))", "_zval_ptr_dtor((&(&us)))", "_zval_ptr_dtor((&(&uwrap)))", "_zval_ptr_dtor((&(&wrapper)))", "_zval_ptr_dtor((&(&zfilename)))", "_zval_ptr_dtor((&(&zfuncname)))", "_zval_ptr_dtor((&(&zmode)))", "_zval_ptr_dtor((&(&zopened)))", "_zval_ptr_dtor((&(&zoptions)))", "_zval_ptr_dtor((&(&zretval)))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0274270723078462, -6.6088162263078463, -6.6088162263078463, -6.6088162263078463, -6.8047890023078459, -5.9281264523078461, -6.6800845083078464, -6.8047890023078459, -6.8047890023078459, -7.099139802307846, -6.3412517023078463, -6.8105117023078456, -6.8105117023078456, -6.0469009023078462, -6.488500672307846, -7.099139802307846, -6.8047890023078459]
								}, {
									"case":	2,
									"scores":	[-6.194928932307846]
								}, {
									"case":	3,
									"scores":	[-6.194928932307846]
								}, {
									"case":	4,
									"scores":	[-6.194928932307846]
								}, {
									"case":	5,
									"scores":	[-6.194928932307846]
								}, {
									"case":	6,
									"scores":	[-6.194928932307846]
								}, {
									"case":	7,
									"scores":	[-6.194928932307846]
								}, {
									"case":	8,
									"scores":	[-6.194928932307846]
								}, {
									"case":	9,
									"scores":	[-6.194928932307846]
								}, {
									"case":	10,
									"scores":	[-6.194928932307846]
								}, {
									"case":	11,
									"scores":	[-6.194928932307846]
								}, {
									"case":	12,
									"scores":	[-6.194928932307846]
								}, {
									"case":	13,
									"scores":	[-6.194928932307846]
								}, {
									"case":	14,
									"scores":	[-6.194928932307846]
								}, {
									"case":	15,
									"scores":	[-6.194928932307846]
								}, {
									"case":	16,
									"scores":	[-6.194928932307846]
								}, {
									"case":	17,
									"scores":	[-6.194928932307846]
								}, {
									"case":	18,
									"scores":	[-6.194928932307846]
								}, {
									"case":	19,
									"scores":	[-6.194928932307846]
								}, {
									"case":	20,
									"scores":	[-6.194928932307846]
								}, {
									"case":	21,
									"scores":	[-6.194928932307846]
								}, {
									"case":	22,
									"scores":	[-6.194928932307846]
								}, {
									"case":	23,
									"scores":	[-6.194928932307846]
								}, {
									"case":	24,
									"scores":	[-6.194928932307846]
								}, {
									"case":	25,
									"scores":	[-6.194928932307846]
								}, {
									"case":	26,
									"scores":	[-6.194928932307846]
								}, {
									"case":	27,
									"scores":	[-6.194928932307846]
								}, {
									"case":	28,
									"scores":	[-6.194928932307846]
								}, {
									"case":	29,
									"scores":	[-6.194928932307846]
								}, {
									"case":	30,
									"scores":	[-6.194928932307846]
								}, {
									"case":	31,
									"scores":	[-6.194928932307846]
								}]
						}]
				}, {
					"line":	400,
					"switches":	[{
							"switch":	62,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	401,
							"begin_column":	0,
							"end_line":	401,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals, 0, sizeof (*(&file_globals)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L401\", 37, &(file_globals.user_stream_current_filename), sizeof (file_globals.user_stream_current_filename), &(file_globals.user_stream_current_filename), sizeof (file_globals.user_stream_current_filename), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(zmode), sizeof (zmode), &(stream), sizeof (stream), &(zoptions), sizeof (zoptions), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(us), sizeof (us), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(file_globals.pclose_ret), sizeof (file_globals.pclose_ret), &(file_globals.def_chunk_size), sizeof (file_globals.def_chunk_size), &(file_globals.auto_detect_line_endings), sizeof (file_globals.auto_detect_line_endings), &(file_globals.default_socket_timeout), sizeof (file_globals.default_socket_timeout), &(file_globals.user_agent), sizeof (file_globals.user_agent), &(file_globals.from_address), sizeof (file_globals.from_address), &(file_globals.default_context), sizeof (file_globals.default_context), &(file_globals.stream_wrappers), sizeof (file_globals.stream_wrappers), &(file_globals.stream_filters), sizeof (file_globals.stream_filters), &(file_globals.pclose_ret), sizeof (file_globals.pclose_ret), &(file_globals.def_chunk_size), sizeof (file_globals.def_chunk_size), &(file_globals.auto_detect_line_endings), sizeof (file_globals.auto_detect_line_endings), &(file_globals.default_socket_timeout), sizeof (file_globals.default_socket_timeout), &(file_globals.user_agent), sizeof (file_globals.user_agent), &(file_globals.from_address), sizeof (file_globals.from_address), &(file_globals.default_context), sizeof (file_globals.default_context), &(file_globals.stream_wrappers), sizeof (file_globals.stream_wrappers), &(file_globals.stream_filters), sizeof (file_globals.stream_filters)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	2,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	3,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	4,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	5,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	6,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	7,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	8,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	9,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	10,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	11,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	12,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	13,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	14,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	15,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	16,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	17,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	18,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	19,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	20,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	21,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	22,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	23,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	24,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	25,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	26,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	27,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	28,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	29,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	30,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	31,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	32,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	33,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	34,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	35,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	36,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	37,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	38,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	39,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	40,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	41,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	42,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	43,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	44,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	45,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	46,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	47,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	48,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	49,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	50,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	51,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	52,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	53,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	54,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	55,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	56,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	57,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	58,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	59,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	60,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	61,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	62,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	63,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	64,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	65,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	66,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	67,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	68,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	69,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	70,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	71,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	72,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	73,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	74,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	75,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	76,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	77,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	78,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	79,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	80,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	81,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	82,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	83,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	84,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	85,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	86,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	87,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	88,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	89,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	90,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	91,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	92,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	93,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	94,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	95,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	96,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	97,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	98,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	99,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	100,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	101,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	102,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	103,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	104,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	105,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	106,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	107,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	108,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	109,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	110,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	111,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	112,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	113,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	114,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	115,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	116,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	117,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	118,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	119,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	120,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	121,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	122,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	123,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	124,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	125,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	126,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	127,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	128,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	129,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	130,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	131,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	132,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	133,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	134,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	135,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	136,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	137,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	138,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	139,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	140,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	141,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	142,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	143,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	144,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	145,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	146,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	147,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	148,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	149,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	150,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	151,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	152,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	153,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	154,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	155,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	156,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	157,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	158,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	159,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	160,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	161,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	162,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	163,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	164,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	165,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	166,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	167,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	168,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	169,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	170,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	171,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	172,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	173,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	174,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	175,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	176,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	177,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	178,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	179,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	180,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	181,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	182,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	183,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	184,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	185,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	186,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	187,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	188,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	189,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	190,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	191,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	192,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	193,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	194,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	195,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	196,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	197,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	198,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	199,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	200,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	201,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	202,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	203,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	204,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	205,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	206,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	207,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	208,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	209,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	210,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	211,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	212,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	213,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	214,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	215,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	216,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	217,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	218,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	219,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	220,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	221,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	222,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	223,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	224,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	225,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	226,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	227,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	228,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	229,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	230,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	231,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	232,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	233,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	234,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	235,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	236,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	237,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	238,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	239,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	240,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	241,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	242,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	243,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	244,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	245,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	246,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	247,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	248,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	249,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	250,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	251,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	252,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	253,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	254,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	255,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	256,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	257,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	258,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	259,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	260,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	261,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	262,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	263,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	264,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	265,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	266,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	267,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	268,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	269,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	270,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	271,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	272,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	273,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	274,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	275,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	276,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	277,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	278,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	279,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	280,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	281,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	282,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	283,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	284,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	285,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	286,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	287,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	288,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	289,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	290,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	291,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	292,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	293,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	294,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	295,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	296,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	297,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	298,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	299,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	300,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	301,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	302,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	303,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	304,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	305,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	306,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	307,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	308,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	309,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	310,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	311,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	312,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	313,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	314,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	315,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	316,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	317,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	318,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	319,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	320,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	321,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	322,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	323,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	324,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	325,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	326,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	327,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	328,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	329,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	330,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	331,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	332,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	333,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	334,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	335,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	336,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	337,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	338,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	339,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	340,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	341,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	342,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	343,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	344,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	345,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	346,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	347,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	348,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	349,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	350,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	351,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	352,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	353,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	354,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	355,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	356,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	357,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	358,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	359,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	360,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	361,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	362,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	363,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	364,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	365,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	366,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	367,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	368,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	369,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	370,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	371,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	372,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	373,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	374,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	375,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	376,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	377,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	378,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	379,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	380,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	381,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	382,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	383,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	384,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	385,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	386,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	387,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	388,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	389,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	390,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	391,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	392,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	393,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	394,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	395,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	396,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	397,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	398,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	399,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	400,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	401,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	402,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	403,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	404,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	405,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	406,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	407,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	408,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	409,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	410,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	411,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	412,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	413,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	414,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	415,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	416,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	417,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	418,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	419,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	420,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	421,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	422,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	423,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	424,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	425,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	426,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	427,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	428,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	429,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	430,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	431,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	432,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	433,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	434,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	435,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	436,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	437,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	438,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	439,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	440,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	441,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	442,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	443,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	444,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	445,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	446,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	447,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	448,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	449,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	450,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	451,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	452,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	453,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	454,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	455,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	456,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	457,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	458,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	459,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	460,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	461,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	462,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	463,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	464,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	465,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	466,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	467,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	468,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	469,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	470,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	471,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	472,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	473,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	474,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	475,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	476,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	477,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	478,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	479,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	480,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	481,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	482,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	483,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	484,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	485,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	486,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	487,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	488,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	489,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	490,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	491,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	492,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	493,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	494,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	495,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	496,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	497,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	498,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	499,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	500,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	501,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	502,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	503,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	504,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	505,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	506,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	507,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	508,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	509,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	510,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	511,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	512,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	513,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	514,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	515,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	516,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	517,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	518,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	519,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	520,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	521,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	522,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	523,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	524,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	525,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	526,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	527,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	528,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	529,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	530,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	531,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	532,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	533,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	534,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	535,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	536,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	537,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	538,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	539,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	540,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	541,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	542,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	543,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	544,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	545,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	546,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	547,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	548,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	549,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	550,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	551,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	552,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	553,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	554,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	555,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	556,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	557,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	558,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	559,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	560,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	561,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	562,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	563,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	564,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	565,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	566,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	567,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	568,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	569,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	570,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	571,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	572,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	573,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	574,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	575,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	576,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	577,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	578,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	579,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	580,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	581,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	582,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	583,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	584,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	585,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	586,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	587,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	588,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	589,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	590,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	591,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	592,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	593,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	594,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	595,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	596,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	597,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	598,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	599,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	600,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	601,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	602,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	603,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	604,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	605,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	606,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	607,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	608,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	609,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	610,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	611,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	612,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	613,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	614,
									"scores":	[-8.211802552990326, -8.211802552990326, -7.9811485747903266, -8.03469202099033, -8.4820835747903267, -9.018388440790325, -8.4820835747903267, -8.8237679347903253, -8.8237679347903253, -8.8237679347903253, -8.8237679347903253, -8.860868334790327, -8.6148294209903256, -8.8257185379903262, -8.8257185379903262, -8.5777290209903256, -8.3247835379903261, -8.860868334790327, -8.8237679347903253, -9.3918751949903267, -9.3918751949903267, -9.3918751949903267, -9.3918751949903267, -9.60276431199033, -9.60276431199033, -9.6379141087903264, -9.6379141087903264, -9.6379141087903264, -9.3918751949903267, -9.3918751949903267, -9.3918751949903267, -9.3918751949903267, -9.60276431199033, -9.60276431199033, -9.6379141087903264, -9.6379141087903264, -9.6379141087903264]
								}]
						}, {
							"switch":	63,
							"types":	[[], [], [1], [], [], [], [3, 4, 5], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	401,
							"begin_column":	2,
							"end_line":	401,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L401\", 37, &(file_globals.user_stream_current_filename), sizeof (file_globals.user_stream_current_filename), &(file_globals.user_stream_current_filename), sizeof (file_globals.user_stream_current_filename), &(zfilename), sizeof (zfilename), &(old_in_user_include), sizeof (old_in_user_include), &(zmode), sizeof (zmode), &(stream), sizeof (stream), &(zoptions), sizeof (zoptions), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(us), sizeof (us), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(file_globals.pclose_ret), sizeof (file_globals.pclose_ret), &(file_globals.def_chunk_size), sizeof (file_globals.def_chunk_size), &(file_globals.auto_detect_line_endings), sizeof (file_globals.auto_detect_line_endings), &(file_globals.default_socket_timeout), sizeof (file_globals.default_socket_timeout), &(file_globals.user_agent), sizeof (file_globals.user_agent), &(file_globals.from_address), sizeof (file_globals.from_address), &(file_globals.default_context), sizeof (file_globals.default_context), &(file_globals.stream_wrappers), sizeof (file_globals.stream_wrappers), &(file_globals.stream_filters), sizeof (file_globals.stream_filters), &(file_globals.pclose_ret), sizeof (file_globals.pclose_ret), &(file_globals.def_chunk_size), sizeof (file_globals.def_chunk_size), &(file_globals.auto_detect_line_endings), sizeof (file_globals.auto_detect_line_endings), &(file_globals.default_socket_timeout), sizeof (file_globals.default_socket_timeout), &(file_globals.user_agent), sizeof (file_globals.user_agent), &(file_globals.from_address), sizeof (file_globals.from_address), &(file_globals.default_context), sizeof (file_globals.default_context), &(file_globals.stream_wrappers), sizeof (file_globals.stream_wrappers), &(file_globals.stream_filters), sizeof (file_globals.stream_filters)))\n    (file_globals.user_stream_current_filename) = ((void *)0);\n", "{\n}\n", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6980357959903269, -6.6980357959903269, -6.3989037889903262, -5.5453160549903266, -6.7209148189903267, -6.7921831009903268, -6.7209148189903267, -6.9168875949903263, -6.9168875949903263, -6.9168875949903263, -6.9168875949903263, -7.2112383949903265, -6.4533502949903268, -6.9226102949903261, -6.9226102949903261, -6.1589994949903266, -6.6005992649903265, -7.2112383949903265, -6.9168875949903263, -6.6838443049903269, -6.6838443049903269, -6.6838443049903269, -6.6838443049903269, -7.1531043049903262, -7.1531043049903262, -7.4417324049903266, -7.4417324049903266, -7.4417324049903266, -6.6838443049903269, -6.6838443049903269, -6.6838443049903269, -6.6838443049903269, -7.1531043049903262, -7.1531043049903262, -7.4417324049903266, -7.4417324049903266, -7.4417324049903266]
								}, {
									"case":	2,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	3,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	4,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	5,
									"scores":	[-6.1747262249903265]
								}]
						}]
				}, {
					"line":	402,
					"switches":	[{
							"switch":	64,
							"types":	[[], [], [], [], [614], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], [], [], [], [], [], []],
							"begin_line":	403,
							"begin_column":	0,
							"end_line":	403,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals, 0, sizeof (*(&core_globals)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L403\", 151, &(old_in_user_include), sizeof (old_in_user_include), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(stream), sizeof (stream), &(zfilename), sizeof (zfilename), &(zmode), sizeof (zmode), &(zoptions), sizeof (zoptions), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(us), sizeof (us), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.154523517672807]
								}, {
									"case":	2,
									"scores":	[-6.154523517672807]
								}, {
									"case":	3,
									"scores":	[-6.154523517672807]
								}, {
									"case":	4,
									"scores":	[-6.154523517672807]
								}, {
									"case":	5,
									"scores":	[-6.154523517672807]
								}, {
									"case":	6,
									"scores":	[-6.154523517672807]
								}, {
									"case":	7,
									"scores":	[-6.154523517672807]
								}, {
									"case":	8,
									"scores":	[-6.154523517672807]
								}, {
									"case":	9,
									"scores":	[-6.154523517672807]
								}, {
									"case":	10,
									"scores":	[-6.154523517672807]
								}, {
									"case":	11,
									"scores":	[-6.154523517672807]
								}, {
									"case":	12,
									"scores":	[-6.154523517672807]
								}, {
									"case":	13,
									"scores":	[-6.154523517672807]
								}, {
									"case":	14,
									"scores":	[-6.154523517672807]
								}, {
									"case":	15,
									"scores":	[-6.154523517672807]
								}, {
									"case":	16,
									"scores":	[-6.154523517672807]
								}, {
									"case":	17,
									"scores":	[-6.154523517672807]
								}, {
									"case":	18,
									"scores":	[-6.154523517672807]
								}, {
									"case":	19,
									"scores":	[-6.154523517672807]
								}, {
									"case":	20,
									"scores":	[-6.154523517672807]
								}, {
									"case":	21,
									"scores":	[-6.154523517672807]
								}, {
									"case":	22,
									"scores":	[-6.154523517672807]
								}, {
									"case":	23,
									"scores":	[-6.154523517672807]
								}, {
									"case":	24,
									"scores":	[-6.154523517672807]
								}, {
									"case":	25,
									"scores":	[-6.154523517672807]
								}, {
									"case":	26,
									"scores":	[-6.154523517672807]
								}, {
									"case":	27,
									"scores":	[-6.154523517672807]
								}, {
									"case":	28,
									"scores":	[-6.154523517672807]
								}, {
									"case":	29,
									"scores":	[-6.154523517672807]
								}, {
									"case":	30,
									"scores":	[-6.154523517672807]
								}, {
									"case":	31,
									"scores":	[-6.154523517672807]
								}, {
									"case":	32,
									"scores":	[-6.154523517672807]
								}, {
									"case":	33,
									"scores":	[-6.154523517672807]
								}, {
									"case":	34,
									"scores":	[-6.154523517672807]
								}, {
									"case":	35,
									"scores":	[-6.154523517672807]
								}, {
									"case":	36,
									"scores":	[-6.154523517672807]
								}, {
									"case":	37,
									"scores":	[-6.154523517672807]
								}, {
									"case":	38,
									"scores":	[-6.154523517672807]
								}, {
									"case":	39,
									"scores":	[-6.154523517672807]
								}, {
									"case":	40,
									"scores":	[-6.154523517672807]
								}, {
									"case":	41,
									"scores":	[-6.154523517672807]
								}, {
									"case":	42,
									"scores":	[-6.154523517672807]
								}, {
									"case":	43,
									"scores":	[-6.154523517672807]
								}, {
									"case":	44,
									"scores":	[-6.154523517672807]
								}, {
									"case":	45,
									"scores":	[-6.154523517672807]
								}, {
									"case":	46,
									"scores":	[-6.154523517672807]
								}, {
									"case":	47,
									"scores":	[-6.154523517672807]
								}, {
									"case":	48,
									"scores":	[-6.154523517672807]
								}, {
									"case":	49,
									"scores":	[-6.154523517672807]
								}, {
									"case":	50,
									"scores":	[-6.154523517672807]
								}, {
									"case":	51,
									"scores":	[-6.154523517672807]
								}, {
									"case":	52,
									"scores":	[-6.154523517672807]
								}, {
									"case":	53,
									"scores":	[-6.154523517672807]
								}, {
									"case":	54,
									"scores":	[-6.154523517672807]
								}, {
									"case":	55,
									"scores":	[-6.154523517672807]
								}, {
									"case":	56,
									"scores":	[-6.154523517672807]
								}, {
									"case":	57,
									"scores":	[-6.154523517672807]
								}, {
									"case":	58,
									"scores":	[-6.154523517672807]
								}, {
									"case":	59,
									"scores":	[-6.154523517672807]
								}, {
									"case":	60,
									"scores":	[-6.154523517672807]
								}, {
									"case":	61,
									"scores":	[-6.154523517672807]
								}, {
									"case":	62,
									"scores":	[-6.154523517672807]
								}, {
									"case":	63,
									"scores":	[-6.154523517672807]
								}, {
									"case":	64,
									"scores":	[-6.154523517672807]
								}, {
									"case":	65,
									"scores":	[-6.154523517672807]
								}, {
									"case":	66,
									"scores":	[-6.154523517672807]
								}, {
									"case":	67,
									"scores":	[-6.154523517672807]
								}, {
									"case":	68,
									"scores":	[-6.154523517672807]
								}, {
									"case":	69,
									"scores":	[-6.154523517672807]
								}, {
									"case":	70,
									"scores":	[-6.154523517672807]
								}, {
									"case":	71,
									"scores":	[-6.154523517672807]
								}, {
									"case":	72,
									"scores":	[-6.154523517672807]
								}, {
									"case":	73,
									"scores":	[-6.154523517672807]
								}, {
									"case":	74,
									"scores":	[-6.154523517672807]
								}, {
									"case":	75,
									"scores":	[-6.154523517672807]
								}, {
									"case":	76,
									"scores":	[-6.154523517672807]
								}, {
									"case":	77,
									"scores":	[-6.154523517672807]
								}, {
									"case":	78,
									"scores":	[-6.154523517672807]
								}, {
									"case":	79,
									"scores":	[-6.154523517672807]
								}, {
									"case":	80,
									"scores":	[-6.154523517672807]
								}, {
									"case":	81,
									"scores":	[-6.154523517672807]
								}, {
									"case":	82,
									"scores":	[-6.154523517672807]
								}, {
									"case":	83,
									"scores":	[-6.154523517672807]
								}, {
									"case":	84,
									"scores":	[-6.154523517672807]
								}, {
									"case":	85,
									"scores":	[-6.154523517672807]
								}, {
									"case":	86,
									"scores":	[-6.154523517672807]
								}, {
									"case":	87,
									"scores":	[-6.154523517672807]
								}, {
									"case":	88,
									"scores":	[-6.154523517672807]
								}, {
									"case":	89,
									"scores":	[-6.154523517672807]
								}, {
									"case":	90,
									"scores":	[-6.154523517672807]
								}, {
									"case":	91,
									"scores":	[-6.154523517672807]
								}, {
									"case":	92,
									"scores":	[-6.154523517672807]
								}, {
									"case":	93,
									"scores":	[-6.154523517672807]
								}, {
									"case":	94,
									"scores":	[-6.154523517672807]
								}, {
									"case":	95,
									"scores":	[-6.154523517672807]
								}, {
									"case":	96,
									"scores":	[-6.154523517672807]
								}, {
									"case":	97,
									"scores":	[-6.154523517672807]
								}, {
									"case":	98,
									"scores":	[-6.154523517672807]
								}, {
									"case":	99,
									"scores":	[-6.154523517672807]
								}, {
									"case":	100,
									"scores":	[-6.154523517672807]
								}, {
									"case":	101,
									"scores":	[-6.154523517672807]
								}, {
									"case":	102,
									"scores":	[-6.154523517672807]
								}, {
									"case":	103,
									"scores":	[-6.154523517672807]
								}, {
									"case":	104,
									"scores":	[-6.154523517672807]
								}, {
									"case":	105,
									"scores":	[-6.154523517672807]
								}, {
									"case":	106,
									"scores":	[-6.154523517672807]
								}, {
									"case":	107,
									"scores":	[-6.154523517672807]
								}, {
									"case":	108,
									"scores":	[-6.154523517672807]
								}, {
									"case":	109,
									"scores":	[-6.154523517672807]
								}, {
									"case":	110,
									"scores":	[-6.154523517672807]
								}, {
									"case":	111,
									"scores":	[-6.154523517672807]
								}, {
									"case":	112,
									"scores":	[-6.154523517672807]
								}, {
									"case":	113,
									"scores":	[-6.154523517672807]
								}, {
									"case":	114,
									"scores":	[-6.154523517672807]
								}, {
									"case":	115,
									"scores":	[-6.154523517672807]
								}, {
									"case":	116,
									"scores":	[-6.154523517672807]
								}, {
									"case":	117,
									"scores":	[-6.154523517672807]
								}, {
									"case":	118,
									"scores":	[-6.154523517672807]
								}, {
									"case":	119,
									"scores":	[-6.154523517672807]
								}, {
									"case":	120,
									"scores":	[-6.154523517672807]
								}, {
									"case":	121,
									"scores":	[-6.154523517672807]
								}, {
									"case":	122,
									"scores":	[-6.154523517672807]
								}, {
									"case":	123,
									"scores":	[-6.154523517672807]
								}, {
									"case":	124,
									"scores":	[-6.154523517672807]
								}, {
									"case":	125,
									"scores":	[-6.154523517672807]
								}, {
									"case":	126,
									"scores":	[-6.154523517672807]
								}, {
									"case":	127,
									"scores":	[-6.154523517672807]
								}, {
									"case":	128,
									"scores":	[-6.154523517672807]
								}, {
									"case":	129,
									"scores":	[-6.154523517672807]
								}, {
									"case":	130,
									"scores":	[-6.154523517672807]
								}, {
									"case":	131,
									"scores":	[-6.154523517672807]
								}, {
									"case":	132,
									"scores":	[-6.154523517672807]
								}, {
									"case":	133,
									"scores":	[-6.154523517672807]
								}, {
									"case":	134,
									"scores":	[-6.154523517672807]
								}, {
									"case":	135,
									"scores":	[-6.154523517672807]
								}, {
									"case":	136,
									"scores":	[-6.154523517672807]
								}, {
									"case":	137,
									"scores":	[-6.154523517672807]
								}, {
									"case":	138,
									"scores":	[-6.154523517672807]
								}, {
									"case":	139,
									"scores":	[-6.154523517672807]
								}, {
									"case":	140,
									"scores":	[-6.154523517672807]
								}, {
									"case":	141,
									"scores":	[-6.154523517672807]
								}, {
									"case":	142,
									"scores":	[-6.154523517672807]
								}, {
									"case":	143,
									"scores":	[-6.154523517672807]
								}, {
									"case":	144,
									"scores":	[-6.154523517672807]
								}, {
									"case":	145,
									"scores":	[-6.154523517672807]
								}, {
									"case":	146,
									"scores":	[-6.154523517672807]
								}, {
									"case":	147,
									"scores":	[-6.154523517672807]
								}, {
									"case":	148,
									"scores":	[-6.154523517672807]
								}, {
									"case":	149,
									"scores":	[-6.154523517672807]
								}, {
									"case":	150,
									"scores":	[-6.154523517672807]
								}, {
									"case":	151,
									"scores":	[-6.154523517672807]
								}, {
									"case":	152,
									"scores":	[-6.154523517672807]
								}, {
									"case":	153,
									"scores":	[-6.154523517672807]
								}, {
									"case":	154,
									"scores":	[-6.154523517672807]
								}, {
									"case":	155,
									"scores":	[-6.154523517672807]
								}, {
									"case":	156,
									"scores":	[-6.154523517672807]
								}, {
									"case":	157,
									"scores":	[-6.154523517672807]
								}, {
									"case":	158,
									"scores":	[-6.154523517672807]
								}, {
									"case":	159,
									"scores":	[-6.154523517672807]
								}, {
									"case":	160,
									"scores":	[-6.154523517672807]
								}, {
									"case":	161,
									"scores":	[-6.154523517672807]
								}, {
									"case":	162,
									"scores":	[-6.154523517672807]
								}, {
									"case":	163,
									"scores":	[-6.154523517672807]
								}, {
									"case":	164,
									"scores":	[-6.154523517672807]
								}, {
									"case":	165,
									"scores":	[-6.154523517672807]
								}, {
									"case":	166,
									"scores":	[-6.154523517672807]
								}, {
									"case":	167,
									"scores":	[-6.154523517672807]
								}, {
									"case":	168,
									"scores":	[-6.154523517672807]
								}, {
									"case":	169,
									"scores":	[-6.154523517672807]
								}, {
									"case":	170,
									"scores":	[-6.154523517672807]
								}, {
									"case":	171,
									"scores":	[-6.154523517672807]
								}, {
									"case":	172,
									"scores":	[-6.154523517672807]
								}, {
									"case":	173,
									"scores":	[-6.154523517672807]
								}, {
									"case":	174,
									"scores":	[-6.154523517672807]
								}, {
									"case":	175,
									"scores":	[-6.154523517672807]
								}, {
									"case":	176,
									"scores":	[-6.154523517672807]
								}, {
									"case":	177,
									"scores":	[-6.154523517672807]
								}, {
									"case":	178,
									"scores":	[-6.154523517672807]
								}, {
									"case":	179,
									"scores":	[-6.154523517672807]
								}, {
									"case":	180,
									"scores":	[-6.154523517672807]
								}, {
									"case":	181,
									"scores":	[-6.154523517672807]
								}, {
									"case":	182,
									"scores":	[-6.154523517672807]
								}, {
									"case":	183,
									"scores":	[-6.154523517672807]
								}, {
									"case":	184,
									"scores":	[-6.154523517672807]
								}, {
									"case":	185,
									"scores":	[-6.154523517672807]
								}, {
									"case":	186,
									"scores":	[-6.154523517672807]
								}, {
									"case":	187,
									"scores":	[-6.154523517672807]
								}, {
									"case":	188,
									"scores":	[-6.154523517672807]
								}, {
									"case":	189,
									"scores":	[-6.154523517672807]
								}, {
									"case":	190,
									"scores":	[-6.154523517672807]
								}, {
									"case":	191,
									"scores":	[-6.154523517672807]
								}, {
									"case":	192,
									"scores":	[-6.154523517672807]
								}, {
									"case":	193,
									"scores":	[-6.154523517672807]
								}, {
									"case":	194,
									"scores":	[-6.154523517672807]
								}, {
									"case":	195,
									"scores":	[-6.154523517672807]
								}, {
									"case":	196,
									"scores":	[-6.154523517672807]
								}, {
									"case":	197,
									"scores":	[-6.154523517672807]
								}, {
									"case":	198,
									"scores":	[-6.154523517672807]
								}, {
									"case":	199,
									"scores":	[-6.154523517672807]
								}, {
									"case":	200,
									"scores":	[-6.154523517672807]
								}, {
									"case":	201,
									"scores":	[-6.154523517672807]
								}, {
									"case":	202,
									"scores":	[-6.154523517672807]
								}, {
									"case":	203,
									"scores":	[-6.154523517672807]
								}, {
									"case":	204,
									"scores":	[-6.154523517672807]
								}, {
									"case":	205,
									"scores":	[-6.154523517672807]
								}, {
									"case":	206,
									"scores":	[-6.154523517672807]
								}, {
									"case":	207,
									"scores":	[-6.154523517672807]
								}, {
									"case":	208,
									"scores":	[-6.154523517672807]
								}, {
									"case":	209,
									"scores":	[-6.154523517672807]
								}, {
									"case":	210,
									"scores":	[-6.154523517672807]
								}, {
									"case":	211,
									"scores":	[-6.154523517672807]
								}, {
									"case":	212,
									"scores":	[-6.154523517672807]
								}, {
									"case":	213,
									"scores":	[-6.154523517672807]
								}, {
									"case":	214,
									"scores":	[-6.154523517672807]
								}, {
									"case":	215,
									"scores":	[-6.154523517672807]
								}, {
									"case":	216,
									"scores":	[-6.154523517672807]
								}, {
									"case":	217,
									"scores":	[-6.154523517672807]
								}, {
									"case":	218,
									"scores":	[-6.154523517672807]
								}, {
									"case":	219,
									"scores":	[-6.154523517672807]
								}, {
									"case":	220,
									"scores":	[-6.154523517672807]
								}, {
									"case":	221,
									"scores":	[-6.154523517672807]
								}, {
									"case":	222,
									"scores":	[-6.154523517672807]
								}, {
									"case":	223,
									"scores":	[-6.154523517672807]
								}, {
									"case":	224,
									"scores":	[-6.154523517672807]
								}, {
									"case":	225,
									"scores":	[-6.154523517672807]
								}, {
									"case":	226,
									"scores":	[-6.154523517672807]
								}, {
									"case":	227,
									"scores":	[-6.154523517672807]
								}, {
									"case":	228,
									"scores":	[-6.154523517672807]
								}, {
									"case":	229,
									"scores":	[-6.154523517672807]
								}, {
									"case":	230,
									"scores":	[-6.154523517672807]
								}, {
									"case":	231,
									"scores":	[-6.154523517672807]
								}, {
									"case":	232,
									"scores":	[-6.154523517672807]
								}, {
									"case":	233,
									"scores":	[-6.154523517672807]
								}, {
									"case":	234,
									"scores":	[-6.154523517672807]
								}, {
									"case":	235,
									"scores":	[-6.154523517672807]
								}, {
									"case":	236,
									"scores":	[-6.154523517672807]
								}, {
									"case":	237,
									"scores":	[-6.154523517672807]
								}, {
									"case":	238,
									"scores":	[-6.154523517672807]
								}, {
									"case":	239,
									"scores":	[-6.154523517672807]
								}, {
									"case":	240,
									"scores":	[-6.154523517672807]
								}, {
									"case":	241,
									"scores":	[-6.154523517672807]
								}, {
									"case":	242,
									"scores":	[-6.154523517672807]
								}, {
									"case":	243,
									"scores":	[-6.154523517672807]
								}, {
									"case":	244,
									"scores":	[-6.154523517672807]
								}, {
									"case":	245,
									"scores":	[-6.154523517672807]
								}, {
									"case":	246,
									"scores":	[-6.154523517672807]
								}, {
									"case":	247,
									"scores":	[-6.154523517672807]
								}, {
									"case":	248,
									"scores":	[-6.154523517672807]
								}, {
									"case":	249,
									"scores":	[-6.154523517672807]
								}, {
									"case":	250,
									"scores":	[-6.154523517672807]
								}, {
									"case":	251,
									"scores":	[-6.154523517672807]
								}, {
									"case":	252,
									"scores":	[-6.154523517672807]
								}, {
									"case":	253,
									"scores":	[-6.154523517672807]
								}, {
									"case":	254,
									"scores":	[-6.154523517672807]
								}, {
									"case":	255,
									"scores":	[-6.154523517672807]
								}, {
									"case":	256,
									"scores":	[-6.154523517672807]
								}, {
									"case":	257,
									"scores":	[-6.154523517672807]
								}, {
									"case":	258,
									"scores":	[-6.154523517672807]
								}, {
									"case":	259,
									"scores":	[-6.154523517672807]
								}, {
									"case":	260,
									"scores":	[-6.154523517672807]
								}, {
									"case":	261,
									"scores":	[-6.154523517672807]
								}, {
									"case":	262,
									"scores":	[-6.154523517672807]
								}, {
									"case":	263,
									"scores":	[-6.154523517672807]
								}, {
									"case":	264,
									"scores":	[-6.154523517672807]
								}, {
									"case":	265,
									"scores":	[-6.154523517672807]
								}, {
									"case":	266,
									"scores":	[-6.154523517672807]
								}, {
									"case":	267,
									"scores":	[-6.154523517672807]
								}, {
									"case":	268,
									"scores":	[-6.154523517672807]
								}, {
									"case":	269,
									"scores":	[-6.154523517672807]
								}, {
									"case":	270,
									"scores":	[-6.154523517672807]
								}, {
									"case":	271,
									"scores":	[-6.154523517672807]
								}, {
									"case":	272,
									"scores":	[-6.154523517672807]
								}, {
									"case":	273,
									"scores":	[-6.154523517672807]
								}, {
									"case":	274,
									"scores":	[-6.154523517672807]
								}, {
									"case":	275,
									"scores":	[-6.154523517672807]
								}, {
									"case":	276,
									"scores":	[-6.154523517672807]
								}, {
									"case":	277,
									"scores":	[-6.154523517672807]
								}, {
									"case":	278,
									"scores":	[-6.154523517672807]
								}, {
									"case":	279,
									"scores":	[-6.154523517672807]
								}, {
									"case":	280,
									"scores":	[-6.154523517672807]
								}, {
									"case":	281,
									"scores":	[-6.154523517672807]
								}, {
									"case":	282,
									"scores":	[-6.154523517672807]
								}, {
									"case":	283,
									"scores":	[-6.154523517672807]
								}, {
									"case":	284,
									"scores":	[-6.154523517672807]
								}, {
									"case":	285,
									"scores":	[-6.154523517672807]
								}, {
									"case":	286,
									"scores":	[-6.154523517672807]
								}, {
									"case":	287,
									"scores":	[-6.154523517672807]
								}, {
									"case":	288,
									"scores":	[-6.154523517672807]
								}, {
									"case":	289,
									"scores":	[-6.154523517672807]
								}, {
									"case":	290,
									"scores":	[-6.154523517672807]
								}, {
									"case":	291,
									"scores":	[-6.154523517672807]
								}, {
									"case":	292,
									"scores":	[-6.154523517672807]
								}, {
									"case":	293,
									"scores":	[-6.154523517672807]
								}, {
									"case":	294,
									"scores":	[-6.154523517672807]
								}, {
									"case":	295,
									"scores":	[-6.154523517672807]
								}, {
									"case":	296,
									"scores":	[-6.154523517672807]
								}, {
									"case":	297,
									"scores":	[-6.154523517672807]
								}, {
									"case":	298,
									"scores":	[-6.154523517672807]
								}, {
									"case":	299,
									"scores":	[-6.154523517672807]
								}, {
									"case":	300,
									"scores":	[-6.154523517672807]
								}, {
									"case":	301,
									"scores":	[-6.154523517672807]
								}, {
									"case":	302,
									"scores":	[-6.154523517672807]
								}, {
									"case":	303,
									"scores":	[-6.154523517672807]
								}, {
									"case":	304,
									"scores":	[-6.154523517672807]
								}, {
									"case":	305,
									"scores":	[-6.154523517672807]
								}, {
									"case":	306,
									"scores":	[-6.154523517672807]
								}, {
									"case":	307,
									"scores":	[-6.154523517672807]
								}, {
									"case":	308,
									"scores":	[-6.154523517672807]
								}, {
									"case":	309,
									"scores":	[-6.154523517672807]
								}, {
									"case":	310,
									"scores":	[-6.154523517672807]
								}, {
									"case":	311,
									"scores":	[-6.154523517672807]
								}, {
									"case":	312,
									"scores":	[-6.154523517672807]
								}, {
									"case":	313,
									"scores":	[-6.154523517672807]
								}, {
									"case":	314,
									"scores":	[-6.154523517672807]
								}, {
									"case":	315,
									"scores":	[-6.154523517672807]
								}, {
									"case":	316,
									"scores":	[-6.154523517672807]
								}, {
									"case":	317,
									"scores":	[-6.154523517672807]
								}, {
									"case":	318,
									"scores":	[-6.154523517672807]
								}, {
									"case":	319,
									"scores":	[-6.154523517672807]
								}, {
									"case":	320,
									"scores":	[-6.154523517672807]
								}, {
									"case":	321,
									"scores":	[-6.154523517672807]
								}, {
									"case":	322,
									"scores":	[-6.154523517672807]
								}, {
									"case":	323,
									"scores":	[-6.154523517672807]
								}, {
									"case":	324,
									"scores":	[-6.154523517672807]
								}, {
									"case":	325,
									"scores":	[-6.154523517672807]
								}, {
									"case":	326,
									"scores":	[-6.154523517672807]
								}, {
									"case":	327,
									"scores":	[-6.154523517672807]
								}, {
									"case":	328,
									"scores":	[-6.154523517672807]
								}, {
									"case":	329,
									"scores":	[-6.154523517672807]
								}, {
									"case":	330,
									"scores":	[-6.154523517672807]
								}, {
									"case":	331,
									"scores":	[-6.154523517672807]
								}, {
									"case":	332,
									"scores":	[-6.154523517672807]
								}, {
									"case":	333,
									"scores":	[-6.154523517672807]
								}, {
									"case":	334,
									"scores":	[-6.154523517672807]
								}, {
									"case":	335,
									"scores":	[-6.154523517672807]
								}, {
									"case":	336,
									"scores":	[-6.154523517672807]
								}, {
									"case":	337,
									"scores":	[-6.154523517672807]
								}, {
									"case":	338,
									"scores":	[-6.154523517672807]
								}, {
									"case":	339,
									"scores":	[-6.154523517672807]
								}, {
									"case":	340,
									"scores":	[-6.154523517672807]
								}, {
									"case":	341,
									"scores":	[-6.154523517672807]
								}, {
									"case":	342,
									"scores":	[-6.154523517672807]
								}, {
									"case":	343,
									"scores":	[-6.154523517672807]
								}, {
									"case":	344,
									"scores":	[-6.154523517672807]
								}, {
									"case":	345,
									"scores":	[-6.154523517672807]
								}, {
									"case":	346,
									"scores":	[-6.154523517672807]
								}, {
									"case":	347,
									"scores":	[-6.154523517672807]
								}, {
									"case":	348,
									"scores":	[-6.154523517672807]
								}, {
									"case":	349,
									"scores":	[-6.154523517672807]
								}, {
									"case":	350,
									"scores":	[-6.154523517672807]
								}, {
									"case":	351,
									"scores":	[-6.154523517672807]
								}, {
									"case":	352,
									"scores":	[-6.154523517672807]
								}, {
									"case":	353,
									"scores":	[-6.154523517672807]
								}, {
									"case":	354,
									"scores":	[-6.154523517672807]
								}, {
									"case":	355,
									"scores":	[-6.154523517672807]
								}, {
									"case":	356,
									"scores":	[-6.154523517672807]
								}, {
									"case":	357,
									"scores":	[-6.154523517672807]
								}, {
									"case":	358,
									"scores":	[-6.154523517672807]
								}, {
									"case":	359,
									"scores":	[-6.154523517672807]
								}, {
									"case":	360,
									"scores":	[-6.154523517672807]
								}, {
									"case":	361,
									"scores":	[-6.154523517672807]
								}, {
									"case":	362,
									"scores":	[-6.154523517672807]
								}, {
									"case":	363,
									"scores":	[-6.154523517672807]
								}, {
									"case":	364,
									"scores":	[-6.154523517672807]
								}, {
									"case":	365,
									"scores":	[-6.154523517672807]
								}, {
									"case":	366,
									"scores":	[-6.154523517672807]
								}, {
									"case":	367,
									"scores":	[-6.154523517672807]
								}, {
									"case":	368,
									"scores":	[-6.154523517672807]
								}, {
									"case":	369,
									"scores":	[-6.154523517672807]
								}, {
									"case":	370,
									"scores":	[-6.154523517672807]
								}, {
									"case":	371,
									"scores":	[-6.154523517672807]
								}, {
									"case":	372,
									"scores":	[-6.154523517672807]
								}, {
									"case":	373,
									"scores":	[-6.154523517672807]
								}, {
									"case":	374,
									"scores":	[-6.154523517672807]
								}, {
									"case":	375,
									"scores":	[-6.154523517672807]
								}, {
									"case":	376,
									"scores":	[-6.154523517672807]
								}, {
									"case":	377,
									"scores":	[-6.154523517672807]
								}, {
									"case":	378,
									"scores":	[-6.154523517672807]
								}, {
									"case":	379,
									"scores":	[-6.154523517672807]
								}, {
									"case":	380,
									"scores":	[-6.154523517672807]
								}, {
									"case":	381,
									"scores":	[-6.154523517672807]
								}, {
									"case":	382,
									"scores":	[-6.154523517672807]
								}, {
									"case":	383,
									"scores":	[-6.154523517672807]
								}, {
									"case":	384,
									"scores":	[-6.154523517672807]
								}, {
									"case":	385,
									"scores":	[-6.154523517672807]
								}, {
									"case":	386,
									"scores":	[-6.154523517672807]
								}, {
									"case":	387,
									"scores":	[-6.154523517672807]
								}, {
									"case":	388,
									"scores":	[-6.154523517672807]
								}, {
									"case":	389,
									"scores":	[-6.154523517672807]
								}, {
									"case":	390,
									"scores":	[-6.154523517672807]
								}, {
									"case":	391,
									"scores":	[-6.154523517672807]
								}, {
									"case":	392,
									"scores":	[-6.154523517672807]
								}, {
									"case":	393,
									"scores":	[-6.154523517672807]
								}, {
									"case":	394,
									"scores":	[-6.154523517672807]
								}, {
									"case":	395,
									"scores":	[-6.154523517672807]
								}, {
									"case":	396,
									"scores":	[-6.154523517672807]
								}, {
									"case":	397,
									"scores":	[-6.154523517672807]
								}, {
									"case":	398,
									"scores":	[-6.154523517672807]
								}, {
									"case":	399,
									"scores":	[-6.154523517672807]
								}, {
									"case":	400,
									"scores":	[-6.154523517672807]
								}, {
									"case":	401,
									"scores":	[-6.154523517672807]
								}, {
									"case":	402,
									"scores":	[-6.154523517672807]
								}, {
									"case":	403,
									"scores":	[-6.154523517672807]
								}, {
									"case":	404,
									"scores":	[-6.154523517672807]
								}, {
									"case":	405,
									"scores":	[-6.154523517672807]
								}, {
									"case":	406,
									"scores":	[-6.154523517672807]
								}, {
									"case":	407,
									"scores":	[-6.154523517672807]
								}, {
									"case":	408,
									"scores":	[-6.154523517672807]
								}, {
									"case":	409,
									"scores":	[-6.154523517672807]
								}, {
									"case":	410,
									"scores":	[-6.154523517672807]
								}, {
									"case":	411,
									"scores":	[-6.154523517672807]
								}, {
									"case":	412,
									"scores":	[-6.154523517672807]
								}, {
									"case":	413,
									"scores":	[-6.154523517672807]
								}, {
									"case":	414,
									"scores":	[-6.154523517672807]
								}, {
									"case":	415,
									"scores":	[-6.154523517672807]
								}, {
									"case":	416,
									"scores":	[-6.154523517672807]
								}, {
									"case":	417,
									"scores":	[-6.154523517672807]
								}, {
									"case":	418,
									"scores":	[-6.154523517672807]
								}, {
									"case":	419,
									"scores":	[-6.154523517672807]
								}, {
									"case":	420,
									"scores":	[-6.154523517672807]
								}, {
									"case":	421,
									"scores":	[-6.154523517672807]
								}, {
									"case":	422,
									"scores":	[-6.154523517672807]
								}, {
									"case":	423,
									"scores":	[-6.154523517672807]
								}, {
									"case":	424,
									"scores":	[-6.154523517672807]
								}, {
									"case":	425,
									"scores":	[-6.154523517672807]
								}, {
									"case":	426,
									"scores":	[-6.154523517672807]
								}, {
									"case":	427,
									"scores":	[-6.154523517672807]
								}, {
									"case":	428,
									"scores":	[-6.154523517672807]
								}, {
									"case":	429,
									"scores":	[-6.154523517672807]
								}, {
									"case":	430,
									"scores":	[-6.154523517672807]
								}, {
									"case":	431,
									"scores":	[-6.154523517672807]
								}, {
									"case":	432,
									"scores":	[-6.154523517672807]
								}, {
									"case":	433,
									"scores":	[-6.154523517672807]
								}, {
									"case":	434,
									"scores":	[-6.154523517672807]
								}, {
									"case":	435,
									"scores":	[-6.154523517672807]
								}, {
									"case":	436,
									"scores":	[-6.154523517672807]
								}, {
									"case":	437,
									"scores":	[-6.154523517672807]
								}, {
									"case":	438,
									"scores":	[-6.154523517672807]
								}, {
									"case":	439,
									"scores":	[-6.154523517672807]
								}, {
									"case":	440,
									"scores":	[-6.154523517672807]
								}, {
									"case":	441,
									"scores":	[-6.154523517672807]
								}, {
									"case":	442,
									"scores":	[-6.154523517672807]
								}, {
									"case":	443,
									"scores":	[-6.154523517672807]
								}, {
									"case":	444,
									"scores":	[-6.154523517672807]
								}, {
									"case":	445,
									"scores":	[-6.154523517672807]
								}, {
									"case":	446,
									"scores":	[-6.154523517672807]
								}, {
									"case":	447,
									"scores":	[-6.154523517672807]
								}, {
									"case":	448,
									"scores":	[-6.154523517672807]
								}, {
									"case":	449,
									"scores":	[-6.154523517672807]
								}, {
									"case":	450,
									"scores":	[-6.154523517672807]
								}, {
									"case":	451,
									"scores":	[-6.154523517672807]
								}, {
									"case":	452,
									"scores":	[-6.154523517672807]
								}, {
									"case":	453,
									"scores":	[-6.154523517672807]
								}, {
									"case":	454,
									"scores":	[-6.154523517672807]
								}, {
									"case":	455,
									"scores":	[-6.154523517672807]
								}, {
									"case":	456,
									"scores":	[-6.154523517672807]
								}, {
									"case":	457,
									"scores":	[-6.154523517672807]
								}, {
									"case":	458,
									"scores":	[-6.154523517672807]
								}, {
									"case":	459,
									"scores":	[-6.154523517672807]
								}, {
									"case":	460,
									"scores":	[-6.154523517672807]
								}, {
									"case":	461,
									"scores":	[-6.154523517672807]
								}, {
									"case":	462,
									"scores":	[-6.154523517672807]
								}, {
									"case":	463,
									"scores":	[-6.154523517672807]
								}, {
									"case":	464,
									"scores":	[-6.154523517672807]
								}, {
									"case":	465,
									"scores":	[-6.154523517672807]
								}, {
									"case":	466,
									"scores":	[-6.154523517672807]
								}, {
									"case":	467,
									"scores":	[-6.154523517672807]
								}, {
									"case":	468,
									"scores":	[-6.154523517672807]
								}, {
									"case":	469,
									"scores":	[-6.154523517672807]
								}, {
									"case":	470,
									"scores":	[-6.154523517672807]
								}, {
									"case":	471,
									"scores":	[-6.154523517672807]
								}, {
									"case":	472,
									"scores":	[-6.154523517672807]
								}, {
									"case":	473,
									"scores":	[-6.154523517672807]
								}, {
									"case":	474,
									"scores":	[-6.154523517672807]
								}, {
									"case":	475,
									"scores":	[-6.154523517672807]
								}, {
									"case":	476,
									"scores":	[-6.154523517672807]
								}, {
									"case":	477,
									"scores":	[-6.154523517672807]
								}, {
									"case":	478,
									"scores":	[-6.154523517672807]
								}, {
									"case":	479,
									"scores":	[-6.154523517672807]
								}, {
									"case":	480,
									"scores":	[-6.154523517672807]
								}, {
									"case":	481,
									"scores":	[-6.154523517672807]
								}, {
									"case":	482,
									"scores":	[-6.154523517672807]
								}, {
									"case":	483,
									"scores":	[-6.154523517672807]
								}, {
									"case":	484,
									"scores":	[-6.154523517672807]
								}, {
									"case":	485,
									"scores":	[-6.154523517672807]
								}, {
									"case":	486,
									"scores":	[-6.154523517672807]
								}, {
									"case":	487,
									"scores":	[-6.154523517672807]
								}, {
									"case":	488,
									"scores":	[-6.154523517672807]
								}, {
									"case":	489,
									"scores":	[-6.154523517672807]
								}, {
									"case":	490,
									"scores":	[-6.154523517672807]
								}, {
									"case":	491,
									"scores":	[-6.154523517672807]
								}, {
									"case":	492,
									"scores":	[-6.154523517672807]
								}, {
									"case":	493,
									"scores":	[-6.154523517672807]
								}, {
									"case":	494,
									"scores":	[-6.154523517672807]
								}, {
									"case":	495,
									"scores":	[-6.154523517672807]
								}, {
									"case":	496,
									"scores":	[-6.154523517672807]
								}, {
									"case":	497,
									"scores":	[-6.154523517672807]
								}, {
									"case":	498,
									"scores":	[-6.154523517672807]
								}, {
									"case":	499,
									"scores":	[-6.154523517672807]
								}, {
									"case":	500,
									"scores":	[-6.154523517672807]
								}, {
									"case":	501,
									"scores":	[-6.154523517672807]
								}, {
									"case":	502,
									"scores":	[-6.154523517672807]
								}, {
									"case":	503,
									"scores":	[-6.154523517672807]
								}, {
									"case":	504,
									"scores":	[-6.154523517672807]
								}, {
									"case":	505,
									"scores":	[-6.154523517672807]
								}, {
									"case":	506,
									"scores":	[-6.154523517672807]
								}, {
									"case":	507,
									"scores":	[-6.154523517672807]
								}, {
									"case":	508,
									"scores":	[-6.154523517672807]
								}, {
									"case":	509,
									"scores":	[-6.154523517672807]
								}, {
									"case":	510,
									"scores":	[-6.154523517672807]
								}, {
									"case":	511,
									"scores":	[-6.154523517672807]
								}, {
									"case":	512,
									"scores":	[-6.154523517672807]
								}, {
									"case":	513,
									"scores":	[-6.154523517672807]
								}, {
									"case":	514,
									"scores":	[-6.154523517672807]
								}, {
									"case":	515,
									"scores":	[-6.154523517672807]
								}, {
									"case":	516,
									"scores":	[-6.154523517672807]
								}, {
									"case":	517,
									"scores":	[-6.154523517672807]
								}, {
									"case":	518,
									"scores":	[-6.154523517672807]
								}, {
									"case":	519,
									"scores":	[-6.154523517672807]
								}, {
									"case":	520,
									"scores":	[-6.154523517672807]
								}, {
									"case":	521,
									"scores":	[-6.154523517672807]
								}, {
									"case":	522,
									"scores":	[-6.154523517672807]
								}, {
									"case":	523,
									"scores":	[-6.154523517672807]
								}, {
									"case":	524,
									"scores":	[-6.154523517672807]
								}, {
									"case":	525,
									"scores":	[-6.154523517672807]
								}, {
									"case":	526,
									"scores":	[-6.154523517672807]
								}, {
									"case":	527,
									"scores":	[-6.154523517672807]
								}, {
									"case":	528,
									"scores":	[-6.154523517672807]
								}, {
									"case":	529,
									"scores":	[-6.154523517672807]
								}, {
									"case":	530,
									"scores":	[-6.154523517672807]
								}, {
									"case":	531,
									"scores":	[-6.154523517672807]
								}, {
									"case":	532,
									"scores":	[-6.154523517672807]
								}, {
									"case":	533,
									"scores":	[-6.154523517672807]
								}, {
									"case":	534,
									"scores":	[-6.154523517672807]
								}, {
									"case":	535,
									"scores":	[-6.154523517672807]
								}, {
									"case":	536,
									"scores":	[-6.154523517672807]
								}, {
									"case":	537,
									"scores":	[-6.154523517672807]
								}, {
									"case":	538,
									"scores":	[-6.154523517672807]
								}, {
									"case":	539,
									"scores":	[-6.154523517672807]
								}, {
									"case":	540,
									"scores":	[-6.154523517672807]
								}, {
									"case":	541,
									"scores":	[-6.154523517672807]
								}, {
									"case":	542,
									"scores":	[-6.154523517672807]
								}, {
									"case":	543,
									"scores":	[-6.154523517672807]
								}, {
									"case":	544,
									"scores":	[-6.154523517672807]
								}, {
									"case":	545,
									"scores":	[-6.154523517672807]
								}, {
									"case":	546,
									"scores":	[-6.154523517672807]
								}, {
									"case":	547,
									"scores":	[-6.154523517672807]
								}, {
									"case":	548,
									"scores":	[-6.154523517672807]
								}, {
									"case":	549,
									"scores":	[-6.154523517672807]
								}, {
									"case":	550,
									"scores":	[-6.154523517672807]
								}, {
									"case":	551,
									"scores":	[-6.154523517672807]
								}, {
									"case":	552,
									"scores":	[-6.154523517672807]
								}, {
									"case":	553,
									"scores":	[-6.154523517672807]
								}, {
									"case":	554,
									"scores":	[-6.154523517672807]
								}, {
									"case":	555,
									"scores":	[-6.154523517672807]
								}, {
									"case":	556,
									"scores":	[-6.154523517672807]
								}, {
									"case":	557,
									"scores":	[-6.154523517672807]
								}, {
									"case":	558,
									"scores":	[-6.154523517672807]
								}, {
									"case":	559,
									"scores":	[-6.154523517672807]
								}, {
									"case":	560,
									"scores":	[-6.154523517672807]
								}, {
									"case":	561,
									"scores":	[-6.154523517672807]
								}, {
									"case":	562,
									"scores":	[-6.154523517672807]
								}, {
									"case":	563,
									"scores":	[-6.154523517672807]
								}, {
									"case":	564,
									"scores":	[-6.154523517672807]
								}, {
									"case":	565,
									"scores":	[-6.154523517672807]
								}, {
									"case":	566,
									"scores":	[-6.154523517672807]
								}, {
									"case":	567,
									"scores":	[-6.154523517672807]
								}, {
									"case":	568,
									"scores":	[-6.154523517672807]
								}, {
									"case":	569,
									"scores":	[-6.154523517672807]
								}, {
									"case":	570,
									"scores":	[-6.154523517672807]
								}, {
									"case":	571,
									"scores":	[-6.154523517672807]
								}, {
									"case":	572,
									"scores":	[-6.154523517672807]
								}, {
									"case":	573,
									"scores":	[-6.154523517672807]
								}, {
									"case":	574,
									"scores":	[-6.154523517672807]
								}, {
									"case":	575,
									"scores":	[-6.154523517672807]
								}, {
									"case":	576,
									"scores":	[-6.154523517672807]
								}, {
									"case":	577,
									"scores":	[-6.154523517672807]
								}, {
									"case":	578,
									"scores":	[-6.154523517672807]
								}, {
									"case":	579,
									"scores":	[-6.154523517672807]
								}, {
									"case":	580,
									"scores":	[-6.154523517672807]
								}, {
									"case":	581,
									"scores":	[-6.154523517672807]
								}, {
									"case":	582,
									"scores":	[-6.154523517672807]
								}, {
									"case":	583,
									"scores":	[-6.154523517672807]
								}, {
									"case":	584,
									"scores":	[-6.154523517672807]
								}, {
									"case":	585,
									"scores":	[-6.154523517672807]
								}, {
									"case":	586,
									"scores":	[-6.154523517672807]
								}, {
									"case":	587,
									"scores":	[-6.154523517672807]
								}, {
									"case":	588,
									"scores":	[-6.154523517672807]
								}, {
									"case":	589,
									"scores":	[-6.154523517672807]
								}, {
									"case":	590,
									"scores":	[-6.154523517672807]
								}, {
									"case":	591,
									"scores":	[-6.154523517672807]
								}, {
									"case":	592,
									"scores":	[-6.154523517672807]
								}, {
									"case":	593,
									"scores":	[-6.154523517672807]
								}, {
									"case":	594,
									"scores":	[-6.154523517672807]
								}, {
									"case":	595,
									"scores":	[-6.154523517672807]
								}, {
									"case":	596,
									"scores":	[-6.154523517672807]
								}, {
									"case":	597,
									"scores":	[-6.154523517672807]
								}, {
									"case":	598,
									"scores":	[-6.154523517672807]
								}, {
									"case":	599,
									"scores":	[-6.154523517672807]
								}, {
									"case":	600,
									"scores":	[-6.154523517672807]
								}, {
									"case":	601,
									"scores":	[-6.154523517672807]
								}, {
									"case":	602,
									"scores":	[-6.154523517672807]
								}, {
									"case":	603,
									"scores":	[-6.154523517672807]
								}, {
									"case":	604,
									"scores":	[-6.154523517672807]
								}, {
									"case":	605,
									"scores":	[-6.154523517672807]
								}, {
									"case":	606,
									"scores":	[-6.154523517672807]
								}, {
									"case":	607,
									"scores":	[-6.154523517672807]
								}, {
									"case":	608,
									"scores":	[-6.154523517672807]
								}, {
									"case":	609,
									"scores":	[-6.154523517672807]
								}, {
									"case":	610,
									"scores":	[-6.154523517672807]
								}, {
									"case":	611,
									"scores":	[-6.154523517672807]
								}, {
									"case":	612,
									"scores":	[-6.154523517672807]
								}, {
									"case":	613,
									"scores":	[-6.154523517672807]
								}, {
									"case":	614,
									"scores":	[-7.4483123136728064, -9.088899728672807, -9.088899728672807, -9.6054397334728066, -8.5681998674728064, -9.0691348674728065, -9.4108192274728069, -9.4108192274728069, -9.4108192274728069, -9.4108192274728069, -9.4108192274728069, -9.4479196274728068, -9.2018807136728071, -9.41276983067281, -9.41276983067281, -9.1647803136728072, -8.9118348306728059, -9.4479196274728068, -9.4108192274728069, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -10.189815604672807, -10.189815604672807, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.4779914876728064, -9.97892648767281, -9.97892648767281, -9.97892648767281, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -9.97892648767281, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -10.189815604672807, -10.189815604672807, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -10.189815604672807, -10.189815604672807, -9.97892648767281, -10.189815604672807, -10.189815604672807, -9.97892648767281, -9.97892648767281, -9.6888806046728071, -9.97892648767281, -10.189815604672807, -9.97892648767281, -10.189815604672807, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -10.189815604672807, -10.189815604672807, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.4779914876728064, -9.97892648767281, -9.97892648767281, -9.97892648767281, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -9.97892648767281, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -10.189815604672807, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -10.189815604672807, -10.189815604672807, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -9.97892648767281, -10.189815604672807, -10.189815604672807, -9.97892648767281, -10.189815604672807, -10.189815604672807, -9.97892648767281, -9.97892648767281, -9.6888806046728071, -9.97892648767281, -10.189815604672807, -9.97892648767281, -10.189815604672807, -9.97892648767281]
								}]
						}, {
							"switch":	65,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	403,
							"begin_column":	2,
							"end_line":	403,
							"end_column":	20,
							"patch_codes":	["if (!__is_neg(\"\", \"L403\", 151, &(old_in_user_include), sizeof (old_in_user_include), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(stream), sizeof (stream), &(zfilename), sizeof (zfilename), &(zmode), sizeof (zmode), &(zoptions), sizeof (zoptions), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(us), sizeof (us), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log)))\n    (core_globals.in_user_include) = old_in_user_include;\n", "{\n}\n", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0 * call_result)", "(core_globals.in_user_include) = (0 * old_in_user_include)", "(core_globals.in_user_include) = (0 * options)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (args != 0)", "(core_globals.in_user_include) = (args == 0)", "(core_globals.in_user_include) = (call_result != 0)", "(core_globals.in_user_include) = (call_result != old_in_user_include)", "(core_globals.in_user_include) = (call_result * old_in_user_include)", "(core_globals.in_user_include) = (call_result * options)", "(core_globals.in_user_include) = (call_result + 0)", "(core_globals.in_user_include) = (call_result + old_in_user_include)", "(core_globals.in_user_include) = (call_result - 0)", "(core_globals.in_user_include) = (call_result - old_in_user_include)", "(core_globals.in_user_include) = (call_result == 0)", "(core_globals.in_user_include) = (call_result == old_in_user_include)", "(core_globals.in_user_include) = (context != 0)", "(core_globals.in_user_include) = (context == 0)", "(core_globals.in_user_include) = (filename != 0)", "(core_globals.in_user_include) = (filename != mode)", "(core_globals.in_user_include) = (filename == 0)", "(core_globals.in_user_include) = (filename == mode)", "(core_globals.in_user_include) = (mode != 0)", "(core_globals.in_user_include) = (mode == 0)", "(core_globals.in_user_include) = (old_in_user_include != 0)", "(core_globals.in_user_include) = (old_in_user_include * call_result)", "(core_globals.in_user_include) = (old_in_user_include * options)", "(core_globals.in_user_include) = (old_in_user_include + 0)", "(core_globals.in_user_include) = (old_in_user_include - 0)", "(core_globals.in_user_include) = (old_in_user_include == 0)", "(core_globals.in_user_include) = (old_in_user_include)", "(core_globals.in_user_include) = (opened_path != 0)", "(core_globals.in_user_include) = (opened_path == 0)", "(core_globals.in_user_include) = (options != 0)", "(core_globals.in_user_include) = (options != call_result)", "(core_globals.in_user_include) = (options != old_in_user_include)", "(core_globals.in_user_include) = (options * call_result)", "(core_globals.in_user_include) = (options * old_in_user_include)", "(core_globals.in_user_include) = (options + 0)", "(core_globals.in_user_include) = (options + call_result)", "(core_globals.in_user_include) = (options + old_in_user_include)", "(core_globals.in_user_include) = (options - 0)", "(core_globals.in_user_include) = (options - call_result)", "(core_globals.in_user_include) = (options - old_in_user_include)", "(core_globals.in_user_include) = (options == 0)", "(core_globals.in_user_include) = (options == call_result)", "(core_globals.in_user_include) = (options == old_in_user_include)", "(core_globals.in_user_include) = (stream != 0)", "(core_globals.in_user_include) = (stream == 0)", "(core_globals.in_user_include) = (us != 0)", "(core_globals.in_user_include) = (us == 0)", "(core_globals.in_user_include) = (uwrap != 0)", "(core_globals.in_user_include) = (uwrap == 0)", "(core_globals.in_user_include) = (wrapper != 0)", "(core_globals.in_user_include) = (wrapper == 0)", "(core_globals.in_user_include) = (zfilename != 0)", "(core_globals.in_user_include) = (zfilename != zfuncname)", "(core_globals.in_user_include) = (zfilename != zmode)", "(core_globals.in_user_include) = (zfilename != zopened)", "(core_globals.in_user_include) = (zfilename != zoptions)", "(core_globals.in_user_include) = (zfilename != zretval)", "(core_globals.in_user_include) = (zfilename == 0)", "(core_globals.in_user_include) = (zfilename == zfuncname)", "(core_globals.in_user_include) = (zfilename == zmode)", "(core_globals.in_user_include) = (zfilename == zopened)", "(core_globals.in_user_include) = (zfilename == zoptions)", "(core_globals.in_user_include) = (zfilename == zretval)", "(core_globals.in_user_include) = (zfuncname != 0)", "(core_globals.in_user_include) = (zfuncname == 0)", "(core_globals.in_user_include) = (zmode != 0)", "(core_globals.in_user_include) = (zmode != zfuncname)", "(core_globals.in_user_include) = (zmode != zopened)", "(core_globals.in_user_include) = (zmode != zoptions)", "(core_globals.in_user_include) = (zmode != zretval)", "(core_globals.in_user_include) = (zmode == 0)", "(core_globals.in_user_include) = (zmode == zfuncname)", "(core_globals.in_user_include) = (zmode == zopened)", "(core_globals.in_user_include) = (zmode == zoptions)", "(core_globals.in_user_include) = (zmode == zretval)", "(core_globals.in_user_include) = (zopened != 0)", "(core_globals.in_user_include) = (zopened != zfuncname)", "(core_globals.in_user_include) = (zopened != zoptions)", "(core_globals.in_user_include) = (zopened != zretval)", "(core_globals.in_user_include) = (zopened == 0)", "(core_globals.in_user_include) = (zopened == zfuncname)", "(core_globals.in_user_include) = (zopened == zoptions)", "(core_globals.in_user_include) = (zopened == zretval)", "(core_globals.in_user_include) = (zoptions != 0)", "(core_globals.in_user_include) = (zoptions != zfuncname)", "(core_globals.in_user_include) = (zoptions != zretval)", "(core_globals.in_user_include) = (zoptions == 0)", "(core_globals.in_user_include) = (zoptions == zfuncname)", "(core_globals.in_user_include) = (zoptions == zretval)", "(core_globals.in_user_include) = (zretval != 0)", "(core_globals.in_user_include) = (zretval != zfuncname)", "(core_globals.in_user_include) = (zretval == 0)", "(core_globals.in_user_include) = (zretval == zfuncname)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.435742397672807, -7.3224387186728066, -7.3224387186728066, -7.5646291896728073, -7.1705556816728073, -7.492566711672807, -7.6885394876728075, -7.6885394876728075, -7.6885394876728075, -7.6885394876728075, -7.6885394876728075, -7.9828902876728067, -7.225002187672807, -7.6942621876728072, -7.6942621876728072, -6.9306513876728069, -7.3722511576728067, -7.9828902876728067, -7.6885394876728075, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.1334851676728066, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.4554961976728071, -7.6027451676728068, -7.4554961976728071, -7.9247561976728065, -7.4554961976728071, -7.9247561976728065, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.1334851676728066, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.9247561976728065, -7.9247561976728065, -7.4554961976728071, -7.4554961976728071, -7.6027451676728068, -7.4554961976728071, -7.9247561976728065, -7.4554961976728071, -7.9247561976728065, -7.4554961976728071]
								}, {
									"case":	2,
									"scores":	[-6.154523517672807]
								}, {
									"case":	3,
									"scores":	[-6.154523517672807]
								}, {
									"case":	4,
									"scores":	[-6.154523517672807]
								}, {
									"case":	5,
									"scores":	[-6.154523517672807]
								}, {
									"case":	6,
									"scores":	[-6.154523517672807]
								}, {
									"case":	7,
									"scores":	[-6.154523517672807]
								}, {
									"case":	8,
									"scores":	[-6.154523517672807]
								}, {
									"case":	9,
									"scores":	[-6.154523517672807]
								}, {
									"case":	10,
									"scores":	[-6.154523517672807]
								}, {
									"case":	11,
									"scores":	[-6.154523517672807]
								}, {
									"case":	12,
									"scores":	[-6.154523517672807]
								}, {
									"case":	13,
									"scores":	[-6.154523517672807]
								}, {
									"case":	14,
									"scores":	[-6.154523517672807]
								}, {
									"case":	15,
									"scores":	[-6.154523517672807]
								}, {
									"case":	16,
									"scores":	[-6.154523517672807]
								}, {
									"case":	17,
									"scores":	[-6.154523517672807]
								}, {
									"case":	18,
									"scores":	[-6.154523517672807]
								}, {
									"case":	19,
									"scores":	[-6.154523517672807]
								}, {
									"case":	20,
									"scores":	[-6.154523517672807]
								}, {
									"case":	21,
									"scores":	[-6.154523517672807]
								}, {
									"case":	22,
									"scores":	[-6.154523517672807]
								}, {
									"case":	23,
									"scores":	[-6.154523517672807]
								}, {
									"case":	24,
									"scores":	[-6.154523517672807]
								}, {
									"case":	25,
									"scores":	[-6.154523517672807]
								}, {
									"case":	26,
									"scores":	[-6.154523517672807]
								}, {
									"case":	27,
									"scores":	[-6.154523517672807]
								}, {
									"case":	28,
									"scores":	[-6.154523517672807]
								}, {
									"case":	29,
									"scores":	[-6.154523517672807]
								}, {
									"case":	30,
									"scores":	[-6.154523517672807]
								}, {
									"case":	31,
									"scores":	[-6.154523517672807]
								}, {
									"case":	32,
									"scores":	[-6.154523517672807]
								}, {
									"case":	33,
									"scores":	[-6.154523517672807]
								}, {
									"case":	34,
									"scores":	[-6.154523517672807]
								}, {
									"case":	35,
									"scores":	[-6.154523517672807]
								}, {
									"case":	36,
									"scores":	[-6.154523517672807]
								}, {
									"case":	37,
									"scores":	[-6.154523517672807]
								}, {
									"case":	38,
									"scores":	[-6.154523517672807]
								}, {
									"case":	39,
									"scores":	[-6.154523517672807]
								}, {
									"case":	40,
									"scores":	[-6.154523517672807]
								}, {
									"case":	41,
									"scores":	[-6.154523517672807]
								}, {
									"case":	42,
									"scores":	[-6.154523517672807]
								}, {
									"case":	43,
									"scores":	[-6.154523517672807]
								}, {
									"case":	44,
									"scores":	[-6.154523517672807]
								}, {
									"case":	45,
									"scores":	[-6.154523517672807]
								}, {
									"case":	46,
									"scores":	[-6.154523517672807]
								}, {
									"case":	47,
									"scores":	[-6.154523517672807]
								}, {
									"case":	48,
									"scores":	[-6.154523517672807]
								}, {
									"case":	49,
									"scores":	[-6.154523517672807]
								}, {
									"case":	50,
									"scores":	[-6.154523517672807]
								}, {
									"case":	51,
									"scores":	[-6.154523517672807]
								}, {
									"case":	52,
									"scores":	[-6.154523517672807]
								}, {
									"case":	53,
									"scores":	[-6.154523517672807]
								}, {
									"case":	54,
									"scores":	[-6.154523517672807]
								}, {
									"case":	55,
									"scores":	[-6.154523517672807]
								}, {
									"case":	56,
									"scores":	[-6.154523517672807]
								}, {
									"case":	57,
									"scores":	[-6.154523517672807]
								}, {
									"case":	58,
									"scores":	[-6.154523517672807]
								}, {
									"case":	59,
									"scores":	[-6.154523517672807]
								}, {
									"case":	60,
									"scores":	[-6.154523517672807]
								}, {
									"case":	61,
									"scores":	[-6.154523517672807]
								}, {
									"case":	62,
									"scores":	[-6.154523517672807]
								}, {
									"case":	63,
									"scores":	[-6.154523517672807]
								}, {
									"case":	64,
									"scores":	[-6.154523517672807]
								}, {
									"case":	65,
									"scores":	[-6.154523517672807]
								}, {
									"case":	66,
									"scores":	[-6.154523517672807]
								}, {
									"case":	67,
									"scores":	[-6.154523517672807]
								}, {
									"case":	68,
									"scores":	[-6.154523517672807]
								}, {
									"case":	69,
									"scores":	[-6.154523517672807]
								}, {
									"case":	70,
									"scores":	[-6.154523517672807]
								}, {
									"case":	71,
									"scores":	[-6.154523517672807]
								}, {
									"case":	72,
									"scores":	[-6.154523517672807]
								}, {
									"case":	73,
									"scores":	[-6.154523517672807]
								}, {
									"case":	74,
									"scores":	[-6.154523517672807]
								}, {
									"case":	75,
									"scores":	[-6.154523517672807]
								}, {
									"case":	76,
									"scores":	[-6.154523517672807]
								}, {
									"case":	77,
									"scores":	[-6.154523517672807]
								}, {
									"case":	78,
									"scores":	[-6.154523517672807]
								}, {
									"case":	79,
									"scores":	[-6.154523517672807]
								}, {
									"case":	80,
									"scores":	[-6.154523517672807]
								}, {
									"case":	81,
									"scores":	[-6.154523517672807]
								}, {
									"case":	82,
									"scores":	[-6.154523517672807]
								}, {
									"case":	83,
									"scores":	[-6.154523517672807]
								}, {
									"case":	84,
									"scores":	[-6.154523517672807]
								}, {
									"case":	85,
									"scores":	[-6.154523517672807]
								}, {
									"case":	86,
									"scores":	[-6.154523517672807]
								}, {
									"case":	87,
									"scores":	[-6.154523517672807]
								}, {
									"case":	88,
									"scores":	[-6.154523517672807]
								}, {
									"case":	89,
									"scores":	[-6.154523517672807]
								}, {
									"case":	90,
									"scores":	[-6.154523517672807]
								}, {
									"case":	91,
									"scores":	[-6.154523517672807]
								}, {
									"case":	92,
									"scores":	[-6.154523517672807]
								}, {
									"case":	93,
									"scores":	[-6.154523517672807]
								}, {
									"case":	94,
									"scores":	[-6.154523517672807]
								}, {
									"case":	95,
									"scores":	[-6.154523517672807]
								}, {
									"case":	96,
									"scores":	[-6.154523517672807]
								}, {
									"case":	97,
									"scores":	[-6.154523517672807]
								}, {
									"case":	98,
									"scores":	[-6.154523517672807]
								}, {
									"case":	99,
									"scores":	[-6.154523517672807]
								}, {
									"case":	100,
									"scores":	[-6.154523517672807]
								}, {
									"case":	101,
									"scores":	[-6.154523517672807]
								}, {
									"case":	102,
									"scores":	[-6.154523517672807]
								}, {
									"case":	103,
									"scores":	[-6.154523517672807]
								}, {
									"case":	104,
									"scores":	[-6.154523517672807]
								}, {
									"case":	105,
									"scores":	[-6.154523517672807]
								}, {
									"case":	106,
									"scores":	[-6.154523517672807]
								}, {
									"case":	107,
									"scores":	[-6.154523517672807]
								}]
						}]
				}, {
					"line":	403,
					"switches":	[{
							"switch":	66,
							"types":	[[], [], [], [], [613], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], [], [], [], [], [], []],
							"begin_line":	404,
							"begin_column":	0,
							"end_line":	404,
							"end_column":	0,
							"patch_codes":	["memset(&(zfilename)->is_ref__gc, 0, sizeof (*(&(zfilename)->is_ref__gc)))", "memset(&(zfilename)->refcount__gc, 0, sizeof (*(&(zfilename)->refcount__gc)))", "memset(&(zfilename)->type, 0, sizeof (*(&(zfilename)->type)))", "memset(&(zfilename)->value, 0, sizeof (*(&(zfilename)->value)))", "memset(&(zfuncname)->is_ref__gc, 0, sizeof (*(&(zfuncname)->is_ref__gc)))", "memset(&(zfuncname)->refcount__gc, 0, sizeof (*(&(zfuncname)->refcount__gc)))", "memset(&(zfuncname)->type, 0, sizeof (*(&(zfuncname)->type)))", "memset(&(zfuncname)->value, 0, sizeof (*(&(zfuncname)->value)))", "memset(&(zmode)->is_ref__gc, 0, sizeof (*(&(zmode)->is_ref__gc)))", "memset(&(zmode)->refcount__gc, 0, sizeof (*(&(zmode)->refcount__gc)))", "memset(&(zmode)->type, 0, sizeof (*(&(zmode)->type)))", "memset(&(zmode)->value, 0, sizeof (*(&(zmode)->value)))", "memset(&(zopened)->is_ref__gc, 0, sizeof (*(&(zopened)->is_ref__gc)))", "memset(&(zopened)->refcount__gc, 0, sizeof (*(&(zopened)->refcount__gc)))", "memset(&(zopened)->type, 0, sizeof (*(&(zopened)->type)))", "memset(&(zopened)->value, 0, sizeof (*(&(zopened)->value)))", "memset(&(zoptions)->is_ref__gc, 0, sizeof (*(&(zoptions)->is_ref__gc)))", "memset(&(zoptions)->refcount__gc, 0, sizeof (*(&(zoptions)->refcount__gc)))", "memset(&(zoptions)->type, 0, sizeof (*(&(zoptions)->type)))", "memset(&(zoptions)->value, 0, sizeof (*(&(zoptions)->value)))", "memset(&core_globals.activated_auto_globals, 0, sizeof (*(&core_globals.activated_auto_globals)))", "memset(&core_globals.allow_url_fopen, 0, sizeof (*(&core_globals.allow_url_fopen)))", "memset(&core_globals.allow_url_include, 0, sizeof (*(&core_globals.allow_url_include)))", "memset(&core_globals.always_populate_raw_post_data, 0, sizeof (*(&core_globals.always_populate_raw_post_data)))", "memset(&core_globals.arg_separator, 0, sizeof (*(&core_globals.arg_separator)))", "memset(&core_globals.auto_append_file, 0, sizeof (*(&core_globals.auto_append_file)))", "memset(&core_globals.auto_globals_jit, 0, sizeof (*(&core_globals.auto_globals_jit)))", "memset(&core_globals.auto_prepend_file, 0, sizeof (*(&core_globals.auto_prepend_file)))", "memset(&core_globals.connection_status, 0, sizeof (*(&core_globals.connection_status)))", "memset(&core_globals.disable_classes, 0, sizeof (*(&core_globals.disable_classes)))", "memset(&core_globals.disable_functions, 0, sizeof (*(&core_globals.disable_functions)))", "memset(&core_globals.display_errors, 0, sizeof (*(&core_globals.display_errors)))", "memset(&core_globals.display_startup_errors, 0, sizeof (*(&core_globals.display_startup_errors)))", "memset(&core_globals.doc_root, 0, sizeof (*(&core_globals.doc_root)))", "memset(&core_globals.docref_ext, 0, sizeof (*(&core_globals.docref_ext)))", "memset(&core_globals.docref_root, 0, sizeof (*(&core_globals.docref_root)))", "memset(&core_globals.during_request_startup, 0, sizeof (*(&core_globals.during_request_startup)))", "memset(&core_globals.enable_dl, 0, sizeof (*(&core_globals.enable_dl)))", "memset(&core_globals.enable_post_data_reading, 0, sizeof (*(&core_globals.enable_post_data_reading)))", "memset(&core_globals.error_append_string, 0, sizeof (*(&core_globals.error_append_string)))", "memset(&core_globals.error_log, 0, sizeof (*(&core_globals.error_log)))", "memset(&core_globals.error_prepend_string, 0, sizeof (*(&core_globals.error_prepend_string)))", "memset(&core_globals.exit_on_timeout, 0, sizeof (*(&core_globals.exit_on_timeout)))", "memset(&core_globals.expose_php, 0, sizeof (*(&core_globals.expose_php)))", "memset(&core_globals.extension_dir, 0, sizeof (*(&core_globals.extension_dir)))", "memset(&core_globals.file_uploads, 0, sizeof (*(&core_globals.file_uploads)))", "memset(&core_globals.header_is_being_sent, 0, sizeof (*(&core_globals.header_is_being_sent)))", "memset(&core_globals.html_errors, 0, sizeof (*(&core_globals.html_errors)))", "memset(&core_globals.http_globals, 0, sizeof (*(&core_globals.http_globals)))", "memset(&core_globals.ignore_repeated_errors, 0, sizeof (*(&core_globals.ignore_repeated_errors)))", "memset(&core_globals.ignore_repeated_source, 0, sizeof (*(&core_globals.ignore_repeated_source)))", "memset(&core_globals.ignore_user_abort, 0, sizeof (*(&core_globals.ignore_user_abort)))", "memset(&core_globals.implicit_flush, 0, sizeof (*(&core_globals.implicit_flush)))", "memset(&core_globals.in_error_log, 0, sizeof (*(&core_globals.in_error_log)))", "memset(&core_globals.in_user_include, 0, sizeof (*(&core_globals.in_user_include)))", "memset(&core_globals.include_path, 0, sizeof (*(&core_globals.include_path)))", "memset(&core_globals.last_error_file, 0, sizeof (*(&core_globals.last_error_file)))", "memset(&core_globals.last_error_lineno, 0, sizeof (*(&core_globals.last_error_lineno)))", "memset(&core_globals.last_error_message, 0, sizeof (*(&core_globals.last_error_message)))", "memset(&core_globals.last_error_type, 0, sizeof (*(&core_globals.last_error_type)))", "memset(&core_globals.log_errors, 0, sizeof (*(&core_globals.log_errors)))", "memset(&core_globals.log_errors_max_len, 0, sizeof (*(&core_globals.log_errors_max_len)))", "memset(&core_globals.magic_quotes_gpc, 0, sizeof (*(&core_globals.magic_quotes_gpc)))", "memset(&core_globals.magic_quotes_runtime, 0, sizeof (*(&core_globals.magic_quotes_runtime)))", "memset(&core_globals.magic_quotes_sybase, 0, sizeof (*(&core_globals.magic_quotes_sybase)))", "memset(&core_globals.mail_log, 0, sizeof (*(&core_globals.mail_log)))", "memset(&core_globals.mail_x_header, 0, sizeof (*(&core_globals.mail_x_header)))", "memset(&core_globals.max_input_nesting_level, 0, sizeof (*(&core_globals.max_input_nesting_level)))", "memset(&core_globals.max_input_time, 0, sizeof (*(&core_globals.max_input_time)))", "memset(&core_globals.memory_limit, 0, sizeof (*(&core_globals.memory_limit)))", "memset(&core_globals.modules_activated, 0, sizeof (*(&core_globals.modules_activated)))", "memset(&core_globals.open_basedir, 0, sizeof (*(&core_globals.open_basedir)))", "memset(&core_globals.output_buffering, 0, sizeof (*(&core_globals.output_buffering)))", "memset(&core_globals.output_handler, 0, sizeof (*(&core_globals.output_handler)))", "memset(&core_globals.register_argc_argv, 0, sizeof (*(&core_globals.register_argc_argv)))", "memset(&core_globals.report_memleaks, 0, sizeof (*(&core_globals.report_memleaks)))", "memset(&core_globals.report_zend_debug, 0, sizeof (*(&core_globals.report_zend_debug)))", "memset(&core_globals.request_order, 0, sizeof (*(&core_globals.request_order)))", "memset(&core_globals.rfc1867_protected_variables, 0, sizeof (*(&core_globals.rfc1867_protected_variables)))", "memset(&core_globals.serialize_precision, 0, sizeof (*(&core_globals.serialize_precision)))", "memset(&core_globals.sql_safe_mode, 0, sizeof (*(&core_globals.sql_safe_mode)))", "memset(&core_globals.tick_functions, 0, sizeof (*(&core_globals.tick_functions)))", "memset(&core_globals.track_errors, 0, sizeof (*(&core_globals.track_errors)))", "memset(&core_globals.unserialize_callback_func, 0, sizeof (*(&core_globals.unserialize_callback_func)))", "memset(&core_globals.upload_max_filesize, 0, sizeof (*(&core_globals.upload_max_filesize)))", "memset(&core_globals.upload_tmp_dir, 0, sizeof (*(&core_globals.upload_tmp_dir)))", "memset(&core_globals.user_dir, 0, sizeof (*(&core_globals.user_dir)))", "memset(&core_globals.user_ini_cache_ttl, 0, sizeof (*(&core_globals.user_ini_cache_ttl)))", "memset(&core_globals.user_ini_filename, 0, sizeof (*(&core_globals.user_ini_filename)))", "memset(&core_globals.variables_order, 0, sizeof (*(&core_globals.variables_order)))", "memset(&core_globals.xmlrpc_error_number, 0, sizeof (*(&core_globals.xmlrpc_error_number)))", "memset(&core_globals.xmlrpc_errors, 0, sizeof (*(&core_globals.xmlrpc_errors)))", "memset(&file_globals.auto_detect_line_endings, 0, sizeof (*(&file_globals.auto_detect_line_endings)))", "memset(&file_globals.def_chunk_size, 0, sizeof (*(&file_globals.def_chunk_size)))", "memset(&file_globals.default_context, 0, sizeof (*(&file_globals.default_context)))", "memset(&file_globals.default_socket_timeout, 0, sizeof (*(&file_globals.default_socket_timeout)))", "memset(&file_globals.from_address, 0, sizeof (*(&file_globals.from_address)))", "memset(&file_globals.pclose_ret, 0, sizeof (*(&file_globals.pclose_ret)))", "memset(&file_globals.stream_filters, 0, sizeof (*(&file_globals.stream_filters)))", "memset(&file_globals.stream_wrappers, 0, sizeof (*(&file_globals.stream_wrappers)))", "memset(&file_globals.user_agent, 0, sizeof (*(&file_globals.user_agent)))", "memset(&file_globals.user_stream_current_filename, 0, sizeof (*(&file_globals.user_stream_current_filename)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(&uwrap->ce, 0, sizeof (*(&uwrap->ce)))", "memset(&uwrap->ce->__call, 0, sizeof (*(&uwrap->ce->__call)))", "memset(&uwrap->ce->__callstatic, 0, sizeof (*(&uwrap->ce->__callstatic)))", "memset(&uwrap->ce->__get, 0, sizeof (*(&uwrap->ce->__get)))", "memset(&uwrap->ce->__isset, 0, sizeof (*(&uwrap->ce->__isset)))", "memset(&uwrap->ce->__set, 0, sizeof (*(&uwrap->ce->__set)))", "memset(&uwrap->ce->__tostring, 0, sizeof (*(&uwrap->ce->__tostring)))", "memset(&uwrap->ce->__unset, 0, sizeof (*(&uwrap->ce->__unset)))", "memset(&uwrap->ce->ce_flags, 0, sizeof (*(&uwrap->ce->ce_flags)))", "memset(&uwrap->ce->clone, 0, sizeof (*(&uwrap->ce->clone)))", "memset(&uwrap->ce->constants_table, 0, sizeof (*(&uwrap->ce->constants_table)))", "memset(&uwrap->ce->constructor, 0, sizeof (*(&uwrap->ce->constructor)))", "memset(&uwrap->ce->create_object, 0, sizeof (*(&uwrap->ce->create_object)))", "memset(&uwrap->ce->default_properties_count, 0, sizeof (*(&uwrap->ce->default_properties_count)))", "memset(&uwrap->ce->default_properties_table, 0, sizeof (*(&uwrap->ce->default_properties_table)))", "memset(&uwrap->ce->default_static_members_count, 0, sizeof (*(&uwrap->ce->default_static_members_count)))", "memset(&uwrap->ce->default_static_members_table, 0, sizeof (*(&uwrap->ce->default_static_members_table)))", "memset(&uwrap->ce->destructor, 0, sizeof (*(&uwrap->ce->destructor)))", "memset(&uwrap->ce->function_table, 0, sizeof (*(&uwrap->ce->function_table)))", "memset(&uwrap->ce->get_iterator, 0, sizeof (*(&uwrap->ce->get_iterator)))", "memset(&uwrap->ce->get_static_method, 0, sizeof (*(&uwrap->ce->get_static_method)))", "memset(&uwrap->ce->info, 0, sizeof (*(&uwrap->ce->info)))", "memset(&uwrap->ce->interface_gets_implemented, 0, sizeof (*(&uwrap->ce->interface_gets_implemented)))", "memset(&uwrap->ce->interfaces, 0, sizeof (*(&uwrap->ce->interfaces)))", "memset(&uwrap->ce->iterator_funcs, 0, sizeof (*(&uwrap->ce->iterator_funcs)))", "memset(&uwrap->ce->name, 0, sizeof (*(&uwrap->ce->name)))", "memset(&uwrap->ce->name_length, 0, sizeof (*(&uwrap->ce->name_length)))", "memset(&uwrap->ce->num_interfaces, 0, sizeof (*(&uwrap->ce->num_interfaces)))", "memset(&uwrap->ce->num_traits, 0, sizeof (*(&uwrap->ce->num_traits)))", "memset(&uwrap->ce->parent, 0, sizeof (*(&uwrap->ce->parent)))", "memset(&uwrap->ce->properties_info, 0, sizeof (*(&uwrap->ce->properties_info)))", "memset(&uwrap->ce->refcount, 0, sizeof (*(&uwrap->ce->refcount)))", "memset(&uwrap->ce->serialize, 0, sizeof (*(&uwrap->ce->serialize)))", "memset(&uwrap->ce->serialize_func, 0, sizeof (*(&uwrap->ce->serialize_func)))", "memset(&uwrap->ce->static_members_table, 0, sizeof (*(&uwrap->ce->static_members_table)))", "memset(&uwrap->ce->trait_aliases, 0, sizeof (*(&uwrap->ce->trait_aliases)))", "memset(&uwrap->ce->trait_precedences, 0, sizeof (*(&uwrap->ce->trait_precedences)))", "memset(&uwrap->ce->traits, 0, sizeof (*(&uwrap->ce->traits)))", "memset(&uwrap->ce->type, 0, sizeof (*(&uwrap->ce->type)))", "memset(&uwrap->ce->unserialize, 0, sizeof (*(&uwrap->ce->unserialize)))", "memset(&uwrap->ce->unserialize_func, 0, sizeof (*(&uwrap->ce->unserialize_func)))", "memset(&uwrap->classname, 0, sizeof (*(&uwrap->classname)))", "memset(&uwrap->protoname, 0, sizeof (*(&uwrap->protoname)))", "memset(&uwrap->wrapper, 0, sizeof (*(&uwrap->wrapper)))", "memset(&uwrap->wrapper.abstract, 0, sizeof (*(&uwrap->wrapper.abstract)))", "memset(&uwrap->wrapper.err_count, 0, sizeof (*(&uwrap->wrapper.err_count)))", "memset(&uwrap->wrapper.err_stack, 0, sizeof (*(&uwrap->wrapper.err_stack)))", "memset(&uwrap->wrapper.is_url, 0, sizeof (*(&uwrap->wrapper.is_url)))", "memset(&uwrap->wrapper.wops, 0, sizeof (*(&uwrap->wrapper.wops)))", "memset(&wrapper->abstract, 0, sizeof (*(&wrapper->abstract)))", "memset(&wrapper->err_count, 0, sizeof (*(&wrapper->err_count)))", "memset(&wrapper->err_stack, 0, sizeof (*(&wrapper->err_stack)))", "memset(&wrapper->is_url, 0, sizeof (*(&wrapper->is_url)))", "memset(&wrapper->wops, 0, sizeof (*(&wrapper->wops)))", "memset(core_globals.auto_append_file, 0, sizeof (*(core_globals.auto_append_file)))", "memset(core_globals.auto_prepend_file, 0, sizeof (*(core_globals.auto_prepend_file)))", "memset(core_globals.disable_classes, 0, sizeof (*(core_globals.disable_classes)))", "memset(core_globals.disable_functions, 0, sizeof (*(core_globals.disable_functions)))", "memset(core_globals.doc_root, 0, sizeof (*(core_globals.doc_root)))", "memset(core_globals.docref_ext, 0, sizeof (*(core_globals.docref_ext)))", "memset(core_globals.docref_root, 0, sizeof (*(core_globals.docref_root)))", "memset(core_globals.error_append_string, 0, sizeof (*(core_globals.error_append_string)))", "memset(core_globals.error_log, 0, sizeof (*(core_globals.error_log)))", "memset(core_globals.error_prepend_string, 0, sizeof (*(core_globals.error_prepend_string)))", "memset(core_globals.extension_dir, 0, sizeof (*(core_globals.extension_dir)))", "memset(core_globals.include_path, 0, sizeof (*(core_globals.include_path)))", "memset(core_globals.last_error_file, 0, sizeof (*(core_globals.last_error_file)))", "memset(core_globals.last_error_message, 0, sizeof (*(core_globals.last_error_message)))", "memset(core_globals.mail_log, 0, sizeof (*(core_globals.mail_log)))", "memset(core_globals.open_basedir, 0, sizeof (*(core_globals.open_basedir)))", "memset(core_globals.output_handler, 0, sizeof (*(core_globals.output_handler)))", "memset(core_globals.request_order, 0, sizeof (*(core_globals.request_order)))", "memset(core_globals.unserialize_callback_func, 0, sizeof (*(core_globals.unserialize_callback_func)))", "memset(core_globals.upload_tmp_dir, 0, sizeof (*(core_globals.upload_tmp_dir)))", "memset(core_globals.user_dir, 0, sizeof (*(core_globals.user_dir)))", "memset(core_globals.user_ini_filename, 0, sizeof (*(core_globals.user_ini_filename)))", "memset(core_globals.variables_order, 0, sizeof (*(core_globals.variables_order)))", "memset(file_globals.default_context, 0, sizeof (*(file_globals.default_context)))", "memset(file_globals.from_address, 0, sizeof (*(file_globals.from_address)))", "memset(file_globals.stream_filters, 0, sizeof (*(file_globals.stream_filters)))", "memset(file_globals.stream_wrappers, 0, sizeof (*(file_globals.stream_wrappers)))", "memset(file_globals.user_agent, 0, sizeof (*(file_globals.user_agent)))", "memset(file_globals.user_stream_current_filename, 0, sizeof (*(file_globals.user_stream_current_filename)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "memset(uwrap->ce, 0, sizeof (*(uwrap->ce)))", "memset(uwrap->ce->__call, 0, sizeof (*(uwrap->ce->__call)))", "memset(uwrap->ce->__callstatic, 0, sizeof (*(uwrap->ce->__callstatic)))", "memset(uwrap->ce->__get, 0, sizeof (*(uwrap->ce->__get)))", "memset(uwrap->ce->__isset, 0, sizeof (*(uwrap->ce->__isset)))", "memset(uwrap->ce->__set, 0, sizeof (*(uwrap->ce->__set)))", "memset(uwrap->ce->__tostring, 0, sizeof (*(uwrap->ce->__tostring)))", "memset(uwrap->ce->__unset, 0, sizeof (*(uwrap->ce->__unset)))", "memset(uwrap->ce->clone, 0, sizeof (*(uwrap->ce->clone)))", "memset(uwrap->ce->constructor, 0, sizeof (*(uwrap->ce->constructor)))", "memset(uwrap->ce->create_object, 0, sizeof (*(uwrap->ce->create_object)))", "memset(uwrap->ce->default_properties_table, 0, sizeof (*(uwrap->ce->default_properties_table)))", "memset(uwrap->ce->default_static_members_table, 0, sizeof (*(uwrap->ce->default_static_members_table)))", "memset(uwrap->ce->destructor, 0, sizeof (*(uwrap->ce->destructor)))", "memset(uwrap->ce->get_iterator, 0, sizeof (*(uwrap->ce->get_iterator)))", "memset(uwrap->ce->get_static_method, 0, sizeof (*(uwrap->ce->get_static_method)))", "memset(uwrap->ce->interface_gets_implemented, 0, sizeof (*(uwrap->ce->interface_gets_implemented)))", "memset(uwrap->ce->interfaces, 0, sizeof (*(uwrap->ce->interfaces)))", "memset(uwrap->ce->name, 0, sizeof (*(uwrap->ce->name)))", "memset(uwrap->ce->parent, 0, sizeof (*(uwrap->ce->parent)))", "memset(uwrap->ce->serialize, 0, sizeof (*(uwrap->ce->serialize)))", "memset(uwrap->ce->serialize_func, 0, sizeof (*(uwrap->ce->serialize_func)))", "memset(uwrap->ce->static_members_table, 0, sizeof (*(uwrap->ce->static_members_table)))", "memset(uwrap->ce->trait_aliases, 0, sizeof (*(uwrap->ce->trait_aliases)))", "memset(uwrap->ce->trait_precedences, 0, sizeof (*(uwrap->ce->trait_precedences)))", "memset(uwrap->ce->traits, 0, sizeof (*(uwrap->ce->traits)))", "memset(uwrap->ce->unserialize, 0, sizeof (*(uwrap->ce->unserialize)))", "memset(uwrap->ce->unserialize_func, 0, sizeof (*(uwrap->ce->unserialize_func)))", "memset(uwrap->classname, 0, sizeof (*(uwrap->classname)))", "memset(uwrap->protoname, 0, sizeof (*(uwrap->protoname)))", "memset(uwrap->wrapper.abstract, 0, sizeof (*(uwrap->wrapper.abstract)))", "memset(uwrap->wrapper.err_stack, 0, sizeof (*(uwrap->wrapper.err_stack)))", "memset(uwrap->wrapper.wops, 0, sizeof (*(uwrap->wrapper.wops)))", "memset(wrapper->abstract, 0, sizeof (*(wrapper->abstract)))", "memset(wrapper->err_stack, 0, sizeof (*(wrapper->err_stack)))", "memset(wrapper->wops, 0, sizeof (*(wrapper->wops)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-4)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (128)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (old_in_user_include)", "(file_globals.user_stream_current_filename) = (filename)", "(file_globals.user_stream_current_filename) = (mode)", "(filename)++", "(mode)++", "(zfilename)->is_ref__gc = (-1)", "(zfilename)->is_ref__gc = (-4)", "(zfilename)->is_ref__gc = (0)", "(zfilename)->is_ref__gc = (1)", "(zfilename)->is_ref__gc = (128)", "(zfilename)->is_ref__gc = (2)", "(zfilename)->is_ref__gc = (3)", "(zfilename)->is_ref__gc = (4)", "(zfilename)->is_ref__gc = (6)", "(zfilename)->is_ref__gc = (old_in_user_include)", "(zfilename)->refcount__gc = (-1)", "(zfilename)->refcount__gc = (-4)", "(zfilename)->refcount__gc = (0)", "(zfilename)->refcount__gc = (1)", "(zfilename)->refcount__gc = (128)", "(zfilename)->refcount__gc = (2)", "(zfilename)->refcount__gc = (3)", "(zfilename)->refcount__gc = (4)", "(zfilename)->refcount__gc = (6)", "(zfuncname)->is_ref__gc = (-1)", "(zfuncname)->is_ref__gc = (-4)", "(zfuncname)->is_ref__gc = (0)", "(zfuncname)->is_ref__gc = (1)", "(zfuncname)->is_ref__gc = (128)", "(zfuncname)->is_ref__gc = (2)", "(zfuncname)->is_ref__gc = (3)", "(zfuncname)->is_ref__gc = (4)", "(zfuncname)->is_ref__gc = (6)", "(zfuncname)->is_ref__gc = (old_in_user_include)", "(zfuncname)->refcount__gc = (-1)", "(zfuncname)->refcount__gc = (-4)", "(zfuncname)->refcount__gc = (0)", "(zfuncname)->refcount__gc = (1)", "(zfuncname)->refcount__gc = (128)", "(zfuncname)->refcount__gc = (2)", "(zfuncname)->refcount__gc = (3)", "(zfuncname)->refcount__gc = (4)", "(zfuncname)->refcount__gc = (6)", "(zmode)->is_ref__gc = (-1)", "(zmode)->is_ref__gc = (-4)", "(zmode)->is_ref__gc = (0)", "(zmode)->is_ref__gc = (1)", "(zmode)->is_ref__gc = (128)", "(zmode)->is_ref__gc = (2)", "(zmode)->is_ref__gc = (3)", "(zmode)->is_ref__gc = (4)", "(zmode)->is_ref__gc = (6)", "(zmode)->is_ref__gc = (old_in_user_include)", "(zmode)->refcount__gc = (-1)", "(zmode)->refcount__gc = (-4)", "(zmode)->refcount__gc = (0)", "(zmode)->refcount__gc = (1)", "(zmode)->refcount__gc = (128)", "(zmode)->refcount__gc = (2)", "(zmode)->refcount__gc = (3)", "(zmode)->refcount__gc = (4)", "(zmode)->refcount__gc = (6)", "(zopened)->is_ref__gc = (-1)", "(zopened)->is_ref__gc = (-4)", "(zopened)->is_ref__gc = (0)", "(zopened)->is_ref__gc = (1)", "(zopened)->is_ref__gc = (128)", "(zopened)->is_ref__gc = (2)", "(zopened)->is_ref__gc = (3)", "(zopened)->is_ref__gc = (4)", "(zopened)->is_ref__gc = (6)", "(zopened)->is_ref__gc = (old_in_user_include)", "(zopened)->refcount__gc = (-1)", "(zopened)->refcount__gc = (-4)", "(zopened)->refcount__gc = (0)", "(zopened)->refcount__gc = (1)", "(zopened)->refcount__gc = (128)", "(zopened)->refcount__gc = (2)", "(zopened)->refcount__gc = (3)", "(zopened)->refcount__gc = (4)", "(zopened)->refcount__gc = (6)", "(zoptions)->is_ref__gc = (-1)", "(zoptions)->is_ref__gc = (-4)", "(zoptions)->is_ref__gc = (0)", "(zoptions)->is_ref__gc = (1)", "(zoptions)->is_ref__gc = (128)", "(zoptions)->is_ref__gc = (2)", "(zoptions)->is_ref__gc = (3)", "(zoptions)->is_ref__gc = (4)", "(zoptions)->is_ref__gc = (6)", "(zoptions)->is_ref__gc = (old_in_user_include)", "(zoptions)->refcount__gc = (-1)", "(zoptions)->refcount__gc = (-4)", "(zoptions)->refcount__gc = (0)", "(zoptions)->refcount__gc = (1)", "(zoptions)->refcount__gc = (128)", "(zoptions)->refcount__gc = (2)", "(zoptions)->refcount__gc = (3)", "(zoptions)->refcount__gc = (4)", "(zoptions)->refcount__gc = (6)", "_convert_to_string(((zfilename)))", "_convert_to_string(((zfuncname)))", "_convert_to_string(((zmode)))", "_convert_to_string(((zopened)))", "_convert_to_string(((zoptions)))", "_convert_to_string(((zretval)))", "_efree(((us)))", "_efree(((uwrap)))", "_efree(((uwrap)->classname))", "_efree(((uwrap)->protoname))", "_efree(((zfilename)))", "_efree(((zfuncname)))", "_efree(((zmode)))", "_efree(((zopened)))", "_efree(((zoptions)))", "_efree(((zretval)))", "_object_init_ex(((us)->object), (uwrap->ce))", "_object_init_ex((us->object), ((uwrap)->ce))", "_zend_list_addref((context)->rsrc_id)", "_zval_copy_ctor_func((zfilename))", "_zval_copy_ctor_func((zfuncname))", "_zval_copy_ctor_func((zmode))", "_zval_copy_ctor_func((zopened))", "_zval_copy_ctor_func((zoptions))", "_zval_copy_ctor_func((zretval))", "_zval_dtor(((us)->object))", "_zval_dtor(((zfilename)))", "_zval_dtor(((zfuncname)))", "_zval_dtor(((zmode)))", "_zval_dtor(((zopened)))", "_zval_dtor(((zoptions)))", "_zval_dtor(((zretval)))", "_zval_dtor_func((zfilename))", "_zval_dtor_func((zfuncname))", "_zval_dtor_func((zmode))", "_zval_dtor_func((zopened))", "_zval_dtor_func((zoptions))", "_zval_dtor_func((zretval))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zfilename)))", "_zval_ptr_dtor((&(zfuncname)))", "_zval_ptr_dtor((&(zmode)))", "_zval_ptr_dtor((&(zopened)))", "_zval_ptr_dtor((&(zoptions)))", "_zval_ptr_dtor((&(zretval)))", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfilename), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zfuncname), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zmode), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zopened), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zoptions), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zretval), \"context\", strlen(\"context\") + 1)", "add_property_resource_ex((us)->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, (context)->rsrc_id)", "args[0] = &(zfilename)", "args[0] = &(zfuncname)", "args[0] = &(zmode)", "args[0] = &(zopened)", "args[0] = &(zoptions)", "args[0] = &(zretval)", "args[1] = &(zfilename)", "args[1] = &(zfuncname)", "args[1] = &(zmode)", "args[1] = &(zopened)", "args[1] = &(zoptions)", "args[1] = &(zretval)", "args[2] = &(zfilename)", "args[2] = &(zfuncname)", "args[2] = &(zmode)", "args[2] = &(zopened)", "args[2] = &(zoptions)", "args[2] = &(zretval)", "args[3] = &(zfilename)", "args[3] = &(zfuncname)", "args[3] = &(zmode)", "args[3] = &(zopened)", "args[3] = &(zoptions)", "args[3] = &(zretval)", "call_result = (-1)", "call_result = (-4)", "call_result = (0)", "call_result = (1)", "call_result = (128)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (call_result)", "call_result = (options)", "call_result = call_user_function_ex(((void *)0), &(us)->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfilename), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zfuncname), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zmode), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zopened), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zoptions), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, (zretval), &zretval, 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfilename), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zfuncname), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zmode), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zopened), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zoptions), 4, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &(zretval), 4, args, 0, ((void *)0))", "convert_to_boolean((zfilename))", "convert_to_boolean((zfuncname))", "convert_to_boolean((zmode))", "convert_to_boolean((zopened))", "convert_to_boolean((zoptions))", "convert_to_boolean((zretval))", "convert_to_long((zfilename))", "convert_to_long((zfuncname))", "convert_to_long((zmode))", "convert_to_long((zopened))", "convert_to_long((zoptions))", "convert_to_long((zretval))", "gc_remove_zval_from_buffer((zfilename))", "gc_remove_zval_from_buffer((zfuncname))", "gc_remove_zval_from_buffer((zmode))", "gc_remove_zval_from_buffer((zopened))", "gc_remove_zval_from_buffer((zoptions))", "gc_remove_zval_from_buffer((zretval))", "gc_zval_check_possible_root(((zfilename)))", "gc_zval_check_possible_root(((zfuncname)))", "gc_zval_check_possible_root(((zmode)))", "gc_zval_check_possible_root(((zopened)))", "gc_zval_check_possible_root(((zoptions)))", "gc_zval_check_possible_root(((zretval)))", "gc_zval_possible_root((zfilename))", "gc_zval_possible_root((zfuncname))", "gc_zval_possible_root((zmode))", "gc_zval_possible_root((zopened))", "gc_zval_possible_root((zoptions))", "gc_zval_possible_root((zretval))", "i_zval_ptr_dtor((zfilename))", "i_zval_ptr_dtor((zfuncname))", "i_zval_ptr_dtor((zmode))", "i_zval_ptr_dtor((zopened))", "i_zval_ptr_dtor((zoptions))", "i_zval_ptr_dtor((zretval))", "le_protocols = (-1)", "le_protocols = (-4)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (128)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (call_result)", "le_protocols = (options)", "old_in_user_include = (-1)", "old_in_user_include = (-4)", "old_in_user_include = (0)", "old_in_user_include = (1)", "old_in_user_include = (128)", "old_in_user_include = (2)", "old_in_user_include = (3)", "old_in_user_include = (4)", "old_in_user_include = (6)", "old_in_user_include = (old_in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"%s:// never existed, nothing to restore\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::mkdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rename is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::rmdir is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::unlink is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::url_stat is not implemented!\", (uwrap)->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", (uwrap)->ce->name, uwrap->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, (uwrap)->ce->constructor->common.function_name)", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Protocol %s:// is already defined.\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to restore original %s:// wrapper\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"Unable to unregister protocol %s://\", (mode))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (filename))", "php_error_docref0(((void *)0), (1 << 1L), \"class '%s' is undefined\", (mode))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (filename))", "php_error_docref0(((void *)0), (1 << 3L), \"%s:// was never changed, nothing to restore\", (mode))", "php_stream_wrapper_log_error((wrapper), options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error((wrapper), options, \"infinite recursion prevented\")", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", (us)->wrapper->classname)", "php_unregister_url_stream_wrapper_volatile((filename))", "php_unregister_url_stream_wrapper_volatile((mode))", "stream = (stream)", "stream = _php_stream_alloc((&php_stream_userspace_ops), ((us)), (0), (mode))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((filename)))", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), ((mode)))", "stream->wrapperdata = (us)->object", "stream->wrapperdata = (zfilename)", "stream->wrapperdata = (zfuncname)", "stream->wrapperdata = (zmode)", "stream->wrapperdata = (zopened)", "stream->wrapperdata = (zoptions)", "stream->wrapperdata = (zretval)", "us = (us)", "us->wrapper = (uwrap)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zfilename))", "zval_set_isref_p((zfuncname))", "zval_set_isref_p((zmode))", "zval_set_isref_p((zopened))", "zval_set_isref_p((zoptions))", "zval_set_isref_p((zretval))", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zfilename), 1)", "zval_set_refcount_p((zfuncname), 1)", "zval_set_refcount_p((zmode), 1)", "zval_set_refcount_p((zopened), 1)", "zval_set_refcount_p((zoptions), 1)", "zval_set_refcount_p((zretval), 1)", "zval_unset_isref_p((zfilename))", "zval_unset_isref_p((zfuncname))", "zval_unset_isref_p((zmode))", "zval_unset_isref_p((zopened))", "zval_unset_isref_p((zoptions))", "zval_unset_isref_p((zretval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(core_globals.in_user_include) = old_in_user_include", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(file_globals.user_stream_current_filename) = filename", "(zfilename)->is_ref__gc = 0", "(zfilename)->refcount__gc = 1", "(zfuncname)->is_ref__gc = 0", "(zfuncname)->refcount__gc = 1", "(zmode)->is_ref__gc = 0", "(zmode)->refcount__gc = 1", "(zopened)->is_ref__gc = 0", "(zopened)->refcount__gc = 1", "(zoptions)->is_ref__gc = 0", "(zoptions)->refcount__gc = 1", "_efree((us))", "_object_init_ex((us->object), (uwrap->ce))", "_zend_list_addref(context->rsrc_id)", "_zval_dtor((us->object))", "_zval_ptr_dtor((&us->object))", "_zval_ptr_dtor((&zfilename))", "_zval_ptr_dtor((&zfuncname))", "_zval_ptr_dtor((&zmode))", "_zval_ptr_dtor((&zopened))", "_zval_ptr_dtor((&zoptions))", "_zval_ptr_dtor((&zretval))", "add_property_null_ex(us->object, \"context\", strlen(\"context\") + 1)", "add_property_resource_ex(us->object, \"context\", strlen(\"context\") + 1, context->rsrc_id)", "args[0] = &zfilename", "args[1] = &zmode", "args[2] = &zoptions", "args[3] = &zopened", "call_result = call_user_function_ex(((void *)0), &us->object, zfuncname, &zretval, 4, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "old_in_user_include = (core_globals.in_user_include)", "php_error_docref0(((void *)0), (1 << 1L), \"Could not execute %s::%s()\", uwrap->ce->name, uwrap->ce->constructor->common.function_name)", "php_stream_wrapper_log_error(wrapper, options, \"\\\"%s::stream_open\\\" call failed\", us->wrapper->classname)", "php_stream_wrapper_log_error(wrapper, options, \"infinite recursion prevented\")", "stream = _php_stream_alloc((&php_stream_userspace_ops), (us), (0), (mode))", "stream->wrapperdata = us->object", "us = _emalloc((sizeof (*us)))", "us->wrapper = uwrap", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zval_add_ref(&stream->wrapperdata)", "zval_set_isref_p(us->object)", "zval_set_isref_p(zopened)", "zval_set_refcount_p(us->object, 1)", "zval_set_refcount_p(zopened, 1)", "if (__is_neg(\"\", \"L404\", 151, &(stream), sizeof (stream), &(old_in_user_include), sizeof (old_in_user_include), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(zfilename), sizeof (zfilename), &(zmode), sizeof (zmode), &(zoptions), sizeof (zoptions), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(us), sizeof (us), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	2,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	3,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	4,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	5,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	6,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	7,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	8,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	9,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	10,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	11,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	12,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	13,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	14,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	15,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	16,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	17,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	18,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	19,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	20,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	21,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	22,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	23,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	24,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	25,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	26,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	27,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	28,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	29,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	30,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	31,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	32,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	33,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	34,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	35,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	36,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	37,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	38,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	39,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	40,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	41,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	42,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	43,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	44,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	45,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	46,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	47,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	48,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	49,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	50,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	51,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	52,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	53,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	54,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	55,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	56,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	57,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	58,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	59,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	60,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	61,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	62,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	63,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	64,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	65,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	66,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	67,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	68,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	69,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	70,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	71,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	72,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	73,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	74,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	75,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	76,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	77,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	78,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	79,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	80,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	81,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	82,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	83,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	84,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	85,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	86,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	87,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	88,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	89,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	90,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	91,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	92,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	93,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	94,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	95,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	96,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	97,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	98,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	99,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	100,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	101,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	102,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	103,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	104,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	105,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	106,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	107,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	108,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	109,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	110,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	111,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	112,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	113,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	114,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	115,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	116,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	117,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	118,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	119,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	120,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	121,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	122,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	123,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	124,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	125,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	126,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	127,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	128,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	129,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	130,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	131,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	132,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	133,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	134,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	135,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	136,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	137,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	138,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	139,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	140,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	141,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	142,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	143,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	144,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	145,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	146,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	147,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	148,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	149,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	150,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	151,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	152,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	153,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	154,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	155,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	156,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	157,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	158,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	159,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	160,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	161,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	162,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	163,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	164,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	165,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	166,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	167,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	168,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	169,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	170,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	171,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	172,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	173,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	174,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	175,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	176,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	177,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	178,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	179,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	180,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	181,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	182,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	183,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	184,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	185,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	186,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	187,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	188,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	189,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	190,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	191,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	192,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	193,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	194,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	195,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	196,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	197,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	198,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	199,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	200,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	201,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	202,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	203,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	204,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	205,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	206,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	207,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	208,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	209,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	210,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	211,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	212,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	213,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	214,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	215,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	216,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	217,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	218,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	219,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	220,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	221,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	222,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	223,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	224,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	225,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	226,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	227,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	228,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	229,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	230,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	231,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	232,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	233,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	234,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	235,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	236,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	237,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	238,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	239,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	240,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	241,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	242,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	243,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	244,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	245,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	246,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	247,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	248,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	249,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	250,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	251,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	252,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	253,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	254,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	255,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	256,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	257,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	258,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	259,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	260,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	261,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	262,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	263,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	264,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	265,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	266,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	267,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	268,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	269,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	270,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	271,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	272,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	273,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	274,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	275,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	276,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	277,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	278,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	279,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	280,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	281,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	282,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	283,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	284,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	285,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	286,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	287,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	288,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	289,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	290,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	291,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	292,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	293,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	294,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	295,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	296,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	297,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	298,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	299,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	300,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	301,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	302,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	303,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	304,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	305,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	306,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	307,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	308,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	309,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	310,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	311,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	312,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	313,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	314,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	315,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	316,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	317,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	318,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	319,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	320,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	321,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	322,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	323,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	324,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	325,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	326,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	327,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	328,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	329,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	330,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	331,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	332,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	333,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	334,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	335,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	336,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	337,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	338,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	339,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	340,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	341,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	342,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	343,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	344,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	345,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	346,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	347,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	348,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	349,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	350,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	351,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	352,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	353,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	354,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	355,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	356,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	357,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	358,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	359,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	360,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	361,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	362,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	363,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	364,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	365,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	366,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	367,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	368,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	369,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	370,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	371,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	372,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	373,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	374,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	375,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	376,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	377,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	378,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	379,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	380,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	381,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	382,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	383,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	384,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	385,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	386,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	387,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	388,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	389,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	390,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	391,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	392,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	393,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	394,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	395,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	396,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	397,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	398,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	399,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	400,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	401,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	402,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	403,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	404,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	405,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	406,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	407,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	408,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	409,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	410,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	411,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	412,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	413,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	414,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	415,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	416,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	417,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	418,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	419,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	420,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	421,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	422,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	423,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	424,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	425,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	426,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	427,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	428,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	429,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	430,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	431,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	432,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	433,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	434,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	435,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	436,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	437,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	438,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	439,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	440,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	441,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	442,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	443,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	444,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	445,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	446,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	447,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	448,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	449,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	450,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	451,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	452,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	453,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	454,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	455,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	456,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	457,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	458,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	459,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	460,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	461,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	462,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	463,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	464,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	465,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	466,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	467,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	468,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	469,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	470,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	471,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	472,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	473,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	474,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	475,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	476,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	477,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	478,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	479,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	480,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	481,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	482,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	483,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	484,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	485,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	486,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	487,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	488,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	489,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	490,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	491,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	492,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	493,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	494,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	495,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	496,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	497,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	498,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	499,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	500,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	501,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	502,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	503,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	504,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	505,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	506,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	507,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	508,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	509,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	510,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	511,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	512,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	513,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	514,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	515,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	516,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	517,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	518,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	519,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	520,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	521,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	522,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	523,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	524,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	525,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	526,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	527,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	528,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	529,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	530,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	531,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	532,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	533,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	534,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	535,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	536,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	537,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	538,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	539,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	540,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	541,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	542,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	543,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	544,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	545,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	546,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	547,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	548,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	549,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	550,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	551,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	552,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	553,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	554,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	555,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	556,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	557,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	558,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	559,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	560,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	561,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	562,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	563,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	564,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	565,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	566,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	567,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	568,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	569,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	570,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	571,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	572,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	573,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	574,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	575,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	576,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	577,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	578,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	579,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	580,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	581,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	582,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	583,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	584,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	585,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	586,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	587,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	588,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	589,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	590,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	591,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	592,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	593,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	594,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	595,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	596,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	597,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	598,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	599,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	600,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	601,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	602,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	603,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	604,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	605,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	606,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	607,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	608,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	609,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	610,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	611,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	612,
									"scores":	[-6.1343208103552875]
								}, {
									"case":	613,
									"scores":	[-8.83638473315529, -8.18022932635529, -7.4036193003552873, -7.4036193003552873, -7.7977241601552878, -8.64034352015529, -8.64034352015529, -8.64034352015529, -8.64034352015529, -8.64034352015529, -8.64034352015529, -8.6774439201552873, -8.43140500635529, -8.64229412335529, -8.64229412335529, -8.39430460635529, -8.1413591233552864, -8.6774439201552873, -8.64034352015529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -8.7075157803552869, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.20845078035529, -8.91840489735529, -9.20845078035529, -9.41933989735529, -9.20845078035529, -9.41933989735529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -8.7075157803552869, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.41933989735529, -9.41933989735529, -9.20845078035529, -9.20845078035529, -8.91840489735529, -9.20845078035529, -9.41933989735529, -9.20845078035529, -9.41933989735529, -9.20845078035529]
								}]
						}, {
							"switch":	67,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	404,
							"begin_column":	2,
							"end_line":	404,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L404\", 151, &(stream), sizeof (stream), &(old_in_user_include), sizeof (old_in_user_include), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(core_globals.in_user_include), sizeof (core_globals.in_user_include), &(zfilename), sizeof (zfilename), &(zmode), sizeof (zmode), &(zoptions), sizeof (zoptions), &(zopened), sizeof (zopened), &(zfuncname), sizeof (zfuncname), &(zretval), sizeof (zretval), &(us), sizeof (us), &(wrapper), sizeof (wrapper), &(options), sizeof (options), &(opened_path), sizeof (opened_path), &(mode), sizeof (mode), &(call_result), sizeof (call_result), &(filename), sizeof (filename), &(context), sizeof (context), &(uwrap), sizeof (uwrap), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.allow_url_include), sizeof (core_globals.allow_url_include), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log), &(core_globals.magic_quotes_gpc), sizeof (core_globals.magic_quotes_gpc), &(core_globals.magic_quotes_runtime), sizeof (core_globals.magic_quotes_runtime), &(core_globals.magic_quotes_sybase), sizeof (core_globals.magic_quotes_sybase), &(core_globals.implicit_flush), sizeof (core_globals.implicit_flush), &(core_globals.output_buffering), sizeof (core_globals.output_buffering), &(core_globals.sql_safe_mode), sizeof (core_globals.sql_safe_mode), &(core_globals.enable_dl), sizeof (core_globals.enable_dl), &(core_globals.output_handler), sizeof (core_globals.output_handler), &(core_globals.unserialize_callback_func), sizeof (core_globals.unserialize_callback_func), &(core_globals.serialize_precision), sizeof (core_globals.serialize_precision), &(core_globals.memory_limit), sizeof (core_globals.memory_limit), &(core_globals.max_input_time), sizeof (core_globals.max_input_time), &(core_globals.track_errors), sizeof (core_globals.track_errors), &(core_globals.display_errors), sizeof (core_globals.display_errors), &(core_globals.display_startup_errors), sizeof (core_globals.display_startup_errors), &(core_globals.log_errors), sizeof (core_globals.log_errors), &(core_globals.log_errors_max_len), sizeof (core_globals.log_errors_max_len), &(core_globals.ignore_repeated_errors), sizeof (core_globals.ignore_repeated_errors), &(core_globals.ignore_repeated_source), sizeof (core_globals.ignore_repeated_source), &(core_globals.report_memleaks), sizeof (core_globals.report_memleaks), &(core_globals.error_log), sizeof (core_globals.error_log), &(core_globals.doc_root), sizeof (core_globals.doc_root), &(core_globals.user_dir), sizeof (core_globals.user_dir), &(core_globals.include_path), sizeof (core_globals.include_path), &(core_globals.open_basedir), sizeof (core_globals.open_basedir), &(core_globals.extension_dir), sizeof (core_globals.extension_dir), &(core_globals.upload_tmp_dir), sizeof (core_globals.upload_tmp_dir), &(core_globals.upload_max_filesize), sizeof (core_globals.upload_max_filesize), &(core_globals.error_append_string), sizeof (core_globals.error_append_string), &(core_globals.error_prepend_string), sizeof (core_globals.error_prepend_string), &(core_globals.auto_prepend_file), sizeof (core_globals.auto_prepend_file), &(core_globals.auto_append_file), sizeof (core_globals.auto_append_file), &(core_globals.variables_order), sizeof (core_globals.variables_order), &(core_globals.connection_status), sizeof (core_globals.connection_status), &(core_globals.ignore_user_abort), sizeof (core_globals.ignore_user_abort), &(core_globals.header_is_being_sent), sizeof (core_globals.header_is_being_sent), &(core_globals.expose_php), sizeof (core_globals.expose_php), &(core_globals.register_argc_argv), sizeof (core_globals.register_argc_argv), &(core_globals.auto_globals_jit), sizeof (core_globals.auto_globals_jit), &(core_globals.docref_root), sizeof (core_globals.docref_root), &(core_globals.docref_ext), sizeof (core_globals.docref_ext), &(core_globals.html_errors), sizeof (core_globals.html_errors), &(core_globals.xmlrpc_errors), sizeof (core_globals.xmlrpc_errors), &(core_globals.xmlrpc_error_number), sizeof (core_globals.xmlrpc_error_number), &(core_globals.modules_activated), sizeof (core_globals.modules_activated), &(core_globals.file_uploads), sizeof (core_globals.file_uploads), &(core_globals.during_request_startup), sizeof (core_globals.during_request_startup), &(core_globals.allow_url_fopen), sizeof (core_globals.allow_url_fopen), &(core_globals.enable_post_data_reading), sizeof (core_globals.enable_post_data_reading), &(core_globals.always_populate_raw_post_data), sizeof (core_globals.always_populate_raw_post_data), &(core_globals.report_zend_debug), sizeof (core_globals.report_zend_debug), &(core_globals.last_error_type), sizeof (core_globals.last_error_type), &(core_globals.last_error_message), sizeof (core_globals.last_error_message), &(core_globals.last_error_file), sizeof (core_globals.last_error_file), &(core_globals.last_error_lineno), sizeof (core_globals.last_error_lineno), &(core_globals.disable_functions), sizeof (core_globals.disable_functions), &(core_globals.disable_classes), sizeof (core_globals.disable_classes), &(core_globals.exit_on_timeout), sizeof (core_globals.exit_on_timeout), &(core_globals.max_input_nesting_level), sizeof (core_globals.max_input_nesting_level), &(core_globals.user_ini_filename), sizeof (core_globals.user_ini_filename), &(core_globals.user_ini_cache_ttl), sizeof (core_globals.user_ini_cache_ttl), &(core_globals.request_order), sizeof (core_globals.request_order), &(core_globals.mail_x_header), sizeof (core_globals.mail_x_header), &(core_globals.mail_log), sizeof (core_globals.mail_log), &(core_globals.in_error_log), sizeof (core_globals.in_error_log)))\n    return stream;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.25096197635529, -7.1217166803552878, -7.1364476303552875, -7.1364476303552875, -7.732183974355288, -8.2501677803552873, -8.2501677803552873, -8.2501677803552873, -8.2501677803552873, -8.2501677803552873, -8.2501677803552873, -8.54451858035529, -7.7866304803552877, -8.2558904803552871, -8.2558904803552871, -7.4922796803552876, -7.9338794503552874, -8.54451858035529, -8.2501677803552873, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -7.6951134603552873, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.01712449035529, -8.16437346035529, -8.01712449035529, -8.48638449035529, -8.01712449035529, -8.48638449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -7.6951134603552873, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.48638449035529, -8.48638449035529, -8.01712449035529, -8.01712449035529, -8.16437346035529, -8.01712449035529, -8.48638449035529, -8.01712449035529, -8.48638449035529, -8.01712449035529]
								}]
						}]
				}, {
					"line":	718,
					"switches":	[]
				}, {
					"line":	719,
					"switches":	[]
				}, {
					"line":	720,
					"switches":	[]
				}, {
					"line":	722,
					"switches":	[{
							"switch":	68,
							"types":	[[], [], [], [], [94, 95, 96], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], [], [], [], [], [], []],
							"begin_line":	723,
							"begin_column":	0,
							"end_line":	723,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (close_handle)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_efree((us))", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&us->object))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L723\", 3, &(stream), sizeof (stream), &(us), sizeof (us), &(retval), sizeof (retval)))\n    return 0;\n", "if (__is_neg(\"\", \"L723\", 3, &(stream), sizeof (stream), &(us), sizeof (us), &(retval), sizeof (retval)))\n    return 1;\n", "if (__is_neg(\"\", \"L723\", 3, &(stream), sizeof (stream), &(us), sizeof (us), &(retval), sizeof (retval)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.30600981033699]
								}, {
									"case":	2,
									"scores":	[-5.30600981033699]
								}, {
									"case":	3,
									"scores":	[-5.30600981033699]
								}, {
									"case":	4,
									"scores":	[-5.30600981033699]
								}, {
									"case":	5,
									"scores":	[-5.30600981033699]
								}, {
									"case":	6,
									"scores":	[-5.30600981033699]
								}, {
									"case":	7,
									"scores":	[-5.30600981033699]
								}, {
									"case":	8,
									"scores":	[-5.30600981033699]
								}, {
									"case":	9,
									"scores":	[-5.30600981033699]
								}, {
									"case":	10,
									"scores":	[-5.30600981033699]
								}, {
									"case":	11,
									"scores":	[-5.30600981033699]
								}, {
									"case":	12,
									"scores":	[-5.30600981033699]
								}, {
									"case":	13,
									"scores":	[-5.30600981033699]
								}, {
									"case":	14,
									"scores":	[-5.30600981033699]
								}, {
									"case":	15,
									"scores":	[-5.30600981033699]
								}, {
									"case":	16,
									"scores":	[-5.30600981033699]
								}, {
									"case":	17,
									"scores":	[-5.30600981033699]
								}, {
									"case":	18,
									"scores":	[-5.30600981033699]
								}, {
									"case":	19,
									"scores":	[-5.30600981033699]
								}, {
									"case":	20,
									"scores":	[-5.30600981033699]
								}, {
									"case":	21,
									"scores":	[-5.30600981033699]
								}, {
									"case":	22,
									"scores":	[-5.30600981033699]
								}, {
									"case":	23,
									"scores":	[-5.30600981033699]
								}, {
									"case":	24,
									"scores":	[-5.30600981033699]
								}, {
									"case":	25,
									"scores":	[-5.30600981033699]
								}, {
									"case":	26,
									"scores":	[-5.30600981033699]
								}, {
									"case":	27,
									"scores":	[-5.30600981033699]
								}, {
									"case":	28,
									"scores":	[-5.30600981033699]
								}, {
									"case":	29,
									"scores":	[-5.30600981033699]
								}, {
									"case":	30,
									"scores":	[-5.30600981033699]
								}, {
									"case":	31,
									"scores":	[-5.30600981033699]
								}, {
									"case":	32,
									"scores":	[-5.30600981033699]
								}, {
									"case":	33,
									"scores":	[-5.30600981033699]
								}, {
									"case":	34,
									"scores":	[-5.30600981033699]
								}, {
									"case":	35,
									"scores":	[-5.30600981033699]
								}, {
									"case":	36,
									"scores":	[-5.30600981033699]
								}, {
									"case":	37,
									"scores":	[-5.30600981033699]
								}, {
									"case":	38,
									"scores":	[-5.30600981033699]
								}, {
									"case":	39,
									"scores":	[-5.30600981033699]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-9.49804295553699, -10.06991411243699, -9.18789769153699]
								}, {
									"case":	95,
									"scores":	[-12.322511955536989, -12.894383112436991, -12.01236669153699]
								}, {
									"case":	96,
									"scores":	[-12.322511955536989, -12.894383112436991, -12.01236669153699]
								}]
						}, {
							"switch":	69,
							"types":	[[], [], [1], [], [], [], [3], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	723,
							"begin_column":	2,
							"end_line":	723,
							"end_column":	19,
							"patch_codes":	["if (!__is_neg(\"\", \"L723\", 3, &(stream), sizeof (stream), &(us), sizeof (us), &(retval), sizeof (retval)))\n    ((void)(0));\n", "{\n}\n", "((void)(0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.65700066083699, -6.82241141823699, -6.28590308033699]
								}, {
									"case":	2,
									"scores":	[-5.30600981033699]
								}, {
									"case":	3,
									"scores":	[-5.30600981033699]
								}]
						}]
				}, {
					"line":	724,
					"switches":	[{
							"switch":	70,
							"types":	[[], [], [], [], [94, 95, 96], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], [], [], [], [], [], []],
							"begin_line":	725,
							"begin_column":	0,
							"end_line":	725,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (close_handle)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_efree((us))", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&us->object))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L725\", 3, &(us), sizeof (us), &(stream), sizeof (stream), &(retval), sizeof (retval)))\n    return 0;\n", "if (__is_neg(\"\", \"L725\", 3, &(us), sizeof (us), &(stream), sizeof (stream), &(retval), sizeof (retval)))\n    return 1;\n", "if (__is_neg(\"\", \"L725\", 3, &(us), sizeof (us), &(stream), sizeof (stream), &(retval), sizeof (retval)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.28580710301947]
								}, {
									"case":	2,
									"scores":	[-5.28580710301947]
								}, {
									"case":	3,
									"scores":	[-5.28580710301947]
								}, {
									"case":	4,
									"scores":	[-5.28580710301947]
								}, {
									"case":	5,
									"scores":	[-5.28580710301947]
								}, {
									"case":	6,
									"scores":	[-5.28580710301947]
								}, {
									"case":	7,
									"scores":	[-5.28580710301947]
								}, {
									"case":	8,
									"scores":	[-5.28580710301947]
								}, {
									"case":	9,
									"scores":	[-5.28580710301947]
								}, {
									"case":	10,
									"scores":	[-5.28580710301947]
								}, {
									"case":	11,
									"scores":	[-5.28580710301947]
								}, {
									"case":	12,
									"scores":	[-5.28580710301947]
								}, {
									"case":	13,
									"scores":	[-5.28580710301947]
								}, {
									"case":	14,
									"scores":	[-5.28580710301947]
								}, {
									"case":	15,
									"scores":	[-5.28580710301947]
								}, {
									"case":	16,
									"scores":	[-5.28580710301947]
								}, {
									"case":	17,
									"scores":	[-5.28580710301947]
								}, {
									"case":	18,
									"scores":	[-5.28580710301947]
								}, {
									"case":	19,
									"scores":	[-5.28580710301947]
								}, {
									"case":	20,
									"scores":	[-5.28580710301947]
								}, {
									"case":	21,
									"scores":	[-5.28580710301947]
								}, {
									"case":	22,
									"scores":	[-5.28580710301947]
								}, {
									"case":	23,
									"scores":	[-5.28580710301947]
								}, {
									"case":	24,
									"scores":	[-5.28580710301947]
								}, {
									"case":	25,
									"scores":	[-5.28580710301947]
								}, {
									"case":	26,
									"scores":	[-5.28580710301947]
								}, {
									"case":	27,
									"scores":	[-5.28580710301947]
								}, {
									"case":	28,
									"scores":	[-5.28580710301947]
								}, {
									"case":	29,
									"scores":	[-5.28580710301947]
								}, {
									"case":	30,
									"scores":	[-5.28580710301947]
								}, {
									"case":	31,
									"scores":	[-5.28580710301947]
								}, {
									"case":	32,
									"scores":	[-5.28580710301947]
								}, {
									"case":	33,
									"scores":	[-5.28580710301947]
								}, {
									"case":	34,
									"scores":	[-5.28580710301947]
								}, {
									"case":	35,
									"scores":	[-5.28580710301947]
								}, {
									"case":	36,
									"scores":	[-5.28580710301947]
								}, {
									"case":	37,
									"scores":	[-5.28580710301947]
								}, {
									"case":	38,
									"scores":	[-5.28580710301947]
								}, {
									"case":	39,
									"scores":	[-5.28580710301947]
								}, {
									"case":	40,
									"scores":	[-5.28580710301947]
								}, {
									"case":	41,
									"scores":	[-5.28580710301947]
								}, {
									"case":	42,
									"scores":	[-5.28580710301947]
								}, {
									"case":	43,
									"scores":	[-5.28580710301947]
								}, {
									"case":	44,
									"scores":	[-5.28580710301947]
								}, {
									"case":	45,
									"scores":	[-5.28580710301947]
								}, {
									"case":	46,
									"scores":	[-5.28580710301947]
								}, {
									"case":	47,
									"scores":	[-5.28580710301947]
								}, {
									"case":	48,
									"scores":	[-5.28580710301947]
								}, {
									"case":	49,
									"scores":	[-5.28580710301947]
								}, {
									"case":	50,
									"scores":	[-5.28580710301947]
								}, {
									"case":	51,
									"scores":	[-5.28580710301947]
								}, {
									"case":	52,
									"scores":	[-5.28580710301947]
								}, {
									"case":	53,
									"scores":	[-5.28580710301947]
								}, {
									"case":	54,
									"scores":	[-5.28580710301947]
								}, {
									"case":	55,
									"scores":	[-5.28580710301947]
								}, {
									"case":	56,
									"scores":	[-5.28580710301947]
								}, {
									"case":	57,
									"scores":	[-5.28580710301947]
								}, {
									"case":	58,
									"scores":	[-5.28580710301947]
								}, {
									"case":	59,
									"scores":	[-5.28580710301947]
								}, {
									"case":	60,
									"scores":	[-5.28580710301947]
								}, {
									"case":	61,
									"scores":	[-5.28580710301947]
								}, {
									"case":	62,
									"scores":	[-5.28580710301947]
								}, {
									"case":	63,
									"scores":	[-5.28580710301947]
								}, {
									"case":	64,
									"scores":	[-5.28580710301947]
								}, {
									"case":	65,
									"scores":	[-5.28580710301947]
								}, {
									"case":	66,
									"scores":	[-5.28580710301947]
								}, {
									"case":	67,
									"scores":	[-5.28580710301947]
								}, {
									"case":	68,
									"scores":	[-5.28580710301947]
								}, {
									"case":	69,
									"scores":	[-5.28580710301947]
								}, {
									"case":	70,
									"scores":	[-5.28580710301947]
								}, {
									"case":	71,
									"scores":	[-5.28580710301947]
								}, {
									"case":	72,
									"scores":	[-5.28580710301947]
								}, {
									"case":	73,
									"scores":	[-5.28580710301947]
								}, {
									"case":	74,
									"scores":	[-5.28580710301947]
								}, {
									"case":	75,
									"scores":	[-5.28580710301947]
								}, {
									"case":	76,
									"scores":	[-5.28580710301947]
								}, {
									"case":	77,
									"scores":	[-5.28580710301947]
								}, {
									"case":	78,
									"scores":	[-5.28580710301947]
								}, {
									"case":	79,
									"scores":	[-5.28580710301947]
								}, {
									"case":	80,
									"scores":	[-5.28580710301947]
								}, {
									"case":	81,
									"scores":	[-5.28580710301947]
								}, {
									"case":	82,
									"scores":	[-5.28580710301947]
								}, {
									"case":	83,
									"scores":	[-5.28580710301947]
								}, {
									"case":	84,
									"scores":	[-5.28580710301947]
								}, {
									"case":	85,
									"scores":	[-5.28580710301947]
								}, {
									"case":	86,
									"scores":	[-5.28580710301947]
								}, {
									"case":	87,
									"scores":	[-5.28580710301947]
								}, {
									"case":	88,
									"scores":	[-5.28580710301947]
								}, {
									"case":	89,
									"scores":	[-5.28580710301947]
								}, {
									"case":	90,
									"scores":	[-5.28580710301947]
								}, {
									"case":	91,
									"scores":	[-5.28580710301947]
								}, {
									"case":	92,
									"scores":	[-5.28580710301947]
								}, {
									"case":	93,
									"scores":	[-5.28580710301947]
								}, {
									"case":	94,
									"scores":	[-9.81119240511947, -9.23932124821947, -8.92917598421947]
								}, {
									"case":	95,
									"scores":	[-12.635661405119471, -12.063790248219469, -11.75364498421947]
								}, {
									"case":	96,
									"scores":	[-12.635661405119471, -12.063790248219469, -11.75364498421947]
								}]
						}, {
							"switch":	71,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	725,
							"begin_column":	2,
							"end_line":	725,
							"end_column":	74,
							"patch_codes":	["if (!__is_neg(\"\", \"L725\", 3, &(us), sizeof (us), &(stream), sizeof (stream), &(retval), sizeof (retval)))\n    do {\n        const char *__s = (\"stream_close\");\n        int __l = sizeof (\"stream_close\") - 1;\n        zval *__z = (&func_name);\n        (*__z).value.str.len = __l;\n        (*__z).value.str.val = (0 ? _estrndup((__s), (__l)) : (char *)__s);\n        (*__z).type = 6;\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.43797271091947, -6.78129895351947, -5.95485047301947]
								}]
						}]
				}, {
					"line":	726,
					"switches":	[{
							"switch":	72,
							"types":	[[], [], [], [], [95, 96, 97], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [], [], [], [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], [], [], [], [], [], []],
							"begin_line":	727,
							"begin_column":	0,
							"end_line":	727,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us, 0, sizeof (*(us)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (close_handle)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_efree((us))", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&us->object))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L727\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 0;\n", "if (__is_neg(\"\", \"L727\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 1;\n", "if (__is_neg(\"\", \"L727\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	2,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	3,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	4,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	5,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	6,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	7,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	8,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	9,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	10,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	11,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	12,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	13,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	14,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	15,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	16,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	17,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	18,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	19,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	20,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	21,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	22,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	23,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	24,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	25,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	26,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	27,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	28,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	29,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	30,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	31,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	32,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	33,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	34,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	35,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	36,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	37,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	38,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	39,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	40,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	41,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	42,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	43,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	44,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	45,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	46,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	47,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	48,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	49,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	50,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	51,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	52,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	53,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	54,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	55,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	56,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	57,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	58,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	59,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	60,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	61,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	62,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	63,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	64,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	65,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	66,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	67,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	68,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	69,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	70,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	71,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	72,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	73,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	74,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	75,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	76,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	77,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	78,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	79,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	80,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	81,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	82,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	83,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	84,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	85,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	86,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	87,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	88,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	89,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	90,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	91,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	92,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	93,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	94,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	95,
									"scores":	[-9.6366761188968333, -9.43333862699683, -8.6191924529968329, -9.2050983969968332, -9.18929529699683]
								}, {
									"case":	96,
									"scores":	[-12.461145118896834, -12.257807626996833, -11.443661452996832, -12.029567396996832, -12.013764296996833]
								}, {
									"case":	97,
									"scores":	[-12.461145118896834, -12.257807626996833, -11.443661452996832, -12.029567396996832, -12.013764296996833]
								}]
						}, {
							"switch":	73,
							"types":	[[], [], [1], [], [], [], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [], [3, 4, 5], [], [], [], [], [], [], [], [2]],
							"begin_line":	727,
							"begin_column":	2,
							"end_line":	731,
							"end_column":	30,
							"patch_codes":	["if (!__is_neg(\"\", \"L727\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0));\n", "{\n}\n", "Debug(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "php_printf(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "printf(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &(&close_handle)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &(&func_name)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &(&retval)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &(&stream)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &(&us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &(func_name), &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(&close_handle), 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(&func_name), 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(&retval), 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(&stream), 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(&us), 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (0 * close_handle), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (close_handle != 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (close_handle + 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (close_handle - 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (close_handle == 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (func_name != 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (func_name == 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (retval != 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (retval == 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (stream != 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (stream == 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (us != 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (us == 0), ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (0 * close_handle), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (close_handle != 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (close_handle + 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (close_handle - 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (close_handle == 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (func_name != 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (func_name == 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (retval != 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (retval == 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (stream != 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (stream == 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (us != 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (us == 0), ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.113183258696834, -8.28645763179683, -7.7616128217968328, -8.58806130229683, -8.2629701217968332]
								}, {
									"case":	2,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	3,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	4,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	5,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	6,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	7,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	8,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	9,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	10,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	11,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	12,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	13,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	14,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	15,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	16,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	17,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	18,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	19,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	20,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	21,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	22,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	23,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	24,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	25,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	26,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	27,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	28,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	29,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	30,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	31,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	32,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	33,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	34,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	35,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	36,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	37,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	38,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	39,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	40,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	41,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	42,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	43,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	44,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	45,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	46,
									"scores":	[-5.1443881517968331]
								}, {
									"case":	47,
									"scores":	[-5.1443881517968331]
								}]
						}]
				}, {
					"line":	732,
					"switches":	[{
							"switch":	74,
							"types":	[[], [], [], [], [94, 95, 96], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], [], [], [], [], [], []],
							"begin_line":	733,
							"begin_column":	0,
							"end_line":	733,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (close_handle)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_efree((us))", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&us->object))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L733\", 3, &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 0;\n", "if (__is_neg(\"\", \"L733\", 3, &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 1;\n", "if (__is_neg(\"\", \"L733\", 3, &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	2,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	3,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	4,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	5,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	6,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	7,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	8,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	9,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	10,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	11,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	12,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	13,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	14,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	15,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	16,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	17,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	18,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	19,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	20,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	21,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	22,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	23,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	24,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	25,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	26,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	27,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	28,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	29,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	30,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	31,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	32,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	33,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	34,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	35,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	36,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	37,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	38,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	39,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	40,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	41,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	42,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	43,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	44,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	45,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	46,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	47,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	48,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	49,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	50,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	51,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	52,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	53,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	54,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	55,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	56,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	57,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	58,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	59,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	60,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	61,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	62,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	63,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	64,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	65,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	66,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	67,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	68,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	69,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	70,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	71,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	72,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	73,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	74,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	75,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	76,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	77,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	78,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	79,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	80,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	81,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	82,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	83,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	84,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	85,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	86,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	87,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	88,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	89,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	90,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	91,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	92,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	93,
									"scores":	[-4.8413475420340415]
								}, {
									"case":	94,
									"scores":	[-9.1480853832340436, -11.066427437134044, -9.54041198723404]
								}, {
									"case":	95,
									"scores":	[-11.972554383234042, -13.890896437134044, -12.364880987234041]
								}, {
									"case":	96,
									"scores":	[-11.972554383234042, -13.890896437134044, -12.364880987234041]
								}]
						}, {
							"switch":	75,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	733,
							"begin_column":	2,
							"end_line":	734,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L733\", 3, &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    _zval_ptr_dtor((&retval));\n", "if ((retval) || __is_neg(\"\", \"L733\", 3, &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    _zval_ptr_dtor((&retval));\n", "if ((retval) && !__is_neg(\"\", \"L733\", 3, &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    _zval_ptr_dtor((&retval));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2766162064281454, -5.6290591198281454, -5.5360883824281455]
								}, {
									"case":	2,
									"scores":	[-5.1468496594281454, -6.4992925728281463, -6.4063218354281464]
								}, {
									"case":	3,
									"scores":	[-5.1468496594281454, -6.4992925728281463, -6.4063218354281464]
								}]
						}, {
							"switch":	76,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	733,
							"begin_column":	2,
							"end_line":	734,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L733\", 3, &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    if (retval)\n        _zval_ptr_dtor((&retval));\n", "if (!__is_neg(\"\", \"L733\", 3, &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)) && (retval))\n    _zval_ptr_dtor((&retval));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5724723360340418, -7.9249152494340418, -7.8319445120340418]
								}, {
									"case":	2,
									"scores":	[-6.5724723360340418, -7.9249152494340418, -7.8319445120340418]
								}]
						}]
				}, {
					"line":	735,
					"switches":	[{
							"switch":	77,
							"types":	[[], [], [], [], [95, 96, 97], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [], [], [], [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], [], [], [], [], [], []],
							"begin_line":	736,
							"begin_column":	0,
							"end_line":	736,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us, 0, sizeof (*(us)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (close_handle)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_efree((us))", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&us->object))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L736\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 0;\n", "if (__is_neg(\"\", \"L736\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 1;\n", "if (__is_neg(\"\", \"L736\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.821144834716522]
								}, {
									"case":	2,
									"scores":	[-4.821144834716522]
								}, {
									"case":	3,
									"scores":	[-4.821144834716522]
								}, {
									"case":	4,
									"scores":	[-4.821144834716522]
								}, {
									"case":	5,
									"scores":	[-4.821144834716522]
								}, {
									"case":	6,
									"scores":	[-4.821144834716522]
								}, {
									"case":	7,
									"scores":	[-4.821144834716522]
								}, {
									"case":	8,
									"scores":	[-4.821144834716522]
								}, {
									"case":	9,
									"scores":	[-4.821144834716522]
								}, {
									"case":	10,
									"scores":	[-4.821144834716522]
								}, {
									"case":	11,
									"scores":	[-4.821144834716522]
								}, {
									"case":	12,
									"scores":	[-4.821144834716522]
								}, {
									"case":	13,
									"scores":	[-4.821144834716522]
								}, {
									"case":	14,
									"scores":	[-4.821144834716522]
								}, {
									"case":	15,
									"scores":	[-4.821144834716522]
								}, {
									"case":	16,
									"scores":	[-4.821144834716522]
								}, {
									"case":	17,
									"scores":	[-4.821144834716522]
								}, {
									"case":	18,
									"scores":	[-4.821144834716522]
								}, {
									"case":	19,
									"scores":	[-4.821144834716522]
								}, {
									"case":	20,
									"scores":	[-4.821144834716522]
								}, {
									"case":	21,
									"scores":	[-4.821144834716522]
								}, {
									"case":	22,
									"scores":	[-4.821144834716522]
								}, {
									"case":	23,
									"scores":	[-4.821144834716522]
								}, {
									"case":	24,
									"scores":	[-4.821144834716522]
								}, {
									"case":	25,
									"scores":	[-4.821144834716522]
								}, {
									"case":	26,
									"scores":	[-4.821144834716522]
								}, {
									"case":	27,
									"scores":	[-4.821144834716522]
								}, {
									"case":	28,
									"scores":	[-4.821144834716522]
								}, {
									"case":	29,
									"scores":	[-4.821144834716522]
								}, {
									"case":	30,
									"scores":	[-4.821144834716522]
								}, {
									"case":	31,
									"scores":	[-4.821144834716522]
								}, {
									"case":	32,
									"scores":	[-4.821144834716522]
								}, {
									"case":	33,
									"scores":	[-4.821144834716522]
								}, {
									"case":	34,
									"scores":	[-4.821144834716522]
								}, {
									"case":	35,
									"scores":	[-4.821144834716522]
								}, {
									"case":	36,
									"scores":	[-4.821144834716522]
								}, {
									"case":	37,
									"scores":	[-4.821144834716522]
								}, {
									"case":	38,
									"scores":	[-4.821144834716522]
								}, {
									"case":	39,
									"scores":	[-4.821144834716522]
								}, {
									"case":	40,
									"scores":	[-4.821144834716522]
								}, {
									"case":	41,
									"scores":	[-4.821144834716522]
								}, {
									"case":	42,
									"scores":	[-4.821144834716522]
								}, {
									"case":	43,
									"scores":	[-4.821144834716522]
								}, {
									"case":	44,
									"scores":	[-4.821144834716522]
								}, {
									"case":	45,
									"scores":	[-4.821144834716522]
								}, {
									"case":	46,
									"scores":	[-4.821144834716522]
								}, {
									"case":	47,
									"scores":	[-4.821144834716522]
								}, {
									"case":	48,
									"scores":	[-4.821144834716522]
								}, {
									"case":	49,
									"scores":	[-4.821144834716522]
								}, {
									"case":	50,
									"scores":	[-4.821144834716522]
								}, {
									"case":	51,
									"scores":	[-4.821144834716522]
								}, {
									"case":	52,
									"scores":	[-4.821144834716522]
								}, {
									"case":	53,
									"scores":	[-4.821144834716522]
								}, {
									"case":	54,
									"scores":	[-4.821144834716522]
								}, {
									"case":	55,
									"scores":	[-4.821144834716522]
								}, {
									"case":	56,
									"scores":	[-4.821144834716522]
								}, {
									"case":	57,
									"scores":	[-4.821144834716522]
								}, {
									"case":	58,
									"scores":	[-4.821144834716522]
								}, {
									"case":	59,
									"scores":	[-4.821144834716522]
								}, {
									"case":	60,
									"scores":	[-4.821144834716522]
								}, {
									"case":	61,
									"scores":	[-4.821144834716522]
								}, {
									"case":	62,
									"scores":	[-4.821144834716522]
								}, {
									"case":	63,
									"scores":	[-4.821144834716522]
								}, {
									"case":	64,
									"scores":	[-4.821144834716522]
								}, {
									"case":	65,
									"scores":	[-4.821144834716522]
								}, {
									"case":	66,
									"scores":	[-4.821144834716522]
								}, {
									"case":	67,
									"scores":	[-4.821144834716522]
								}, {
									"case":	68,
									"scores":	[-4.821144834716522]
								}, {
									"case":	69,
									"scores":	[-4.821144834716522]
								}, {
									"case":	70,
									"scores":	[-4.821144834716522]
								}, {
									"case":	71,
									"scores":	[-4.821144834716522]
								}, {
									"case":	72,
									"scores":	[-4.821144834716522]
								}, {
									"case":	73,
									"scores":	[-4.821144834716522]
								}, {
									"case":	74,
									"scores":	[-4.821144834716522]
								}, {
									"case":	75,
									"scores":	[-4.821144834716522]
								}, {
									"case":	76,
									"scores":	[-4.821144834716522]
								}, {
									"case":	77,
									"scores":	[-4.821144834716522]
								}, {
									"case":	78,
									"scores":	[-4.821144834716522]
								}, {
									"case":	79,
									"scores":	[-4.821144834716522]
								}, {
									"case":	80,
									"scores":	[-4.821144834716522]
								}, {
									"case":	81,
									"scores":	[-4.821144834716522]
								}, {
									"case":	82,
									"scores":	[-4.821144834716522]
								}, {
									"case":	83,
									"scores":	[-4.821144834716522]
								}, {
									"case":	84,
									"scores":	[-4.821144834716522]
								}, {
									"case":	85,
									"scores":	[-4.821144834716522]
								}, {
									"case":	86,
									"scores":	[-4.821144834716522]
								}, {
									"case":	87,
									"scores":	[-4.821144834716522]
								}, {
									"case":	88,
									"scores":	[-4.821144834716522]
								}, {
									"case":	89,
									"scores":	[-4.821144834716522]
								}, {
									"case":	90,
									"scores":	[-4.821144834716522]
								}, {
									"case":	91,
									"scores":	[-4.821144834716522]
								}, {
									"case":	92,
									"scores":	[-4.821144834716522]
								}, {
									"case":	93,
									"scores":	[-4.821144834716522]
								}, {
									"case":	94,
									"scores":	[-4.821144834716522]
								}, {
									"case":	95,
									"scores":	[-9.78910374181652, -8.69315194991652, -7.63496244591652, -8.27133237991652, -8.79079297991652]
								}, {
									"case":	96,
									"scores":	[-12.613572741816522, -11.517620949916521, -10.459431445916522, -11.095801379916523, -11.615261979916522]
								}, {
									"case":	97,
									"scores":	[-12.613572741816522, -11.517620949916521, -10.459431445916522, -11.095801379916523, -11.615261979916522]
								}]
						}, {
							"switch":	78,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13], [], [6, 7], [], [], [], [], [2, 3, 4], [], [], [5]],
							"begin_line":	736,
							"begin_column":	2,
							"end_line":	736,
							"end_column":	27,
							"patch_codes":	["if (!__is_neg(\"\", \"L736\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    _zval_ptr_dtor((&us->object));\n", "zval_update_constant((&us->object), 0)", "zval_update_constant_inline_change((&us->object), 0)", "zval_update_constant_no_inline_change((&us->object), 0)", "{\n}\n", "_zval_internal_ptr_dtor((&us->object))", "zval_add_ref((&us->object))", "_zval_ptr_dtor((&(&close_handle)->object))", "_zval_ptr_dtor((&(&func_name)->object))", "_zval_ptr_dtor((&(&retval)->object))", "_zval_ptr_dtor((&(&stream)->object))", "_zval_ptr_dtor((&(&us)->object))", "_zval_ptr_dtor((&(us)->object))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2931528042165219, -6.0997087387165223, -6.030214828716522, -6.8343361047165221, -6.7510324147165219]
								}, {
									"case":	2,
									"scores":	[-4.821144834716522]
								}, {
									"case":	3,
									"scores":	[-4.821144834716522]
								}, {
									"case":	4,
									"scores":	[-4.821144834716522]
								}, {
									"case":	5,
									"scores":	[-4.821144834716522]
								}, {
									"case":	6,
									"scores":	[-4.821144834716522]
								}, {
									"case":	7,
									"scores":	[-4.821144834716522]
								}, {
									"case":	8,
									"scores":	[-4.821144834716522]
								}, {
									"case":	9,
									"scores":	[-4.821144834716522]
								}, {
									"case":	10,
									"scores":	[-4.821144834716522]
								}, {
									"case":	11,
									"scores":	[-4.821144834716522]
								}, {
									"case":	12,
									"scores":	[-4.821144834716522]
								}, {
									"case":	13,
									"scores":	[-4.821144834716522]
								}]
						}]
				}, {
					"line":	737,
					"switches":	[{
							"switch":	79,
							"types":	[[], [], [], [], [95, 96, 97], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [], [], [], [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], [], [], [], [], [], []],
							"begin_line":	738,
							"begin_column":	0,
							"end_line":	738,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us, 0, sizeof (*(us)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (close_handle)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_efree((us))", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&us->object))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L738\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 0;\n", "if (__is_neg(\"\", \"L738\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 1;\n", "if (__is_neg(\"\", \"L738\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	2,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	3,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	4,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	5,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	6,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	7,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	8,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	9,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	10,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	11,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	12,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	13,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	14,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	15,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	16,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	17,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	18,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	19,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	20,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	21,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	22,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	23,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	24,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	25,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	26,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	27,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	28,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	29,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	30,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	31,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	32,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	33,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	34,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	35,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	36,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	37,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	38,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	39,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	40,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	41,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	42,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	43,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	44,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	45,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	46,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	47,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	48,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	49,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	50,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	51,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	52,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	53,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	54,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	55,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	56,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	57,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	58,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	59,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	60,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	61,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	62,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	63,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	64,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	65,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	66,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	67,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	68,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	69,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	70,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	71,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	72,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	73,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	74,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	75,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	76,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	77,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	78,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	79,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	80,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	81,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	82,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	83,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	84,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	85,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	86,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	87,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	88,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	89,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	90,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	91,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	92,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	93,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	94,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	95,
									"scores":	[-7.3023972435990032, -7.8216519125990018, -7.0075057385990016, -7.6438756725990027, -8.163336272599]
								}, {
									"case":	96,
									"scores":	[-10.126866243599004, -10.646120912599, -9.831974738599, -10.468344672599, -10.987805272599003]
								}, {
									"case":	97,
									"scores":	[-10.126866243599004, -10.646120912599, -9.831974738599, -10.468344672599, -10.987805272599003]
								}]
						}, {
							"switch":	80,
							"types":	[[], [], [1], [], [], [], [41, 42, 43, 44, 45, 46], [], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [], [], [30]],
							"begin_line":	738,
							"begin_column":	2,
							"end_line":	738,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L738\", 5, &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    _efree((us));\n", "__zend_realloc((us), 0)", "__zend_realloc((us), 1)", "__zend_realloc((us), 6)", "bzero((us), 0)", "bzero((us), 1)", "bzero((us), 6)", "dlsym((us), 0)", "explicit_bzero((us), 0)", "explicit_bzero((us), 1)", "explicit_bzero((us), 6)", "getentropy((us), 0)", "getentropy((us), 1)", "getentropy((us), 6)", "php_write((us), 0)", "php_write((us), 1)", "php_write((us), 6)", "realloc((us), 0)", "realloc((us), 1)", "realloc((us), 6)", "timer_gettime((us), 0)", "zend_add_to_list((us), 0)", "zend_init_list((us), 0)", "zend_list_insert((us), 0)", "zend_list_insert((us), 1)", "zend_list_insert((us), 6)", "zend_list_insert((us), close_handle)", "zend_list_insert((us), le_index_ptr)", "zend_list_insert((us), le_protocols)", "{\n}\n", "_zend_mem_block_size((us))", "brk((us))", "dlclose((us))", "free((us))", "list_entry_destructor((us))", "plist_entry_destructor((us))", "zend_vm_stack_free((us))", "zend_vm_stack_free_int((us))", "zend_vm_stack_push((us))", "zend_vm_stack_push_nocheck((us))", "_efree(((&close_handle)))", "_efree(((&func_name)))", "_efree(((&retval)))", "_efree(((&stream)))", "_efree(((&us)))", "_efree(((us)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0359181878990027, -6.4383665313990024, -5.9135217213990021, -6.7176429973990022, -6.6343393073990029]
								}, {
									"case":	2,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	3,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	4,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	5,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	6,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	7,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	8,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	9,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	10,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	11,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	12,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	13,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	14,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	15,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	16,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	17,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	18,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	19,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	20,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	21,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	22,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	23,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	24,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	25,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	26,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	27,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	28,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	29,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	30,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	31,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	32,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	33,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	34,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	35,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	36,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	37,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	38,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	39,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	40,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	41,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	42,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	43,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	44,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	45,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	46,
									"scores":	[-4.8009421273990025]
								}]
						}]
				}, {
					"line":	739,
					"switches":	[{
							"switch":	81,
							"types":	[[], [], [], [], [94, 95, 96], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], [], [], [], [], [], []],
							"begin_line":	740,
							"begin_column":	0,
							"end_line":	740,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (close_handle)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_efree((us))", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&us->object))", "call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L740\", 3, &(us), sizeof (us), &(retval), sizeof (retval), &(stream), sizeof (stream)))\n    return 0;\n", "if (__is_neg(\"\", \"L740\", 3, &(us), sizeof (us), &(retval), sizeof (retval), &(stream), sizeof (stream)))\n    return 1;\n", "if (__is_neg(\"\", \"L740\", 3, &(us), sizeof (us), &(retval), sizeof (retval), &(stream), sizeof (stream)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.780739420081483]
								}, {
									"case":	2,
									"scores":	[-4.780739420081483]
								}, {
									"case":	3,
									"scores":	[-4.780739420081483]
								}, {
									"case":	4,
									"scores":	[-4.780739420081483]
								}, {
									"case":	5,
									"scores":	[-4.780739420081483]
								}, {
									"case":	6,
									"scores":	[-4.780739420081483]
								}, {
									"case":	7,
									"scores":	[-4.780739420081483]
								}, {
									"case":	8,
									"scores":	[-4.780739420081483]
								}, {
									"case":	9,
									"scores":	[-4.780739420081483]
								}, {
									"case":	10,
									"scores":	[-4.780739420081483]
								}, {
									"case":	11,
									"scores":	[-4.780739420081483]
								}, {
									"case":	12,
									"scores":	[-4.780739420081483]
								}, {
									"case":	13,
									"scores":	[-4.780739420081483]
								}, {
									"case":	14,
									"scores":	[-4.780739420081483]
								}, {
									"case":	15,
									"scores":	[-4.780739420081483]
								}, {
									"case":	16,
									"scores":	[-4.780739420081483]
								}, {
									"case":	17,
									"scores":	[-4.780739420081483]
								}, {
									"case":	18,
									"scores":	[-4.780739420081483]
								}, {
									"case":	19,
									"scores":	[-4.780739420081483]
								}, {
									"case":	20,
									"scores":	[-4.780739420081483]
								}, {
									"case":	21,
									"scores":	[-4.780739420081483]
								}, {
									"case":	22,
									"scores":	[-4.780739420081483]
								}, {
									"case":	23,
									"scores":	[-4.780739420081483]
								}, {
									"case":	24,
									"scores":	[-4.780739420081483]
								}, {
									"case":	25,
									"scores":	[-4.780739420081483]
								}, {
									"case":	26,
									"scores":	[-4.780739420081483]
								}, {
									"case":	27,
									"scores":	[-4.780739420081483]
								}, {
									"case":	28,
									"scores":	[-4.780739420081483]
								}, {
									"case":	29,
									"scores":	[-4.780739420081483]
								}, {
									"case":	30,
									"scores":	[-4.780739420081483]
								}, {
									"case":	31,
									"scores":	[-4.780739420081483]
								}, {
									"case":	32,
									"scores":	[-4.780739420081483]
								}, {
									"case":	33,
									"scores":	[-4.780739420081483]
								}, {
									"case":	34,
									"scores":	[-4.780739420081483]
								}, {
									"case":	35,
									"scores":	[-4.780739420081483]
								}, {
									"case":	36,
									"scores":	[-4.780739420081483]
								}, {
									"case":	37,
									"scores":	[-4.780739420081483]
								}, {
									"case":	38,
									"scores":	[-4.780739420081483]
								}, {
									"case":	39,
									"scores":	[-4.780739420081483]
								}, {
									"case":	40,
									"scores":	[-4.780739420081483]
								}, {
									"case":	41,
									"scores":	[-4.780739420081483]
								}, {
									"case":	42,
									"scores":	[-4.780739420081483]
								}, {
									"case":	43,
									"scores":	[-4.780739420081483]
								}, {
									"case":	44,
									"scores":	[-4.780739420081483]
								}, {
									"case":	45,
									"scores":	[-4.780739420081483]
								}, {
									"case":	46,
									"scores":	[-4.780739420081483]
								}, {
									"case":	47,
									"scores":	[-4.780739420081483]
								}, {
									"case":	48,
									"scores":	[-4.780739420081483]
								}, {
									"case":	49,
									"scores":	[-4.780739420081483]
								}, {
									"case":	50,
									"scores":	[-4.780739420081483]
								}, {
									"case":	51,
									"scores":	[-4.780739420081483]
								}, {
									"case":	52,
									"scores":	[-4.780739420081483]
								}, {
									"case":	53,
									"scores":	[-4.780739420081483]
								}, {
									"case":	54,
									"scores":	[-4.780739420081483]
								}, {
									"case":	55,
									"scores":	[-4.780739420081483]
								}, {
									"case":	56,
									"scores":	[-4.780739420081483]
								}, {
									"case":	57,
									"scores":	[-4.780739420081483]
								}, {
									"case":	58,
									"scores":	[-4.780739420081483]
								}, {
									"case":	59,
									"scores":	[-4.780739420081483]
								}, {
									"case":	60,
									"scores":	[-4.780739420081483]
								}, {
									"case":	61,
									"scores":	[-4.780739420081483]
								}, {
									"case":	62,
									"scores":	[-4.780739420081483]
								}, {
									"case":	63,
									"scores":	[-4.780739420081483]
								}, {
									"case":	64,
									"scores":	[-4.780739420081483]
								}, {
									"case":	65,
									"scores":	[-4.780739420081483]
								}, {
									"case":	66,
									"scores":	[-4.780739420081483]
								}, {
									"case":	67,
									"scores":	[-4.780739420081483]
								}, {
									"case":	68,
									"scores":	[-4.780739420081483]
								}, {
									"case":	69,
									"scores":	[-4.780739420081483]
								}, {
									"case":	70,
									"scores":	[-4.780739420081483]
								}, {
									"case":	71,
									"scores":	[-4.780739420081483]
								}, {
									"case":	72,
									"scores":	[-4.780739420081483]
								}, {
									"case":	73,
									"scores":	[-4.780739420081483]
								}, {
									"case":	74,
									"scores":	[-4.780739420081483]
								}, {
									"case":	75,
									"scores":	[-4.780739420081483]
								}, {
									"case":	76,
									"scores":	[-4.780739420081483]
								}, {
									"case":	77,
									"scores":	[-4.780739420081483]
								}, {
									"case":	78,
									"scores":	[-4.780739420081483]
								}, {
									"case":	79,
									"scores":	[-4.780739420081483]
								}, {
									"case":	80,
									"scores":	[-4.780739420081483]
								}, {
									"case":	81,
									"scores":	[-4.780739420081483]
								}, {
									"case":	82,
									"scores":	[-4.780739420081483]
								}, {
									"case":	83,
									"scores":	[-4.780739420081483]
								}, {
									"case":	84,
									"scores":	[-4.780739420081483]
								}, {
									"case":	85,
									"scores":	[-4.780739420081483]
								}, {
									"case":	86,
									"scores":	[-4.780739420081483]
								}, {
									"case":	87,
									"scores":	[-4.780739420081483]
								}, {
									"case":	88,
									"scores":	[-4.780739420081483]
								}, {
									"case":	89,
									"scores":	[-4.780739420081483]
								}, {
									"case":	90,
									"scores":	[-4.780739420081483]
								}, {
									"case":	91,
									"scores":	[-4.780739420081483]
								}, {
									"case":	92,
									"scores":	[-4.780739420081483]
								}, {
									"case":	93,
									"scores":	[-4.780739420081483]
								}, {
									"case":	94,
									"scores":	[-7.891765183881482, -6.7371178698814829, -7.3734878038814831]
								}, {
									"case":	95,
									"scores":	[-10.716234183881483, -9.5615868698814843, -10.197956803881484]
								}, {
									"case":	96,
									"scores":	[-10.716234183881483, -9.5615868698814843, -10.197956803881484]
								}]
						}, {
							"switch":	82,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	740,
							"begin_column":	2,
							"end_line":	740,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L740\", 3, &(us), sizeof (us), &(retval), sizeof (retval), &(stream), sizeof (stream)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2140985265814823, -6.3735577140814828, -7.1776789900814828]
								}]
						}]
				}, {
					"line":	744,
					"switches":	[]
				}, {
					"line":	745,
					"switches":	[]
				}, {
					"line":	746,
					"switches":	[]
				}, {
					"line":	747,
					"switches":	[]
				}, {
					"line":	749,
					"switches":	[{
							"switch":	83,
							"types":	[[], [], [], [], [101, 102, 103, 104], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [], [], [], [], [], []],
							"begin_line":	750,
							"begin_column":	0,
							"end_line":	750,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_result = (-1)", "call_result = (0)", "call_result = (1)", "call_result = (6)", "call_result = (call_result)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (-1)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (call_result)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_zval_ptr_dtor((&retval))", "call_result = -1", "call_result = 0", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L750\", 4, &(stream), sizeof (stream), &(call_result), sizeof (call_result), &(us), sizeof (us), &(retval), sizeof (retval)))\n    return -1;\n", "if (__is_neg(\"\", \"L750\", 4, &(stream), sizeof (stream), &(call_result), sizeof (call_result), &(us), sizeof (us), &(retval), sizeof (retval)))\n    return 0;\n", "if (__is_neg(\"\", \"L750\", 4, &(stream), sizeof (stream), &(call_result), sizeof (call_result), &(us), sizeof (us), &(retval), sizeof (retval)))\n    return 1;\n", "if (__is_neg(\"\", \"L750\", 4, &(stream), sizeof (stream), &(call_result), sizeof (call_result), &(us), sizeof (us), &(retval), sizeof (retval)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6292531274173]
								}, {
									"case":	2,
									"scores":	[-5.6292531274173]
								}, {
									"case":	3,
									"scores":	[-5.6292531274173]
								}, {
									"case":	4,
									"scores":	[-5.6292531274173]
								}, {
									"case":	5,
									"scores":	[-5.6292531274173]
								}, {
									"case":	6,
									"scores":	[-5.6292531274173]
								}, {
									"case":	7,
									"scores":	[-5.6292531274173]
								}, {
									"case":	8,
									"scores":	[-5.6292531274173]
								}, {
									"case":	9,
									"scores":	[-5.6292531274173]
								}, {
									"case":	10,
									"scores":	[-5.6292531274173]
								}, {
									"case":	11,
									"scores":	[-5.6292531274173]
								}, {
									"case":	12,
									"scores":	[-5.6292531274173]
								}, {
									"case":	13,
									"scores":	[-5.6292531274173]
								}, {
									"case":	14,
									"scores":	[-5.6292531274173]
								}, {
									"case":	15,
									"scores":	[-5.6292531274173]
								}, {
									"case":	16,
									"scores":	[-5.6292531274173]
								}, {
									"case":	17,
									"scores":	[-5.6292531274173]
								}, {
									"case":	18,
									"scores":	[-5.6292531274173]
								}, {
									"case":	19,
									"scores":	[-5.6292531274173]
								}, {
									"case":	20,
									"scores":	[-5.6292531274173]
								}, {
									"case":	21,
									"scores":	[-5.6292531274173]
								}, {
									"case":	22,
									"scores":	[-5.6292531274173]
								}, {
									"case":	23,
									"scores":	[-5.6292531274173]
								}, {
									"case":	24,
									"scores":	[-5.6292531274173]
								}, {
									"case":	25,
									"scores":	[-5.6292531274173]
								}, {
									"case":	26,
									"scores":	[-5.6292531274173]
								}, {
									"case":	27,
									"scores":	[-5.6292531274173]
								}, {
									"case":	28,
									"scores":	[-5.6292531274173]
								}, {
									"case":	29,
									"scores":	[-5.6292531274173]
								}, {
									"case":	30,
									"scores":	[-5.6292531274173]
								}, {
									"case":	31,
									"scores":	[-5.6292531274173]
								}, {
									"case":	32,
									"scores":	[-5.6292531274173]
								}, {
									"case":	33,
									"scores":	[-5.6292531274173]
								}, {
									"case":	34,
									"scores":	[-5.6292531274173]
								}, {
									"case":	35,
									"scores":	[-5.6292531274173]
								}, {
									"case":	36,
									"scores":	[-5.6292531274173]
								}, {
									"case":	37,
									"scores":	[-5.6292531274173]
								}, {
									"case":	38,
									"scores":	[-5.6292531274173]
								}, {
									"case":	39,
									"scores":	[-5.6292531274173]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-12.6457852112173, -12.8120986974173, -12.6746193681173, -12.8022767742173]
								}, {
									"case":	102,
									"scores":	[-9.8213162112173, -9.9876296974173, -9.8501503681173, -9.9778077742173]
								}, {
									"case":	103,
									"scores":	[-12.6457852112173, -12.8120986974173, -12.6746193681173, -12.8022767742173]
								}, {
									"case":	104,
									"scores":	[-12.6457852112173, -12.8120986974173, -12.6746193681173, -12.8022767742173]
								}]
						}, {
							"switch":	84,
							"types":	[[], [], [1], [], [], [], [3], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	750,
							"begin_column":	2,
							"end_line":	750,
							"end_column":	19,
							"patch_codes":	["if (!__is_neg(\"\", \"L750\", 4, &(stream), sizeof (stream), &(call_result), sizeof (call_result), &(us), sizeof (us), &(retval), sizeof (retval)))\n    ((void)(0));\n", "{\n}\n", "((void)(0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3126439779173, -6.9844832514173, -7.3592802853173, -7.9712308464173]
								}, {
									"case":	2,
									"scores":	[-5.6292531274173]
								}, {
									"case":	3,
									"scores":	[-5.6292531274173]
								}]
						}]
				}, {
					"line":	751,
					"switches":	[{
							"switch":	85,
							"types":	[[], [], [], [], [101, 102, 103, 104], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [], [], [], [], [], []],
							"begin_line":	752,
							"begin_column":	0,
							"end_line":	752,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_result = (-1)", "call_result = (0)", "call_result = (1)", "call_result = (6)", "call_result = (call_result)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (-1)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (call_result)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_zval_ptr_dtor((&retval))", "call_result = -1", "call_result = 0", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L752\", 4, &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(retval), sizeof (retval)))\n    return -1;\n", "if (__is_neg(\"\", \"L752\", 4, &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(retval), sizeof (retval)))\n    return 0;\n", "if (__is_neg(\"\", \"L752\", 4, &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(retval), sizeof (retval)))\n    return 1;\n", "if (__is_neg(\"\", \"L752\", 4, &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(retval), sizeof (retval)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.60905042009978]
								}, {
									"case":	2,
									"scores":	[-5.60905042009978]
								}, {
									"case":	3,
									"scores":	[-5.60905042009978]
								}, {
									"case":	4,
									"scores":	[-5.60905042009978]
								}, {
									"case":	5,
									"scores":	[-5.60905042009978]
								}, {
									"case":	6,
									"scores":	[-5.60905042009978]
								}, {
									"case":	7,
									"scores":	[-5.60905042009978]
								}, {
									"case":	8,
									"scores":	[-5.60905042009978]
								}, {
									"case":	9,
									"scores":	[-5.60905042009978]
								}, {
									"case":	10,
									"scores":	[-5.60905042009978]
								}, {
									"case":	11,
									"scores":	[-5.60905042009978]
								}, {
									"case":	12,
									"scores":	[-5.60905042009978]
								}, {
									"case":	13,
									"scores":	[-5.60905042009978]
								}, {
									"case":	14,
									"scores":	[-5.60905042009978]
								}, {
									"case":	15,
									"scores":	[-5.60905042009978]
								}, {
									"case":	16,
									"scores":	[-5.60905042009978]
								}, {
									"case":	17,
									"scores":	[-5.60905042009978]
								}, {
									"case":	18,
									"scores":	[-5.60905042009978]
								}, {
									"case":	19,
									"scores":	[-5.60905042009978]
								}, {
									"case":	20,
									"scores":	[-5.60905042009978]
								}, {
									"case":	21,
									"scores":	[-5.60905042009978]
								}, {
									"case":	22,
									"scores":	[-5.60905042009978]
								}, {
									"case":	23,
									"scores":	[-5.60905042009978]
								}, {
									"case":	24,
									"scores":	[-5.60905042009978]
								}, {
									"case":	25,
									"scores":	[-5.60905042009978]
								}, {
									"case":	26,
									"scores":	[-5.60905042009978]
								}, {
									"case":	27,
									"scores":	[-5.60905042009978]
								}, {
									"case":	28,
									"scores":	[-5.60905042009978]
								}, {
									"case":	29,
									"scores":	[-5.60905042009978]
								}, {
									"case":	30,
									"scores":	[-5.60905042009978]
								}, {
									"case":	31,
									"scores":	[-5.60905042009978]
								}, {
									"case":	32,
									"scores":	[-5.60905042009978]
								}, {
									"case":	33,
									"scores":	[-5.60905042009978]
								}, {
									"case":	34,
									"scores":	[-5.60905042009978]
								}, {
									"case":	35,
									"scores":	[-5.60905042009978]
								}, {
									"case":	36,
									"scores":	[-5.60905042009978]
								}, {
									"case":	37,
									"scores":	[-5.60905042009978]
								}, {
									"case":	38,
									"scores":	[-5.60905042009978]
								}, {
									"case":	39,
									"scores":	[-5.60905042009978]
								}, {
									"case":	40,
									"scores":	[-5.60905042009978]
								}, {
									"case":	41,
									"scores":	[-5.60905042009978]
								}, {
									"case":	42,
									"scores":	[-5.60905042009978]
								}, {
									"case":	43,
									"scores":	[-5.60905042009978]
								}, {
									"case":	44,
									"scores":	[-5.60905042009978]
								}, {
									"case":	45,
									"scores":	[-5.60905042009978]
								}, {
									"case":	46,
									"scores":	[-5.60905042009978]
								}, {
									"case":	47,
									"scores":	[-5.60905042009978]
								}, {
									"case":	48,
									"scores":	[-5.60905042009978]
								}, {
									"case":	49,
									"scores":	[-5.60905042009978]
								}, {
									"case":	50,
									"scores":	[-5.60905042009978]
								}, {
									"case":	51,
									"scores":	[-5.60905042009978]
								}, {
									"case":	52,
									"scores":	[-5.60905042009978]
								}, {
									"case":	53,
									"scores":	[-5.60905042009978]
								}, {
									"case":	54,
									"scores":	[-5.60905042009978]
								}, {
									"case":	55,
									"scores":	[-5.60905042009978]
								}, {
									"case":	56,
									"scores":	[-5.60905042009978]
								}, {
									"case":	57,
									"scores":	[-5.60905042009978]
								}, {
									"case":	58,
									"scores":	[-5.60905042009978]
								}, {
									"case":	59,
									"scores":	[-5.60905042009978]
								}, {
									"case":	60,
									"scores":	[-5.60905042009978]
								}, {
									"case":	61,
									"scores":	[-5.60905042009978]
								}, {
									"case":	62,
									"scores":	[-5.60905042009978]
								}, {
									"case":	63,
									"scores":	[-5.60905042009978]
								}, {
									"case":	64,
									"scores":	[-5.60905042009978]
								}, {
									"case":	65,
									"scores":	[-5.60905042009978]
								}, {
									"case":	66,
									"scores":	[-5.60905042009978]
								}, {
									"case":	67,
									"scores":	[-5.60905042009978]
								}, {
									"case":	68,
									"scores":	[-5.60905042009978]
								}, {
									"case":	69,
									"scores":	[-5.60905042009978]
								}, {
									"case":	70,
									"scores":	[-5.60905042009978]
								}, {
									"case":	71,
									"scores":	[-5.60905042009978]
								}, {
									"case":	72,
									"scores":	[-5.60905042009978]
								}, {
									"case":	73,
									"scores":	[-5.60905042009978]
								}, {
									"case":	74,
									"scores":	[-5.60905042009978]
								}, {
									"case":	75,
									"scores":	[-5.60905042009978]
								}, {
									"case":	76,
									"scores":	[-5.60905042009978]
								}, {
									"case":	77,
									"scores":	[-5.60905042009978]
								}, {
									"case":	78,
									"scores":	[-5.60905042009978]
								}, {
									"case":	79,
									"scores":	[-5.60905042009978]
								}, {
									"case":	80,
									"scores":	[-5.60905042009978]
								}, {
									"case":	81,
									"scores":	[-5.60905042009978]
								}, {
									"case":	82,
									"scores":	[-5.60905042009978]
								}, {
									"case":	83,
									"scores":	[-5.60905042009978]
								}, {
									"case":	84,
									"scores":	[-5.60905042009978]
								}, {
									"case":	85,
									"scores":	[-5.60905042009978]
								}, {
									"case":	86,
									"scores":	[-5.60905042009978]
								}, {
									"case":	87,
									"scores":	[-5.60905042009978]
								}, {
									"case":	88,
									"scores":	[-5.60905042009978]
								}, {
									"case":	89,
									"scores":	[-5.60905042009978]
								}, {
									"case":	90,
									"scores":	[-5.60905042009978]
								}, {
									"case":	91,
									"scores":	[-5.60905042009978]
								}, {
									"case":	92,
									"scores":	[-5.60905042009978]
								}, {
									"case":	93,
									"scores":	[-5.60905042009978]
								}, {
									"case":	94,
									"scores":	[-5.60905042009978]
								}, {
									"case":	95,
									"scores":	[-5.60905042009978]
								}, {
									"case":	96,
									"scores":	[-5.60905042009978]
								}, {
									"case":	97,
									"scores":	[-5.60905042009978]
								}, {
									"case":	98,
									"scores":	[-5.60905042009978]
								}, {
									"case":	99,
									"scores":	[-5.60905042009978]
								}, {
									"case":	100,
									"scores":	[-5.60905042009978]
								}, {
									"case":	101,
									"scores":	[-12.55337699009978, -12.41589766079978, -12.387063503899782, -12.543555066899781]
								}, {
									"case":	102,
									"scores":	[-9.72890799009978, -9.59142866079978, -9.56259450389978, -9.71908606689978]
								}, {
									"case":	103,
									"scores":	[-12.55337699009978, -12.41589766079978, -12.387063503899782, -12.543555066899781]
								}, {
									"case":	104,
									"scores":	[-12.55337699009978, -12.41589766079978, -12.387063503899782, -12.543555066899781]
								}]
						}, {
							"switch":	86,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	752,
							"begin_column":	2,
							"end_line":	752,
							"end_column":	74,
							"patch_codes":	["if (!__is_neg(\"\", \"L752\", 4, &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(retval), sizeof (retval)))\n    do {\n        const char *__s = (\"stream_flush\");\n        int __l = sizeof (\"stream_flush\") - 1;\n        zval *__z = (&func_name);\n        (*__z).value.str.len = __l;\n        (*__z).value.str.val = (0 ? _estrndup((__s), (__l)) : (char *)__s);\n        (*__z).type = 6;\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.83122306509978, -6.33543158799978, -7.29244127059978, -7.0007682490997816]
								}]
						}]
				}, {
					"line":	753,
					"switches":	[{
							"switch":	87,
							"types":	[[], [], [], [], [102, 103, 104, 105], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [], [], [], [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [], [], [], [], [], []],
							"begin_line":	754,
							"begin_column":	0,
							"end_line":	754,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us, 0, sizeof (*(us)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_result = (-1)", "call_result = (0)", "call_result = (1)", "call_result = (6)", "call_result = (call_result)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (-1)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (call_result)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_zval_ptr_dtor((&retval))", "call_result = -1", "call_result = 0", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L754\", 6, &(call_result), sizeof (call_result), &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return -1;\n", "if (__is_neg(\"\", \"L754\", 6, &(call_result), sizeof (call_result), &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 0;\n", "if (__is_neg(\"\", \"L754\", 6, &(call_result), sizeof (call_result), &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 1;\n", "if (__is_neg(\"\", \"L754\", 6, &(call_result), sizeof (call_result), &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.467631468877145]
								}, {
									"case":	2,
									"scores":	[-5.467631468877145]
								}, {
									"case":	3,
									"scores":	[-5.467631468877145]
								}, {
									"case":	4,
									"scores":	[-5.467631468877145]
								}, {
									"case":	5,
									"scores":	[-5.467631468877145]
								}, {
									"case":	6,
									"scores":	[-5.467631468877145]
								}, {
									"case":	7,
									"scores":	[-5.467631468877145]
								}, {
									"case":	8,
									"scores":	[-5.467631468877145]
								}, {
									"case":	9,
									"scores":	[-5.467631468877145]
								}, {
									"case":	10,
									"scores":	[-5.467631468877145]
								}, {
									"case":	11,
									"scores":	[-5.467631468877145]
								}, {
									"case":	12,
									"scores":	[-5.467631468877145]
								}, {
									"case":	13,
									"scores":	[-5.467631468877145]
								}, {
									"case":	14,
									"scores":	[-5.467631468877145]
								}, {
									"case":	15,
									"scores":	[-5.467631468877145]
								}, {
									"case":	16,
									"scores":	[-5.467631468877145]
								}, {
									"case":	17,
									"scores":	[-5.467631468877145]
								}, {
									"case":	18,
									"scores":	[-5.467631468877145]
								}, {
									"case":	19,
									"scores":	[-5.467631468877145]
								}, {
									"case":	20,
									"scores":	[-5.467631468877145]
								}, {
									"case":	21,
									"scores":	[-5.467631468877145]
								}, {
									"case":	22,
									"scores":	[-5.467631468877145]
								}, {
									"case":	23,
									"scores":	[-5.467631468877145]
								}, {
									"case":	24,
									"scores":	[-5.467631468877145]
								}, {
									"case":	25,
									"scores":	[-5.467631468877145]
								}, {
									"case":	26,
									"scores":	[-5.467631468877145]
								}, {
									"case":	27,
									"scores":	[-5.467631468877145]
								}, {
									"case":	28,
									"scores":	[-5.467631468877145]
								}, {
									"case":	29,
									"scores":	[-5.467631468877145]
								}, {
									"case":	30,
									"scores":	[-5.467631468877145]
								}, {
									"case":	31,
									"scores":	[-5.467631468877145]
								}, {
									"case":	32,
									"scores":	[-5.467631468877145]
								}, {
									"case":	33,
									"scores":	[-5.467631468877145]
								}, {
									"case":	34,
									"scores":	[-5.467631468877145]
								}, {
									"case":	35,
									"scores":	[-5.467631468877145]
								}, {
									"case":	36,
									"scores":	[-5.467631468877145]
								}, {
									"case":	37,
									"scores":	[-5.467631468877145]
								}, {
									"case":	38,
									"scores":	[-5.467631468877145]
								}, {
									"case":	39,
									"scores":	[-5.467631468877145]
								}, {
									"case":	40,
									"scores":	[-5.467631468877145]
								}, {
									"case":	41,
									"scores":	[-5.467631468877145]
								}, {
									"case":	42,
									"scores":	[-5.467631468877145]
								}, {
									"case":	43,
									"scores":	[-5.467631468877145]
								}, {
									"case":	44,
									"scores":	[-5.467631468877145]
								}, {
									"case":	45,
									"scores":	[-5.467631468877145]
								}, {
									"case":	46,
									"scores":	[-5.467631468877145]
								}, {
									"case":	47,
									"scores":	[-5.467631468877145]
								}, {
									"case":	48,
									"scores":	[-5.467631468877145]
								}, {
									"case":	49,
									"scores":	[-5.467631468877145]
								}, {
									"case":	50,
									"scores":	[-5.467631468877145]
								}, {
									"case":	51,
									"scores":	[-5.467631468877145]
								}, {
									"case":	52,
									"scores":	[-5.467631468877145]
								}, {
									"case":	53,
									"scores":	[-5.467631468877145]
								}, {
									"case":	54,
									"scores":	[-5.467631468877145]
								}, {
									"case":	55,
									"scores":	[-5.467631468877145]
								}, {
									"case":	56,
									"scores":	[-5.467631468877145]
								}, {
									"case":	57,
									"scores":	[-5.467631468877145]
								}, {
									"case":	58,
									"scores":	[-5.467631468877145]
								}, {
									"case":	59,
									"scores":	[-5.467631468877145]
								}, {
									"case":	60,
									"scores":	[-5.467631468877145]
								}, {
									"case":	61,
									"scores":	[-5.467631468877145]
								}, {
									"case":	62,
									"scores":	[-5.467631468877145]
								}, {
									"case":	63,
									"scores":	[-5.467631468877145]
								}, {
									"case":	64,
									"scores":	[-5.467631468877145]
								}, {
									"case":	65,
									"scores":	[-5.467631468877145]
								}, {
									"case":	66,
									"scores":	[-5.467631468877145]
								}, {
									"case":	67,
									"scores":	[-5.467631468877145]
								}, {
									"case":	68,
									"scores":	[-5.467631468877145]
								}, {
									"case":	69,
									"scores":	[-5.467631468877145]
								}, {
									"case":	70,
									"scores":	[-5.467631468877145]
								}, {
									"case":	71,
									"scores":	[-5.467631468877145]
								}, {
									"case":	72,
									"scores":	[-5.467631468877145]
								}, {
									"case":	73,
									"scores":	[-5.467631468877145]
								}, {
									"case":	74,
									"scores":	[-5.467631468877145]
								}, {
									"case":	75,
									"scores":	[-5.467631468877145]
								}, {
									"case":	76,
									"scores":	[-5.467631468877145]
								}, {
									"case":	77,
									"scores":	[-5.467631468877145]
								}, {
									"case":	78,
									"scores":	[-5.467631468877145]
								}, {
									"case":	79,
									"scores":	[-5.467631468877145]
								}, {
									"case":	80,
									"scores":	[-5.467631468877145]
								}, {
									"case":	81,
									"scores":	[-5.467631468877145]
								}, {
									"case":	82,
									"scores":	[-5.467631468877145]
								}, {
									"case":	83,
									"scores":	[-5.467631468877145]
								}, {
									"case":	84,
									"scores":	[-5.467631468877145]
								}, {
									"case":	85,
									"scores":	[-5.467631468877145]
								}, {
									"case":	86,
									"scores":	[-5.467631468877145]
								}, {
									"case":	87,
									"scores":	[-5.467631468877145]
								}, {
									"case":	88,
									"scores":	[-5.467631468877145]
								}, {
									"case":	89,
									"scores":	[-5.467631468877145]
								}, {
									"case":	90,
									"scores":	[-5.467631468877145]
								}, {
									"case":	91,
									"scores":	[-5.467631468877145]
								}, {
									"case":	92,
									"scores":	[-5.467631468877145]
								}, {
									"case":	93,
									"scores":	[-5.467631468877145]
								}, {
									"case":	94,
									"scores":	[-5.467631468877145]
								}, {
									"case":	95,
									"scores":	[-5.467631468877145]
								}, {
									"case":	96,
									"scores":	[-5.467631468877145]
								}, {
									"case":	97,
									"scores":	[-5.467631468877145]
								}, {
									"case":	98,
									"scores":	[-5.467631468877145]
								}, {
									"case":	99,
									"scores":	[-5.467631468877145]
								}, {
									"case":	100,
									"scores":	[-5.467631468877145]
								}, {
									"case":	101,
									"scores":	[-5.467631468877145]
								}, {
									"case":	102,
									"scores":	[-12.653535565877146, -11.998388921577146, -11.663002082677146, -11.858529735677145, -13.151229852677144, -13.135426752677144]
								}, {
									"case":	103,
									"scores":	[-9.8290665658771452, -9.173919921577145, -8.8385330826771451, -9.0340607356771443, -10.326760852677145, -10.310957752677144]
								}, {
									"case":	104,
									"scores":	[-12.653535565877146, -11.998388921577146, -11.663002082677146, -11.858529735677145, -13.151229852677144, -13.135426752677144]
								}, {
									"case":	105,
									"scores":	[-12.653535565877146, -11.998388921577146, -11.663002082677146, -11.858529735677145, -13.151229852677144, -13.135426752677144]
								}]
						}, {
							"switch":	88,
							"types":	[[], [], [1], [], [], [], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [3, 4, 5], [], [], [], [], [], [], [], [2]],
							"begin_line":	754,
							"begin_column":	2,
							"end_line":	758,
							"end_column":	30,
							"patch_codes":	["if (!__is_neg(\"\", \"L754\", 6, &(call_result), sizeof (call_result), &(us), sizeof (us), &(us->object), sizeof (us->object), &(retval), sizeof (retval), &(stream), sizeof (stream), &(us->wrapper), sizeof (us->wrapper)))\n    call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0));\n", "{\n}\n", "call_result = Debug(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = php_printf(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = printf(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = (-1)", "call_result = (0)", "call_result = (1)", "call_result = (6)", "call_result = (call_result)", "call_result = call_user_function_ex(((void *)0), &(&call_result)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&func_name)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&retval)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&stream)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(&us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &(func_name), &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(&call_result), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(&func_name), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(&retval), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(&stream), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(&us), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (0 * call_result), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (call_result != 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (call_result + 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (call_result - 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (call_result == 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (func_name != 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (func_name == 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (retval != 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (retval == 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (stream != 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (stream == 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (us != 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, (us == 0), ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (0 * call_result), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (call_result != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (call_result + 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (call_result - 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (call_result == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (func_name != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (func_name == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (retval != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (retval == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (stream != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (stream == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (us != 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), (us == 0), ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0141950898771448, -7.2359033388771454, -7.5003365488771445, -6.3814667478771447, -8.7756876193771447, -8.4505964388771453]
								}, {
									"case":	2,
									"scores":	[-5.467631468877145]
								}, {
									"case":	3,
									"scores":	[-5.467631468877145]
								}, {
									"case":	4,
									"scores":	[-5.467631468877145]
								}, {
									"case":	5,
									"scores":	[-5.467631468877145]
								}, {
									"case":	6,
									"scores":	[-5.467631468877145]
								}, {
									"case":	7,
									"scores":	[-5.467631468877145]
								}, {
									"case":	8,
									"scores":	[-5.467631468877145]
								}, {
									"case":	9,
									"scores":	[-5.467631468877145]
								}, {
									"case":	10,
									"scores":	[-5.467631468877145]
								}, {
									"case":	11,
									"scores":	[-5.467631468877145]
								}, {
									"case":	12,
									"scores":	[-5.467631468877145]
								}, {
									"case":	13,
									"scores":	[-5.467631468877145]
								}, {
									"case":	14,
									"scores":	[-5.467631468877145]
								}, {
									"case":	15,
									"scores":	[-5.467631468877145]
								}, {
									"case":	16,
									"scores":	[-5.467631468877145]
								}, {
									"case":	17,
									"scores":	[-5.467631468877145]
								}, {
									"case":	18,
									"scores":	[-5.467631468877145]
								}, {
									"case":	19,
									"scores":	[-5.467631468877145]
								}, {
									"case":	20,
									"scores":	[-5.467631468877145]
								}, {
									"case":	21,
									"scores":	[-5.467631468877145]
								}, {
									"case":	22,
									"scores":	[-5.467631468877145]
								}, {
									"case":	23,
									"scores":	[-5.467631468877145]
								}, {
									"case":	24,
									"scores":	[-5.467631468877145]
								}, {
									"case":	25,
									"scores":	[-5.467631468877145]
								}, {
									"case":	26,
									"scores":	[-5.467631468877145]
								}, {
									"case":	27,
									"scores":	[-5.467631468877145]
								}, {
									"case":	28,
									"scores":	[-5.467631468877145]
								}, {
									"case":	29,
									"scores":	[-5.467631468877145]
								}, {
									"case":	30,
									"scores":	[-5.467631468877145]
								}, {
									"case":	31,
									"scores":	[-5.467631468877145]
								}, {
									"case":	32,
									"scores":	[-5.467631468877145]
								}, {
									"case":	33,
									"scores":	[-5.467631468877145]
								}, {
									"case":	34,
									"scores":	[-5.467631468877145]
								}, {
									"case":	35,
									"scores":	[-5.467631468877145]
								}, {
									"case":	36,
									"scores":	[-5.467631468877145]
								}, {
									"case":	37,
									"scores":	[-5.467631468877145]
								}, {
									"case":	38,
									"scores":	[-5.467631468877145]
								}, {
									"case":	39,
									"scores":	[-5.467631468877145]
								}, {
									"case":	40,
									"scores":	[-5.467631468877145]
								}, {
									"case":	41,
									"scores":	[-5.467631468877145]
								}, {
									"case":	42,
									"scores":	[-5.467631468877145]
								}, {
									"case":	43,
									"scores":	[-5.467631468877145]
								}, {
									"case":	44,
									"scores":	[-5.467631468877145]
								}, {
									"case":	45,
									"scores":	[-5.467631468877145]
								}, {
									"case":	46,
									"scores":	[-5.467631468877145]
								}, {
									"case":	47,
									"scores":	[-5.467631468877145]
								}, {
									"case":	48,
									"scores":	[-5.467631468877145]
								}, {
									"case":	49,
									"scores":	[-5.467631468877145]
								}, {
									"case":	50,
									"scores":	[-5.467631468877145]
								}, {
									"case":	51,
									"scores":	[-5.467631468877145]
								}, {
									"case":	52,
									"scores":	[-5.467631468877145]
								}]
						}]
				}, {
					"line":	762,
					"switches":	[{
							"switch":	91,
							"types":	[[], [], [], [], [101, 102, 103, 104], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [], [], [], [], [], []],
							"begin_line":	763,
							"begin_column":	1,
							"end_line":	763,
							"end_column":	1,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_result = (-1)", "call_result = (0)", "call_result = (1)", "call_result = (6)", "call_result = (call_result)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (-1)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (call_result)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_zval_ptr_dtor((&retval))", "call_result = -1", "call_result = 0", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L763\", 4, &(call_result), sizeof (call_result), &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return -1;\n", "if (__is_neg(\"\", \"L763\", 4, &(call_result), sizeof (call_result), &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 0;\n", "if (__is_neg(\"\", \"L763\", 4, &(call_result), sizeof (call_result), &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 1;\n", "if (__is_neg(\"\", \"L763\", 4, &(call_result), sizeof (call_result), &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.427226054242106]
								}, {
									"case":	2,
									"scores":	[-5.427226054242106]
								}, {
									"case":	3,
									"scores":	[-5.427226054242106]
								}, {
									"case":	4,
									"scores":	[-5.427226054242106]
								}, {
									"case":	5,
									"scores":	[-5.427226054242106]
								}, {
									"case":	6,
									"scores":	[-5.427226054242106]
								}, {
									"case":	7,
									"scores":	[-5.427226054242106]
								}, {
									"case":	8,
									"scores":	[-5.427226054242106]
								}, {
									"case":	9,
									"scores":	[-5.427226054242106]
								}, {
									"case":	10,
									"scores":	[-5.427226054242106]
								}, {
									"case":	11,
									"scores":	[-5.427226054242106]
								}, {
									"case":	12,
									"scores":	[-5.427226054242106]
								}, {
									"case":	13,
									"scores":	[-5.427226054242106]
								}, {
									"case":	14,
									"scores":	[-5.427226054242106]
								}, {
									"case":	15,
									"scores":	[-5.427226054242106]
								}, {
									"case":	16,
									"scores":	[-5.427226054242106]
								}, {
									"case":	17,
									"scores":	[-5.427226054242106]
								}, {
									"case":	18,
									"scores":	[-5.427226054242106]
								}, {
									"case":	19,
									"scores":	[-5.427226054242106]
								}, {
									"case":	20,
									"scores":	[-5.427226054242106]
								}, {
									"case":	21,
									"scores":	[-5.427226054242106]
								}, {
									"case":	22,
									"scores":	[-5.427226054242106]
								}, {
									"case":	23,
									"scores":	[-5.427226054242106]
								}, {
									"case":	24,
									"scores":	[-5.427226054242106]
								}, {
									"case":	25,
									"scores":	[-5.427226054242106]
								}, {
									"case":	26,
									"scores":	[-5.427226054242106]
								}, {
									"case":	27,
									"scores":	[-5.427226054242106]
								}, {
									"case":	28,
									"scores":	[-5.427226054242106]
								}, {
									"case":	29,
									"scores":	[-5.427226054242106]
								}, {
									"case":	30,
									"scores":	[-5.427226054242106]
								}, {
									"case":	31,
									"scores":	[-5.427226054242106]
								}, {
									"case":	32,
									"scores":	[-5.427226054242106]
								}, {
									"case":	33,
									"scores":	[-5.427226054242106]
								}, {
									"case":	34,
									"scores":	[-5.427226054242106]
								}, {
									"case":	35,
									"scores":	[-5.427226054242106]
								}, {
									"case":	36,
									"scores":	[-5.427226054242106]
								}, {
									"case":	37,
									"scores":	[-5.427226054242106]
								}, {
									"case":	38,
									"scores":	[-5.427226054242106]
								}, {
									"case":	39,
									"scores":	[-5.427226054242106]
								}, {
									"case":	40,
									"scores":	[-5.427226054242106]
								}, {
									"case":	41,
									"scores":	[-5.427226054242106]
								}, {
									"case":	42,
									"scores":	[-5.427226054242106]
								}, {
									"case":	43,
									"scores":	[-5.427226054242106]
								}, {
									"case":	44,
									"scores":	[-5.427226054242106]
								}, {
									"case":	45,
									"scores":	[-5.427226054242106]
								}, {
									"case":	46,
									"scores":	[-5.427226054242106]
								}, {
									"case":	47,
									"scores":	[-5.427226054242106]
								}, {
									"case":	48,
									"scores":	[-5.427226054242106]
								}, {
									"case":	49,
									"scores":	[-5.427226054242106]
								}, {
									"case":	50,
									"scores":	[-5.427226054242106]
								}, {
									"case":	51,
									"scores":	[-5.427226054242106]
								}, {
									"case":	52,
									"scores":	[-5.427226054242106]
								}, {
									"case":	53,
									"scores":	[-5.427226054242106]
								}, {
									"case":	54,
									"scores":	[-5.427226054242106]
								}, {
									"case":	55,
									"scores":	[-5.427226054242106]
								}, {
									"case":	56,
									"scores":	[-5.427226054242106]
								}, {
									"case":	57,
									"scores":	[-5.427226054242106]
								}, {
									"case":	58,
									"scores":	[-5.427226054242106]
								}, {
									"case":	59,
									"scores":	[-5.427226054242106]
								}, {
									"case":	60,
									"scores":	[-5.427226054242106]
								}, {
									"case":	61,
									"scores":	[-5.427226054242106]
								}, {
									"case":	62,
									"scores":	[-5.427226054242106]
								}, {
									"case":	63,
									"scores":	[-5.427226054242106]
								}, {
									"case":	64,
									"scores":	[-5.427226054242106]
								}, {
									"case":	65,
									"scores":	[-5.427226054242106]
								}, {
									"case":	66,
									"scores":	[-5.427226054242106]
								}, {
									"case":	67,
									"scores":	[-5.427226054242106]
								}, {
									"case":	68,
									"scores":	[-5.427226054242106]
								}, {
									"case":	69,
									"scores":	[-5.427226054242106]
								}, {
									"case":	70,
									"scores":	[-5.427226054242106]
								}, {
									"case":	71,
									"scores":	[-5.427226054242106]
								}, {
									"case":	72,
									"scores":	[-5.427226054242106]
								}, {
									"case":	73,
									"scores":	[-5.427226054242106]
								}, {
									"case":	74,
									"scores":	[-5.427226054242106]
								}, {
									"case":	75,
									"scores":	[-5.427226054242106]
								}, {
									"case":	76,
									"scores":	[-5.427226054242106]
								}, {
									"case":	77,
									"scores":	[-5.427226054242106]
								}, {
									"case":	78,
									"scores":	[-5.427226054242106]
								}, {
									"case":	79,
									"scores":	[-5.427226054242106]
								}, {
									"case":	80,
									"scores":	[-5.427226054242106]
								}, {
									"case":	81,
									"scores":	[-5.427226054242106]
								}, {
									"case":	82,
									"scores":	[-5.427226054242106]
								}, {
									"case":	83,
									"scores":	[-5.427226054242106]
								}, {
									"case":	84,
									"scores":	[-5.427226054242106]
								}, {
									"case":	85,
									"scores":	[-5.427226054242106]
								}, {
									"case":	86,
									"scores":	[-5.427226054242106]
								}, {
									"case":	87,
									"scores":	[-5.427226054242106]
								}, {
									"case":	88,
									"scores":	[-5.427226054242106]
								}, {
									"case":	89,
									"scores":	[-5.427226054242106]
								}, {
									"case":	90,
									"scores":	[-5.427226054242106]
								}, {
									"case":	91,
									"scores":	[-5.427226054242106]
								}, {
									"case":	92,
									"scores":	[-5.427226054242106]
								}, {
									"case":	93,
									"scores":	[-5.427226054242106]
								}, {
									"case":	94,
									"scores":	[-5.427226054242106]
								}, {
									"case":	95,
									"scores":	[-5.427226054242106]
								}, {
									"case":	96,
									"scores":	[-5.427226054242106]
								}, {
									"case":	97,
									"scores":	[-5.427226054242106]
								}, {
									"case":	98,
									"scores":	[-5.427226054242106]
								}, {
									"case":	99,
									"scores":	[-5.427226054242106]
								}, {
									"case":	100,
									"scores":	[-5.427226054242106]
								}, {
									"case":	101,
									"scores":	[-10.093076941242106, -10.602865038042106, -10.602865038042106, -10.639965438042108]
								}, {
									"case":	102,
									"scores":	[-7.2686079412421059, -7.7783960380421053, -7.7783960380421053, -7.8154964380421061]
								}, {
									"case":	103,
									"scores":	[-10.093076941242106, -10.602865038042106, -10.602865038042106, -10.639965438042108]
								}, {
									"case":	104,
									"scores":	[-10.093076941242106, -10.602865038042106, -10.602865038042106, -10.639965438042108]
								}]
						}, {
							"switch":	92,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	763,
							"begin_column":	3,
							"end_line":	763,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L763\", 4, &(call_result), sizeof (call_result), &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    call_result = -1;\n", "{\n}\n", "call_result = (-1)", "call_result = (0)", "call_result = (1)", "call_result = (6)", "call_result = (call_result)", "call_result = -(0 * call_result)", "call_result = -(0)", "call_result = -(call_result != 0)", "call_result = -(call_result + 0)", "call_result = -(call_result - 0)", "call_result = -(call_result == 0)", "call_result = -(func_name != 0)", "call_result = -(func_name == 0)", "call_result = -(retval != 0)", "call_result = -(retval == 0)", "call_result = -(stream != 0)", "call_result = -(stream == 0)", "call_result = -(us != 0)", "call_result = -(us == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8454406452421059, -6.8266002242421067, -6.8266002242421067, -7.1209510242421059]
								}, {
									"case":	2,
									"scores":	[-5.427226054242106]
								}, {
									"case":	3,
									"scores":	[-5.427226054242106]
								}, {
									"case":	4,
									"scores":	[-5.427226054242106]
								}, {
									"case":	5,
									"scores":	[-5.427226054242106]
								}, {
									"case":	6,
									"scores":	[-5.427226054242106]
								}, {
									"case":	7,
									"scores":	[-5.427226054242106]
								}, {
									"case":	8,
									"scores":	[-5.427226054242106]
								}, {
									"case":	9,
									"scores":	[-5.427226054242106]
								}, {
									"case":	10,
									"scores":	[-5.427226054242106]
								}, {
									"case":	11,
									"scores":	[-5.427226054242106]
								}, {
									"case":	12,
									"scores":	[-5.427226054242106]
								}, {
									"case":	13,
									"scores":	[-5.427226054242106]
								}, {
									"case":	14,
									"scores":	[-5.427226054242106]
								}, {
									"case":	15,
									"scores":	[-5.427226054242106]
								}, {
									"case":	16,
									"scores":	[-5.427226054242106]
								}, {
									"case":	17,
									"scores":	[-5.427226054242106]
								}, {
									"case":	18,
									"scores":	[-5.427226054242106]
								}, {
									"case":	19,
									"scores":	[-5.427226054242106]
								}, {
									"case":	20,
									"scores":	[-5.427226054242106]
								}, {
									"case":	21,
									"scores":	[-5.427226054242106]
								}]
						}]
				}, {
					"line":	759,
					"switches":	[{
							"switch":	89,
							"types":	[[], [], [], [], [101, 102, 103, 104], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [], [], [], [], [], []],
							"begin_line":	760,
							"begin_column":	0,
							"end_line":	760,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_result = (-1)", "call_result = (0)", "call_result = (1)", "call_result = (6)", "call_result = (call_result)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (-1)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (call_result)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_zval_ptr_dtor((&retval))", "call_result = -1", "call_result = 0", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L760\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return -1;\n", "if (__is_neg(\"\", \"L760\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 0;\n", "if (__is_neg(\"\", \"L760\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 1;\n", "if (__is_neg(\"\", \"L760\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	2,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	3,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	4,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	5,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	6,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	7,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	8,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	9,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	10,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	11,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	12,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	13,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	14,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	15,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	16,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	17,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	18,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	19,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	20,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	21,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	22,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	23,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	24,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	25,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	26,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	27,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	28,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	29,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	30,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	31,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	32,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	33,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	34,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	35,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	36,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	37,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	38,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	39,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	40,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	41,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	42,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	43,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	44,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	45,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	46,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	47,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	48,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	49,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	50,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	51,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	52,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	53,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	54,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	55,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	56,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	57,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	58,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	59,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	60,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	61,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	62,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	63,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	64,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	65,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	66,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	67,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	68,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	69,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	70,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	71,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	72,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	73,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	74,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	75,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	76,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	77,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	78,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	79,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	80,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	81,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	82,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	83,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	84,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	85,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	86,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	87,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	88,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	89,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	90,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	91,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	92,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	93,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	94,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	95,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	96,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	97,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	98,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	99,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	100,
									"scores":	[-5.4474287615596255]
								}, {
									"case":	101,
									"scores":	[-11.557630766359626, -10.641292832559625, -13.096641405359627, -12.796887145359626]
								}, {
									"case":	102,
									"scores":	[-8.7331617663596255, -7.8168238325596251, -10.272172405359626, -9.9724181453596259]
								}, {
									"case":	103,
									"scores":	[-11.557630766359626, -10.641292832559625, -13.096641405359627, -12.796887145359626]
								}, {
									"case":	104,
									"scores":	[-11.557630766359626, -10.641292832559625, -13.096641405359627, -12.796887145359626]
								}]
						}, {
							"switch":	90,
							"types":	[[17], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [], [4, 5, 6]],
							"begin_line":	760,
							"begin_column":	2,
							"end_line":	763,
							"end_column":	18,
							"patch_codes":	["if (__is_neg(\"\", \"L760\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (((call_result == 0 && retval != ((void *)0)) || __is_neg(\"\", \"L760\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream))) && zval_is_true(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if ((call_result == 0 && retval != ((void *)0) && zval_is_true(retval)) || __is_neg(\"\", \"L760\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && zval_is_true(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (retval != ((void *)0) && zval_is_true(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0) && _object_init(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0) && add_next_index_null(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0) && decrement_function(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0) && i_zend_is_true(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0) && increment_function(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0) && lex_scan(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0) && php_output_get_contents(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0) && php_output_get_length(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0) && zend_is_true(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if (call_result == 0 && retval != ((void *)0) && zend_print_variable(retval))\n    call_result = 0;\nelse\n    call_result = -1;\n", "if ((call_result == 0 && retval != ((void *)0) && zval_is_true(retval)) && !__is_neg(\"\", \"L760\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    call_result = 0;\nelse\n    call_result = -1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.0282664034281463, -2.8814923064281466, -5.908887359928146, -6.2477398694281456]
								}, {
									"case":	2,
									"scores":	[-2.4767927054281449, -2.3300186084281469, -5.3574136619281463, -5.696266171428146]
								}, {
									"case":	3,
									"scores":	[-2.4767927054281449, -2.3300186084281469, -5.3574136619281463, -5.696266171428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-2.4767927054281449, -2.3300186084281469, -5.3574136619281463, -5.696266171428146]
								}]
						}, {
							"switch":	93,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	760,
							"begin_column":	2,
							"end_line":	763,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L760\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    if (call_result == 0 && retval != ((void *)0) && zval_is_true(retval))\n        call_result = 0;\n    else\n        call_result = -1;\n", "if (!__is_neg(\"\", \"L760\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)) && (call_result == 0 && retval != ((void *)0) && zval_is_true(retval)))\n    call_result = 0;\nelse\n    call_result = -1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6334077555596256, -5.3258815585596251, -8.3532766120596254, -8.6921291215596259]
								}, {
									"case":	2,
									"scores":	[-4.4821316515596248, -4.335357554559625, -7.3627526080596253, -7.701605117559625]
								}]
						}]
				}, {
					"line":	764,
					"switches":	[{
							"switch":	94,
							"types":	[[], [], [], [], [101, 102, 103, 104], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [], [], [], [], [], []],
							"begin_line":	765,
							"begin_column":	0,
							"end_line":	765,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_result = (-1)", "call_result = (0)", "call_result = (1)", "call_result = (6)", "call_result = (call_result)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (-1)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (call_result)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_zval_ptr_dtor((&retval))", "call_result = -1", "call_result = 0", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L765\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return -1;\n", "if (__is_neg(\"\", \"L765\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 0;\n", "if (__is_neg(\"\", \"L765\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 1;\n", "if (__is_neg(\"\", \"L765\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	2,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	3,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	4,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	5,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	6,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	7,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	8,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	9,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	10,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	11,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	12,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	13,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	14,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	15,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	16,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	17,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	18,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	19,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	20,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	21,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	22,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	23,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	24,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	25,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	26,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	27,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	28,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	29,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	30,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	31,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	32,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	33,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	34,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	35,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	36,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	37,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	38,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	39,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	40,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	41,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	42,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	43,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	44,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	45,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	46,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	47,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	48,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	49,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	50,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	51,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	52,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	53,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	54,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	55,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	56,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	57,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	58,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	59,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	60,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	61,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	62,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	63,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	64,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	65,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	66,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	67,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	68,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	69,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	70,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	71,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	72,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	73,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	74,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	75,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	76,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	77,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	78,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	79,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	80,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	81,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	82,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	83,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	84,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	85,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	86,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	87,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	88,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	89,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	90,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	91,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	92,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	93,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	94,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	95,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	96,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	97,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	98,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	99,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	100,
									"scores":	[-5.4070233469245865]
								}, {
									"case":	101,
									"scores":	[-12.421110860724589, -11.540748777924588, -13.557037990724588, -13.257283730724588]
								}, {
									"case":	102,
									"scores":	[-9.59664186072459, -8.7162797779245871, -10.732568990724587, -10.432814730724587]
								}, {
									"case":	103,
									"scores":	[-12.421110860724589, -11.540748777924588, -13.557037990724588, -13.257283730724588]
								}, {
									"case":	104,
									"scores":	[-12.421110860724589, -11.540748777924588, -13.557037990724588, -13.257283730724588]
								}]
						}, {
							"switch":	95,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	765,
							"begin_column":	2,
							"end_line":	766,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L765\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    _zval_ptr_dtor((&retval));\n", "if ((retval) || __is_neg(\"\", \"L765\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    _zval_ptr_dtor((&retval));\n", "if ((retval) && !__is_neg(\"\", \"L765\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    _zval_ptr_dtor((&retval));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.5821620404281456, -3.9832114124281448, -4.9415938009281453, -5.2804463104281458]
								}, {
									"case":	2,
									"scores":	[-4.617243605428146, -5.0182929774281462, -5.9766753659281466, -6.3155278754281454]
								}, {
									"case":	3,
									"scores":	[-4.617243605428146, -5.0182929774281462, -5.9766753659281466, -6.3155278754281454]
								}]
						}, {
							"switch":	96,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	765,
							"begin_column":	2,
							"end_line":	766,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L765\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)))\n    if (retval)\n        _zval_ptr_dtor((&retval));\n", "if (!__is_neg(\"\", \"L765\", 4, &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream)) && (retval))\n    _zval_ptr_dtor((&retval));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2552376469245861, -7.6562870189245862, -8.6146694074245858, -8.9535219169245863]
								}, {
									"case":	2,
									"scores":	[-7.1414236469245864, -7.5424730189245865, -8.5008554074245861, -8.8397079169245867]
								}]
						}]
				}, {
					"line":	767,
					"switches":	[{
							"switch":	97,
							"types":	[[], [], [], [], [101, 102, 103, 104], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [], [], [], [], [], []],
							"begin_line":	768,
							"begin_column":	0,
							"end_line":	768,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(&us->object, 0, sizeof (*(&us->object)))", "memset(&us->wrapper, 0, sizeof (*(&us->wrapper)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "memset(us->object, 0, sizeof (*(us->object)))", "memset(us->wrapper, 0, sizeof (*(us->wrapper)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (6)", "_convert_to_string(((retval)))", "_efree(((retval)))", "_efree(((us)))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "call_result = (-1)", "call_result = (0)", "call_result = (1)", "call_result = (6)", "call_result = (call_result)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_long((retval))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((retval))", "le_protocols = (-1)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (6)", "le_protocols = (call_result)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_unset_isref_p((retval))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "_zval_ptr_dtor((&retval))", "call_result = -1", "call_result = 0", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L768\", 4, &(call_result), sizeof (call_result), &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return -1;\n", "if (__is_neg(\"\", \"L768\", 4, &(call_result), sizeof (call_result), &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 0;\n", "if (__is_neg(\"\", \"L768\", 4, &(call_result), sizeof (call_result), &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 1;\n", "if (__is_neg(\"\", \"L768\", 4, &(call_result), sizeof (call_result), &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return 6;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.386820639607067]
								}, {
									"case":	2,
									"scores":	[-5.386820639607067]
								}, {
									"case":	3,
									"scores":	[-5.386820639607067]
								}, {
									"case":	4,
									"scores":	[-5.386820639607067]
								}, {
									"case":	5,
									"scores":	[-5.386820639607067]
								}, {
									"case":	6,
									"scores":	[-5.386820639607067]
								}, {
									"case":	7,
									"scores":	[-5.386820639607067]
								}, {
									"case":	8,
									"scores":	[-5.386820639607067]
								}, {
									"case":	9,
									"scores":	[-5.386820639607067]
								}, {
									"case":	10,
									"scores":	[-5.386820639607067]
								}, {
									"case":	11,
									"scores":	[-5.386820639607067]
								}, {
									"case":	12,
									"scores":	[-5.386820639607067]
								}, {
									"case":	13,
									"scores":	[-5.386820639607067]
								}, {
									"case":	14,
									"scores":	[-5.386820639607067]
								}, {
									"case":	15,
									"scores":	[-5.386820639607067]
								}, {
									"case":	16,
									"scores":	[-5.386820639607067]
								}, {
									"case":	17,
									"scores":	[-5.386820639607067]
								}, {
									"case":	18,
									"scores":	[-5.386820639607067]
								}, {
									"case":	19,
									"scores":	[-5.386820639607067]
								}, {
									"case":	20,
									"scores":	[-5.386820639607067]
								}, {
									"case":	21,
									"scores":	[-5.386820639607067]
								}, {
									"case":	22,
									"scores":	[-5.386820639607067]
								}, {
									"case":	23,
									"scores":	[-5.386820639607067]
								}, {
									"case":	24,
									"scores":	[-5.386820639607067]
								}, {
									"case":	25,
									"scores":	[-5.386820639607067]
								}, {
									"case":	26,
									"scores":	[-5.386820639607067]
								}, {
									"case":	27,
									"scores":	[-5.386820639607067]
								}, {
									"case":	28,
									"scores":	[-5.386820639607067]
								}, {
									"case":	29,
									"scores":	[-5.386820639607067]
								}, {
									"case":	30,
									"scores":	[-5.386820639607067]
								}, {
									"case":	31,
									"scores":	[-5.386820639607067]
								}, {
									"case":	32,
									"scores":	[-5.386820639607067]
								}, {
									"case":	33,
									"scores":	[-5.386820639607067]
								}, {
									"case":	34,
									"scores":	[-5.386820639607067]
								}, {
									"case":	35,
									"scores":	[-5.386820639607067]
								}, {
									"case":	36,
									"scores":	[-5.386820639607067]
								}, {
									"case":	37,
									"scores":	[-5.386820639607067]
								}, {
									"case":	38,
									"scores":	[-5.386820639607067]
								}, {
									"case":	39,
									"scores":	[-5.386820639607067]
								}, {
									"case":	40,
									"scores":	[-5.386820639607067]
								}, {
									"case":	41,
									"scores":	[-5.386820639607067]
								}, {
									"case":	42,
									"scores":	[-5.386820639607067]
								}, {
									"case":	43,
									"scores":	[-5.386820639607067]
								}, {
									"case":	44,
									"scores":	[-5.386820639607067]
								}, {
									"case":	45,
									"scores":	[-5.386820639607067]
								}, {
									"case":	46,
									"scores":	[-5.386820639607067]
								}, {
									"case":	47,
									"scores":	[-5.386820639607067]
								}, {
									"case":	48,
									"scores":	[-5.386820639607067]
								}, {
									"case":	49,
									"scores":	[-5.386820639607067]
								}, {
									"case":	50,
									"scores":	[-5.386820639607067]
								}, {
									"case":	51,
									"scores":	[-5.386820639607067]
								}, {
									"case":	52,
									"scores":	[-5.386820639607067]
								}, {
									"case":	53,
									"scores":	[-5.386820639607067]
								}, {
									"case":	54,
									"scores":	[-5.386820639607067]
								}, {
									"case":	55,
									"scores":	[-5.386820639607067]
								}, {
									"case":	56,
									"scores":	[-5.386820639607067]
								}, {
									"case":	57,
									"scores":	[-5.386820639607067]
								}, {
									"case":	58,
									"scores":	[-5.386820639607067]
								}, {
									"case":	59,
									"scores":	[-5.386820639607067]
								}, {
									"case":	60,
									"scores":	[-5.386820639607067]
								}, {
									"case":	61,
									"scores":	[-5.386820639607067]
								}, {
									"case":	62,
									"scores":	[-5.386820639607067]
								}, {
									"case":	63,
									"scores":	[-5.386820639607067]
								}, {
									"case":	64,
									"scores":	[-5.386820639607067]
								}, {
									"case":	65,
									"scores":	[-5.386820639607067]
								}, {
									"case":	66,
									"scores":	[-5.386820639607067]
								}, {
									"case":	67,
									"scores":	[-5.386820639607067]
								}, {
									"case":	68,
									"scores":	[-5.386820639607067]
								}, {
									"case":	69,
									"scores":	[-5.386820639607067]
								}, {
									"case":	70,
									"scores":	[-5.386820639607067]
								}, {
									"case":	71,
									"scores":	[-5.386820639607067]
								}, {
									"case":	72,
									"scores":	[-5.386820639607067]
								}, {
									"case":	73,
									"scores":	[-5.386820639607067]
								}, {
									"case":	74,
									"scores":	[-5.386820639607067]
								}, {
									"case":	75,
									"scores":	[-5.386820639607067]
								}, {
									"case":	76,
									"scores":	[-5.386820639607067]
								}, {
									"case":	77,
									"scores":	[-5.386820639607067]
								}, {
									"case":	78,
									"scores":	[-5.386820639607067]
								}, {
									"case":	79,
									"scores":	[-5.386820639607067]
								}, {
									"case":	80,
									"scores":	[-5.386820639607067]
								}, {
									"case":	81,
									"scores":	[-5.386820639607067]
								}, {
									"case":	82,
									"scores":	[-5.386820639607067]
								}, {
									"case":	83,
									"scores":	[-5.386820639607067]
								}, {
									"case":	84,
									"scores":	[-5.386820639607067]
								}, {
									"case":	85,
									"scores":	[-5.386820639607067]
								}, {
									"case":	86,
									"scores":	[-5.386820639607067]
								}, {
									"case":	87,
									"scores":	[-5.386820639607067]
								}, {
									"case":	88,
									"scores":	[-5.386820639607067]
								}, {
									"case":	89,
									"scores":	[-5.386820639607067]
								}, {
									"case":	90,
									"scores":	[-5.386820639607067]
								}, {
									"case":	91,
									"scores":	[-5.386820639607067]
								}, {
									"case":	92,
									"scores":	[-5.386820639607067]
								}, {
									"case":	93,
									"scores":	[-5.386820639607067]
								}, {
									"case":	94,
									"scores":	[-5.386820639607067]
								}, {
									"case":	95,
									"scores":	[-5.386820639607067]
								}, {
									"case":	96,
									"scores":	[-5.386820639607067]
								}, {
									"case":	97,
									"scores":	[-5.386820639607067]
								}, {
									"case":	98,
									"scores":	[-5.386820639607067]
								}, {
									"case":	99,
									"scores":	[-5.386820639607067]
								}, {
									"case":	100,
									"scores":	[-5.386820639607067]
								}, {
									"case":	101,
									"scores":	[-9.52207277760707, -10.156970823407068, -11.536941283407067, -11.237187023407067]
								}, {
									"case":	102,
									"scores":	[-6.6976037776070667, -7.3325018234070676, -8.7124722834070667, -8.4127180234070664]
								}, {
									"case":	103,
									"scores":	[-9.52207277760707, -10.156970823407068, -11.536941283407067, -11.237187023407067]
								}, {
									"case":	104,
									"scores":	[-9.52207277760707, -10.156970823407068, -11.536941283407067, -11.237187023407067]
								}]
						}, {
							"switch":	98,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	768,
							"begin_column":	2,
							"end_line":	768,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L768\", 4, &(call_result), sizeof (call_result), &(retval), sizeof (retval), &(us), sizeof (us), &(stream), sizeof (stream)))\n    return call_result;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8941408056070674, -6.8237378396070669, -7.7278187001070666, -8.0666712096070672]
								}]
						}]
				}, {
					"line":	930,
					"switches":	[]
				}, {
					"line":	931,
					"switches":	[]
				}, {
					"line":	932,
					"switches":	[]
				}, {
					"line":	933,
					"switches":	[]
				}, {
					"line":	934,
					"switches":	[]
				}, {
					"line":	935,
					"switches":	[]
				}, {
					"line":	936,
					"switches":	[]
				}, {
					"line":	938,
					"switches":	[{
							"switch":	99,
							"types":	[[], [], [], [], [206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], [], [], [], [], [], []],
							"begin_line":	939,
							"begin_column":	0,
							"end_line":	939,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-5)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (12)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (8)", "(core_globals.in_user_include) = (8192)", "(zvalue)->is_ref__gc = (-1)", "(zvalue)->is_ref__gc = (-5)", "(zvalue)->is_ref__gc = (0)", "(zvalue)->is_ref__gc = (1)", "(zvalue)->is_ref__gc = (12)", "(zvalue)->is_ref__gc = (2)", "(zvalue)->is_ref__gc = (3)", "(zvalue)->is_ref__gc = (4)", "(zvalue)->is_ref__gc = (6)", "(zvalue)->is_ref__gc = (8)", "(zvalue)->is_ref__gc = (8192)", "(zvalue)->refcount__gc = (-1)", "(zvalue)->refcount__gc = (-5)", "(zvalue)->refcount__gc = (0)", "(zvalue)->refcount__gc = (1)", "(zvalue)->refcount__gc = (12)", "(zvalue)->refcount__gc = (2)", "(zvalue)->refcount__gc = (3)", "(zvalue)->refcount__gc = (4)", "(zvalue)->refcount__gc = (6)", "(zvalue)->refcount__gc = (8)", "(zvalue)->refcount__gc = (8192)", "_convert_to_string(((retval)))", "_convert_to_string(((zvalue)))", "_efree(((retval)))", "_efree(((us)))", "_efree(((zvalue)))", "_zval_copy_ctor_func((retval))", "_zval_copy_ctor_func((zvalue))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor(((zvalue)))", "_zval_dtor_func((retval))", "_zval_dtor_func((zvalue))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zvalue)))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zvalue), \"context\", strlen(\"context\") + 1)", "args[0] = &(retval)", "args[0] = &(zvalue)", "args[1] = &(retval)", "args[1] = &(zvalue)", "args[2] = &(retval)", "args[2] = &(zvalue)", "call_result = (-1)", "call_result = (-5)", "call_result = (0)", "call_result = (1)", "call_result = (12)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (8)", "call_result = (8192)", "call_result = (call_result)", "call_result = (option)", "call_result = (ret)", "call_result = (value)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 3, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 3, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 3, args, 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_boolean((zvalue))", "convert_to_long((retval))", "convert_to_long((zvalue))", "gc_remove_zval_from_buffer((retval))", "gc_remove_zval_from_buffer((zvalue))", "gc_zval_check_possible_root(((retval)))", "gc_zval_check_possible_root(((zvalue)))", "gc_zval_possible_root((retval))", "gc_zval_possible_root((zvalue))", "i_zval_ptr_dtor((retval))", "i_zval_ptr_dtor((zvalue))", "le_protocols = (-1)", "le_protocols = (-5)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (12)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (8)", "le_protocols = (8192)", "le_protocols = (call_result)", "le_protocols = (option)", "le_protocols = (ret)", "le_protocols = (value)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "ret = !(*(retval)).value.lval", "ret = !(*(zvalue)).value.lval", "ret = (-1)", "ret = (-5)", "ret = (0)", "ret = (1)", "ret = (12)", "ret = (2)", "ret = (3)", "ret = (4)", "ret = (6)", "ret = (8)", "ret = (8192)", "ret = (call_result)", "ret = (option)", "ret = (ret)", "ret = (value)", "ret = zval_is_true((retval)) ? -1 : 0", "ret = zval_is_true((zvalue)) ? -1 : 0", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zvalue))", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zvalue), 1)", "zval_unset_isref_p((retval))", "zval_unset_isref_p((zvalue))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(zvalue)->is_ref__gc = 0", "(zvalue)->refcount__gc = 1", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&zvalue))", "args[0] = &zvalue", "args[1] = &zvalue", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 3, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", us->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", us->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", us->wrapper->classname)", "ret = !(*retval).value.lval", "ret = -1", "ret = 0", "ret = zval_is_true(retval) ? -1 : 0", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return -1;\n", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return -5;\n", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return 0;\n", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return 12;\n", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return 1;\n", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return 2;\n", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return 3;\n", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return 4;\n", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return 6;\n", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return 8192;\n", "if (__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.53830693227125]
								}, {
									"case":	2,
									"scores":	[-4.53830693227125]
								}, {
									"case":	3,
									"scores":	[-4.53830693227125]
								}, {
									"case":	4,
									"scores":	[-4.53830693227125]
								}, {
									"case":	5,
									"scores":	[-4.53830693227125]
								}, {
									"case":	6,
									"scores":	[-4.53830693227125]
								}, {
									"case":	7,
									"scores":	[-4.53830693227125]
								}, {
									"case":	8,
									"scores":	[-4.53830693227125]
								}, {
									"case":	9,
									"scores":	[-4.53830693227125]
								}, {
									"case":	10,
									"scores":	[-4.53830693227125]
								}, {
									"case":	11,
									"scores":	[-4.53830693227125]
								}, {
									"case":	12,
									"scores":	[-4.53830693227125]
								}, {
									"case":	13,
									"scores":	[-4.53830693227125]
								}, {
									"case":	14,
									"scores":	[-4.53830693227125]
								}, {
									"case":	15,
									"scores":	[-4.53830693227125]
								}, {
									"case":	16,
									"scores":	[-4.53830693227125]
								}, {
									"case":	17,
									"scores":	[-4.53830693227125]
								}, {
									"case":	18,
									"scores":	[-4.53830693227125]
								}, {
									"case":	19,
									"scores":	[-4.53830693227125]
								}, {
									"case":	20,
									"scores":	[-4.53830693227125]
								}, {
									"case":	21,
									"scores":	[-4.53830693227125]
								}, {
									"case":	22,
									"scores":	[-4.53830693227125]
								}, {
									"case":	23,
									"scores":	[-4.53830693227125]
								}, {
									"case":	24,
									"scores":	[-4.53830693227125]
								}, {
									"case":	25,
									"scores":	[-4.53830693227125]
								}, {
									"case":	26,
									"scores":	[-4.53830693227125]
								}, {
									"case":	27,
									"scores":	[-4.53830693227125]
								}, {
									"case":	28,
									"scores":	[-4.53830693227125]
								}, {
									"case":	29,
									"scores":	[-4.53830693227125]
								}, {
									"case":	30,
									"scores":	[-4.53830693227125]
								}, {
									"case":	31,
									"scores":	[-4.53830693227125]
								}, {
									"case":	32,
									"scores":	[-4.53830693227125]
								}, {
									"case":	33,
									"scores":	[-4.53830693227125]
								}, {
									"case":	34,
									"scores":	[-4.53830693227125]
								}, {
									"case":	35,
									"scores":	[-4.53830693227125]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-9.06041922827125, -9.53989531907125, -10.074184863271249, -10.66293408497125, -11.28051131607125, -10.705323689271248, -12.023912725971249, -9.02725884827125, -9.27130834527125]
								}, {
									"case":	207,
									"scores":	[-9.06041922827125, -9.53989531907125, -10.074184863271249, -10.66293408497125, -11.28051131607125, -10.705323689271248, -12.023912725971249, -9.02725884827125, -9.27130834527125]
								}, {
									"case":	208,
									"scores":	[-6.23595022827125, -6.7154263190712484, -7.24971586327125, -7.83846508497125, -8.45604231607125, -7.8808546892712474, -9.19944372597125, -6.20278984827125, -6.44683934527125]
								}, {
									"case":	209,
									"scores":	[-9.06041922827125, -9.53989531907125, -10.074184863271249, -10.66293408497125, -11.28051131607125, -10.705323689271248, -12.023912725971249, -9.02725884827125, -9.27130834527125]
								}, {
									"case":	210,
									"scores":	[-9.06041922827125, -9.53989531907125, -10.074184863271249, -10.66293408497125, -11.28051131607125, -10.705323689271248, -12.023912725971249, -9.02725884827125, -9.27130834527125]
								}, {
									"case":	211,
									"scores":	[-9.06041922827125, -9.53989531907125, -10.074184863271249, -10.66293408497125, -11.28051131607125, -10.705323689271248, -12.023912725971249, -9.02725884827125, -9.27130834527125]
								}, {
									"case":	212,
									"scores":	[-9.06041922827125, -9.53989531907125, -10.074184863271249, -10.66293408497125, -11.28051131607125, -10.705323689271248, -12.023912725971249, -9.02725884827125, -9.27130834527125]
								}, {
									"case":	213,
									"scores":	[-9.06041922827125, -9.53989531907125, -10.074184863271249, -10.66293408497125, -11.28051131607125, -10.705323689271248, -12.023912725971249, -9.02725884827125, -9.27130834527125]
								}, {
									"case":	214,
									"scores":	[-9.06041922827125, -9.53989531907125, -10.074184863271249, -10.66293408497125, -11.28051131607125, -10.705323689271248, -12.023912725971249, -9.02725884827125, -9.27130834527125]
								}, {
									"case":	215,
									"scores":	[-9.06041922827125, -9.53989531907125, -10.074184863271249, -10.66293408497125, -11.28051131607125, -10.705323689271248, -12.023912725971249, -9.02725884827125, -9.27130834527125]
								}, {
									"case":	216,
									"scores":	[-9.06041922827125, -9.53989531907125, -10.074184863271249, -10.66293408497125, -11.28051131607125, -10.705323689271248, -12.023912725971249, -9.02725884827125, -9.27130834527125]
								}]
						}, {
							"switch":	100,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	939,
							"begin_column":	2,
							"end_line":	1065,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L939\", 9, &(option), sizeof (option), &(retval), sizeof (retval), &(call_result), sizeof (call_result), &(us), sizeof (us), &(stream), sizeof (stream), &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam)))\n    switch (option) {\n      case 12:\n        do {\n            const char *__s = (\"stream_eof\");\n            int __l = sizeof (\"stream_eof\") - 1;\n            zval *__z = (&func_name);\n            (*__z).value.str.len = __l;\n            (*__z).value.str.val = (0 ? _estrndup((__s), (__l)) : (char *)__s);\n            (*__z).type = 6;\n        } while (0);\n        call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0));\n        if (call_result == 0 && retval != ((void *)0) && (*retval).type == 3) {\n            ret = zval_is_true(retval) ? -1 : 0;\n        } else {\n            ret = -1;\n            php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", us->wrapper->classname);\n        }\n        break;\n      case 6:\n        do {\n            (zvalue) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(zvalue))->u.buffered = ((void *)0);\n        } while (0);\n        (zvalue)->refcount__gc = 1;\n        (zvalue)->is_ref__gc = 0;\n        ;\n        ;\n        {\n            zval *__z = (zvalue);\n            (*__z).value.lval = 0;\n            (*__z).type = 1;\n        }\n        ;\n        if (value & 4) {\n            (*zvalue).value.lval |= 4;\n        }\n        switch (value & ~4) {\n          case 1:\n            (*zvalue).value.lval |= 1;\n            break;\n          case 2:\n            (*zvalue).value.lval |= 2;\n            break;\n          case 8:\n            (*zvalue).value.lval |= 3;\n            break;\n        }\n        args[0] = &zvalue;\n        do {\n            const char *__s = (\"stream_lock\");\n            int __l = sizeof (\"stream_lock\") - 1;\n            zval *__z = (&func_name);\n            (*__z).value.str.len = __l;\n            (*__z).value.str.val = (0 ? _estrndup((__s), (__l)) : (char *)__s);\n            (*__z).type = 6;\n        } while (0);\n        call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 1, args, 0, ((void *)0));\n        if (call_result == 0 && retval != ((void *)0) && (*retval).type == 3) {\n            ret = !(*retval).value.lval;\n        } else if (call_result == -1) {\n            if (value == 0) {\n                ret = 0;\n            } else {\n                php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", us->wrapper->classname);\n            }\n        }\n        break;\n      case 2:\n      case 3:\n      case 4:\n      case 1:\n        {\n            zval *zoption = ((void *)0);\n            zval *zptrparam = ((void *)0);\n            do {\n                const char *__s = (\"stream_set_option\");\n                int __l = sizeof (\"stream_set_option\") - 1;\n                zval *__z = (&func_name);\n                (*__z).value.str.len = __l;\n                (*__z).value.str.val = (0 ? _estrndup((__s), (__l)) : (char *)__s);\n                (*__z).type = 6;\n            } while (0);\n            do {\n                (zoption) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(zoption))->u.buffered = ((void *)0);\n            } while (0);\n            *zoption = zval_used_for_init;\n            ;\n            ;\n            {\n                zval *__z = (zoption);\n                (*__z).value.lval = option;\n                (*__z).type = 1;\n            }\n            ;\n            do {\n                (zvalue) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(zvalue))->u.buffered = ((void *)0);\n            } while (0);\n            *zvalue = zval_used_for_init;\n            ;\n            ;\n            do {\n                (zptrparam) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(zptrparam))->u.buffered = ((void *)0);\n            } while (0);\n            *zptrparam = zval_used_for_init;\n            ;\n            ;\n            args[0] = &zoption;\n            args[1] = &zvalue;\n            args[2] = &zptrparam;\n            switch (option) {\n              case 2:\n              case 3:\n                {\n                    zval *__z = (zvalue);\n                    (*__z).value.lval = value;\n                    (*__z).type = 1;\n                }\n                ;\n                if (ptrparam) {\n                    {\n                        zval *__z = (zptrparam);\n                        (*__z).value.lval = *(long *)ptrparam;\n                        (*__z).type = 1;\n                    }\n                    ;\n                } else {\n                    {\n                        zval *__z = (zptrparam);\n                        (*__z).value.lval = 8192;\n                        (*__z).type = 1;\n                    }\n                    ;\n                }\n                break;\n              case 4:\n                {\n                    struct timeval tv = *(struct timeval *)ptrparam;\n                    {\n                        zval *__z = (zvalue);\n                        (*__z).value.lval = tv.tv_sec;\n                        (*__z).type = 1;\n                    }\n                    ;\n                    {\n                        zval *__z = (zptrparam);\n                        (*__z).value.lval = tv.tv_usec;\n                        (*__z).type = 1;\n                    }\n                    ;\n                    break;\n                }\n              case 1:\n                {\n                    zval *__z = (zvalue);\n                    (*__z).value.lval = value;\n                    (*__z).type = 1;\n                }\n                ;\n                break;\n              default:\n                break;\n            }\n            call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 3, args, 0, ((void *)0));\n            do {\n                if (call_result == -1) {\n                    php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", us->wrapper->classname);\n                    break;\n                }\n                if (retval && zend_is_true(retval)) {\n                    ret = 0;\n                }\n            } while (0);\n            if (zoption) {\n                _zval_ptr_dtor((&zoption));\n            }\n            if (zptrparam) {\n                _zval_ptr_dtor((&zptrparam));\n            }\n            break;\n        }\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.73519750227125, -3.1163117122712491, -3.9925059132712493, -6.00379550227125, -7.30179229227125, -6.6264138892712481, -7.3075428232712483, -3.6112075022712493, -6.20445750227125]
								}]
						}]
				}, {
					"line":	1067,
					"switches":	[{
							"switch":	101,
							"types":	[[], [], [], [], [206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], [], [], [], [], [], []],
							"begin_line":	1068,
							"begin_column":	0,
							"end_line":	1068,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-5)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (12)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (8)", "(core_globals.in_user_include) = (8192)", "(zvalue)->is_ref__gc = (-1)", "(zvalue)->is_ref__gc = (-5)", "(zvalue)->is_ref__gc = (0)", "(zvalue)->is_ref__gc = (1)", "(zvalue)->is_ref__gc = (12)", "(zvalue)->is_ref__gc = (2)", "(zvalue)->is_ref__gc = (3)", "(zvalue)->is_ref__gc = (4)", "(zvalue)->is_ref__gc = (6)", "(zvalue)->is_ref__gc = (8)", "(zvalue)->is_ref__gc = (8192)", "(zvalue)->refcount__gc = (-1)", "(zvalue)->refcount__gc = (-5)", "(zvalue)->refcount__gc = (0)", "(zvalue)->refcount__gc = (1)", "(zvalue)->refcount__gc = (12)", "(zvalue)->refcount__gc = (2)", "(zvalue)->refcount__gc = (3)", "(zvalue)->refcount__gc = (4)", "(zvalue)->refcount__gc = (6)", "(zvalue)->refcount__gc = (8)", "(zvalue)->refcount__gc = (8192)", "_convert_to_string(((retval)))", "_convert_to_string(((zvalue)))", "_efree(((retval)))", "_efree(((us)))", "_efree(((zvalue)))", "_zval_copy_ctor_func((retval))", "_zval_copy_ctor_func((zvalue))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor(((zvalue)))", "_zval_dtor_func((retval))", "_zval_dtor_func((zvalue))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zvalue)))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zvalue), \"context\", strlen(\"context\") + 1)", "args[0] = &(retval)", "args[0] = &(zvalue)", "args[1] = &(retval)", "args[1] = &(zvalue)", "args[2] = &(retval)", "args[2] = &(zvalue)", "call_result = (-1)", "call_result = (-5)", "call_result = (0)", "call_result = (1)", "call_result = (12)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (8)", "call_result = (8192)", "call_result = (call_result)", "call_result = (option)", "call_result = (ret)", "call_result = (value)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 3, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 3, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 3, args, 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_boolean((zvalue))", "convert_to_long((retval))", "convert_to_long((zvalue))", "gc_remove_zval_from_buffer((retval))", "gc_remove_zval_from_buffer((zvalue))", "gc_zval_check_possible_root(((retval)))", "gc_zval_check_possible_root(((zvalue)))", "gc_zval_possible_root((retval))", "gc_zval_possible_root((zvalue))", "i_zval_ptr_dtor((retval))", "i_zval_ptr_dtor((zvalue))", "le_protocols = (-1)", "le_protocols = (-5)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (12)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (8)", "le_protocols = (8192)", "le_protocols = (call_result)", "le_protocols = (option)", "le_protocols = (ret)", "le_protocols = (value)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "ret = !(*(retval)).value.lval", "ret = !(*(zvalue)).value.lval", "ret = (-1)", "ret = (-5)", "ret = (0)", "ret = (1)", "ret = (12)", "ret = (2)", "ret = (3)", "ret = (4)", "ret = (6)", "ret = (8)", "ret = (8192)", "ret = (call_result)", "ret = (option)", "ret = (ret)", "ret = (value)", "ret = zval_is_true((retval)) ? -1 : 0", "ret = zval_is_true((zvalue)) ? -1 : 0", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zvalue))", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zvalue), 1)", "zval_unset_isref_p((retval))", "zval_unset_isref_p((zvalue))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(zvalue)->is_ref__gc = 0", "(zvalue)->refcount__gc = 1", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&zvalue))", "args[0] = &zvalue", "args[1] = &zvalue", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 3, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", us->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", us->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", us->wrapper->classname)", "ret = !(*retval).value.lval", "ret = -1", "ret = 0", "ret = zval_is_true(retval) ? -1 : 0", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return -1;\n", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return -5;\n", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 0;\n", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 12;\n", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 1;\n", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 2;\n", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 3;\n", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 4;\n", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 6;\n", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 8192;\n", "if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.51810422495373]
								}, {
									"case":	2,
									"scores":	[-4.51810422495373]
								}, {
									"case":	3,
									"scores":	[-4.51810422495373]
								}, {
									"case":	4,
									"scores":	[-4.51810422495373]
								}, {
									"case":	5,
									"scores":	[-4.51810422495373]
								}, {
									"case":	6,
									"scores":	[-4.51810422495373]
								}, {
									"case":	7,
									"scores":	[-4.51810422495373]
								}, {
									"case":	8,
									"scores":	[-4.51810422495373]
								}, {
									"case":	9,
									"scores":	[-4.51810422495373]
								}, {
									"case":	10,
									"scores":	[-4.51810422495373]
								}, {
									"case":	11,
									"scores":	[-4.51810422495373]
								}, {
									"case":	12,
									"scores":	[-4.51810422495373]
								}, {
									"case":	13,
									"scores":	[-4.51810422495373]
								}, {
									"case":	14,
									"scores":	[-4.51810422495373]
								}, {
									"case":	15,
									"scores":	[-4.51810422495373]
								}, {
									"case":	16,
									"scores":	[-4.51810422495373]
								}, {
									"case":	17,
									"scores":	[-4.51810422495373]
								}, {
									"case":	18,
									"scores":	[-4.51810422495373]
								}, {
									"case":	19,
									"scores":	[-4.51810422495373]
								}, {
									"case":	20,
									"scores":	[-4.51810422495373]
								}, {
									"case":	21,
									"scores":	[-4.51810422495373]
								}, {
									"case":	22,
									"scores":	[-4.51810422495373]
								}, {
									"case":	23,
									"scores":	[-4.51810422495373]
								}, {
									"case":	24,
									"scores":	[-4.51810422495373]
								}, {
									"case":	25,
									"scores":	[-4.51810422495373]
								}, {
									"case":	26,
									"scores":	[-4.51810422495373]
								}, {
									"case":	27,
									"scores":	[-4.51810422495373]
								}, {
									"case":	28,
									"scores":	[-4.51810422495373]
								}, {
									"case":	29,
									"scores":	[-4.51810422495373]
								}, {
									"case":	30,
									"scores":	[-4.51810422495373]
								}, {
									"case":	31,
									"scores":	[-4.51810422495373]
								}, {
									"case":	32,
									"scores":	[-4.51810422495373]
								}, {
									"case":	33,
									"scores":	[-4.51810422495373]
								}, {
									"case":	34,
									"scores":	[-4.51810422495373]
								}, {
									"case":	35,
									"scores":	[-4.51810422495373]
								}, {
									"case":	36,
									"scores":	[-4.51810422495373]
								}, {
									"case":	37,
									"scores":	[-4.51810422495373]
								}, {
									"case":	38,
									"scores":	[-4.51810422495373]
								}, {
									"case":	39,
									"scores":	[-4.51810422495373]
								}, {
									"case":	40,
									"scores":	[-4.51810422495373]
								}, {
									"case":	41,
									"scores":	[-4.51810422495373]
								}, {
									"case":	42,
									"scores":	[-4.51810422495373]
								}, {
									"case":	43,
									"scores":	[-4.51810422495373]
								}, {
									"case":	44,
									"scores":	[-4.51810422495373]
								}, {
									"case":	45,
									"scores":	[-4.51810422495373]
								}, {
									"case":	46,
									"scores":	[-4.51810422495373]
								}, {
									"case":	47,
									"scores":	[-4.51810422495373]
								}, {
									"case":	48,
									"scores":	[-4.51810422495373]
								}, {
									"case":	49,
									"scores":	[-4.51810422495373]
								}, {
									"case":	50,
									"scores":	[-4.51810422495373]
								}, {
									"case":	51,
									"scores":	[-4.51810422495373]
								}, {
									"case":	52,
									"scores":	[-4.51810422495373]
								}, {
									"case":	53,
									"scores":	[-4.51810422495373]
								}, {
									"case":	54,
									"scores":	[-4.51810422495373]
								}, {
									"case":	55,
									"scores":	[-4.51810422495373]
								}, {
									"case":	56,
									"scores":	[-4.51810422495373]
								}, {
									"case":	57,
									"scores":	[-4.51810422495373]
								}, {
									"case":	58,
									"scores":	[-4.51810422495373]
								}, {
									"case":	59,
									"scores":	[-4.51810422495373]
								}, {
									"case":	60,
									"scores":	[-4.51810422495373]
								}, {
									"case":	61,
									"scores":	[-4.51810422495373]
								}, {
									"case":	62,
									"scores":	[-4.51810422495373]
								}, {
									"case":	63,
									"scores":	[-4.51810422495373]
								}, {
									"case":	64,
									"scores":	[-4.51810422495373]
								}, {
									"case":	65,
									"scores":	[-4.51810422495373]
								}, {
									"case":	66,
									"scores":	[-4.51810422495373]
								}, {
									"case":	67,
									"scores":	[-4.51810422495373]
								}, {
									"case":	68,
									"scores":	[-4.51810422495373]
								}, {
									"case":	69,
									"scores":	[-4.51810422495373]
								}, {
									"case":	70,
									"scores":	[-4.51810422495373]
								}, {
									"case":	71,
									"scores":	[-4.51810422495373]
								}, {
									"case":	72,
									"scores":	[-4.51810422495373]
								}, {
									"case":	73,
									"scores":	[-4.51810422495373]
								}, {
									"case":	74,
									"scores":	[-4.51810422495373]
								}, {
									"case":	75,
									"scores":	[-4.51810422495373]
								}, {
									"case":	76,
									"scores":	[-4.51810422495373]
								}, {
									"case":	77,
									"scores":	[-4.51810422495373]
								}, {
									"case":	78,
									"scores":	[-4.51810422495373]
								}, {
									"case":	79,
									"scores":	[-4.51810422495373]
								}, {
									"case":	80,
									"scores":	[-4.51810422495373]
								}, {
									"case":	81,
									"scores":	[-4.51810422495373]
								}, {
									"case":	82,
									"scores":	[-4.51810422495373]
								}, {
									"case":	83,
									"scores":	[-4.51810422495373]
								}, {
									"case":	84,
									"scores":	[-4.51810422495373]
								}, {
									"case":	85,
									"scores":	[-4.51810422495373]
								}, {
									"case":	86,
									"scores":	[-4.51810422495373]
								}, {
									"case":	87,
									"scores":	[-4.51810422495373]
								}, {
									"case":	88,
									"scores":	[-4.51810422495373]
								}, {
									"case":	89,
									"scores":	[-4.51810422495373]
								}, {
									"case":	90,
									"scores":	[-4.51810422495373]
								}, {
									"case":	91,
									"scores":	[-4.51810422495373]
								}, {
									"case":	92,
									"scores":	[-4.51810422495373]
								}, {
									"case":	93,
									"scores":	[-4.51810422495373]
								}, {
									"case":	94,
									"scores":	[-4.51810422495373]
								}, {
									"case":	95,
									"scores":	[-4.51810422495373]
								}, {
									"case":	96,
									"scores":	[-4.51810422495373]
								}, {
									"case":	97,
									"scores":	[-4.51810422495373]
								}, {
									"case":	98,
									"scores":	[-4.51810422495373]
								}, {
									"case":	99,
									"scores":	[-4.51810422495373]
								}, {
									"case":	100,
									"scores":	[-4.51810422495373]
								}, {
									"case":	101,
									"scores":	[-4.51810422495373]
								}, {
									"case":	102,
									"scores":	[-4.51810422495373]
								}, {
									"case":	103,
									"scores":	[-4.51810422495373]
								}, {
									"case":	104,
									"scores":	[-4.51810422495373]
								}, {
									"case":	105,
									"scores":	[-4.51810422495373]
								}, {
									"case":	106,
									"scores":	[-4.51810422495373]
								}, {
									"case":	107,
									"scores":	[-4.51810422495373]
								}, {
									"case":	108,
									"scores":	[-4.51810422495373]
								}, {
									"case":	109,
									"scores":	[-4.51810422495373]
								}, {
									"case":	110,
									"scores":	[-4.51810422495373]
								}, {
									"case":	111,
									"scores":	[-4.51810422495373]
								}, {
									"case":	112,
									"scores":	[-4.51810422495373]
								}, {
									"case":	113,
									"scores":	[-4.51810422495373]
								}, {
									"case":	114,
									"scores":	[-4.51810422495373]
								}, {
									"case":	115,
									"scores":	[-4.51810422495373]
								}, {
									"case":	116,
									"scores":	[-4.51810422495373]
								}, {
									"case":	117,
									"scores":	[-4.51810422495373]
								}, {
									"case":	118,
									"scores":	[-4.51810422495373]
								}, {
									"case":	119,
									"scores":	[-4.51810422495373]
								}, {
									"case":	120,
									"scores":	[-4.51810422495373]
								}, {
									"case":	121,
									"scores":	[-4.51810422495373]
								}, {
									"case":	122,
									"scores":	[-4.51810422495373]
								}, {
									"case":	123,
									"scores":	[-4.51810422495373]
								}, {
									"case":	124,
									"scores":	[-4.51810422495373]
								}, {
									"case":	125,
									"scores":	[-4.51810422495373]
								}, {
									"case":	126,
									"scores":	[-4.51810422495373]
								}, {
									"case":	127,
									"scores":	[-4.51810422495373]
								}, {
									"case":	128,
									"scores":	[-4.51810422495373]
								}, {
									"case":	129,
									"scores":	[-4.51810422495373]
								}, {
									"case":	130,
									"scores":	[-4.51810422495373]
								}, {
									"case":	131,
									"scores":	[-4.51810422495373]
								}, {
									"case":	132,
									"scores":	[-4.51810422495373]
								}, {
									"case":	133,
									"scores":	[-4.51810422495373]
								}, {
									"case":	134,
									"scores":	[-4.51810422495373]
								}, {
									"case":	135,
									"scores":	[-4.51810422495373]
								}, {
									"case":	136,
									"scores":	[-4.51810422495373]
								}, {
									"case":	137,
									"scores":	[-4.51810422495373]
								}, {
									"case":	138,
									"scores":	[-4.51810422495373]
								}, {
									"case":	139,
									"scores":	[-4.51810422495373]
								}, {
									"case":	140,
									"scores":	[-4.51810422495373]
								}, {
									"case":	141,
									"scores":	[-4.51810422495373]
								}, {
									"case":	142,
									"scores":	[-4.51810422495373]
								}, {
									"case":	143,
									"scores":	[-4.51810422495373]
								}, {
									"case":	144,
									"scores":	[-4.51810422495373]
								}, {
									"case":	145,
									"scores":	[-4.51810422495373]
								}, {
									"case":	146,
									"scores":	[-4.51810422495373]
								}, {
									"case":	147,
									"scores":	[-4.51810422495373]
								}, {
									"case":	148,
									"scores":	[-4.51810422495373]
								}, {
									"case":	149,
									"scores":	[-4.51810422495373]
								}, {
									"case":	150,
									"scores":	[-4.51810422495373]
								}, {
									"case":	151,
									"scores":	[-4.51810422495373]
								}, {
									"case":	152,
									"scores":	[-4.51810422495373]
								}, {
									"case":	153,
									"scores":	[-4.51810422495373]
								}, {
									"case":	154,
									"scores":	[-4.51810422495373]
								}, {
									"case":	155,
									"scores":	[-4.51810422495373]
								}, {
									"case":	156,
									"scores":	[-4.51810422495373]
								}, {
									"case":	157,
									"scores":	[-4.51810422495373]
								}, {
									"case":	158,
									"scores":	[-4.51810422495373]
								}, {
									"case":	159,
									"scores":	[-4.51810422495373]
								}, {
									"case":	160,
									"scores":	[-4.51810422495373]
								}, {
									"case":	161,
									"scores":	[-4.51810422495373]
								}, {
									"case":	162,
									"scores":	[-4.51810422495373]
								}, {
									"case":	163,
									"scores":	[-4.51810422495373]
								}, {
									"case":	164,
									"scores":	[-4.51810422495373]
								}, {
									"case":	165,
									"scores":	[-4.51810422495373]
								}, {
									"case":	166,
									"scores":	[-4.51810422495373]
								}, {
									"case":	167,
									"scores":	[-4.51810422495373]
								}, {
									"case":	168,
									"scores":	[-4.51810422495373]
								}, {
									"case":	169,
									"scores":	[-4.51810422495373]
								}, {
									"case":	170,
									"scores":	[-4.51810422495373]
								}, {
									"case":	171,
									"scores":	[-4.51810422495373]
								}, {
									"case":	172,
									"scores":	[-4.51810422495373]
								}, {
									"case":	173,
									"scores":	[-4.51810422495373]
								}, {
									"case":	174,
									"scores":	[-4.51810422495373]
								}, {
									"case":	175,
									"scores":	[-4.51810422495373]
								}, {
									"case":	176,
									"scores":	[-4.51810422495373]
								}, {
									"case":	177,
									"scores":	[-4.51810422495373]
								}, {
									"case":	178,
									"scores":	[-4.51810422495373]
								}, {
									"case":	179,
									"scores":	[-4.51810422495373]
								}, {
									"case":	180,
									"scores":	[-4.51810422495373]
								}, {
									"case":	181,
									"scores":	[-4.51810422495373]
								}, {
									"case":	182,
									"scores":	[-4.51810422495373]
								}, {
									"case":	183,
									"scores":	[-4.51810422495373]
								}, {
									"case":	184,
									"scores":	[-4.51810422495373]
								}, {
									"case":	185,
									"scores":	[-4.51810422495373]
								}, {
									"case":	186,
									"scores":	[-4.51810422495373]
								}, {
									"case":	187,
									"scores":	[-4.51810422495373]
								}, {
									"case":	188,
									"scores":	[-4.51810422495373]
								}, {
									"case":	189,
									"scores":	[-4.51810422495373]
								}, {
									"case":	190,
									"scores":	[-4.51810422495373]
								}, {
									"case":	191,
									"scores":	[-4.51810422495373]
								}, {
									"case":	192,
									"scores":	[-4.51810422495373]
								}, {
									"case":	193,
									"scores":	[-4.51810422495373]
								}, {
									"case":	194,
									"scores":	[-4.51810422495373]
								}, {
									"case":	195,
									"scores":	[-4.51810422495373]
								}, {
									"case":	196,
									"scores":	[-4.51810422495373]
								}, {
									"case":	197,
									"scores":	[-4.51810422495373]
								}, {
									"case":	198,
									"scores":	[-4.51810422495373]
								}, {
									"case":	199,
									"scores":	[-4.51810422495373]
								}, {
									"case":	200,
									"scores":	[-4.51810422495373]
								}, {
									"case":	201,
									"scores":	[-4.51810422495373]
								}, {
									"case":	202,
									"scores":	[-4.51810422495373]
								}, {
									"case":	203,
									"scores":	[-4.51810422495373]
								}, {
									"case":	204,
									"scores":	[-4.51810422495373]
								}, {
									"case":	205,
									"scores":	[-4.51810422495373]
								}, {
									"case":	206,
									"scores":	[-11.23399113875373, -10.35931066475373, -10.27879448195373, -12.060864868753731, -9.18133581495373, -10.55160724095373, -11.254300357953731, -11.043411240953731, -11.76111060875373]
								}, {
									"case":	207,
									"scores":	[-11.23399113875373, -10.35931066475373, -10.27879448195373, -12.060864868753731, -9.18133581495373, -10.55160724095373, -11.254300357953731, -11.043411240953731, -11.76111060875373]
								}, {
									"case":	208,
									"scores":	[-8.40952213875373, -7.53484166475373, -7.45432548195373, -9.23639586875373, -6.35686681495373, -7.72713824095373, -8.42983135795373, -8.21894224095373, -8.93664160875373]
								}, {
									"case":	209,
									"scores":	[-11.23399113875373, -10.35931066475373, -10.27879448195373, -12.060864868753731, -9.18133581495373, -10.55160724095373, -11.254300357953731, -11.043411240953731, -11.76111060875373]
								}, {
									"case":	210,
									"scores":	[-11.23399113875373, -10.35931066475373, -10.27879448195373, -12.060864868753731, -9.18133581495373, -10.55160724095373, -11.254300357953731, -11.043411240953731, -11.76111060875373]
								}, {
									"case":	211,
									"scores":	[-11.23399113875373, -10.35931066475373, -10.27879448195373, -12.060864868753731, -9.18133581495373, -10.55160724095373, -11.254300357953731, -11.043411240953731, -11.76111060875373]
								}, {
									"case":	212,
									"scores":	[-11.23399113875373, -10.35931066475373, -10.27879448195373, -12.060864868753731, -9.18133581495373, -10.55160724095373, -11.254300357953731, -11.043411240953731, -11.76111060875373]
								}, {
									"case":	213,
									"scores":	[-11.23399113875373, -10.35931066475373, -10.27879448195373, -12.060864868753731, -9.18133581495373, -10.55160724095373, -11.254300357953731, -11.043411240953731, -11.76111060875373]
								}, {
									"case":	214,
									"scores":	[-11.23399113875373, -10.35931066475373, -10.27879448195373, -12.060864868753731, -9.18133581495373, -10.55160724095373, -11.254300357953731, -11.043411240953731, -11.76111060875373]
								}, {
									"case":	215,
									"scores":	[-11.23399113875373, -10.35931066475373, -10.27879448195373, -12.060864868753731, -9.18133581495373, -10.55160724095373, -11.254300357953731, -11.043411240953731, -11.76111060875373]
								}, {
									"case":	216,
									"scores":	[-11.23399113875373, -10.35931066475373, -10.27879448195373, -12.060864868753731, -9.18133581495373, -10.55160724095373, -11.254300357953731, -11.043411240953731, -11.76111060875373]
								}]
						}, {
							"switch":	102,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1068,
							"begin_column":	2,
							"end_line":	1070,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream))) {\n    _zval_ptr_dtor((&retval));\n}\n", "if ((retval) || __is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream))) {\n    _zval_ptr_dtor((&retval));\n}\n", "if ((retval) && !__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream))) {\n    _zval_ptr_dtor((&retval));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.2067240529281458, -3.3247076769281461, -3.6034336584281457, -4.4896521029281455, -2.5088330124281453, -2.9994999724281461, -3.8555158124281461, -3.3862558124281459, -4.8285046124281461]
								}, {
									"case":	2,
									"scores":	[-4.4561493159281458, -4.5741329399281465, -4.8528589214281457, -5.7390773659281464, -3.7582582754281457, -4.2489252354281462, -5.1049410754281457, -4.6356810754281454, -6.0779298754281452]
								}, {
									"case":	3,
									"scores":	[-4.4561493159281458, -4.5741329399281465, -4.8528589214281457, -5.7390773659281464, -3.7582582754281457, -4.2489252354281462, -5.1049410754281457, -4.6356810754281454, -6.0779298754281452]
								}]
						}, {
							"switch":	103,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1068,
							"begin_column":	2,
							"end_line":	1070,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    if (retval) {\n        _zval_ptr_dtor((&retval));\n    }\n", "if (!__is_neg(\"\", \"L1068\", 9, &(retval), sizeof (retval), &(zvalue), sizeof (zvalue), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)) && (retval)) {\n    _zval_ptr_dtor((&retval));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.91547602545373, -6.03345964945373, -6.31218563095373, -7.19840407545373, -5.21758498495373, -5.70825194495373, -6.56426778495373, -6.09500778495373, -7.53725658495373]
								}, {
									"case":	2,
									"scores":	[-5.80166202545373, -5.91964564945373, -6.19837163095373, -7.08459007545373, -5.10377098495373, -5.59443794495373, -6.45045378495373, -5.98119378495373, -7.42344258495373]
								}]
						}]
				}, {
					"line":	1072,
					"switches":	[{
							"switch":	104,
							"types":	[[], [], [], [], [206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], [], [], [], [], [], []],
							"begin_line":	1073,
							"begin_column":	0,
							"end_line":	1073,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-5)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (12)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (8)", "(core_globals.in_user_include) = (8192)", "(zvalue)->is_ref__gc = (-1)", "(zvalue)->is_ref__gc = (-5)", "(zvalue)->is_ref__gc = (0)", "(zvalue)->is_ref__gc = (1)", "(zvalue)->is_ref__gc = (12)", "(zvalue)->is_ref__gc = (2)", "(zvalue)->is_ref__gc = (3)", "(zvalue)->is_ref__gc = (4)", "(zvalue)->is_ref__gc = (6)", "(zvalue)->is_ref__gc = (8)", "(zvalue)->is_ref__gc = (8192)", "(zvalue)->refcount__gc = (-1)", "(zvalue)->refcount__gc = (-5)", "(zvalue)->refcount__gc = (0)", "(zvalue)->refcount__gc = (1)", "(zvalue)->refcount__gc = (12)", "(zvalue)->refcount__gc = (2)", "(zvalue)->refcount__gc = (3)", "(zvalue)->refcount__gc = (4)", "(zvalue)->refcount__gc = (6)", "(zvalue)->refcount__gc = (8)", "(zvalue)->refcount__gc = (8192)", "_convert_to_string(((retval)))", "_convert_to_string(((zvalue)))", "_efree(((retval)))", "_efree(((us)))", "_efree(((zvalue)))", "_zval_copy_ctor_func((retval))", "_zval_copy_ctor_func((zvalue))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor(((zvalue)))", "_zval_dtor_func((retval))", "_zval_dtor_func((zvalue))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zvalue)))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zvalue), \"context\", strlen(\"context\") + 1)", "args[0] = &(retval)", "args[0] = &(zvalue)", "args[1] = &(retval)", "args[1] = &(zvalue)", "args[2] = &(retval)", "args[2] = &(zvalue)", "call_result = (-1)", "call_result = (-5)", "call_result = (0)", "call_result = (1)", "call_result = (12)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (8)", "call_result = (8192)", "call_result = (call_result)", "call_result = (option)", "call_result = (ret)", "call_result = (value)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 3, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 3, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 3, args, 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_boolean((zvalue))", "convert_to_long((retval))", "convert_to_long((zvalue))", "gc_remove_zval_from_buffer((retval))", "gc_remove_zval_from_buffer((zvalue))", "gc_zval_check_possible_root(((retval)))", "gc_zval_check_possible_root(((zvalue)))", "gc_zval_possible_root((retval))", "gc_zval_possible_root((zvalue))", "i_zval_ptr_dtor((retval))", "i_zval_ptr_dtor((zvalue))", "le_protocols = (-1)", "le_protocols = (-5)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (12)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (8)", "le_protocols = (8192)", "le_protocols = (call_result)", "le_protocols = (option)", "le_protocols = (ret)", "le_protocols = (value)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "ret = !(*(retval)).value.lval", "ret = !(*(zvalue)).value.lval", "ret = (-1)", "ret = (-5)", "ret = (0)", "ret = (1)", "ret = (12)", "ret = (2)", "ret = (3)", "ret = (4)", "ret = (6)", "ret = (8)", "ret = (8192)", "ret = (call_result)", "ret = (option)", "ret = (ret)", "ret = (value)", "ret = zval_is_true((retval)) ? -1 : 0", "ret = zval_is_true((zvalue)) ? -1 : 0", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zvalue))", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zvalue), 1)", "zval_unset_isref_p((retval))", "zval_unset_isref_p((zvalue))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(zvalue)->is_ref__gc = 0", "(zvalue)->refcount__gc = 1", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&zvalue))", "args[0] = &zvalue", "args[1] = &zvalue", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 3, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", us->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", us->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", us->wrapper->classname)", "ret = !(*retval).value.lval", "ret = -1", "ret = 0", "ret = zval_is_true(retval) ? -1 : 0", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return -1;\n", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return -5;\n", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 0;\n", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 12;\n", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 1;\n", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 2;\n", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 3;\n", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 4;\n", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 6;\n", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 8192;\n", "if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.49790151763621]
								}, {
									"case":	2,
									"scores":	[-4.49790151763621]
								}, {
									"case":	3,
									"scores":	[-4.49790151763621]
								}, {
									"case":	4,
									"scores":	[-4.49790151763621]
								}, {
									"case":	5,
									"scores":	[-4.49790151763621]
								}, {
									"case":	6,
									"scores":	[-4.49790151763621]
								}, {
									"case":	7,
									"scores":	[-4.49790151763621]
								}, {
									"case":	8,
									"scores":	[-4.49790151763621]
								}, {
									"case":	9,
									"scores":	[-4.49790151763621]
								}, {
									"case":	10,
									"scores":	[-4.49790151763621]
								}, {
									"case":	11,
									"scores":	[-4.49790151763621]
								}, {
									"case":	12,
									"scores":	[-4.49790151763621]
								}, {
									"case":	13,
									"scores":	[-4.49790151763621]
								}, {
									"case":	14,
									"scores":	[-4.49790151763621]
								}, {
									"case":	15,
									"scores":	[-4.49790151763621]
								}, {
									"case":	16,
									"scores":	[-4.49790151763621]
								}, {
									"case":	17,
									"scores":	[-4.49790151763621]
								}, {
									"case":	18,
									"scores":	[-4.49790151763621]
								}, {
									"case":	19,
									"scores":	[-4.49790151763621]
								}, {
									"case":	20,
									"scores":	[-4.49790151763621]
								}, {
									"case":	21,
									"scores":	[-4.49790151763621]
								}, {
									"case":	22,
									"scores":	[-4.49790151763621]
								}, {
									"case":	23,
									"scores":	[-4.49790151763621]
								}, {
									"case":	24,
									"scores":	[-4.49790151763621]
								}, {
									"case":	25,
									"scores":	[-4.49790151763621]
								}, {
									"case":	26,
									"scores":	[-4.49790151763621]
								}, {
									"case":	27,
									"scores":	[-4.49790151763621]
								}, {
									"case":	28,
									"scores":	[-4.49790151763621]
								}, {
									"case":	29,
									"scores":	[-4.49790151763621]
								}, {
									"case":	30,
									"scores":	[-4.49790151763621]
								}, {
									"case":	31,
									"scores":	[-4.49790151763621]
								}, {
									"case":	32,
									"scores":	[-4.49790151763621]
								}, {
									"case":	33,
									"scores":	[-4.49790151763621]
								}, {
									"case":	34,
									"scores":	[-4.49790151763621]
								}, {
									"case":	35,
									"scores":	[-4.49790151763621]
								}, {
									"case":	36,
									"scores":	[-4.49790151763621]
								}, {
									"case":	37,
									"scores":	[-4.49790151763621]
								}, {
									"case":	38,
									"scores":	[-4.49790151763621]
								}, {
									"case":	39,
									"scores":	[-4.49790151763621]
								}, {
									"case":	40,
									"scores":	[-4.49790151763621]
								}, {
									"case":	41,
									"scores":	[-4.49790151763621]
								}, {
									"case":	42,
									"scores":	[-4.49790151763621]
								}, {
									"case":	43,
									"scores":	[-4.49790151763621]
								}, {
									"case":	44,
									"scores":	[-4.49790151763621]
								}, {
									"case":	45,
									"scores":	[-4.49790151763621]
								}, {
									"case":	46,
									"scores":	[-4.49790151763621]
								}, {
									"case":	47,
									"scores":	[-4.49790151763621]
								}, {
									"case":	48,
									"scores":	[-4.49790151763621]
								}, {
									"case":	49,
									"scores":	[-4.49790151763621]
								}, {
									"case":	50,
									"scores":	[-4.49790151763621]
								}, {
									"case":	51,
									"scores":	[-4.49790151763621]
								}, {
									"case":	52,
									"scores":	[-4.49790151763621]
								}, {
									"case":	53,
									"scores":	[-4.49790151763621]
								}, {
									"case":	54,
									"scores":	[-4.49790151763621]
								}, {
									"case":	55,
									"scores":	[-4.49790151763621]
								}, {
									"case":	56,
									"scores":	[-4.49790151763621]
								}, {
									"case":	57,
									"scores":	[-4.49790151763621]
								}, {
									"case":	58,
									"scores":	[-4.49790151763621]
								}, {
									"case":	59,
									"scores":	[-4.49790151763621]
								}, {
									"case":	60,
									"scores":	[-4.49790151763621]
								}, {
									"case":	61,
									"scores":	[-4.49790151763621]
								}, {
									"case":	62,
									"scores":	[-4.49790151763621]
								}, {
									"case":	63,
									"scores":	[-4.49790151763621]
								}, {
									"case":	64,
									"scores":	[-4.49790151763621]
								}, {
									"case":	65,
									"scores":	[-4.49790151763621]
								}, {
									"case":	66,
									"scores":	[-4.49790151763621]
								}, {
									"case":	67,
									"scores":	[-4.49790151763621]
								}, {
									"case":	68,
									"scores":	[-4.49790151763621]
								}, {
									"case":	69,
									"scores":	[-4.49790151763621]
								}, {
									"case":	70,
									"scores":	[-4.49790151763621]
								}, {
									"case":	71,
									"scores":	[-4.49790151763621]
								}, {
									"case":	72,
									"scores":	[-4.49790151763621]
								}, {
									"case":	73,
									"scores":	[-4.49790151763621]
								}, {
									"case":	74,
									"scores":	[-4.49790151763621]
								}, {
									"case":	75,
									"scores":	[-4.49790151763621]
								}, {
									"case":	76,
									"scores":	[-4.49790151763621]
								}, {
									"case":	77,
									"scores":	[-4.49790151763621]
								}, {
									"case":	78,
									"scores":	[-4.49790151763621]
								}, {
									"case":	79,
									"scores":	[-4.49790151763621]
								}, {
									"case":	80,
									"scores":	[-4.49790151763621]
								}, {
									"case":	81,
									"scores":	[-4.49790151763621]
								}, {
									"case":	82,
									"scores":	[-4.49790151763621]
								}, {
									"case":	83,
									"scores":	[-4.49790151763621]
								}, {
									"case":	84,
									"scores":	[-4.49790151763621]
								}, {
									"case":	85,
									"scores":	[-4.49790151763621]
								}, {
									"case":	86,
									"scores":	[-4.49790151763621]
								}, {
									"case":	87,
									"scores":	[-4.49790151763621]
								}, {
									"case":	88,
									"scores":	[-4.49790151763621]
								}, {
									"case":	89,
									"scores":	[-4.49790151763621]
								}, {
									"case":	90,
									"scores":	[-4.49790151763621]
								}, {
									"case":	91,
									"scores":	[-4.49790151763621]
								}, {
									"case":	92,
									"scores":	[-4.49790151763621]
								}, {
									"case":	93,
									"scores":	[-4.49790151763621]
								}, {
									"case":	94,
									"scores":	[-4.49790151763621]
								}, {
									"case":	95,
									"scores":	[-4.49790151763621]
								}, {
									"case":	96,
									"scores":	[-4.49790151763621]
								}, {
									"case":	97,
									"scores":	[-4.49790151763621]
								}, {
									"case":	98,
									"scores":	[-4.49790151763621]
								}, {
									"case":	99,
									"scores":	[-4.49790151763621]
								}, {
									"case":	100,
									"scores":	[-4.49790151763621]
								}, {
									"case":	101,
									"scores":	[-4.49790151763621]
								}, {
									"case":	102,
									"scores":	[-4.49790151763621]
								}, {
									"case":	103,
									"scores":	[-4.49790151763621]
								}, {
									"case":	104,
									"scores":	[-4.49790151763621]
								}, {
									"case":	105,
									"scores":	[-4.49790151763621]
								}, {
									"case":	106,
									"scores":	[-4.49790151763621]
								}, {
									"case":	107,
									"scores":	[-4.49790151763621]
								}, {
									"case":	108,
									"scores":	[-4.49790151763621]
								}, {
									"case":	109,
									"scores":	[-4.49790151763621]
								}, {
									"case":	110,
									"scores":	[-4.49790151763621]
								}, {
									"case":	111,
									"scores":	[-4.49790151763621]
								}, {
									"case":	112,
									"scores":	[-4.49790151763621]
								}, {
									"case":	113,
									"scores":	[-4.49790151763621]
								}, {
									"case":	114,
									"scores":	[-4.49790151763621]
								}, {
									"case":	115,
									"scores":	[-4.49790151763621]
								}, {
									"case":	116,
									"scores":	[-4.49790151763621]
								}, {
									"case":	117,
									"scores":	[-4.49790151763621]
								}, {
									"case":	118,
									"scores":	[-4.49790151763621]
								}, {
									"case":	119,
									"scores":	[-4.49790151763621]
								}, {
									"case":	120,
									"scores":	[-4.49790151763621]
								}, {
									"case":	121,
									"scores":	[-4.49790151763621]
								}, {
									"case":	122,
									"scores":	[-4.49790151763621]
								}, {
									"case":	123,
									"scores":	[-4.49790151763621]
								}, {
									"case":	124,
									"scores":	[-4.49790151763621]
								}, {
									"case":	125,
									"scores":	[-4.49790151763621]
								}, {
									"case":	126,
									"scores":	[-4.49790151763621]
								}, {
									"case":	127,
									"scores":	[-4.49790151763621]
								}, {
									"case":	128,
									"scores":	[-4.49790151763621]
								}, {
									"case":	129,
									"scores":	[-4.49790151763621]
								}, {
									"case":	130,
									"scores":	[-4.49790151763621]
								}, {
									"case":	131,
									"scores":	[-4.49790151763621]
								}, {
									"case":	132,
									"scores":	[-4.49790151763621]
								}, {
									"case":	133,
									"scores":	[-4.49790151763621]
								}, {
									"case":	134,
									"scores":	[-4.49790151763621]
								}, {
									"case":	135,
									"scores":	[-4.49790151763621]
								}, {
									"case":	136,
									"scores":	[-4.49790151763621]
								}, {
									"case":	137,
									"scores":	[-4.49790151763621]
								}, {
									"case":	138,
									"scores":	[-4.49790151763621]
								}, {
									"case":	139,
									"scores":	[-4.49790151763621]
								}, {
									"case":	140,
									"scores":	[-4.49790151763621]
								}, {
									"case":	141,
									"scores":	[-4.49790151763621]
								}, {
									"case":	142,
									"scores":	[-4.49790151763621]
								}, {
									"case":	143,
									"scores":	[-4.49790151763621]
								}, {
									"case":	144,
									"scores":	[-4.49790151763621]
								}, {
									"case":	145,
									"scores":	[-4.49790151763621]
								}, {
									"case":	146,
									"scores":	[-4.49790151763621]
								}, {
									"case":	147,
									"scores":	[-4.49790151763621]
								}, {
									"case":	148,
									"scores":	[-4.49790151763621]
								}, {
									"case":	149,
									"scores":	[-4.49790151763621]
								}, {
									"case":	150,
									"scores":	[-4.49790151763621]
								}, {
									"case":	151,
									"scores":	[-4.49790151763621]
								}, {
									"case":	152,
									"scores":	[-4.49790151763621]
								}, {
									"case":	153,
									"scores":	[-4.49790151763621]
								}, {
									"case":	154,
									"scores":	[-4.49790151763621]
								}, {
									"case":	155,
									"scores":	[-4.49790151763621]
								}, {
									"case":	156,
									"scores":	[-4.49790151763621]
								}, {
									"case":	157,
									"scores":	[-4.49790151763621]
								}, {
									"case":	158,
									"scores":	[-4.49790151763621]
								}, {
									"case":	159,
									"scores":	[-4.49790151763621]
								}, {
									"case":	160,
									"scores":	[-4.49790151763621]
								}, {
									"case":	161,
									"scores":	[-4.49790151763621]
								}, {
									"case":	162,
									"scores":	[-4.49790151763621]
								}, {
									"case":	163,
									"scores":	[-4.49790151763621]
								}, {
									"case":	164,
									"scores":	[-4.49790151763621]
								}, {
									"case":	165,
									"scores":	[-4.49790151763621]
								}, {
									"case":	166,
									"scores":	[-4.49790151763621]
								}, {
									"case":	167,
									"scores":	[-4.49790151763621]
								}, {
									"case":	168,
									"scores":	[-4.49790151763621]
								}, {
									"case":	169,
									"scores":	[-4.49790151763621]
								}, {
									"case":	170,
									"scores":	[-4.49790151763621]
								}, {
									"case":	171,
									"scores":	[-4.49790151763621]
								}, {
									"case":	172,
									"scores":	[-4.49790151763621]
								}, {
									"case":	173,
									"scores":	[-4.49790151763621]
								}, {
									"case":	174,
									"scores":	[-4.49790151763621]
								}, {
									"case":	175,
									"scores":	[-4.49790151763621]
								}, {
									"case":	176,
									"scores":	[-4.49790151763621]
								}, {
									"case":	177,
									"scores":	[-4.49790151763621]
								}, {
									"case":	178,
									"scores":	[-4.49790151763621]
								}, {
									"case":	179,
									"scores":	[-4.49790151763621]
								}, {
									"case":	180,
									"scores":	[-4.49790151763621]
								}, {
									"case":	181,
									"scores":	[-4.49790151763621]
								}, {
									"case":	182,
									"scores":	[-4.49790151763621]
								}, {
									"case":	183,
									"scores":	[-4.49790151763621]
								}, {
									"case":	184,
									"scores":	[-4.49790151763621]
								}, {
									"case":	185,
									"scores":	[-4.49790151763621]
								}, {
									"case":	186,
									"scores":	[-4.49790151763621]
								}, {
									"case":	187,
									"scores":	[-4.49790151763621]
								}, {
									"case":	188,
									"scores":	[-4.49790151763621]
								}, {
									"case":	189,
									"scores":	[-4.49790151763621]
								}, {
									"case":	190,
									"scores":	[-4.49790151763621]
								}, {
									"case":	191,
									"scores":	[-4.49790151763621]
								}, {
									"case":	192,
									"scores":	[-4.49790151763621]
								}, {
									"case":	193,
									"scores":	[-4.49790151763621]
								}, {
									"case":	194,
									"scores":	[-4.49790151763621]
								}, {
									"case":	195,
									"scores":	[-4.49790151763621]
								}, {
									"case":	196,
									"scores":	[-4.49790151763621]
								}, {
									"case":	197,
									"scores":	[-4.49790151763621]
								}, {
									"case":	198,
									"scores":	[-4.49790151763621]
								}, {
									"case":	199,
									"scores":	[-4.49790151763621]
								}, {
									"case":	200,
									"scores":	[-4.49790151763621]
								}, {
									"case":	201,
									"scores":	[-4.49790151763621]
								}, {
									"case":	202,
									"scores":	[-4.49790151763621]
								}, {
									"case":	203,
									"scores":	[-4.49790151763621]
								}, {
									"case":	204,
									"scores":	[-4.49790151763621]
								}, {
									"case":	205,
									"scores":	[-4.49790151763621]
								}, {
									"case":	206,
									"scores":	[-10.063347277436209, -10.96974510143621, -10.25859177463621, -12.040662161436211, -9.16113310763621, -10.531404533636211, -11.234097650636212, -11.023208533636211, -11.740907901436211]
								}, {
									"case":	207,
									"scores":	[-10.063347277436209, -10.96974510143621, -10.25859177463621, -12.040662161436211, -9.16113310763621, -10.531404533636211, -11.234097650636212, -11.023208533636211, -11.740907901436211]
								}, {
									"case":	208,
									"scores":	[-7.23887827743621, -8.14527610143621, -7.43412277463621, -9.21619316143621, -6.33666410763621, -7.70693553363621, -8.40962865063621, -8.19873953363621, -8.91643890143621]
								}, {
									"case":	209,
									"scores":	[-10.063347277436209, -10.96974510143621, -10.25859177463621, -12.040662161436211, -9.16113310763621, -10.531404533636211, -11.234097650636212, -11.023208533636211, -11.740907901436211]
								}, {
									"case":	210,
									"scores":	[-10.063347277436209, -10.96974510143621, -10.25859177463621, -12.040662161436211, -9.16113310763621, -10.531404533636211, -11.234097650636212, -11.023208533636211, -11.740907901436211]
								}, {
									"case":	211,
									"scores":	[-10.063347277436209, -10.96974510143621, -10.25859177463621, -12.040662161436211, -9.16113310763621, -10.531404533636211, -11.234097650636212, -11.023208533636211, -11.740907901436211]
								}, {
									"case":	212,
									"scores":	[-10.063347277436209, -10.96974510143621, -10.25859177463621, -12.040662161436211, -9.16113310763621, -10.531404533636211, -11.234097650636212, -11.023208533636211, -11.740907901436211]
								}, {
									"case":	213,
									"scores":	[-10.063347277436209, -10.96974510143621, -10.25859177463621, -12.040662161436211, -9.16113310763621, -10.531404533636211, -11.234097650636212, -11.023208533636211, -11.740907901436211]
								}, {
									"case":	214,
									"scores":	[-10.063347277436209, -10.96974510143621, -10.25859177463621, -12.040662161436211, -9.16113310763621, -10.531404533636211, -11.234097650636212, -11.023208533636211, -11.740907901436211]
								}, {
									"case":	215,
									"scores":	[-10.063347277436209, -10.96974510143621, -10.25859177463621, -12.040662161436211, -9.16113310763621, -10.531404533636211, -11.234097650636212, -11.023208533636211, -11.740907901436211]
								}, {
									"case":	216,
									"scores":	[-10.063347277436209, -10.96974510143621, -10.25859177463621, -12.040662161436211, -9.16113310763621, -10.531404533636211, -11.234097650636212, -11.023208533636211, -11.740907901436211]
								}]
						}, {
							"switch":	105,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1073,
							"begin_column":	2,
							"end_line":	1075,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream))) {\n    _zval_ptr_dtor((&zvalue));\n}\n", "if ((zvalue) || __is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream))) {\n    _zval_ptr_dtor((&zvalue));\n}\n", "if ((zvalue) && !__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream))) {\n    _zval_ptr_dtor((&zvalue));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.246944658828145, -5.0631503448281459, -5.0053032463281459, -5.8907274948281456, -3.9099084043281453, -4.4005753643281453, -5.2565912043281457, -4.7873312043281455, -6.2295800043281453]
								}, {
									"case":	2,
									"scores":	[-3.714656529928146, -4.5308622159281455, -4.4730151174281456, -5.3584393659281462, -3.3776202754281459, -3.8682872354281459, -4.7243030754281454, -4.2550430754281461, -5.6972918754281459]
								}, {
									"case":	3,
									"scores":	[-3.714656529928146, -4.5308622159281455, -4.4730151174281456, -5.3584393659281462, -3.3776202754281459, -3.8682872354281459, -4.7243030754281454, -4.2550430754281461, -5.6972918754281459]
								}]
						}, {
							"switch":	106,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1073,
							"begin_column":	2,
							"end_line":	1075,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    if (zvalue) {\n        _zval_ptr_dtor((&zvalue));\n    }\n", "if (!__is_neg(\"\", \"L1073\", 9, &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(ret), sizeof (ret), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)) && (zvalue)) {\n    _zval_ptr_dtor((&zvalue));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.58054974213621, -6.39675542813621, -6.33890832963621, -7.22433257813621, -5.24351348763621, -5.73418044763621, -6.59019628763621, -6.12093628763621, -7.56318508763621]
								}, {
									"case":	2,
									"scores":	[-5.46673574213621, -6.28294142813621, -6.22509432963621, -7.11051857813621, -5.12969948763621, -5.62036644763621, -6.47638228763621, -6.00712228763621, -7.44937108763621]
								}]
						}]
				}, {
					"line":	1076,
					"switches":	[{
							"switch":	107,
							"types":	[[], [], [], [], [206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], [], [], [], [], [], []],
							"begin_line":	1077,
							"begin_column":	0,
							"end_line":	1077,
							"end_column":	0,
							"patch_codes":	["memset(&stream->abstract, 0, sizeof (*(&stream->abstract)))", "memset(&stream->chunk_size, 0, sizeof (*(&stream->chunk_size)))", "memset(&stream->context, 0, sizeof (*(&stream->context)))", "memset(&stream->enclosing_stream, 0, sizeof (*(&stream->enclosing_stream)))", "memset(&stream->eof, 0, sizeof (*(&stream->eof)))", "memset(&stream->fclose_stdiocast, 0, sizeof (*(&stream->fclose_stdiocast)))", "memset(&stream->fgetss_state, 0, sizeof (*(&stream->fgetss_state)))", "memset(&stream->flags, 0, sizeof (*(&stream->flags)))", "memset(&stream->in_free, 0, sizeof (*(&stream->in_free)))", "memset(&stream->is_persistent, 0, sizeof (*(&stream->is_persistent)))", "memset(&stream->mode, 0, sizeof (*(&stream->mode)))", "memset(&stream->ops, 0, sizeof (*(&stream->ops)))", "memset(&stream->orig_path, 0, sizeof (*(&stream->orig_path)))", "memset(&stream->position, 0, sizeof (*(&stream->position)))", "memset(&stream->readbuf, 0, sizeof (*(&stream->readbuf)))", "memset(&stream->readbuflen, 0, sizeof (*(&stream->readbuflen)))", "memset(&stream->readfilters, 0, sizeof (*(&stream->readfilters)))", "memset(&stream->readpos, 0, sizeof (*(&stream->readpos)))", "memset(&stream->rsrc_id, 0, sizeof (*(&stream->rsrc_id)))", "memset(&stream->stdiocast, 0, sizeof (*(&stream->stdiocast)))", "memset(&stream->wrapper, 0, sizeof (*(&stream->wrapper)))", "memset(&stream->wrapperdata, 0, sizeof (*(&stream->wrapperdata)))", "memset(&stream->wrapperthis, 0, sizeof (*(&stream->wrapperthis)))", "memset(&stream->writefilters, 0, sizeof (*(&stream->writefilters)))", "memset(&stream->writepos, 0, sizeof (*(&stream->writepos)))", "memset(stream->abstract, 0, sizeof (*(stream->abstract)))", "memset(stream->context, 0, sizeof (*(stream->context)))", "memset(stream->enclosing_stream, 0, sizeof (*(stream->enclosing_stream)))", "memset(stream->ops, 0, sizeof (*(stream->ops)))", "memset(stream->orig_path, 0, sizeof (*(stream->orig_path)))", "memset(stream->readbuf, 0, sizeof (*(stream->readbuf)))", "memset(stream->stdiocast, 0, sizeof (*(stream->stdiocast)))", "memset(stream->wrapper, 0, sizeof (*(stream->wrapper)))", "memset(stream->wrapperdata, 0, sizeof (*(stream->wrapperdata)))", "memset(stream->wrapperthis, 0, sizeof (*(stream->wrapperthis)))", "(core_globals.in_user_include) = (-1)", "(core_globals.in_user_include) = (-5)", "(core_globals.in_user_include) = (0)", "(core_globals.in_user_include) = (1)", "(core_globals.in_user_include) = (12)", "(core_globals.in_user_include) = (2)", "(core_globals.in_user_include) = (3)", "(core_globals.in_user_include) = (4)", "(core_globals.in_user_include) = (6)", "(core_globals.in_user_include) = (8)", "(core_globals.in_user_include) = (8192)", "(zvalue)->is_ref__gc = (-1)", "(zvalue)->is_ref__gc = (-5)", "(zvalue)->is_ref__gc = (0)", "(zvalue)->is_ref__gc = (1)", "(zvalue)->is_ref__gc = (12)", "(zvalue)->is_ref__gc = (2)", "(zvalue)->is_ref__gc = (3)", "(zvalue)->is_ref__gc = (4)", "(zvalue)->is_ref__gc = (6)", "(zvalue)->is_ref__gc = (8)", "(zvalue)->is_ref__gc = (8192)", "(zvalue)->refcount__gc = (-1)", "(zvalue)->refcount__gc = (-5)", "(zvalue)->refcount__gc = (0)", "(zvalue)->refcount__gc = (1)", "(zvalue)->refcount__gc = (12)", "(zvalue)->refcount__gc = (2)", "(zvalue)->refcount__gc = (3)", "(zvalue)->refcount__gc = (4)", "(zvalue)->refcount__gc = (6)", "(zvalue)->refcount__gc = (8)", "(zvalue)->refcount__gc = (8192)", "_convert_to_string(((retval)))", "_convert_to_string(((zvalue)))", "_efree(((retval)))", "_efree(((us)))", "_efree(((zvalue)))", "_zval_copy_ctor_func((retval))", "_zval_copy_ctor_func((zvalue))", "_zval_dtor(((retval)))", "_zval_dtor(((us)->object))", "_zval_dtor(((zvalue)))", "_zval_dtor_func((retval))", "_zval_dtor_func((zvalue))", "_zval_ptr_dtor((&(retval)))", "_zval_ptr_dtor((&(us)->object))", "_zval_ptr_dtor((&(zvalue)))", "add_property_null_ex((retval), \"context\", strlen(\"context\") + 1)", "add_property_null_ex((us)->object, \"context\", strlen(\"context\") + 1)", "add_property_null_ex((zvalue), \"context\", strlen(\"context\") + 1)", "args[0] = &(retval)", "args[0] = &(zvalue)", "args[1] = &(retval)", "args[1] = &(zvalue)", "args[2] = &(retval)", "args[2] = &(zvalue)", "call_result = (-1)", "call_result = (-5)", "call_result = (0)", "call_result = (1)", "call_result = (12)", "call_result = (2)", "call_result = (3)", "call_result = (4)", "call_result = (6)", "call_result = (8)", "call_result = (8192)", "call_result = (call_result)", "call_result = (option)", "call_result = (ret)", "call_result = (value)", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &(us)->object, &func_name, &retval, 3, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(retval), 3, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &(zvalue), 3, args, 0, ((void *)0))", "convert_to_boolean((retval))", "convert_to_boolean((zvalue))", "convert_to_long((retval))", "convert_to_long((zvalue))", "gc_remove_zval_from_buffer((retval))", "gc_remove_zval_from_buffer((zvalue))", "gc_zval_check_possible_root(((retval)))", "gc_zval_check_possible_root(((zvalue)))", "gc_zval_possible_root((retval))", "gc_zval_possible_root((zvalue))", "i_zval_ptr_dtor((retval))", "i_zval_ptr_dtor((zvalue))", "le_protocols = (-1)", "le_protocols = (-5)", "le_protocols = (0)", "le_protocols = (1)", "le_protocols = (12)", "le_protocols = (2)", "le_protocols = (3)", "le_protocols = (4)", "le_protocols = (6)", "le_protocols = (8)", "le_protocols = (8192)", "le_protocols = (call_result)", "le_protocols = (option)", "le_protocols = (ret)", "le_protocols = (value)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::dir_readdir is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must not return itself\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_cast must return a stream resource\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_read is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_stat is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_tell is not implemented!\", (us)->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_write is not implemented!\", (us)->wrapper->classname)", "ret = !(*(retval)).value.lval", "ret = !(*(zvalue)).value.lval", "ret = (-1)", "ret = (-5)", "ret = (0)", "ret = (1)", "ret = (12)", "ret = (2)", "ret = (3)", "ret = (4)", "ret = (6)", "ret = (8)", "ret = (8192)", "ret = (call_result)", "ret = (option)", "ret = (ret)", "ret = (value)", "ret = zval_is_true((retval)) ? -1 : 0", "ret = zval_is_true((zvalue)) ? -1 : 0", "zval_add_ref(&(stream)->wrapperdata)", "zval_set_isref_p((retval))", "zval_set_isref_p((us)->object)", "zval_set_isref_p((zvalue))", "zval_set_refcount_p((retval), 1)", "zval_set_refcount_p((us)->object, 1)", "zval_set_refcount_p((zvalue), 1)", "zval_unset_isref_p((retval))", "zval_unset_isref_p((zvalue))", "((void)(0))", "(core_globals.in_user_include) = 1", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(file_globals.user_stream_current_filename) = ((void *)0)", "(zvalue)->is_ref__gc = 0", "(zvalue)->refcount__gc = 1", "_zval_ptr_dtor((&retval))", "_zval_ptr_dtor((&zvalue))", "args[0] = &zvalue", "args[1] = &zvalue", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 0, ((void *)0), 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 1, args, 0, ((void *)0))", "call_result = call_user_function_ex(((void *)0), &us->object, &func_name, &retval, 3, args, 0, ((void *)0))", "exit(1)", "le_protocols = zend_register_list_destructors_ex(stream_wrapper_dtor, ((void *)0), \"stream factory\", 0)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_eof is not implemented! Assuming EOF\", us->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_lock is not implemented!\", us->wrapper->classname)", "php_error_docref0(((void *)0), (1 << 1L), \"%s::stream_set_option is not implemented!\", us->wrapper->classname)", "ret = !(*retval).value.lval", "ret = -1", "ret = 0", "ret = zval_is_true(retval) ? -1 : 0", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return -1;\n", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return -5;\n", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 0;\n", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 12;\n", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 1;\n", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 2;\n", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 3;\n", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 4;\n", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 6;\n", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 8192;\n", "if (__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.47769881031869]
								}, {
									"case":	2,
									"scores":	[-4.47769881031869]
								}, {
									"case":	3,
									"scores":	[-4.47769881031869]
								}, {
									"case":	4,
									"scores":	[-4.47769881031869]
								}, {
									"case":	5,
									"scores":	[-4.47769881031869]
								}, {
									"case":	6,
									"scores":	[-4.47769881031869]
								}, {
									"case":	7,
									"scores":	[-4.47769881031869]
								}, {
									"case":	8,
									"scores":	[-4.47769881031869]
								}, {
									"case":	9,
									"scores":	[-4.47769881031869]
								}, {
									"case":	10,
									"scores":	[-4.47769881031869]
								}, {
									"case":	11,
									"scores":	[-4.47769881031869]
								}, {
									"case":	12,
									"scores":	[-4.47769881031869]
								}, {
									"case":	13,
									"scores":	[-4.47769881031869]
								}, {
									"case":	14,
									"scores":	[-4.47769881031869]
								}, {
									"case":	15,
									"scores":	[-4.47769881031869]
								}, {
									"case":	16,
									"scores":	[-4.47769881031869]
								}, {
									"case":	17,
									"scores":	[-4.47769881031869]
								}, {
									"case":	18,
									"scores":	[-4.47769881031869]
								}, {
									"case":	19,
									"scores":	[-4.47769881031869]
								}, {
									"case":	20,
									"scores":	[-4.47769881031869]
								}, {
									"case":	21,
									"scores":	[-4.47769881031869]
								}, {
									"case":	22,
									"scores":	[-4.47769881031869]
								}, {
									"case":	23,
									"scores":	[-4.47769881031869]
								}, {
									"case":	24,
									"scores":	[-4.47769881031869]
								}, {
									"case":	25,
									"scores":	[-4.47769881031869]
								}, {
									"case":	26,
									"scores":	[-4.47769881031869]
								}, {
									"case":	27,
									"scores":	[-4.47769881031869]
								}, {
									"case":	28,
									"scores":	[-4.47769881031869]
								}, {
									"case":	29,
									"scores":	[-4.47769881031869]
								}, {
									"case":	30,
									"scores":	[-4.47769881031869]
								}, {
									"case":	31,
									"scores":	[-4.47769881031869]
								}, {
									"case":	32,
									"scores":	[-4.47769881031869]
								}, {
									"case":	33,
									"scores":	[-4.47769881031869]
								}, {
									"case":	34,
									"scores":	[-4.47769881031869]
								}, {
									"case":	35,
									"scores":	[-4.47769881031869]
								}, {
									"case":	36,
									"scores":	[-4.47769881031869]
								}, {
									"case":	37,
									"scores":	[-4.47769881031869]
								}, {
									"case":	38,
									"scores":	[-4.47769881031869]
								}, {
									"case":	39,
									"scores":	[-4.47769881031869]
								}, {
									"case":	40,
									"scores":	[-4.47769881031869]
								}, {
									"case":	41,
									"scores":	[-4.47769881031869]
								}, {
									"case":	42,
									"scores":	[-4.47769881031869]
								}, {
									"case":	43,
									"scores":	[-4.47769881031869]
								}, {
									"case":	44,
									"scores":	[-4.47769881031869]
								}, {
									"case":	45,
									"scores":	[-4.47769881031869]
								}, {
									"case":	46,
									"scores":	[-4.47769881031869]
								}, {
									"case":	47,
									"scores":	[-4.47769881031869]
								}, {
									"case":	48,
									"scores":	[-4.47769881031869]
								}, {
									"case":	49,
									"scores":	[-4.47769881031869]
								}, {
									"case":	50,
									"scores":	[-4.47769881031869]
								}, {
									"case":	51,
									"scores":	[-4.47769881031869]
								}, {
									"case":	52,
									"scores":	[-4.47769881031869]
								}, {
									"case":	53,
									"scores":	[-4.47769881031869]
								}, {
									"case":	54,
									"scores":	[-4.47769881031869]
								}, {
									"case":	55,
									"scores":	[-4.47769881031869]
								}, {
									"case":	56,
									"scores":	[-4.47769881031869]
								}, {
									"case":	57,
									"scores":	[-4.47769881031869]
								}, {
									"case":	58,
									"scores":	[-4.47769881031869]
								}, {
									"case":	59,
									"scores":	[-4.47769881031869]
								}, {
									"case":	60,
									"scores":	[-4.47769881031869]
								}, {
									"case":	61,
									"scores":	[-4.47769881031869]
								}, {
									"case":	62,
									"scores":	[-4.47769881031869]
								}, {
									"case":	63,
									"scores":	[-4.47769881031869]
								}, {
									"case":	64,
									"scores":	[-4.47769881031869]
								}, {
									"case":	65,
									"scores":	[-4.47769881031869]
								}, {
									"case":	66,
									"scores":	[-4.47769881031869]
								}, {
									"case":	67,
									"scores":	[-4.47769881031869]
								}, {
									"case":	68,
									"scores":	[-4.47769881031869]
								}, {
									"case":	69,
									"scores":	[-4.47769881031869]
								}, {
									"case":	70,
									"scores":	[-4.47769881031869]
								}, {
									"case":	71,
									"scores":	[-4.47769881031869]
								}, {
									"case":	72,
									"scores":	[-4.47769881031869]
								}, {
									"case":	73,
									"scores":	[-4.47769881031869]
								}, {
									"case":	74,
									"scores":	[-4.47769881031869]
								}, {
									"case":	75,
									"scores":	[-4.47769881031869]
								}, {
									"case":	76,
									"scores":	[-4.47769881031869]
								}, {
									"case":	77,
									"scores":	[-4.47769881031869]
								}, {
									"case":	78,
									"scores":	[-4.47769881031869]
								}, {
									"case":	79,
									"scores":	[-4.47769881031869]
								}, {
									"case":	80,
									"scores":	[-4.47769881031869]
								}, {
									"case":	81,
									"scores":	[-4.47769881031869]
								}, {
									"case":	82,
									"scores":	[-4.47769881031869]
								}, {
									"case":	83,
									"scores":	[-4.47769881031869]
								}, {
									"case":	84,
									"scores":	[-4.47769881031869]
								}, {
									"case":	85,
									"scores":	[-4.47769881031869]
								}, {
									"case":	86,
									"scores":	[-4.47769881031869]
								}, {
									"case":	87,
									"scores":	[-4.47769881031869]
								}, {
									"case":	88,
									"scores":	[-4.47769881031869]
								}, {
									"case":	89,
									"scores":	[-4.47769881031869]
								}, {
									"case":	90,
									"scores":	[-4.47769881031869]
								}, {
									"case":	91,
									"scores":	[-4.47769881031869]
								}, {
									"case":	92,
									"scores":	[-4.47769881031869]
								}, {
									"case":	93,
									"scores":	[-4.47769881031869]
								}, {
									"case":	94,
									"scores":	[-4.47769881031869]
								}, {
									"case":	95,
									"scores":	[-4.47769881031869]
								}, {
									"case":	96,
									"scores":	[-4.47769881031869]
								}, {
									"case":	97,
									"scores":	[-4.47769881031869]
								}, {
									"case":	98,
									"scores":	[-4.47769881031869]
								}, {
									"case":	99,
									"scores":	[-4.47769881031869]
								}, {
									"case":	100,
									"scores":	[-4.47769881031869]
								}, {
									"case":	101,
									"scores":	[-4.47769881031869]
								}, {
									"case":	102,
									"scores":	[-4.47769881031869]
								}, {
									"case":	103,
									"scores":	[-4.47769881031869]
								}, {
									"case":	104,
									"scores":	[-4.47769881031869]
								}, {
									"case":	105,
									"scores":	[-4.47769881031869]
								}, {
									"case":	106,
									"scores":	[-4.47769881031869]
								}, {
									"case":	107,
									"scores":	[-4.47769881031869]
								}, {
									"case":	108,
									"scores":	[-4.47769881031869]
								}, {
									"case":	109,
									"scores":	[-4.47769881031869]
								}, {
									"case":	110,
									"scores":	[-4.47769881031869]
								}, {
									"case":	111,
									"scores":	[-4.47769881031869]
								}, {
									"case":	112,
									"scores":	[-4.47769881031869]
								}, {
									"case":	113,
									"scores":	[-4.47769881031869]
								}, {
									"case":	114,
									"scores":	[-4.47769881031869]
								}, {
									"case":	115,
									"scores":	[-4.47769881031869]
								}, {
									"case":	116,
									"scores":	[-4.47769881031869]
								}, {
									"case":	117,
									"scores":	[-4.47769881031869]
								}, {
									"case":	118,
									"scores":	[-4.47769881031869]
								}, {
									"case":	119,
									"scores":	[-4.47769881031869]
								}, {
									"case":	120,
									"scores":	[-4.47769881031869]
								}, {
									"case":	121,
									"scores":	[-4.47769881031869]
								}, {
									"case":	122,
									"scores":	[-4.47769881031869]
								}, {
									"case":	123,
									"scores":	[-4.47769881031869]
								}, {
									"case":	124,
									"scores":	[-4.47769881031869]
								}, {
									"case":	125,
									"scores":	[-4.47769881031869]
								}, {
									"case":	126,
									"scores":	[-4.47769881031869]
								}, {
									"case":	127,
									"scores":	[-4.47769881031869]
								}, {
									"case":	128,
									"scores":	[-4.47769881031869]
								}, {
									"case":	129,
									"scores":	[-4.47769881031869]
								}, {
									"case":	130,
									"scores":	[-4.47769881031869]
								}, {
									"case":	131,
									"scores":	[-4.47769881031869]
								}, {
									"case":	132,
									"scores":	[-4.47769881031869]
								}, {
									"case":	133,
									"scores":	[-4.47769881031869]
								}, {
									"case":	134,
									"scores":	[-4.47769881031869]
								}, {
									"case":	135,
									"scores":	[-4.47769881031869]
								}, {
									"case":	136,
									"scores":	[-4.47769881031869]
								}, {
									"case":	137,
									"scores":	[-4.47769881031869]
								}, {
									"case":	138,
									"scores":	[-4.47769881031869]
								}, {
									"case":	139,
									"scores":	[-4.47769881031869]
								}, {
									"case":	140,
									"scores":	[-4.47769881031869]
								}, {
									"case":	141,
									"scores":	[-4.47769881031869]
								}, {
									"case":	142,
									"scores":	[-4.47769881031869]
								}, {
									"case":	143,
									"scores":	[-4.47769881031869]
								}, {
									"case":	144,
									"scores":	[-4.47769881031869]
								}, {
									"case":	145,
									"scores":	[-4.47769881031869]
								}, {
									"case":	146,
									"scores":	[-4.47769881031869]
								}, {
									"case":	147,
									"scores":	[-4.47769881031869]
								}, {
									"case":	148,
									"scores":	[-4.47769881031869]
								}, {
									"case":	149,
									"scores":	[-4.47769881031869]
								}, {
									"case":	150,
									"scores":	[-4.47769881031869]
								}, {
									"case":	151,
									"scores":	[-4.47769881031869]
								}, {
									"case":	152,
									"scores":	[-4.47769881031869]
								}, {
									"case":	153,
									"scores":	[-4.47769881031869]
								}, {
									"case":	154,
									"scores":	[-4.47769881031869]
								}, {
									"case":	155,
									"scores":	[-4.47769881031869]
								}, {
									"case":	156,
									"scores":	[-4.47769881031869]
								}, {
									"case":	157,
									"scores":	[-4.47769881031869]
								}, {
									"case":	158,
									"scores":	[-4.47769881031869]
								}, {
									"case":	159,
									"scores":	[-4.47769881031869]
								}, {
									"case":	160,
									"scores":	[-4.47769881031869]
								}, {
									"case":	161,
									"scores":	[-4.47769881031869]
								}, {
									"case":	162,
									"scores":	[-4.47769881031869]
								}, {
									"case":	163,
									"scores":	[-4.47769881031869]
								}, {
									"case":	164,
									"scores":	[-4.47769881031869]
								}, {
									"case":	165,
									"scores":	[-4.47769881031869]
								}, {
									"case":	166,
									"scores":	[-4.47769881031869]
								}, {
									"case":	167,
									"scores":	[-4.47769881031869]
								}, {
									"case":	168,
									"scores":	[-4.47769881031869]
								}, {
									"case":	169,
									"scores":	[-4.47769881031869]
								}, {
									"case":	170,
									"scores":	[-4.47769881031869]
								}, {
									"case":	171,
									"scores":	[-4.47769881031869]
								}, {
									"case":	172,
									"scores":	[-4.47769881031869]
								}, {
									"case":	173,
									"scores":	[-4.47769881031869]
								}, {
									"case":	174,
									"scores":	[-4.47769881031869]
								}, {
									"case":	175,
									"scores":	[-4.47769881031869]
								}, {
									"case":	176,
									"scores":	[-4.47769881031869]
								}, {
									"case":	177,
									"scores":	[-4.47769881031869]
								}, {
									"case":	178,
									"scores":	[-4.47769881031869]
								}, {
									"case":	179,
									"scores":	[-4.47769881031869]
								}, {
									"case":	180,
									"scores":	[-4.47769881031869]
								}, {
									"case":	181,
									"scores":	[-4.47769881031869]
								}, {
									"case":	182,
									"scores":	[-4.47769881031869]
								}, {
									"case":	183,
									"scores":	[-4.47769881031869]
								}, {
									"case":	184,
									"scores":	[-4.47769881031869]
								}, {
									"case":	185,
									"scores":	[-4.47769881031869]
								}, {
									"case":	186,
									"scores":	[-4.47769881031869]
								}, {
									"case":	187,
									"scores":	[-4.47769881031869]
								}, {
									"case":	188,
									"scores":	[-4.47769881031869]
								}, {
									"case":	189,
									"scores":	[-4.47769881031869]
								}, {
									"case":	190,
									"scores":	[-4.47769881031869]
								}, {
									"case":	191,
									"scores":	[-4.47769881031869]
								}, {
									"case":	192,
									"scores":	[-4.47769881031869]
								}, {
									"case":	193,
									"scores":	[-4.47769881031869]
								}, {
									"case":	194,
									"scores":	[-4.47769881031869]
								}, {
									"case":	195,
									"scores":	[-4.47769881031869]
								}, {
									"case":	196,
									"scores":	[-4.47769881031869]
								}, {
									"case":	197,
									"scores":	[-4.47769881031869]
								}, {
									"case":	198,
									"scores":	[-4.47769881031869]
								}, {
									"case":	199,
									"scores":	[-4.47769881031869]
								}, {
									"case":	200,
									"scores":	[-4.47769881031869]
								}, {
									"case":	201,
									"scores":	[-4.47769881031869]
								}, {
									"case":	202,
									"scores":	[-4.47769881031869]
								}, {
									"case":	203,
									"scores":	[-4.47769881031869]
								}, {
									"case":	204,
									"scores":	[-4.47769881031869]
								}, {
									"case":	205,
									"scores":	[-4.47769881031869]
								}, {
									"case":	206,
									"scores":	[-8.23991577431869, -7.81487348011869, -8.94964839411869, -10.020565454118691, -7.14103640031869, -8.51130782631869, -9.21400094331869, -9.00311182631869, -9.72081119411869]
								}, {
									"case":	207,
									"scores":	[-8.23991577431869, -7.81487348011869, -8.94964839411869, -10.020565454118691, -7.14103640031869, -8.51130782631869, -9.21400094331869, -9.00311182631869, -9.72081119411869]
								}, {
									"case":	208,
									"scores":	[-5.41544677431869, -4.99040448011869, -6.12517939411869, -7.19609645411869, -4.31656740031869, -5.68683882631869, -6.38953194331869, -6.17864282631869, -6.89634219411869]
								}, {
									"case":	209,
									"scores":	[-8.23991577431869, -7.81487348011869, -8.94964839411869, -10.020565454118691, -7.14103640031869, -8.51130782631869, -9.21400094331869, -9.00311182631869, -9.72081119411869]
								}, {
									"case":	210,
									"scores":	[-8.23991577431869, -7.81487348011869, -8.94964839411869, -10.020565454118691, -7.14103640031869, -8.51130782631869, -9.21400094331869, -9.00311182631869, -9.72081119411869]
								}, {
									"case":	211,
									"scores":	[-8.23991577431869, -7.81487348011869, -8.94964839411869, -10.020565454118691, -7.14103640031869, -8.51130782631869, -9.21400094331869, -9.00311182631869, -9.72081119411869]
								}, {
									"case":	212,
									"scores":	[-8.23991577431869, -7.81487348011869, -8.94964839411869, -10.020565454118691, -7.14103640031869, -8.51130782631869, -9.21400094331869, -9.00311182631869, -9.72081119411869]
								}, {
									"case":	213,
									"scores":	[-8.23991577431869, -7.81487348011869, -8.94964839411869, -10.020565454118691, -7.14103640031869, -8.51130782631869, -9.21400094331869, -9.00311182631869, -9.72081119411869]
								}, {
									"case":	214,
									"scores":	[-8.23991577431869, -7.81487348011869, -8.94964839411869, -10.020565454118691, -7.14103640031869, -8.51130782631869, -9.21400094331869, -9.00311182631869, -9.72081119411869]
								}, {
									"case":	215,
									"scores":	[-8.23991577431869, -7.81487348011869, -8.94964839411869, -10.020565454118691, -7.14103640031869, -8.51130782631869, -9.21400094331869, -9.00311182631869, -9.72081119411869]
								}, {
									"case":	216,
									"scores":	[-8.23991577431869, -7.81487348011869, -8.94964839411869, -10.020565454118691, -7.14103640031869, -8.51130782631869, -9.21400094331869, -9.00311182631869, -9.72081119411869]
								}]
						}, {
							"switch":	108,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1077,
							"begin_column":	2,
							"end_line":	1077,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L1077\", 9, &(ret), sizeof (ret), &(zvalue), sizeof (zvalue), &(retval), sizeof (retval), &(us), sizeof (us), &(call_result), sizeof (call_result), &(value), sizeof (value), &(ptrparam), sizeof (ptrparam), &(option), sizeof (option), &(stream), sizeof (stream)))\n    return ret;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.57676211631869, -5.23332373481869, -5.50990472081869, -6.33748187081869, -4.35666278031869, -4.84732974031869, -5.70334558031869, -5.23408558031869, -6.67633438031869]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	621,
			"size":	23
		}, {
			"switch":	1,
			"case":	1,
			"size":	23
		}, {
			"switch":	2,
			"case":	614,
			"size":	20
		}, {
			"switch":	3,
			"case":	1,
			"size":	20
		}, {
			"switch":	4,
			"case":	614,
			"size":	20
		}, {
			"switch":	5,
			"case":	1,
			"size":	20
		}, {
			"switch":	6,
			"case":	613,
			"size":	20
		}, {
			"switch":	7,
			"case":	1,
			"size":	20
		}, {
			"switch":	8,
			"case":	614,
			"size":	20
		}, {
			"switch":	9,
			"case":	1,
			"size":	20
		}, {
			"switch":	10,
			"case":	614,
			"size":	20
		}, {
			"switch":	11,
			"case":	1,
			"size":	20
		}, {
			"switch":	12,
			"case":	613,
			"size":	20
		}, {
			"switch":	13,
			"case":	1,
			"size":	20
		}, {
			"switch":	14,
			"case":	614,
			"size":	20
		}, {
			"switch":	15,
			"case":	1,
			"size":	20
		}, {
			"switch":	16,
			"case":	613,
			"size":	20
		}, {
			"switch":	17,
			"case":	1,
			"size":	20
		}, {
			"switch":	18,
			"case":	614,
			"size":	20
		}, {
			"switch":	19,
			"case":	1,
			"size":	20
		}, {
			"switch":	20,
			"case":	613,
			"size":	20
		}, {
			"switch":	21,
			"case":	1,
			"size":	20
		}, {
			"switch":	22,
			"case":	613,
			"size":	17
		}, {
			"switch":	23,
			"case":	1,
			"size":	17
		}, {
			"switch":	24,
			"case":	613,
			"size":	17
		}, {
			"switch":	25,
			"case":	1,
			"size":	17
		}, {
			"switch":	26,
			"case":	614,
			"size":	20
		}, {
			"switch":	27,
			"case":	1,
			"size":	20
		}, {
			"switch":	28,
			"case":	614,
			"size":	20
		}, {
			"switch":	29,
			"case":	1,
			"size":	20
		}, {
			"switch":	30,
			"case":	614,
			"size":	19
		}, {
			"switch":	31,
			"case":	1,
			"size":	19
		}, {
			"switch":	32,
			"case":	615,
			"size":	17
		}, {
			"switch":	33,
			"case":	1,
			"size":	17
		}, {
			"switch":	33,
			"case":	2,
			"size":	17
		}, {
			"switch":	33,
			"case":	3,
			"size":	17
		}, {
			"switch":	33,
			"case":	17,
			"size":	17
		}, {
			"switch":	34,
			"case":	654,
			"size":	50
		}, {
			"switch":	35,
			"case":	1,
			"size":	50
		}, {
			"switch":	36,
			"case":	653,
			"size":	20
		}, {
			"switch":	37,
			"case":	1,
			"size":	20
		}, {
			"switch":	37,
			"case":	2,
			"size":	20
		}, {
			"switch":	37,
			"case":	3,
			"size":	20
		}, {
			"switch":	37,
			"case":	5,
			"size":	20
		}, {
			"switch":	38,
			"case":	1,
			"size":	20
		}, {
			"switch":	38,
			"case":	2,
			"size":	20
		}, {
			"switch":	39,
			"case":	654,
			"size":	41
		}, {
			"switch":	40,
			"case":	1,
			"size":	41
		}, {
			"switch":	41,
			"case":	653,
			"size":	41
		}, {
			"switch":	42,
			"case":	1,
			"size":	41
		}, {
			"switch":	43,
			"case":	1,
			"size":	17
		}, {
			"switch":	43,
			"case":	2,
			"size":	17
		}, {
			"switch":	44,
			"case":	614,
			"size":	19
		}, {
			"switch":	45,
			"case":	1,
			"size":	19
		}, {
			"switch":	45,
			"case":	2,
			"size":	19
		}, {
			"switch":	45,
			"case":	3,
			"size":	19
		}, {
			"switch":	46,
			"case":	1,
			"size":	19
		}, {
			"switch":	46,
			"case":	2,
			"size":	19
		}, {
			"switch":	47,
			"case":	613,
			"size":	17
		}, {
			"switch":	48,
			"case":	1,
			"size":	17
		}, {
			"switch":	48,
			"case":	2,
			"size":	17
		}, {
			"switch":	48,
			"case":	3,
			"size":	17
		}, {
			"switch":	49,
			"case":	613,
			"size":	17
		}, {
			"switch":	50,
			"case":	1,
			"size":	17
		}, {
			"switch":	51,
			"case":	1,
			"size":	17
		}, {
			"switch":	51,
			"case":	2,
			"size":	17
		}, {
			"switch":	52,
			"case":	613,
			"size":	17
		}, {
			"switch":	53,
			"case":	1,
			"size":	17
		}, {
			"switch":	54,
			"case":	613,
			"size":	17
		}, {
			"switch":	55,
			"case":	1,
			"size":	17
		}, {
			"switch":	56,
			"case":	613,
			"size":	17
		}, {
			"switch":	57,
			"case":	1,
			"size":	17
		}, {
			"switch":	58,
			"case":	613,
			"size":	17
		}, {
			"switch":	59,
			"case":	1,
			"size":	17
		}, {
			"switch":	60,
			"case":	613,
			"size":	17
		}, {
			"switch":	61,
			"case":	1,
			"size":	17
		}, {
			"switch":	62,
			"case":	614,
			"size":	37
		}, {
			"switch":	63,
			"case":	1,
			"size":	37
		}, {
			"switch":	64,
			"case":	614,
			"size":	151
		}, {
			"switch":	65,
			"case":	1,
			"size":	151
		}, {
			"switch":	66,
			"case":	613,
			"size":	151
		}, {
			"switch":	67,
			"case":	1,
			"size":	151
		}, {
			"switch":	68,
			"case":	94,
			"size":	3
		}, {
			"switch":	68,
			"case":	95,
			"size":	3
		}, {
			"switch":	68,
			"case":	96,
			"size":	3
		}, {
			"switch":	69,
			"case":	1,
			"size":	3
		}, {
			"switch":	70,
			"case":	94,
			"size":	3
		}, {
			"switch":	70,
			"case":	95,
			"size":	3
		}, {
			"switch":	70,
			"case":	96,
			"size":	3
		}, {
			"switch":	71,
			"case":	1,
			"size":	3
		}, {
			"switch":	72,
			"case":	95,
			"size":	5
		}, {
			"switch":	72,
			"case":	96,
			"size":	5
		}, {
			"switch":	72,
			"case":	97,
			"size":	5
		}, {
			"switch":	73,
			"case":	1,
			"size":	5
		}, {
			"switch":	74,
			"case":	94,
			"size":	3
		}, {
			"switch":	74,
			"case":	95,
			"size":	3
		}, {
			"switch":	74,
			"case":	96,
			"size":	3
		}, {
			"switch":	75,
			"case":	1,
			"size":	3
		}, {
			"switch":	75,
			"case":	2,
			"size":	3
		}, {
			"switch":	75,
			"case":	3,
			"size":	3
		}, {
			"switch":	76,
			"case":	1,
			"size":	3
		}, {
			"switch":	76,
			"case":	2,
			"size":	3
		}, {
			"switch":	77,
			"case":	95,
			"size":	5
		}, {
			"switch":	77,
			"case":	96,
			"size":	5
		}, {
			"switch":	77,
			"case":	97,
			"size":	5
		}, {
			"switch":	78,
			"case":	1,
			"size":	5
		}, {
			"switch":	79,
			"case":	95,
			"size":	5
		}, {
			"switch":	79,
			"case":	96,
			"size":	5
		}, {
			"switch":	79,
			"case":	97,
			"size":	5
		}, {
			"switch":	80,
			"case":	1,
			"size":	5
		}, {
			"switch":	81,
			"case":	94,
			"size":	3
		}, {
			"switch":	81,
			"case":	95,
			"size":	3
		}, {
			"switch":	81,
			"case":	96,
			"size":	3
		}, {
			"switch":	82,
			"case":	1,
			"size":	3
		}, {
			"switch":	83,
			"case":	101,
			"size":	4
		}, {
			"switch":	83,
			"case":	102,
			"size":	4
		}, {
			"switch":	83,
			"case":	103,
			"size":	4
		}, {
			"switch":	83,
			"case":	104,
			"size":	4
		}, {
			"switch":	84,
			"case":	1,
			"size":	4
		}, {
			"switch":	85,
			"case":	101,
			"size":	4
		}, {
			"switch":	85,
			"case":	102,
			"size":	4
		}, {
			"switch":	85,
			"case":	103,
			"size":	4
		}, {
			"switch":	85,
			"case":	104,
			"size":	4
		}, {
			"switch":	86,
			"case":	1,
			"size":	4
		}, {
			"switch":	87,
			"case":	102,
			"size":	6
		}, {
			"switch":	87,
			"case":	103,
			"size":	6
		}, {
			"switch":	87,
			"case":	104,
			"size":	6
		}, {
			"switch":	87,
			"case":	105,
			"size":	6
		}, {
			"switch":	88,
			"case":	1,
			"size":	6
		}, {
			"switch":	89,
			"case":	101,
			"size":	4
		}, {
			"switch":	89,
			"case":	102,
			"size":	4
		}, {
			"switch":	89,
			"case":	103,
			"size":	4
		}, {
			"switch":	89,
			"case":	104,
			"size":	4
		}, {
			"switch":	90,
			"case":	1,
			"size":	4
		}, {
			"switch":	90,
			"case":	2,
			"size":	4
		}, {
			"switch":	90,
			"case":	3,
			"size":	4
		}, {
			"switch":	90,
			"case":	17,
			"size":	4
		}, {
			"switch":	91,
			"case":	101,
			"size":	4
		}, {
			"switch":	91,
			"case":	102,
			"size":	4
		}, {
			"switch":	91,
			"case":	103,
			"size":	4
		}, {
			"switch":	91,
			"case":	104,
			"size":	4
		}, {
			"switch":	92,
			"case":	1,
			"size":	4
		}, {
			"switch":	93,
			"case":	1,
			"size":	4
		}, {
			"switch":	93,
			"case":	2,
			"size":	4
		}, {
			"switch":	94,
			"case":	101,
			"size":	4
		}, {
			"switch":	94,
			"case":	102,
			"size":	4
		}, {
			"switch":	94,
			"case":	103,
			"size":	4
		}, {
			"switch":	94,
			"case":	104,
			"size":	4
		}, {
			"switch":	95,
			"case":	1,
			"size":	4
		}, {
			"switch":	95,
			"case":	2,
			"size":	4
		}, {
			"switch":	95,
			"case":	3,
			"size":	4
		}, {
			"switch":	96,
			"case":	1,
			"size":	4
		}, {
			"switch":	96,
			"case":	2,
			"size":	4
		}, {
			"switch":	97,
			"case":	101,
			"size":	4
		}, {
			"switch":	97,
			"case":	102,
			"size":	4
		}, {
			"switch":	97,
			"case":	103,
			"size":	4
		}, {
			"switch":	97,
			"case":	104,
			"size":	4
		}, {
			"switch":	98,
			"case":	1,
			"size":	4
		}, {
			"switch":	99,
			"case":	206,
			"size":	9
		}, {
			"switch":	99,
			"case":	207,
			"size":	9
		}, {
			"switch":	99,
			"case":	208,
			"size":	9
		}, {
			"switch":	99,
			"case":	209,
			"size":	9
		}, {
			"switch":	99,
			"case":	210,
			"size":	9
		}, {
			"switch":	99,
			"case":	211,
			"size":	9
		}, {
			"switch":	99,
			"case":	212,
			"size":	9
		}, {
			"switch":	99,
			"case":	213,
			"size":	9
		}, {
			"switch":	99,
			"case":	214,
			"size":	9
		}, {
			"switch":	99,
			"case":	215,
			"size":	9
		}, {
			"switch":	99,
			"case":	216,
			"size":	9
		}, {
			"switch":	100,
			"case":	1,
			"size":	9
		}, {
			"switch":	101,
			"case":	206,
			"size":	9
		}, {
			"switch":	101,
			"case":	207,
			"size":	9
		}, {
			"switch":	101,
			"case":	208,
			"size":	9
		}, {
			"switch":	101,
			"case":	209,
			"size":	9
		}, {
			"switch":	101,
			"case":	210,
			"size":	9
		}, {
			"switch":	101,
			"case":	211,
			"size":	9
		}, {
			"switch":	101,
			"case":	212,
			"size":	9
		}, {
			"switch":	101,
			"case":	213,
			"size":	9
		}, {
			"switch":	101,
			"case":	214,
			"size":	9
		}, {
			"switch":	101,
			"case":	215,
			"size":	9
		}, {
			"switch":	101,
			"case":	216,
			"size":	9
		}, {
			"switch":	102,
			"case":	1,
			"size":	9
		}, {
			"switch":	102,
			"case":	2,
			"size":	9
		}, {
			"switch":	102,
			"case":	3,
			"size":	9
		}, {
			"switch":	103,
			"case":	1,
			"size":	9
		}, {
			"switch":	103,
			"case":	2,
			"size":	9
		}, {
			"switch":	104,
			"case":	206,
			"size":	9
		}, {
			"switch":	104,
			"case":	207,
			"size":	9
		}, {
			"switch":	104,
			"case":	208,
			"size":	9
		}, {
			"switch":	104,
			"case":	209,
			"size":	9
		}, {
			"switch":	104,
			"case":	210,
			"size":	9
		}, {
			"switch":	104,
			"case":	211,
			"size":	9
		}, {
			"switch":	104,
			"case":	212,
			"size":	9
		}, {
			"switch":	104,
			"case":	213,
			"size":	9
		}, {
			"switch":	104,
			"case":	214,
			"size":	9
		}, {
			"switch":	104,
			"case":	215,
			"size":	9
		}, {
			"switch":	104,
			"case":	216,
			"size":	9
		}, {
			"switch":	105,
			"case":	1,
			"size":	9
		}, {
			"switch":	105,
			"case":	2,
			"size":	9
		}, {
			"switch":	105,
			"case":	3,
			"size":	9
		}, {
			"switch":	106,
			"case":	1,
			"size":	9
		}, {
			"switch":	106,
			"case":	2,
			"size":	9
		}, {
			"switch":	107,
			"case":	206,
			"size":	9
		}, {
			"switch":	107,
			"case":	207,
			"size":	9
		}, {
			"switch":	107,
			"case":	208,
			"size":	9
		}, {
			"switch":	107,
			"case":	209,
			"size":	9
		}, {
			"switch":	107,
			"case":	210,
			"size":	9
		}, {
			"switch":	107,
			"case":	211,
			"size":	9
		}, {
			"switch":	107,
			"case":	212,
			"size":	9
		}, {
			"switch":	107,
			"case":	213,
			"size":	9
		}, {
			"switch":	107,
			"case":	214,
			"size":	9
		}, {
			"switch":	107,
			"case":	215,
			"size":	9
		}, {
			"switch":	107,
			"case":	216,
			"size":	9
		}, {
			"switch":	108,
			"case":	1,
			"size":	9
		}],
	"func_locations":	[{
			"file":	"main/streams/userspace.c",
			"functions":	[{
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"__zend_calloc",
					"begin":	103,
					"end":	108
				}, {
					"function":	"__zend_malloc",
					"begin":	93,
					"end":	101
				}, {
					"function":	"__zend_realloc",
					"begin":	110,
					"end":	118
				}, {
					"function":	"_zval_copy_ctor",
					"begin":	40,
					"end":	46
				}, {
					"function":	"_zval_dtor",
					"begin":	30,
					"end":	36
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"gc_remove_from_buffer",
					"begin":	187,
					"end":	194
				}, {
					"function":	"gc_zval_check_possible_root",
					"begin":	180,
					"end":	185
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"i_zend_is_true",
					"begin":	101,
					"end":	156
				}, {
					"function":	"i_zval_ptr_dtor",
					"begin":	80,
					"end":	99
				}, {
					"function":	"is_numeric_string",
					"begin":	102,
					"end":	224
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"php_set_error_handling",
					"begin":	292,
					"end":	295
				}, {
					"function":	"php_std_error_handling",
					"begin":	296,
					"end":	296
				}, {
					"function":	"php_userstreamop_cast",
					"begin":	1469,
					"end":	1531
				}, {
					"function":	"php_userstreamop_close",
					"begin":	717,
					"end":	741
				}, {
					"function":	"php_userstreamop_closedir",
					"begin":	1422,
					"end":	1446
				}, {
					"function":	"php_userstreamop_flush",
					"begin":	743,
					"end":	769
				}, {
					"function":	"php_userstreamop_read",
					"begin":	643,
					"end":	715
				}, {
					"function":	"php_userstreamop_readdir",
					"begin":	1384,
					"end":	1420
				}, {
					"function":	"php_userstreamop_rewinddir",
					"begin":	1448,
					"end":	1467
				}, {
					"function":	"php_userstreamop_seek",
					"begin":	771,
					"end":	849
				}, {
					"function":	"php_userstreamop_set_option",
					"begin":	930,
					"end":	1078
				}, {
					"function":	"php_userstreamop_stat",
					"begin":	897,
					"end":	927
				}, {
					"function":	"php_userstreamop_write",
					"begin":	594,
					"end":	641
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"safe_free_zval_ptr_rel",
					"begin":	62,
					"end":	69
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"statbuf_from_array",
					"begin":	853,
					"end":	895
				}, {
					"function":	"stream_wrapper_dtor",
					"begin":	63,
					"end":	70
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"user_wrapper_mkdir",
					"begin":	1194,
					"end":	1257
				}, {
					"function":	"user_wrapper_opendir",
					"begin":	407,
					"end":	486
				}, {
					"function":	"user_wrapper_opener",
					"begin":	261,
					"end":	405
				}, {
					"function":	"user_wrapper_rename",
					"begin":	1135,
					"end":	1192
				}, {
					"function":	"user_wrapper_rmdir",
					"begin":	1259,
					"end":	1317
				}, {
					"function":	"user_wrapper_stat_url",
					"begin":	1319,
					"end":	1382
				}, {
					"function":	"user_wrapper_unlink",
					"begin":	1081,
					"end":	1133
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"zend_arg_types_stack_2_pop",
					"begin":	355,
					"end":	363
				}, {
					"function":	"zend_arg_types_stack_3_pop",
					"begin":	365,
					"end":	374
				}, {
					"function":	"zend_dval_to_lval",
					"begin":	77,
					"end":	83
				}, {
					"function":	"zend_inline_hash_func",
					"begin":	261,
					"end":	288
				}, {
					"function":	"zend_memnstr",
					"begin":	226,
					"end":	257
				}, {
					"function":	"zend_memrchr",
					"begin":	259,
					"end":	274
				}, {
					"function":	"zend_objects_store_del_ref_by_handle",
					"begin":	71,
					"end":	73
				}, {
					"function":	"zend_ptr_stack_2_pop",
					"begin":	93,
					"end":	98
				}, {
					"function":	"zend_ptr_stack_2_push",
					"begin":	72,
					"end":	83
				}, {
					"function":	"zend_ptr_stack_3_pop",
					"begin":	85,
					"end":	91
				}, {
					"function":	"zend_ptr_stack_3_push",
					"begin":	58,
					"end":	70
				}, {
					"function":	"zend_ptr_stack_pop",
					"begin":	108,
					"end":	112
				}, {
					"function":	"zend_ptr_stack_push",
					"begin":	100,
					"end":	106
				}, {
					"function":	"zend_symtable_del",
					"begin":	355,
					"end":	359
				}, {
					"function":	"zend_symtable_exists",
					"begin":	369,
					"end":	373
				}, {
					"function":	"zend_symtable_find",
					"begin":	362,
					"end":	366
				}, {
					"function":	"zend_symtable_update",
					"begin":	348,
					"end":	352
				}, {
					"function":	"zend_symtable_update_current_key_ex",
					"begin":	375,
					"end":	379
				}, {
					"function":	"zend_vm_stack_alloc",
					"begin":	243,
					"end":	270
				}, {
					"function":	"zend_vm_stack_clear_multiple",
					"begin":	331,
					"end":	342
				}, {
					"function":	"zend_vm_stack_destroy",
					"begin":	197,
					"end":	206
				}, {
					"function":	"zend_vm_stack_extend",
					"begin":	208,
					"end":	213
				}, {
					"function":	"zend_vm_stack_free",
					"begin":	284,
					"end":	300
				}, {
					"function":	"zend_vm_stack_free_int",
					"begin":	272,
					"end":	282
				}, {
					"function":	"zend_vm_stack_get_arg",
					"begin":	344,
					"end":	353
				}, {
					"function":	"zend_vm_stack_init",
					"begin":	192,
					"end":	195
				}, {
					"function":	"zend_vm_stack_new_page",
					"begin":	183,
					"end":	190
				}, {
					"function":	"zend_vm_stack_pop",
					"begin":	231,
					"end":	241
				}, {
					"function":	"zend_vm_stack_push",
					"begin":	220,
					"end":	224
				}, {
					"function":	"zend_vm_stack_push_args",
					"begin":	302,
					"end":	329
				}, {
					"function":	"zend_vm_stack_push_nocheck",
					"begin":	226,
					"end":	229
				}, {
					"function":	"zend_vm_stack_top",
					"begin":	215,
					"end":	218
				}, {
					"function":	"zif_stream_wrapper_register",
					"begin":	491,
					"end":	531
				}, {
					"function":	"zif_stream_wrapper_restore",
					"begin":	557,
					"end":	591
				}, {
					"function":	"zif_stream_wrapper_unregister",
					"begin":	536,
					"end":	552
				}, {
					"function":	"zm_startup_user_streams",
					"begin":	73,
					"end":	103
				}, {
					"function":	"zval_addref_p",
					"begin":	386,
					"end":	388
				}, {
					"function":	"zval_delref_p",
					"begin":	390,
					"end":	392
				}, {
					"function":	"zval_isref_p",
					"begin":	394,
					"end":	396
				}, {
					"function":	"zval_refcount_p",
					"begin":	378,
					"end":	380
				}, {
					"function":	"zval_set_isref_p",
					"begin":	398,
					"end":	400
				}, {
					"function":	"zval_set_isref_to_p",
					"begin":	406,
					"end":	408
				}, {
					"function":	"zval_set_refcount_p",
					"begin":	382,
					"end":	384
				}, {
					"function":	"zval_unset_isref_p",
					"begin":	402,
					"end":	404
				}]
		}]
}
